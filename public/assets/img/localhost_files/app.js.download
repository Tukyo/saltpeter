(()=>{"use strict";const t={ACTIONS:{DASH:{COOLDOWN:1e3,DRAIN:40,MULTIPLIER:3,TIME:150},PRIMARY:{BUFFER:100,BURST:{AMOUNT:1,DELAY:75},MAGAZINE:{SIZE:10,STARTING_RESERVE:20,MAX_RESERVE:50},OFFSET:10,PROJECTILE:{AMOUNT:1,COLOR:"#fff5beff",DAMAGE:25,LENGTH:15,RANGE:5,SIZE:1,SPEED:35,SPREAD:10,UNIQUE:[]},RELOAD:{TIME:750}},SPRINT:{DRAIN:5,MULTIPLIER:1.75}},DATA:{ID_LENGTH:12},EQUIPMENT:{CROSSHAIR:!1},PHYSICS:{ACCELERATION:.55,FRICTION:.85},STATS:{HEALTH:{MAX:100},LUCK:1,SIZE:100,SPEED:6,STAMINA:{MAX:100,RECOVERY:{DELAY:1e3,RATE:25}}},VISUAL:{ID_DISPLAY_OFFSET:25}},e={RADIUS:{MIN:4,MAX:8},DENSITY:{MIN:.175,MAX:.35},OPACITY:{MIN:.15,MAX:.25},VARIATION:.215,COLOR:"#000000"},s={RADIUS:{MIN:5,MAX:17.5},DENSITY:{MIN:.1,MAX:.175},OPACITY:{MIN:.275,MAX:.315},VARIATION:.5,COLOR:"#781414"},a={COUNT:{MIN:1,MAX:4},LIFETIME:{MIN:800,MAX:1e3},OPACITY:{MIN:.25,MAX:.75},SPEED:{MIN:.25,MAX:.75},SIZE:{MIN:.125,MAX:2.275},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!0,PAINT:!1,SPREAD:.25,STAIN:!0,COLOR:"#8b1a1a"},i={COUNT:{MIN:4,MAX:12},LIFETIME:{MIN:150,MAX:1200},OPACITY:{MIN:.425,MAX:.775},SPEED:{MIN:1.5,MAX:4.75},SIZE:{MIN:.75,MAX:3.5},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!1,PAINT:!0,SPREAD:.425,STAIN:!0,COLOR:"#8b1a1a"},r={COUNT:{MIN:8,MAX:15},LIFETIME:{MIN:150,MAX:300},OPACITY:{MIN:.4,MAX:.8},SPEED:{MIN:4,MAX:10},SIZE:{MIN:1,MAX:3},TORQUE:{MIN:0,MAX:0},COLLIDE:!1,FADE:!0,PAINT:!1,SPREAD:.6,STAIN:!1,COLOR:"#ffaa00"},o={COUNT:{MIN:1,MAX:1},LIFETIME:{MIN:250,MAX:550},OPACITY:{MIN:1,MAX:1},SPEED:{MIN:5,MAX:8},SIZE:{MIN:2,MAX:2},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!1,PAINT:!0,SPREAD:.4,STAIN:!1,COLOR:"#d4af37"},n={LID:"/assets/img/object/ammobox/lid.png",BULLETS:"/assets/img/object/ammobox/bullets.png",BODY:"/assets/img/object/ammobox/body.png"},l=800,h=600,m=15,c=1e3,y={MOVE_UP:"w",MOVE_LEFT:"a",MOVE_DOWN:"s",MOVE_RIGHT:"d",RELOAD:"r",SPRINT:"shift",ATTACK:"mouse1",DASH:" "};function d(){let e="";for(let s=0;s<t.DATA.ID_LENGTH;s++)e+="0123456789abcdefghijklmnopqrstuvwxyz"[Math.floor(36*Math.random())];return e}function p(t){const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}function u(t){return{x:Math.cos(t),y:Math.sin(t)}}function g(t,e,s=100,a=300){const i=document.getElementById(t),r=i?.querySelector("div");if(!i||!r)return void console.warn(`Slider not found: ${t}`);const o=Math.max(0,Math.min(s,e))/s*100,n=r.style.width||"100%",l=parseFloat(n.replace("%",""));Math.abs(l-o)<.1||(r.style.transition=`width ${a}ms ease-out`,r.style.width=`${o}%`,setTimeout(()=>{r&&(r.style.transition="")},a))}function I(t,e){const s=document.getElementById(t);s&&(e?(s.setAttribute("checked","true"),s.setAttribute("aria-checked","true")):(s.removeAttribute("checked"),s.setAttribute("aria-checked","false")))}function P(t,e){const s=document.getElementById(t);s&&(s.value=e.toString())}class f{constructor(t){this.currentRoom=null,this.ws=null,this.messageHandlers=[],this.userId=t}setWebSocket(t){this.ws=t,this.setupMessageHandler()}createRoom(){const t=function(){let t="room_";for(let e=0;e<10;e++)t+="0123456789abcdefghijklmnopqrstuvwxyz"[Math.floor(36*Math.random())];return t}();return this.joinRoom(t,!0),t}joinRoom(t,e=!1){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return void console.error("WebSocket not connected");const s={type:e?"create-room":"join-room",roomId:t,userId:this.userId};this.ws.send(JSON.stringify(s)),this.currentRoom=t,function(t){const e=`${window.location.origin}?room=${t}`;window.history.pushState({roomId:t},"",e)}(t)}leaveRoom(){if(!this.currentRoom||!this.ws)return;const t={type:"leave-room",roomId:this.currentRoom,userId:this.userId};this.ws.send(JSON.stringify(t)),this.currentRoom=null,window.history.pushState({},"",window.location.origin)}sendMessage(t){if(!this.currentRoom||!this.ws)return;const e={type:"room-message",roomId:this.currentRoom,userId:this.userId,message:t};this.ws.send(JSON.stringify(e))}getCurrentRoom(){return this.currentRoom}getRoomLink(){return this.currentRoom?(t=this.currentRoom,`${window.location.origin}?room=${t}`):null;var t}onMessage(t){this.messageHandlers.push(t)}setupMessageHandler(){this.ws&&(this.ws.onmessage=t=>{try{const e=JSON.parse(t.data);this.messageHandlers.forEach(t=>t(e))}catch(e){const s={type:"room-message",userId:"server",message:t.data};this.messageHandlers.forEach(t=>t(s))}})}}const M=new Set,E=new Set;var A,C;!function(t){t[t.COMMON=0]="COMMON",t[t.UNCOMMON=1]="UNCOMMON",t[t.RARE=2]="RARE",t[t.EPIC=3]="EPIC",t[t.LEGENDARY=4]="LEGENDARY"}(A||(A={})),function(t){t.STAT="stat",t.UNIQUE="unique",t.EQUIPMENT="equipment"}(C||(C={}));const R={[A.COMMON]:{weight:70,color:"#ffffff"},[A.UNCOMMON]:{weight:20,color:"#1eff00"},[A.RARE]:{weight:7,color:"#0099ff"},[A.EPIC]:{weight:2,color:"#9d00ff"},[A.LEGENDARY]:{weight:1,color:"#ff9500"}},S=[{id:"bigger_is_better",name:"Bigger is Better",subtitle:"Have my bullets always been this big?",type:C.STAT,rarity:A.COMMON,unique:!1,func:()=>{t.ACTIONS.PRIMARY.PROJECTILE.SIZE*=1.1,t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE*=1.05,t.ACTIONS.PRIMARY.PROJECTILE.SPREAD*=1.025,console.log("[Bigger is Better] - Projectile Changes: ","Size: ",t.ACTIONS.PRIMARY.PROJECTILE.SIZE,"Dmg: ",t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,"Spread: ",t.ACTIONS.PRIMARY.PROJECTILE.SPREAD)}},{id:"neural_target_interface",name:"Neural Target Interface",subtitle:"G.I.M.P. proprietary targeting module.",type:C.EQUIPMENT,rarity:A.UNCOMMON,unique:!1,func:()=>{t.EQUIPMENT.CROSSHAIR=!0,t.ACTIONS.PRIMARY.PROJECTILE.SPREAD*=.95,console.log("[Neural Target Interface] - Crosshair enabled.","Spread: ",t.ACTIONS.PRIMARY.PROJECTILE.SPREAD)}}];function x(){M.clear(),E.clear()}const b={GLOCK:["/assets/img/weapon/glock/body.png","/assets/img/weapon/glock/slide.png"],KNIFE:["/assets/img/weapon/melee/knife_00.png"]},T={DEFAULT:"/assets/img/char/default/body.png"},v={DEFAULT:"/assets/img/char/default/head.png"},O={DEFAULT:"/assets/img/char/default/headwear.png"},N={BLOOD:["/assets/img/effects/blood/blood_00.png","/assets/img/effects/blood/blood_01.png","/assets/img/effects/blood/blood_02.png","/assets/img/effects/blood/blood_03.png","/assets/img/effects/blood/blood_04.png"],GORE:["/assets/img/effects/gore/gore_00.png","/assets/img/effects/gore/gore_01.png","/assets/img/effects/gore/gore_02.png","/assets/img/effects/gore/gore_03.png","/assets/img/effects/gore/gore_04.png","/assets/img/effects/gore/gore_05.png","/assets/img/effects/gore/gore_06.png","/assets/img/effects/gore/gore_07.png","/assets/img/effects/gore/gore_08.png","/assets/img/effects/gore/gore_09.png","/assets/img/effects/gore/gore_10.png","/assets/img/effects/gore/gore_11.png","/assets/img/effects/gore/gore_12.png","/assets/img/effects/gore/gore_13.png"]},L={body:"DEFAULT",weapon:"GLOCK",head:"DEFAULT",headwear:"DEFAULT"};class B{constructor(){this.ws=null,this.canvas=null,this.ctx=null,this.decalCanvas=null,this.decalCtx=null,this.roomControls=null,this.gameContainer=null,this.userIdDisplay=null,this.roomIdDisplay=null,this.gameRoomIdDisplay=null,this.lobbyContainer=null,this.lobbyPlayersList=null,this.startGameBtn=null,this.gameOptionsContainer=null,this.chatContainer=null,this.chatMessages=null,this.chatInput=null,this.chatSendBtn=null,this.privateToggle=null,this.upgradesToggle=null,this.winsInput=null,this.playersInput=null,this.upgradeContainer=null,this.leaderboardContainer=null,this.leaderboardBody=null,this.crosshair=null,this.modal=null,this.modalInput=null,this.modalButtons=null,this.modalConfirmButton=null,this.modalCancelButton=null,this.modalErrorDiv=null,this.modalContent=null,this.modalText=null,this.hostButton=null,this.joinButton=null,this.quickplayButton=null,this.lobbyLeaveButton=null,this.lobbyCodeButton=null,this.gameLeaveButton=null,this.gameCodeButton=null,this.players=new Map,this.lobbyPlayers=new Map,this.characterImages=new Map,this.ammoBoxImages={},this.characterOffsets=new Map,this.characterAnimations=new Map,this.decals=new Map,this.particles=new Map,this.emitters=new Map,this.projectiles=new Map,this.ammoBoxes=new Map,this.gamePaused=!1,this.gameRunning=!1,this.isHost=!1,this.inLobby=!1,this.isPrivateRoom=!1,this.isUpgradesEnabled=!0,this.isRoundInProgress=!1,this.gameMaxWins=5,this.gameMaxPlayers=4,this.alivePlayersCount=0,this.roundWinner=null,this.gameWinner=null,this.leaderboard=new Map,this.pausedPlayers=new Set,this.keys=new Set,this.canShoot=!0,this.isBurstActive=!1,this.isReloading=!1,this.isSprinting=!1,this.isDashing=!1,this.isStaminaRecoveryBlocked=!1,this.mouseX=0,this.mouseY=0,this.lastSentX=0,this.lastSentY=0,this.lastSentRotation=0,this.playerVelocityX=0,this.playerVelocityY=0,this.dashStartTime=0,this.lastDashTime=0,this.reloadStartTime=0,this.lastShotTime=0,this.nextBurstShotTime=0,this.currentBurstShot=0,this.lastStaminaDrainTime=0,this.staminaRecoveryBlockedUntil=0,this.userId=d(),this.roomManager=new f(this.userId),this.myPlayer=this.initializePlayer(),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{this.initializeElements(),this.setupEventListeners(),this.checkForRoomInURL()}):(this.initializeElements(),this.setupEventListeners(),this.checkForRoomInURL())}initializeElements(){if(this.canvas=document.getElementById("gameCanvas"),this.decalCanvas=document.createElement("canvas"),this.roomControls=document.getElementById("roomControls"),this.gameContainer=document.getElementById("gameContainer"),this.lobbyContainer=document.getElementById("lobbyContainer"),this.lobbyPlayersList=document.getElementById("lobbyPlayersList"),this.startGameBtn=document.getElementById("startGameBtn"),this.gameOptionsContainer=document.getElementById("gameOptionsContainer"),this.userIdDisplay=document.getElementById("userId"),this.roomIdDisplay=document.getElementById("roomId"),this.gameRoomIdDisplay=document.getElementById("gameRoomId"),this.chatContainer=document.getElementById("chatContainer"),this.chatMessages=document.getElementById("chatMessages"),this.chatInput=document.getElementById("chatInput"),this.chatSendBtn=document.getElementById("chatSendBtn"),this.privateToggle=document.getElementById("privateToggle"),this.upgradesToggle=document.getElementById("upgradesToggle"),this.winsInput=document.getElementById("winsInput"),this.playersInput=document.getElementById("playersInput"),this.upgradeContainer=document.getElementById("upgradeContainer"),this.crosshair=document.getElementById("crosshair"),this.leaderboardContainer=document.getElementById("leaderboardContainer"),this.leaderboardBody=document.getElementById("leaderboardBody"),this.hostButton=document.getElementById("hostBtn"),this.joinButton=document.getElementById("joinBtn"),this.quickplayButton=document.getElementById("quickBtn"),this.lobbyLeaveButton=document.getElementById("lobbyLeaveBtn"),this.lobbyCodeButton=document.getElementById("lobbyCodeBtn"),this.gameLeaveButton=document.getElementById("gameLeaveBtn"),this.gameCodeButton=document.getElementById("gameCodeBtn"),this.modal=document.getElementById("modal"),this.modalInput=document.getElementById("joinRoomInput"),this.modalButtons=document.getElementById("modalButtons"),this.modalConfirmButton=document.getElementById("joinRoomConfirmBtn"),this.modalCancelButton=document.getElementById("joinRoomCancelBtn"),this.modalErrorDiv=document.getElementById("joinRoomError"),this.modalContent=document.getElementById("modalContent"),this.modalText=document.getElementById("modalText"),!(this.canvas&&this.decalCanvas&&this.roomControls&&this.gameContainer&&this.lobbyContainer&&this.userIdDisplay&&this.roomIdDisplay&&this.gameRoomIdDisplay&&this.lobbyPlayersList&&this.startGameBtn&&this.gameOptionsContainer&&this.chatContainer&&this.chatMessages&&this.chatInput&&this.chatSendBtn&&this.privateToggle&&this.upgradesToggle&&this.winsInput&&this.playersInput&&this.upgradeContainer&&this.crosshair&&this.leaderboardContainer&&this.leaderboardBody&&this.hostButton&&this.joinButton&&this.quickplayButton&&this.lobbyLeaveButton&&this.lobbyCodeButton&&this.gameLeaveButton&&this.gameCodeButton))throw alert("Failed to load game. Please refresh the page."),new Error("Critical error: Required DOM elements are missing.");if(this.canvas.width=l,this.canvas.height=h,this.decalCanvas.width=l,this.decalCanvas.height=h,this.ctx=this.canvas.getContext("2d"),this.decalCtx=this.decalCanvas.getContext("2d"),!this.ctx||!this.decalCtx)throw alert("Failed to load game. Please refresh the page."),new Error("Could not get canvas context");this.userIdDisplay.textContent=this.userId,this.showRoomControls()}connectWebSocket(){const t="https:"===location.protocol?"wss:":"ws:";this.ws=new WebSocket(`${t}//${location.host}`),this.ws.onopen=()=>{console.log("Connected to WebSocket"),this.roomManager.setWebSocket(this.ws)},this.ws.onclose=()=>{console.log("Disconnected from WebSocket"),this.gameRunning=!1,setTimeout(()=>this.connectWebSocket(),3e3)},this.ws.onerror=t=>{console.error("WebSocket error:",t)}}setupEventListeners(){this.canvas&&this.hostButton&&this.joinButton&&this.quickplayButton&&this.lobbyLeaveButton&&this.lobbyCodeButton&&this.gameLeaveButton&&this.gameCodeButton&&this.startGameBtn&&this.chatSendBtn&&this.chatInput&&(this.hostButton.addEventListener("click",()=>this.hostRoom()),this.joinButton.addEventListener("click",()=>this.joinRoom()),this.quickplayButton.addEventListener("click",()=>this.quickPlay()),this.lobbyLeaveButton.addEventListener("click",()=>this.leaveRoom()),this.lobbyCodeButton.addEventListener("click",()=>this.copyRoomCode()),this.gameLeaveButton.addEventListener("click",()=>this.leaveRoom()),this.gameCodeButton.addEventListener("click",()=>this.copyRoomCode()),this.startGameBtn.addEventListener("click",()=>this.startGame()),this.chatSendBtn.addEventListener("click",()=>this.sendChatMessage()),this.chatInput.addEventListener("keypress",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.sendChatMessage())}),this.chatInput.addEventListener("focus",()=>{this.keys.clear(),this.canShoot=!1,this.isSprinting=!1,this.isDashing=!1,this.isBurstActive=!1,this.currentBurstShot=0}),this.chatInput.addEventListener("blur",()=>{this.keys.clear(),this.canShoot=!0,this.isSprinting=!1,this.isDashing=!1}),document.addEventListener("keydown",t=>this.onKeyDown(t)),document.addEventListener("keyup",t=>this.onKeyUp(t)),document.addEventListener("keydown",t=>{"Escape"===t.key&&this.gameRunning&&!this.inLobby&&t.preventDefault()}),document.addEventListener("mouseup",t=>this.onMouseUp(t)),document.addEventListener("mousemove",t=>this.onMouseMove(t)),this.canvas.addEventListener("mousedown",t=>this.onMouseDown(t)),this.roomManager.onMessage(t=>this.handleRoomMessage(t)))}onKeyDown(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning||this.gamePaused)return;const e=t.key.toLowerCase(),s=y;Object.values(s).includes(e)&&(t.preventDefault(),this.keys.add(e),e===s.RELOAD&&this.startReload(),e===s.SPRINT&&this.isMoving()&&(this.isSprinting=!0),e===s.DASH&&this.startDash())}onKeyUp(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning)return;const e=t.key.toLowerCase(),s=y;Object.values(s).includes(e)&&(t.preventDefault(),this.keys.delete(e),e===s.SPRINT&&(this.isSprinting=!1))}onMouseDown(t){this.chatInput!==document.activeElement&&this.gameRunning&&!this.gamePaused&&this.canvas&&0===t.button&&this.canShoot&&!this.isBurstActive&&(this.updateMouse(t),this.startBurst(),this.canShoot=!1)}onMouseUp(t){this.chatInput!==document.activeElement&&this.gameRunning&&0===t.button&&(this.canShoot=!0)}onMouseMove(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning||this.gamePaused)return;this.updateMouse(t);const e=this.mouseX-this.myPlayer.transform.pos.x,s=this.mouseY-this.myPlayer.transform.pos.y,a=Math.atan2(s,e)+Math.PI/2;this.rotateCharacterPart(this.userId,a),Math.abs(a-this.lastSentRotation)>.1&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot}})),this.lastSentRotation=a),this.crosshair&&this.myPlayer.equipment.crosshair&&(this.crosshair.style.left=`${t.clientX}px`,this.crosshair.style.top=`${t.clientY}px`)}updateMouse(t){if(this.chatInput===document.activeElement)return;if(!this.canvas)return;const e=this.canvas.getBoundingClientRect();this.mouseX=t.clientX-e.left,this.mouseY=t.clientY-e.top}handleRoomMessage(t){switch(t.type){case"room-created":console.log("Room created");break;case"room-joined":console.log("Joined room - lobby"),this.isHost=!1,this.showLobbyControls(t.roomId||""),this.roomManager.sendMessage(JSON.stringify({type:"lobby-join",color:this.myPlayer.color})),this.lobbyPlayers.set(this.userId,{id:this.userId,color:this.myPlayer.color,isHost:this.isHost}),this.updateLobbyPlayersList(),this.updateHostDisplay(),1===this.lobbyPlayers.size&&(this.isHost=!0,this.lobbyPlayers.get(this.userId).isHost=!0,this.updateHostDisplay(),console.log("I am the only player in the room..."));break;case"user-joined":console.log(`User ${t.userId} joined`),this.gameRunning&&!this.inLobby&&this.roomManager.sendMessage(JSON.stringify({type:"player-state",id:this.myPlayer.id,transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot},timestamp:this.myPlayer.timestamp,color:this.myPlayer.color,actions:{dash:{cooldown:this.myPlayer.actions.dash.cooldown,drain:this.myPlayer.actions.dash.drain,multiplier:this.myPlayer.actions.dash.multiplier,time:this.myPlayer.actions.dash.time},primary:{buffer:this.myPlayer.actions.primary.buffer,burst:{amount:this.myPlayer.actions.primary.burst.amount,delay:this.myPlayer.actions.primary.burst.delay},magazine:{currentAmmo:this.myPlayer.actions.primary.magazine.currentAmmo,currentReserve:this.myPlayer.actions.primary.magazine.currentReserve,maxReserve:this.myPlayer.actions.primary.magazine.maxReserve,size:this.myPlayer.actions.primary.magazine.size},offset:this.myPlayer.actions.primary.offset,projectile:{amount:this.myPlayer.actions.primary.projectile.amount,color:this.myPlayer.actions.primary.projectile.color,damage:this.myPlayer.actions.primary.projectile.damage,length:this.myPlayer.actions.primary.projectile.length,range:this.myPlayer.actions.primary.projectile.range,size:this.myPlayer.actions.primary.projectile.size,speed:this.myPlayer.actions.primary.projectile.speed,spread:this.myPlayer.actions.primary.projectile.spread,unique:this.myPlayer.actions.primary.projectile.unique},reload:{time:this.myPlayer.actions.primary.reload.time}},sprint:{drain:this.myPlayer.actions.sprint.drain,multiplier:this.myPlayer.actions.sprint.multiplier}},equipment:{crosshair:this.myPlayer.equipment.crosshair},physics:{acceleration:this.myPlayer.physics.acceleration,friction:this.myPlayer.physics.friction},stats:{health:{max:this.myPlayer.stats.health.max,value:this.myPlayer.stats.health.value},luck:this.myPlayer.stats.luck,size:this.myPlayer.stats.size,speed:this.myPlayer.stats.speed,stamina:{max:this.myPlayer.stats.stamina.max,recovery:{delay:this.myPlayer.stats.stamina.recovery.delay,rate:this.myPlayer.stats.stamina.recovery.rate},value:this.myPlayer.stats.stamina.value}},leaderboard:Array.from(this.leaderboard.entries())}));break;case"room-joined-game":console.log("Joined room - game in progress"),this.isHost=!1,this.showGameControls(t.roomId||""),this.startGameLoop();break;case"user-left":console.log(`User ${t.userId} left`),this.lobbyPlayers.delete(t.userId),this.players.delete(t.userId),this.leaderboard.delete(t.userId),this.updateLeaderboardDisplay(),console.log(`Removed ${t.userId} from leaderboard`),this.projectiles.forEach((e,s)=>{e.ownerId===t.userId&&this.projectiles.delete(s)}),this.updateLobbyPlayersList();break;case"room-message":this.handleGameMessage(t);break;case"room-error":alert(`Error: ${t.message}`)}}handleGameMessage(e){var s;if(e.message)try{const a=JSON.parse(e.message);switch(a.type){case"lobby-join":this.lobbyPlayers.set(e.userId,{id:e.userId,color:a.color,isHost:!1}),this.updateLobbyPlayersList(),this.isHost&&this.roomManager.sendMessage(JSON.stringify({type:"lobby-state",players:Array.from(this.lobbyPlayers.values()),options:{privateRoom:this.isPrivateRoom,maxPlayers:this.gameMaxPlayers,maxWins:this.gameMaxWins,upgradesEnabled:this.isUpgradesEnabled}}));break;case"lobby-state":this.lobbyPlayers.clear(),a.players.forEach(t=>{this.lobbyPlayers.set(t.id,t)}),this.updateLobbyPlayersList(),this.updateHostDisplay(),a.options&&this.syncLobbyOptions(a.options);break;case"lobby-options":this.syncLobbyOptions(a);break;case"promote-player":this.lobbyPlayers.forEach((t,e)=>{t.isHost=e===a.targetPlayerId}),this.isHost=a.targetPlayerId===this.userId,this.isHost&&"host-migration"===a.reason&&console.log("I am now the host due to host migration"),this.updateLobbyPlayersList(),this.updateHostDisplay();break;case"return-to-lobby":console.log("Returning to lobby - last player or game ended"),a.newHostId===this.userId&&(this.isHost=!0,console.log("I am now the host as the last remaining player")),this.resetGameState("Lobby"),this.showLobbyControls(this.roomManager.getCurrentRoom()||"");break;case"kick-player":a.targetPlayerId===this.userId&&(alert("You have been kicked from the lobby"),this.leaveRoom());break;case"chat-message":e.userId!==this.userId&&this.displayChatMessage(e.userId,a.message,!1);break;case"player-state":this.inLobby||this.players.set(e.userId,{id:e.userId,transform:{pos:{x:a.transform?.pos.x,y:a.transform?.pos.y},rot:a.transform?.rot},timestamp:a.timestamp,color:a.color,actions:{dash:{cooldown:a.actions?.dash.cooldown||t.ACTIONS.DASH.COOLDOWN,drain:a.actions?.dash.drain||t.ACTIONS.DASH.DRAIN,multiplier:a.actions?.dash.multiplier||t.ACTIONS.DASH.MULTIPLIER,time:a.actions?.dash.time||t.ACTIONS.DASH.TIME},primary:{buffer:a.actions?.primary.buffer||t.ACTIONS.PRIMARY.BUFFER,burst:{amount:a.actions?.primary.burst.amount||t.ACTIONS.PRIMARY.BURST.AMOUNT,delay:a.actions?.primary.burst.delay||t.ACTIONS.PRIMARY.BURST.DELAY},magazine:{currentAmmo:a.actions?.primary.magazine.currentAmmo,currentReserve:a.actions?.primary.magazine.currentReserve,maxReserve:a.actions?.primary.magazine.maxReserve,size:a.actions?.primary.magazine.size||t.ACTIONS.PRIMARY.MAGAZINE.SIZE},offset:a.actions?.primary.offset||t.ACTIONS.PRIMARY.OFFSET,projectile:{amount:a.actions?.primary.projectile.amount||t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,color:a.actions?.primary.projectile.color||t.ACTIONS.PRIMARY.PROJECTILE.COLOR,damage:a.actions?.primary.projectile.damage||t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,length:a.actions?.primary.projectile.length||t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,range:a.actions?.primary.projectile.range||t.ACTIONS.PRIMARY.PROJECTILE.RANGE,size:a.actions?.primary.projectile.size||t.ACTIONS.PRIMARY.PROJECTILE.SIZE,speed:a.actions?.primary.projectile.speed||t.ACTIONS.PRIMARY.PROJECTILE.SPEED,spread:a.actions?.primary.projectile.spread||t.ACTIONS.PRIMARY.PROJECTILE.SPREAD,unique:a.actions?.primary.projectile.unique||t.ACTIONS.PRIMARY.PROJECTILE.UNIQUE},reload:{time:a.actions?.primary.reload.time||t.ACTIONS.PRIMARY.RELOAD.TIME}},sprint:{drain:a.actions?.sprint.drain||t.ACTIONS.SPRINT.DRAIN,multiplier:a.actions?.sprint.multiplier||t.ACTIONS.SPRINT.MULTIPLIER}},equipment:{crosshair:a.equipment?.crosshair||t.EQUIPMENT.CROSSHAIR},physics:{acceleration:a.physics?.acceleration||t.PHYSICS.ACCELERATION,friction:a.physics?.friction||t.PHYSICS.FRICTION},stats:{health:{max:a.stats?.health.max||t.STATS.HEALTH.MAX,value:a.stats?.health.value||t.STATS.HEALTH.MAX},luck:a.stats?.luck||t.STATS.LUCK,size:a.stats?.size||t.STATS.SIZE,speed:a.stats?.speed||t.STATS.SPEED,stamina:{max:a.stats?.stamina.max||t.STATS.STAMINA.MAX,recovery:{delay:a.stats?.stamina.recovery.delay||t.STATS.STAMINA.RECOVERY.DELAY,rate:a.stats?.stamina.recovery.rate||t.STATS.STAMINA.RECOVERY.RATE},value:a.stats?.stamina.value||t.STATS.STAMINA.MAX}}}),a.leaderboard&&a.leaderboard.forEach(([t,e])=>{this.leaderboard.set(t,e)}),this.createLeaderboard();break;case"player-move":if(!this.inLobby&&this.players.has(e.userId)){const t=this.players.get(e.userId);t.transform.pos.x=a.transform.pos.x,t.transform.pos.y=a.transform.pos.y,t.transform.rot=a.transform.rot}break;case"player-hit":if(a.projectileId&&this.projectiles.delete(a.projectileId),a.targetId===this.userId)this.myPlayer.stats.health.value=a.newHealth,g("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),this.myPlayer.stats.health.value<=0&&(this.recordDeath(),this.checkRoundEnd());else if(this.players.has(a.targetId)){const t=this.players.get(a.targetId);t.stats.health.value=a.newHealth,t.stats.health.value<=0&&(console.log(`Player ${t.id} died`),this.checkRoundEnd())}if(a.wasKill){const t=this.leaderboard.get(a.shooterId);t&&t.kills++;const e=this.leaderboard.get(a.targetId);e&&e.deaths++,this.updateLeaderboardDisplay()}break;case"player-death":e.userId!==this.userId&&a.ammoBox&&(this.ammoBoxes.set(a.ammoBox.id,a.ammoBox),console.log(`Ammo box spawned at death of ${e.userId}`)),a.gore&&Array.isArray(a.gore)&&(a.gore.forEach((t,s)=>{const a=`death_gore_${e.userId}_${Date.now()}_${s}`;this.stampGore(t),this.decals.set(a,{x:t.x,y:t.y,params:null})}),console.log(`Stamped ${a.gore.length} gore decals for ${e.userId}`));break;case"player-pause":this.pausedPlayers.add(a.userId),this.updatePauseState(),console.log(`${a.userId} paused the game`);break;case"player-unpause":this.pausedPlayers.delete(a.userId),this.updatePauseState(),console.log(`${a.userId} unpaused`);break;case"ammo-pickup":if(a.playerId===this.userId)break;if(this.ammoBoxes.has(a.ammoBoxId)){const t=this.ammoBoxes.get(a.ammoBoxId);t.isOpen=a.boxState.isOpen,t.lid=a.boxState.lid,console.log(`Ammo box opened by ${a.playerId}`)}break;case"projectile-launch":this.inLobby||e.userId===this.userId||this.projectiles.set(a.projectile.id,a.projectile);break;case"projectile-remove":this.inLobby||this.projectiles.delete(a.projectileId);break;case"start-game":this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop();break;case"game-end":console.log(`Game ended! Winner: ${a.winnerId}`),this.gameWinner=a.winnerId;break;case"round-end":console.log(`Round ended! Winner: ${a.winnerId||"No one"}`),this.isRoundInProgress=!1,this.roundWinner=a.winnerId;break;case"new-round":if(console.log("New round started! Everyone respawning..."),this.isRoundInProgress=!0,this.roundWinner=null,this.myPlayer.stats.health.value=this.myPlayer.stats.health.max,g("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),g("staminaBar",this.myPlayer.stats.stamina.value,this.myPlayer.stats.stamina.max),this.players.has(e.userId)){const t=this.players.get(e.userId);t.transform.pos.x=a.transform.pos.x,t.transform.pos.y=a.transform.pos.y,t.transform.rot=a.transform.rot,t.timestamp=a.timestamp,t.actions.dash.cooldown=a.actions.dash.cooldown,t.actions.dash.drain=a.actions.dash.drain,t.actions.dash.multiplier=a.actions.dash.multiplier,t.actions.dash.time=a.actions.dash.time,t.actions.primary.buffer=a.actions.primary.buffer,t.actions.primary.burst.amount=a.actions.primary.burst.amount,t.actions.primary.burst.delay=a.actions.primary.burst.delay,t.actions.primary.magazine.currentAmmo=a.actions.primary.magazine.currentAmmo,t.actions.primary.magazine.currentReserve=a.actions.primary.magazine.currentReserve,t.actions.primary.magazine.maxReserve=a.actions.primary.magazine.maxReserve,t.actions.primary.magazine.size=a.actions.primary.magazine.size,t.actions.primary.offset=a.actions.primary.offset,t.actions.primary.projectile.amount=a.actions.primary.projectile.amount,t.actions.primary.projectile.color=a.actions.primary.projectile.color,t.actions.primary.projectile.damage=a.actions.primary.projectile.damage,t.actions.primary.projectile.length=a.actions.primary.projectile.length,t.actions.primary.projectile.range=a.actions.primary.projectile.range,t.actions.primary.projectile.size=a.actions.primary.projectile.size,t.actions.primary.projectile.speed=a.actions.primary.projectile.speed,t.actions.primary.projectile.spread=a.actions.primary.projectile.spread,t.actions.primary.projectile.unique=a.actions.primary.projectile.unique,t.actions.primary.reload.time=a.actions.primary.reload.time,t.actions.sprint.drain=a.actions.sprint.drain,t.actions.sprint.multiplier=a.actions.sprint.multiplier,t.equipment.crosshair=a.equipment.crosshair,t.physics.acceleration=a.physics.acceleration,t.physics.friction=a.physics.friction,t.stats.health.max=a.stats.health.max,t.stats.health.value=a.stats.health.max,t.stats.luck=a.stats.luck,t.stats.size=a.stats.size,t.stats.speed=a.stats.speed,t.stats.stamina.max=a.stats.stamina.max,t.stats.stamina.recovery.delay=a.stats.stamina.recovery.delay,t.stats.stamina.recovery.rate=a.stats.stamina.recovery.rate,t.stats.stamina.value=a.stats.stamina.value}break;case"upgrade-taken":a.upgradeId&&a.isUnique&&(s=a.upgradeId,M.add(s),console.log(`Unique upgrade ${a.upgradeId} taken by ${e.userId}`));break;case"upgrade-complete":this.togglePause(),this.roundWinner===this.userId&&1===this.pausedPlayers.size&&this.showWinnerContinueButton(),0===this.pausedPlayers.size&&setTimeout(()=>{this.startNewRound()},500);break;case"add-decal":e.userId!==this.userId&&this.applyDecal(a.x,a.y,a.decalId,a.params);break;case"add-particles":e.userId!==this.userId&&this.applyParticles(a.x,a.y,a.particleId,a.particleData,a.color,a.collide,a.fade);break;case"particle-stamp":e.userId!==this.userId&&this.applyParticleStamp(a.x,a.y,a.stampId,a.color,a.opacity,a.size,a.rotation,a.torque);break;case"particle-emitter":e.userId!==this.userId&&this.emitters.set(a.emitterId,{playerId:a.playerId,offsetX:a.offsetX,offsetY:a.offsetY,direction:a.direction||0,lifetime:a.lifetime,age:0,lastEmission:0,emissionInterval:200+300*Math.random()});break;case"character-animation":a.playerId!==this.userId&&this.animateCharacterPart(a.playerId,a.part,a.frames,a.duration,a.partIndex)}}catch(t){console.error("Error parsing game message:",t)}}showRoomControls(){this.updateDisplay("room")}hostRoom(){if(this.ws){const t=this.roomManager.createRoom();this.isHost=!0,this.showLobbyControls(t)}else this.connectWebSocket(),setTimeout(()=>{const t=this.roomManager.createRoom();this.isHost=!0,this.showLobbyControls(t)},c)}joinRoom(){this.showJoinRoomModal()}joinRoomById(t){t&&(this.ws?this.roomManager.joinRoom(t):(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t)},c)))}quickPlay(){fetch("/quickplay").then(t=>{if(!t.ok)throw new Error("No available rooms");return t.json()}).then(t=>{this.ws?this.roomManager.joinRoom(t.roomId):(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t.roomId)},c))}).catch(t=>{this.modal&&this.modalConfirmButton&&this.modalCancelButton&&this.modalContent&&this.modalText&&this.modalInput&&this.modalErrorDiv&&this.modalButtons&&(this.modal.classList.remove("hidden"),this.modalInput.style.display="none",this.modalErrorDiv.textContent=" ",this.modalButtons.style.display="flex",this.modalCancelButton.style.display="none",this.modalText.textContent="No available games found.",this.modalConfirmButton.textContent="Confirm",this.modalConfirmButton.onclick=()=>{this.modal&&this.modalInput&&this.modalCancelButton&&this.modalText&&this.modalConfirmButton&&(this.modal.classList.add("hidden"),this.modalInput.style.display="flex",this.modalText.textContent="Join Room",this.modalCancelButton.style.display="flex",this.modalConfirmButton.onclick=null)})})}leaveRoom(){this.roomManager.leaveRoom(),this.resetGameState("Room"),this.showRoomControls()}checkForRoomInURL(){const t=this.getRoomIdFromURL();t&&(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t)},c))}getRoomIdFromURL(){return new URLSearchParams(window.location.search).get("room")}copyRoomCode(){const t=this.inLobby?this.roomIdDisplay?.textContent:this.gameRoomIdDisplay?.textContent;t&&navigator.clipboard.writeText(t).then(()=>{if(!(this.modal&&this.modalConfirmButton&&this.modalCancelButton&&this.modalContent&&this.modalText&&this.modalInput&&this.modalErrorDiv&&this.modalButtons))return;this.modal.classList.remove("hidden"),this.modalInput.style.display="none",this.modalErrorDiv.textContent=" ",this.modalButtons.style.display="flex",this.modalCancelButton.style.display="none",this.modalText.textContent="Room code copied!",this.modalConfirmButton.textContent="Confirm";const t=()=>{this.modal&&this.modalInput&&this.modalCancelButton&&this.modalText&&this.modalConfirmButton&&(this.modal.classList.add("hidden"),this.modalInput.style.display="flex",this.modalText.textContent="Join Room",this.modalCancelButton.style.display="flex",this.modalConfirmButton.onclick=null)};this.modalConfirmButton.onclick=t,setTimeout(()=>{this.modal&&!this.modal.classList.contains("hidden")&&t()},3e3)}).catch(()=>{alert("Could not copy. Please copy manually.")})}showLobbyControls(t){this.updateDisplay("lobby",t),this.lobbyPlayers.set(this.userId,{id:this.userId,color:this.myPlayer.color,isHost:this.isHost}),this.setupLobbyOptions(),I("privateToggle",this.isPrivateRoom),I("upgradesToggle",this.isUpgradesEnabled),P("winsInput",this.gameMaxWins),this.updateLobbyPlayersList(),this.updateHostDisplay()}setupLobbyOptions(){this.setupLobbyToggle("privateToggle","privateRoom",()=>this.isPrivateRoom,t=>this.isPrivateRoom=t),this.setupLobbyToggle("upgradesToggle","upgradesEnabled",()=>this.isUpgradesEnabled,t=>this.isUpgradesEnabled=t),this.setupLobbyInput("winsInput","maxWins",()=>this.gameMaxWins,t=>this.gameMaxWins=t),this.setupLobbyInput("playersInput","maxPlayers",()=>this.gameMaxPlayers,t=>this.gameMaxPlayers=t)}setupLobbyToggle(t,e,s,a){const i=this[t];i&&i.addEventListener("click",()=>{if(!this.isHost)return;const i=!s();a(i),I(t,i),this.roomManager.sendMessage(JSON.stringify({type:"lobby-options",[e]:i})),console.log(`${e} changed to: ${i}`)})}setupLobbyInput(t,e,s,a){const i=this[t];i&&i.addEventListener("change",()=>{if(!this.isHost)return;const r=parseInt(i.value);isNaN(r)||r<1?i.value=s().toString():(a(r),P(t,r),this.roomManager.sendMessage(JSON.stringify({type:"lobby-options",[e]:r})),console.log(`${e} changed to: ${r}`))})}syncLobbyOptions(t){this.syncOption(t,"privateRoom","isPrivateRoom","privateToggle",I,"Lobby privacy",t=>t?"Private":"Public"),this.syncOption(t,"maxWins","gameMaxWins","winsInput",P,"Game max wins"),this.syncOption(t,"maxPlayers","gameMaxPlayers","playersInput",P,"Game max players"),this.syncOption(t,"upgradesEnabled","isUpgradesEnabled","upgradesToggle",I,"Game upgrades toggled")}syncOption(t,e,s,a,i,r,o){if(void 0!==t[e]){this[s]=t[e],i(a,t[e]);const n=o?o(t[e]):t[e];console.log(`${r} synced to: ${n}`)}}promotePlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"promote-player",targetPlayerId:t}))}kickPlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"kick-player",targetPlayerId:t}))}returnToLobby(){this.resetGameState("Lobby"),this.roomManager.sendMessage(JSON.stringify({type:"return-to-lobby",reason:"game-ended"})),this.showLobbyControls(this.roomManager.getCurrentRoom()||"")}checkRoundEnd(){if(!this.isRoundInProgress)return;let t=this.myPlayer.stats.health.value>0?1:0,e=this.myPlayer.stats.health.value>0?this.userId:null;this.players.forEach(s=>{s.stats.health.value>0&&(t++,e=s.id)}),t<=1&&this.endRound(e)}endRound(t){if(this.isRoundInProgress){if(this.isRoundInProgress=!1,this.roundWinner=t,!t)return console.log("Round ended with no survivors!"),void setTimeout(()=>{this.startNewRound()},3e3);if(this.leaderboard.has(t)){const e=this.leaderboard.get(t);if(e.wins++,console.log(`${t} won the round! Total wins: ${e.wins}`),e.wins>=this.gameMaxWins)return void this.endGame(t);this.updateLeaderboardDisplay()}setTimeout(()=>{this.startUpgradePhase(t)},3e3)}}endGame(t){this.gameWinner=t,console.log(`${t} won the game with ${this.gameMaxWins} wins!`),this.roomManager.sendMessage(JSON.stringify({type:"game-end",winnerId:t})),setTimeout(()=>{this.returnToLobby()},5e3)}startNewRound(){console.log("Starting new round..."),this.myPlayer.stats.health.value=this.myPlayer.stats.health.max,this.myPlayer.transform.pos.x=770*Math.random()+m,this.myPlayer.transform.pos.y=570*Math.random()+m,g("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),g("staminaBar",this.myPlayer.stats.stamina.value,this.myPlayer.stats.stamina.max),this.players.forEach(e=>{e.timestamp=e.timestamp||Date.now(),e.actions.dash.cooldown=e.actions.dash.cooldown||t.ACTIONS.DASH.COOLDOWN,e.actions.dash.drain=e.actions.dash.drain||t.ACTIONS.DASH.DRAIN,e.actions.dash.multiplier=e.actions.dash.multiplier||t.ACTIONS.DASH.MULTIPLIER,e.actions.dash.time=e.actions.dash.time||t.ACTIONS.DASH.TIME,e.actions.primary.buffer=e.actions.primary.buffer||t.ACTIONS.PRIMARY.BUFFER,e.actions.primary.burst.amount=e.actions.primary.burst.amount||t.ACTIONS.PRIMARY.BURST.AMOUNT,e.actions.primary.burst.delay=e.actions.primary.burst.delay||t.ACTIONS.PRIMARY.BURST.DELAY,e.actions.primary.magazine.currentAmmo=e.actions.primary.magazine.currentAmmo||t.ACTIONS.PRIMARY.MAGAZINE.SIZE,e.actions.primary.magazine.currentReserve=e.actions.primary.magazine.currentReserve||t.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE,e.actions.primary.magazine.maxReserve=e.actions.primary.magazine.maxReserve||t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE,e.actions.primary.magazine.size=e.actions.primary.magazine.size||t.ACTIONS.PRIMARY.MAGAZINE.SIZE,e.actions.primary.offset=e.actions.primary.offset||t.ACTIONS.PRIMARY.OFFSET,e.actions.primary.projectile.amount=e.actions.primary.projectile.amount||t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,e.actions.primary.projectile.color=e.actions.primary.projectile.color||t.ACTIONS.PRIMARY.PROJECTILE.COLOR,e.actions.primary.projectile.damage=e.actions.primary.projectile.damage||t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,e.actions.primary.projectile.length=e.actions.primary.projectile.length||t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,e.actions.primary.projectile.range=e.actions.primary.projectile.range||t.ACTIONS.PRIMARY.PROJECTILE.RANGE,e.actions.primary.projectile.size=e.actions.primary.projectile.size||t.ACTIONS.PRIMARY.PROJECTILE.SIZE,e.actions.primary.projectile.speed=e.actions.primary.projectile.speed||t.ACTIONS.PRIMARY.PROJECTILE.SPEED,e.actions.primary.projectile.spread=e.actions.primary.projectile.spread||t.ACTIONS.PRIMARY.PROJECTILE.SPREAD,e.actions.primary.projectile.unique=e.actions.primary.projectile.unique||t.ACTIONS.PRIMARY.PROJECTILE.UNIQUE,e.actions.primary.reload.time=e.actions.primary.reload.time||t.ACTIONS.PRIMARY.RELOAD.TIME,e.actions.sprint.drain=e.actions.sprint.drain||t.ACTIONS.SPRINT.DRAIN,e.actions.sprint.multiplier=e.actions.sprint.multiplier||t.ACTIONS.SPRINT.MULTIPLIER,e.equipment.crosshair=e.equipment.crosshair||t.EQUIPMENT.CROSSHAIR,e.physics.acceleration=e.physics.acceleration||t.PHYSICS.ACCELERATION,e.physics.friction=e.physics.friction||t.PHYSICS.FRICTION,e.stats.health.max=e.stats.health.max||t.STATS.HEALTH.MAX,e.stats.health.value=e.stats.health.max||t.STATS.HEALTH.MAX,e.stats.luck=e.stats.luck||t.STATS.LUCK,e.stats.size=e.stats.size||t.STATS.SIZE,e.stats.speed=e.stats.speed||t.STATS.SPEED,e.stats.stamina.max=e.stats.stamina.max||t.STATS.STAMINA.MAX,e.stats.stamina.recovery.delay=e.stats.stamina.recovery.delay||t.STATS.STAMINA.RECOVERY.DELAY,e.stats.stamina.recovery.rate=e.stats.stamina.recovery.rate||t.STATS.STAMINA.RECOVERY.RATE,e.stats.stamina.value=e.stats.stamina.value||t.STATS.STAMINA.MAX}),this.isRoundInProgress=!0,this.roundWinner=null,this.roomManager.sendMessage(JSON.stringify({type:"new-round",transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot},timestamp:this.myPlayer.timestamp,actions:{dash:{cooldown:this.myPlayer.actions.dash.cooldown,drain:this.myPlayer.actions.dash.drain,multiplier:this.myPlayer.actions.dash.multiplier,time:this.myPlayer.actions.dash.time},primary:{buffer:this.myPlayer.actions.primary.buffer,burst:{amount:this.myPlayer.actions.primary.burst.amount,delay:this.myPlayer.actions.primary.burst.delay},magazine:{currentAmmo:this.myPlayer.actions.primary.magazine.currentAmmo,currentReserve:this.myPlayer.actions.primary.magazine.currentReserve,maxReserve:this.myPlayer.actions.primary.magazine.maxReserve,size:this.myPlayer.actions.primary.magazine.size},offset:this.myPlayer.actions.primary.offset,projectile:{amount:this.myPlayer.actions.primary.projectile.amount,color:this.myPlayer.actions.primary.projectile.color,damage:this.myPlayer.actions.primary.projectile.damage,length:this.myPlayer.actions.primary.projectile.length,range:this.myPlayer.actions.primary.projectile.range,size:this.myPlayer.actions.primary.projectile.size,speed:this.myPlayer.actions.primary.projectile.speed,spread:this.myPlayer.actions.primary.projectile.spread,unique:this.myPlayer.actions.primary.projectile.unique},reload:{time:this.myPlayer.actions.primary.reload.time}},sprint:{drain:this.myPlayer.actions.sprint.drain,multiplier:this.myPlayer.actions.sprint.multiplier}},equipment:{crosshair:this.myPlayer.equipment.crosshair},physics:{acceleration:this.myPlayer.physics.acceleration,friction:this.myPlayer.physics.friction},stats:{health:{max:this.myPlayer.stats.health.max,value:this.myPlayer.stats.health.max},luck:this.myPlayer.stats.luck,size:this.myPlayer.stats.size,speed:this.myPlayer.stats.speed,stamina:{max:this.myPlayer.stats.stamina.max,recovery:{delay:this.myPlayer.stats.stamina.recovery.delay,rate:this.myPlayer.stats.stamina.recovery.rate},value:this.myPlayer.stats.stamina.max}}}))}sendChatMessage(){if(!this.chatInput||!this.chatInput.value.trim())return;const t=this.chatInput.value.trim();t.length>200?alert("Message too long! Max 200 characters."):(this.roomManager.sendMessage(JSON.stringify({type:"chat-message",message:t,timestamp:Date.now()})),this.displayChatMessage(this.userId,t,!0),this.chatInput.value="")}displayChatMessage(t,e,s=!1){if(!this.chatMessages)return;const a=document.createElement("div");a.className="chat_message "+(s?"own":"other");const i=document.createElement("span");i.className="sender",i.textContent=s?"You:":`${t}:`;const r=document.createElement("span");for(r.className="content",r.textContent=e,a.appendChild(i),a.appendChild(r),this.chatMessages.appendChild(a),this.chatMessages.scrollTop=this.chatMessages.scrollHeight;this.chatMessages.children.length>100;)this.chatMessages.removeChild(this.chatMessages.firstChild)}clearChat(){this.chatMessages&&(this.chatMessages.innerHTML=""),this.chatInput&&(this.chatInput.value="")}updateAttack(){if(!this.gameRunning||this.myPlayer.stats.health.value<=0)return;const t=Date.now();if(this.isReloading){if(t>=this.reloadStartTime+this.myPlayer.actions.primary.reload.time){const t=this.myPlayer.actions.primary.magazine.size-this.myPlayer.actions.primary.magazine.currentAmmo,e=Math.min(t,this.myPlayer.actions.primary.magazine.currentReserve);this.myPlayer.actions.primary.magazine.currentAmmo+=e,this.myPlayer.actions.primary.magazine.currentReserve-=e,this.isReloading=!1,this.animateCharacterPart(this.userId,"WEAPON",{0:{x:0,y:20},1:{x:0,y:0}},175,1),console.log(`Reload complete! Magazine: ${this.myPlayer.actions.primary.magazine.currentAmmo}/${this.myPlayer.actions.primary.magazine.size}, Inventory: ${this.myPlayer.actions.primary.magazine.currentReserve}/${this.myPlayer.actions.primary.magazine.maxReserve}`)}}else if(this.isBurstActive&&t>=this.nextBurstShotTime){const e=this.myPlayer.actions.primary.burst.amount;this.myPlayer.actions.primary.magazine.currentAmmo>0&&this.currentBurstShot<e?(this.launchProjectile(),this.currentBurstShot++,this.myPlayer.actions.primary.magazine.currentAmmo--,console.log(`Burst shot ${this.currentBurstShot}! Magazine: ${this.myPlayer.actions.primary.magazine.currentAmmo}/${this.myPlayer.actions.primary.magazine.size}, Inventory: ${this.myPlayer.actions.primary.magazine.currentReserve}/${this.myPlayer.actions.primary.magazine.maxReserve}`),this.currentBurstShot>=e||0===this.myPlayer.actions.primary.magazine.currentAmmo?(this.isBurstActive=!1,this.currentBurstShot=0):this.nextBurstShotTime=t+this.myPlayer.actions.primary.burst.delay):(this.isBurstActive=!1,this.currentBurstShot=0)}}startBurst(){if(this.isBurstActive||this.myPlayer.stats.health.value<=0||this.isReloading)return;const t=Date.now();if(t<this.lastShotTime+this.myPlayer.actions.primary.buffer)return;this.lastShotTime=t;const e=this.myPlayer.actions.primary.burst.amount,s=Math.min(e,this.myPlayer.actions.primary.magazine.currentAmmo);if(0===s)return console.log("Out of ammo! Magazine empty."),void this.animateCharacterPart(this.userId,"WEAPON",{0:{x:0,y:8}},0,1);this.isBurstActive=!0,this.currentBurstShot=0,this.launchProjectile(),this.currentBurstShot++,this.myPlayer.actions.primary.magazine.currentAmmo--,this.myPlayer.actions.primary.burst.amount>1&&this.myPlayer.actions.primary.magazine.currentAmmo>0&&this.currentBurstShot<s?this.nextBurstShotTime=Date.now()+this.myPlayer.actions.primary.burst.delay:(this.isBurstActive=!1,this.currentBurstShot=0,0===this.myPlayer.actions.primary.magazine.currentAmmo&&this.animateCharacterPart(this.userId,"WEAPON",{0:{x:0,y:8}},0,1)),console.log(`Fired shot! Magazine: ${this.myPlayer.actions.primary.magazine.currentAmmo}/${this.myPlayer.actions.primary.magazine.size}, Inventory: ${this.myPlayer.actions.primary.magazine.currentReserve}/${this.myPlayer.actions.primary.magazine.maxReserve}`)}launchProjectile(){const t=this.mouseX-this.myPlayer.transform.pos.x,e=this.mouseY-this.myPlayer.transform.pos.y,s=Math.sqrt(t*t+e*e);if(0===s)return;const a=t/s,i=e/s;this.animateCharacterPart(this.userId,"WEAPON",{0:{x:0,y:0},.5:{x:0,y:20},1:{x:0,y:0}},175,1);const n=this.myPlayer.stats.size/4+this.myPlayer.actions.primary.projectile.size+this.myPlayer.actions.primary.offset,l=this.myPlayer.transform.pos.x+a*n,h=this.myPlayer.transform.pos.y+i*n,m=-i,c=a;this.createParticles(l,h,`muzzle_${Date.now()}`,r,{x:a,y:i}),this.createParticles(l-5,h-5,`shell_${Date.now()}`,o,{x:.8*m+-.2*a,y:.8*c+-.2*i});for(let t=0;t<this.myPlayer.actions.primary.projectile.amount;t++){const t=(Math.random()-.5)*(this.myPlayer.actions.primary.projectile.spread/100),e=Math.atan2(i,a)+t,s=u(e),r={id:d(),transform:{pos:{x:this.myPlayer.transform.pos.x+Math.cos(e)*n,y:this.myPlayer.transform.pos.y+Math.sin(e)*n},rot:e},timestamp:Date.now(),color:this.myPlayer.actions.primary.projectile.color,damage:this.myPlayer.actions.primary.projectile.damage,distanceTraveled:0,length:this.myPlayer.actions.primary.projectile.length,ownerId:this.userId,range:100*this.myPlayer.actions.primary.projectile.range,size:this.myPlayer.actions.primary.projectile.size,velocity:{x:s.x*this.myPlayer.actions.primary.projectile.speed,y:s.y*this.myPlayer.actions.primary.projectile.speed}};this.projectiles.set(r.id,r),this.roomManager.sendMessage(JSON.stringify({type:"projectile-launch",projectile:r}))}}updateProjectiles(){const t=[];this.projectiles.forEach((a,r)=>{a.transform.pos.x+=a.velocity.x,a.transform.pos.y+=a.velocity.y;const o=Math.sqrt(a.velocity.x*a.velocity.x+a.velocity.y*a.velocity.y);if(a.distanceTraveled+=o,this.myPlayer.stats.health.value>0){const e=a.transform.pos.x-this.myPlayer.transform.pos.x,o=a.transform.pos.y-this.myPlayer.transform.pos.y;if(Math.sqrt(e*e+o*o)<=this.myPlayer.stats.size/4+a.size){this.myPlayer.stats.health.value-=a.damage,g("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),t.push(r),this.createDecal(a.transform.pos.x,a.transform.pos.y,`blood_${r}`,s);const e={x:-a.velocity.x/Math.sqrt(a.velocity.x**2+a.velocity.y**2),y:-a.velocity.y/Math.sqrt(a.velocity.x**2+a.velocity.y**2)};this.createParticles(a.transform.pos.x,a.transform.pos.y,`blood_${r}`,i,e),this.createEmitter(this.userId,a.transform.pos.x,a.transform.pos.y),this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:this.userId,shooterId:a.ownerId,damage:a.damage,newHealth:this.myPlayer.stats.health.value,projectileId:r})),this.myPlayer.stats.health.value}}a.ownerId===this.userId&&this.players.forEach((e,o)=>{if(e.stats.health.value>0){const n=a.transform.pos.x-e.transform.pos.x,l=a.transform.pos.y-e.transform.pos.y;if(Math.sqrt(n*n+l*l)<=e.stats.size/4+a.size){t.push(r);const n=Math.max(0,e.stats.health.value-a.damage);e.stats.health.value=n,this.createDecal(a.transform.pos.x,a.transform.pos.y,`blood_${r}`,s);const l={x:-a.velocity.x/Math.sqrt(a.velocity.x**2+a.velocity.y**2),y:-a.velocity.y/Math.sqrt(a.velocity.x**2+a.velocity.y**2)};if(this.createParticles(a.transform.pos.x,a.transform.pos.y,`blood_${r}`,i,l),this.createEmitter(o,a.transform.pos.x,a.transform.pos.y),n<=0){console.log(`I killed ${o}!`);const t=this.leaderboard.get(this.userId);t&&t.kills++;const e=this.leaderboard.get(o);e&&e.deaths++,this.updateLeaderboardDisplay()}this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:o,shooterId:this.userId,damage:a.damage,newHealth:n,projectileId:r,wasKill:n<=0})),n<=0&&this.checkRoundEnd()}}}),(a.distanceTraveled>=a.range||a.transform.pos.x<0||a.transform.pos.x>l||a.transform.pos.y<0||a.transform.pos.y>h)&&(t.push(r),a.ownerId===this.userId&&(a.distanceTraveled>=a.range&&this.createDecal(a.transform.pos.x,a.transform.pos.y,`impact_${r}`,e),this.roomManager.sendMessage(JSON.stringify({type:"projectile-remove",projectileId:r}))))}),t.forEach(t=>{this.projectiles.delete(t)})}startReload(){this.canReload()&&(console.log(`Ammo: ${this.myPlayer.actions.primary.magazine.currentAmmo}, Inventory: ${this.myPlayer.actions.primary.magazine.currentReserve}`),this.isReloading=!0,this.reloadStartTime=Date.now(),this.isBurstActive=!1,this.currentBurstShot=0,this.animateCharacterPart(this.userId,"WEAPON",{0:{x:0,y:8}},0,1))}canReload(){return!this.isReloading&&this.myPlayer.actions.primary.magazine.currentAmmo<this.myPlayer.actions.primary.magazine.size&&this.myPlayer.actions.primary.magazine.currentReserve>0}initializePlayer(){return this.myPlayer={id:this.userId,transform:{pos:{x:770*Math.random()+m,y:570*Math.random()+m},rot:0},timestamp:Date.now(),color:"#"+Math.floor(16777215*Math.random()).toString(16).padStart(6,"0"),actions:{dash:{cooldown:t.ACTIONS.DASH.COOLDOWN,drain:t.ACTIONS.DASH.DRAIN,multiplier:t.ACTIONS.DASH.MULTIPLIER,time:t.ACTIONS.DASH.TIME},primary:{buffer:t.ACTIONS.PRIMARY.BUFFER,burst:{amount:t.ACTIONS.PRIMARY.BURST.AMOUNT,delay:t.ACTIONS.PRIMARY.BURST.DELAY},magazine:{currentAmmo:t.ACTIONS.PRIMARY.MAGAZINE.SIZE,currentReserve:t.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE,maxReserve:t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE,size:t.ACTIONS.PRIMARY.MAGAZINE.SIZE},offset:t.ACTIONS.PRIMARY.OFFSET,projectile:{amount:t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,color:t.ACTIONS.PRIMARY.PROJECTILE.COLOR,damage:t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,length:t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,range:t.ACTIONS.PRIMARY.PROJECTILE.RANGE,size:t.ACTIONS.PRIMARY.PROJECTILE.SIZE,speed:t.ACTIONS.PRIMARY.PROJECTILE.SPEED,spread:t.ACTIONS.PRIMARY.PROJECTILE.SPREAD,unique:t.ACTIONS.PRIMARY.PROJECTILE.UNIQUE},reload:{time:t.ACTIONS.PRIMARY.RELOAD.TIME}},sprint:{drain:t.ACTIONS.SPRINT.DRAIN,multiplier:t.ACTIONS.SPRINT.MULTIPLIER}},equipment:{crosshair:t.EQUIPMENT.CROSSHAIR},physics:{acceleration:t.PHYSICS.ACCELERATION,friction:t.PHYSICS.FRICTION},stats:{health:{max:t.STATS.HEALTH.MAX,value:t.STATS.HEALTH.MAX},luck:t.STATS.LUCK,size:t.STATS.SIZE,speed:t.STATS.SPEED,stamina:{max:t.STATS.STAMINA.MAX,recovery:{delay:t.STATS.STAMINA.RECOVERY.DELAY,rate:t.STATS.STAMINA.RECOVERY.RATE},value:t.STATS.STAMINA.MAX}}}}updatePlayerPosition(){if(!this.gameRunning||this.myPlayer.stats.health.value<=0)return;if(this.updateStamina(),this.updateDash(),this.checkCollisions(),this.isDashing){let t=this.myPlayer.transform.pos.x+this.playerVelocityX,e=this.myPlayer.transform.pos.y+this.playerVelocityY,s=!1;t>=m&&t<=785?(this.myPlayer.transform.pos.x=t,s=!0):(this.isDashing=!1,this.playerVelocityX=0),e>=m&&e<=585?(this.myPlayer.transform.pos.y=e,s=!0):(this.isDashing=!1,this.playerVelocityY=0);const a=Math.sqrt((this.myPlayer.transform.pos.x-this.lastSentX)**2+(this.myPlayer.transform.pos.y-this.lastSentY)**2);return void(s&&a>2&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot}})),this.lastSentX=this.myPlayer.transform.pos.x,this.lastSentY=this.myPlayer.transform.pos.y,this.lastSentRotation=this.myPlayer.transform.rot||0))}const{inputX:t,inputY:e}=this.getInput(),s=this.isSprinting&&this.myPlayer.stats.stamina.value>0&&this.isMoving()?this.myPlayer.stats.speed*this.myPlayer.actions.sprint.multiplier:this.myPlayer.stats.speed;this.isSprinting&&this.myPlayer.stats.stamina.value<=0&&(this.isSprinting=!1,console.log("Out of stamina, stopped sprinting"));const a=t*s,i=e*s;this.playerVelocityX+=(a-this.playerVelocityX)*this.myPlayer.physics.acceleration,this.playerVelocityY+=(i-this.playerVelocityY)*this.myPlayer.physics.acceleration,this.isMoving()||(this.playerVelocityX*=this.myPlayer.physics.friction,this.playerVelocityY*=this.myPlayer.physics.friction);let r=this.myPlayer.transform.pos.x+this.playerVelocityX,o=this.myPlayer.transform.pos.y+this.playerVelocityY,n=!1;r>=m&&r<=785?(this.myPlayer.transform.pos.x=r,n=!0):this.playerVelocityX=0,o>=m&&o<=585?(this.myPlayer.transform.pos.y=o,n=!0):this.playerVelocityY=0;const l=Math.sqrt((this.myPlayer.transform.pos.x-this.lastSentX)**2+(this.myPlayer.transform.pos.y-this.lastSentY)**2);n&&l>2&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot}})),this.lastSentX=this.myPlayer.transform.pos.x,this.lastSentY=this.myPlayer.transform.pos.y,this.lastSentRotation=this.myPlayer.transform.rot||0),Math.abs(this.playerVelocityX)<.01&&(this.playerVelocityX=0),Math.abs(this.playerVelocityY)<.01&&(this.playerVelocityY=0)}rotateCharacterPart(t,e){if(t===this.userId)this.myPlayer.transform.rot=e;else{const s=this.players.get(t);if(!s)return;s.transform.rot=e}}recordDeath(){console.log("I died! Waiting for round to end..."),this.resetPlayerState();const t=this.spawnAmmoBox(10);this.ammoBoxes.set(t.id,t);const e=this.spawnGore(this.myPlayer.transform.pos.x,this.myPlayer.transform.pos.y);e.forEach((t,e)=>{const s=`death_gore_${this.userId}_${Date.now()}_${e}`;this.stampGore(t),this.decals.set(s,{x:t.x,y:t.y,params:null})}),this.roomManager.sendMessage(JSON.stringify({type:"player-death",playerId:this.userId,ammoBox:t,gore:e}))}requestStamina(t){return this.myPlayer.stats.stamina.value<t?(console.log(`Insufficient stamina! Need: ${t}, Have: ${this.myPlayer.stats.stamina}`),!1):(this.myPlayer.stats.stamina.value-=t,this.isStaminaRecoveryBlocked=!0,this.staminaRecoveryBlockedUntil=Date.now()+this.myPlayer.stats.stamina.recovery.delay,console.log(`Stamina drained: -${t}, Remaining: ${this.myPlayer.stats.stamina}`),!0)}updateStamina(){const t=Date.now();if(this.isSprinting&&t>=this.lastStaminaDrainTime+100&&(this.requestStamina(this.myPlayer.actions.sprint.drain)||(this.isSprinting=!1,console.log("Out of stamina, stopped sprinting")),this.lastStaminaDrainTime=t),(!this.isStaminaRecoveryBlocked||t>=this.staminaRecoveryBlockedUntil)&&(this.isStaminaRecoveryBlocked=!1,this.myPlayer.stats.stamina.value<this.myPlayer.stats.stamina.max&&!this.isSprinting)){const t=this.myPlayer.stats.stamina.recovery.rate/1e3*16;this.myPlayer.stats.stamina.value=Math.min(this.myPlayer.stats.stamina.max,this.myPlayer.stats.stamina.value+t)}}checkCollisions(){const t=this.myPlayer.stats.size/4+5;this.ammoBoxes.forEach((e,s)=>{if(e.isOpen)return;const a=this.myPlayer.transform.pos.x-e.transform.pos.x,i=this.myPlayer.transform.pos.y-e.transform.pos.y;if(Math.sqrt(a*a+i*i)<=t){this.myPlayer.actions.primary.magazine.currentReserve=Math.min(this.myPlayer.actions.primary.magazine.maxReserve,this.myPlayer.actions.primary.magazine.currentReserve+e.ammoAmount),console.log(`Picked up ammo box! +${e.ammoAmount} bullets. Inventory: ${this.myPlayer.actions.primary.magazine.currentReserve}/${this.myPlayer.actions.primary.magazine.maxReserve}`);const t=Math.random()*Math.PI*2,a=2+3*Math.random();e.isOpen=!0,e.lid.velocity={x:Math.cos(t)*a,y:Math.sin(t)*a},e.lid.torque=.3*(Math.random()-.5),this.roomManager.sendMessage(JSON.stringify({type:"ammo-pickup",ammoBoxId:s,playerId:this.userId,boxState:{isOpen:!0,lid:e.lid}}))}})}getInput(){const t=y;let e=0,s=0;this.keys.has(t.MOVE_UP)&&(s-=1),this.keys.has(t.MOVE_DOWN)&&(s+=1),this.keys.has(t.MOVE_LEFT)&&(e-=1),this.keys.has(t.MOVE_RIGHT)&&(e+=1);const a=Math.sqrt(e*e+s*s);return a>0&&(e/=a,s/=a),{inputX:e,inputY:s,inputLength:a}}isMoving(){return this.getInput().inputLength>0}spawnGore(t,e){const s=[],a=2+Math.floor(4*Math.random()),i=[...N.GORE];for(let r=0;r<a&&i.length>0;r++){const a=Math.floor(Math.random()*i.length),r=i.splice(a,1)[0],o=Math.random()*Math.PI*2,n=Math.random()*this.myPlayer.stats.size;s.push({type:"gore",assetPath:r,x:t+Math.cos(o)*n,y:e+Math.sin(o)*n,rotation:Math.random()*Math.PI*2,scale:.65+.4*Math.random()})}const r=1+Math.floor(2*Math.random()),o=[...N.BLOOD];for(let a=0;a<r&&o.length>0;a++){const a=Math.floor(Math.random()*o.length),i=o.splice(a,1)[0],r=Math.random()*Math.PI*2,n=Math.random()*(.7*this.myPlayer.stats.size);s.push({type:"blood",assetPath:i,x:t+Math.cos(r)*n,y:e+Math.sin(r)*n,rotation:Math.random()*Math.PI*2,scale:1.25+.2*Math.random()})}return s}stampGore(t){if(!this.decalCtx)return;let e=this.characterImages.get(t.assetPath);if(!e&&(e=new Image,e.src=t.assetPath,this.characterImages.set(t.assetPath,e),!e.complete))return void(e.onload=()=>{this.stampGore(t)});if(!e.complete||0===e.naturalWidth)return;this.decalCtx.save(),this.decalCtx.translate(t.x,t.y),this.decalCtx.rotate(t.rotation);const s=32*t.scale;this.decalCtx.drawImage(e,-s/2,-s/2,s,s),this.decalCtx.restore()}resetPlayerState(){this.canShoot=!0,this.isBurstActive=!1,this.isReloading=!1,this.isSprinting=!1,this.isDashing=!1,this.isStaminaRecoveryBlocked=!1,this.playerVelocityX=0,this.playerVelocityY=0,this.dashStartTime=0,this.lastDashTime=0,this.reloadStartTime=0,this.lastShotTime=0,this.nextBurstShotTime=0,this.currentBurstShot=0,this.lastStaminaDrainTime=0,this.staminaRecoveryBlockedUntil=0}startDash(){if(this.isDashing||this.myPlayer.stats.health.value<=0||!this.isMoving())return;const t=Date.now();if(t<this.lastDashTime+this.myPlayer.actions.dash.cooldown)return void console.log("Dash on cooldown");let{inputX:e,inputY:s,inputLength:a}=this.getInput();if(!this.isMoving())return void console.log("No movement input for dash");if(e/=a,s/=a,!this.requestStamina(this.myPlayer.actions.dash.drain))return void console.log("Not enough stamina to dash");this.isDashing=!0,this.dashStartTime=t,this.lastDashTime=t;const i=this.myPlayer.stats.speed*this.myPlayer.actions.dash.multiplier;this.playerVelocityX=e*i,this.playerVelocityY=s*i,console.log(`Dashing! Speed: ${i}`)}updateDash(){this.isDashing&&Date.now()>=this.dashStartTime+this.myPlayer.actions.dash.time&&(this.isDashing=!1,console.log("Dash ended"))}showGameControls(t){this.updateDisplay("game",t)}startGame(){this.isHost&&(this.roomManager.sendMessage(JSON.stringify({type:"start-game"})),this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop())}startGameLoop(){this.gameRunning=!0,this.isRoundInProgress=!0,this.myPlayer.actions.primary.magazine.currentReserve=Math.floor(t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE/2),this.myPlayer.actions.primary.magazine.currentAmmo=this.myPlayer.actions.primary.magazine.size,this.isReloading=!1,this.initializePlayer(),this.createLeaderboard(),x(),this.crosshair&&this.toggleCrosshair(),this.roomManager.sendMessage(JSON.stringify({type:"player-state",id:this.myPlayer.id,transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot},timestamp:this.myPlayer.timestamp,color:this.myPlayer.color,actions:{dash:{cooldown:this.myPlayer.actions.dash.cooldown,drain:this.myPlayer.actions.dash.drain,multiplier:this.myPlayer.actions.dash.multiplier,time:this.myPlayer.actions.dash.time},primary:{buffer:this.myPlayer.actions.primary.buffer,burst:{amount:this.myPlayer.actions.primary.burst.amount,delay:this.myPlayer.actions.primary.burst.delay},magazine:{currentAmmo:this.myPlayer.actions.primary.magazine.currentAmmo,currentReserve:this.myPlayer.actions.primary.magazine.currentReserve,maxReserve:this.myPlayer.actions.primary.magazine.maxReserve,size:this.myPlayer.actions.primary.magazine.size},offset:this.myPlayer.actions.primary.offset,projectile:{amount:this.myPlayer.actions.primary.projectile.amount,color:this.myPlayer.actions.primary.projectile.color,damage:this.myPlayer.actions.primary.projectile.damage,length:this.myPlayer.actions.primary.projectile.length,range:this.myPlayer.actions.primary.projectile.range,size:this.myPlayer.actions.primary.projectile.size,speed:this.myPlayer.actions.primary.projectile.speed,spread:this.myPlayer.actions.primary.projectile.spread,unique:this.myPlayer.actions.primary.projectile.unique},reload:{time:this.myPlayer.actions.primary.reload.time}},sprint:{drain:this.myPlayer.actions.sprint.drain,multiplier:this.myPlayer.actions.sprint.multiplier}},equipment:{crosshair:this.myPlayer.equipment.crosshair},physics:{acceleration:this.myPlayer.physics.acceleration,friction:this.myPlayer.physics.friction},stats:{health:{max:this.myPlayer.stats.health.max,value:this.myPlayer.stats.health.value},luck:this.myPlayer.stats.luck,size:this.myPlayer.stats.size,speed:this.myPlayer.stats.speed,stamina:{max:this.myPlayer.stats.stamina.max,recovery:{delay:this.myPlayer.stats.stamina.recovery.delay,rate:this.myPlayer.stats.stamina.recovery.rate},value:this.myPlayer.stats.stamina.value}}})),this.gameLoop(),g("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),g("staminaBar",this.myPlayer.stats.stamina.value,this.myPlayer.stats.stamina.max)}gameLoop(){this.gameRunning&&this.ctx&&this.canvas&&this.decalCtx&&this.decalCanvas&&(this.gamePaused||(this.updatePlayerPosition(),this.updateAttack(),this.updateProjectiles(),this.updateParticles(),this.updateEmitters(),this.updateCharacterAnimations(),g("staminaBar",this.myPlayer.stats.stamina.value,this.myPlayer.stats.stamina.max),this.clearCtx(this.ctx),this.ctx.drawImage(this.decalCanvas,0,0),this.ctx.strokeStyle="#333",this.ctx.lineWidth=2,this.ctx.strokeRect(0,0,this.canvas.width,this.canvas.height),this.drawAmmoBoxes(),this.projectiles.forEach(t=>{this.drawProjectile(t)}),this.players.forEach(t=>{this.drawCharacter(t)}),this.drawCharacter(this.myPlayer,!0),this.drawParticles()),requestAnimationFrame(()=>this.gameLoop()))}pauseGame(){this.gameRunning&&(this.gamePaused=!0,console.log("Game paused"),this.keys.clear(),this.isSprinting=!1,this.isDashing=!1,this.isBurstActive=!1,this.currentBurstShot=0)}resumeGame(){this.gameRunning&&(this.gamePaused=!1,console.log("Game resumed"))}togglePause(){this.gameRunning&&(this.pausedPlayers.has(this.userId)?(this.pausedPlayers.delete(this.userId),this.roomManager.sendMessage(JSON.stringify({type:"player-unpause",userId:this.userId})),console.log("Requesting unpause...")):(this.pausedPlayers.add(this.userId),this.roomManager.sendMessage(JSON.stringify({type:"player-pause",userId:this.userId})),console.log("Requesting pause...")),this.updatePauseState())}updatePauseState(){const t=this.pausedPlayers.size>0;t&&!this.gamePaused?(this.pauseGame(),console.log(`Game paused. ${this.pausedPlayers.size} player(s) paused.`)):!t&&this.gamePaused&&(this.resumeGame(),console.log("Game resumed. All players unpaused."))}resetGameState(t){this.gameRunning=!1,this.isRoundInProgress=!1,this.gameWinner=null,this.roundWinner=null,"Room"===t&&(this.inLobby=!1,this.isHost=!1),this.players.clear(),this.projectiles.clear(),this.ammoBoxes.clear(),this.decals.clear(),this.particles.clear(),this.emitters.clear(),this.pausedPlayers.clear(),"Room"===t&&this.lobbyPlayers.clear(),this.clearCtx(),this.clearChat(),this.clearLeaderboard(),this.resetPlayerState(),this.initializePlayer(),x(),this.crosshair&&this.toggleCrosshair()}startUpgradePhase(t){console.log("Starting upgrade phase..."),this.togglePause(),t===this.userId?this.showWinnerWaitScreen():this.showUpgradeSelection()}showWinnerWaitScreen(){if(!this.upgradeContainer)return;this.upgradeContainer.innerHTML="";const t=document.createElement("div");t.className="upgrade_waiting",t.textContent="Waiting for other players...",this.upgradeContainer.appendChild(t),this.upgradeContainer.style.display="flex"}showWinnerContinueButton(){if(!this.upgradeContainer)return;this.upgradeContainer.innerHTML="";const t=document.createElement("div");t.className="upgrade_waiting",t.textContent="Upgrade phase complete.";const e=document.createElement("button");e.textContent="Continue",e.onclick=()=>{this.upgradeContainer&&(console.log("Winner pressed continue..."),this.upgradeContainer.style.display="none",this.roomManager.sendMessage(JSON.stringify({type:"upgrade-complete",userId:this.userId})))},this.upgradeContainer.appendChild(t),this.upgradeContainer.appendChild(e),this.upgradeContainer.style.display="flex"}showUpgradeSelection(){this.upgradeContainer&&(this.upgradeContainer.innerHTML="",function(){const t=S.filter(t=>!(t.unique&&M.has(t.id)||t.type===C.EQUIPMENT&&E.has(t.id))),e=[];for(let s=0;s<Math.min(3,t.length)&&0!==t.length;s++){const s=t.reduce((t,e)=>t+R[e.rarity].weight,0);let a=Math.random()*s,i=null;for(const e of t)if(a-=R[e.rarity].weight,a<=0){i=e;break}if(i){e.push(i);const s=t.indexOf(i);t.splice(s,1)}}return e}().forEach(t=>{const e=document.createElement("div");e.className="upgrade_card",e.setAttribute("data-rarity",t.rarity.toString());const s=document.createElement("div");s.className="upgrade_name",s.textContent=t.name;const a=document.createElement("div");a.className="upgrade_subtitle",a.textContent=t.subtitle,e.appendChild(s),e.appendChild(a),e.addEventListener("click",()=>{console.log("Selected upgrade: ",t.name),this.selectUpgrade(t.id)}),this.upgradeContainer&&this.upgradeContainer.appendChild(e)}),this.upgradeContainer.style.display="flex")}selectUpgrade(t){const e=function(t){const e=S.find(e=>e.id===t);return!(!e||e.unique&&M.has(t)||e.type===C.EQUIPMENT&&E.has(t)||(e.type===C.EQUIPMENT&&E.add(t),e.unique&&M.add(t),e.func(),0))}(t);e?("neural_target_interface"===t&&this.toggleCrosshair(),this.roomManager.sendMessage(JSON.stringify({type:"upgrade-taken",upgradeId:t,userId:this.userId,isUnique:S.find(e=>e.id===t)?.unique||!1})),this.upgradeContainer&&(this.upgradeContainer.style.display="none"),this.roomManager.sendMessage(JSON.stringify({type:"upgrade-complete",userId:this.userId})),console.log("Upgrade selected, waiting for others...")):console.error("Failed to apply upgrade")}toggleCrosshair(){this.crosshair&&(this.myPlayer.equipment.crosshair?(this.crosshair.style.display="block",console.log("Crosshair enabled")):(this.crosshair.style.display="none",console.log("Crosshair disabled")))}spawnAmmoBox(t){return{id:d(),transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot},timestamp:Date.now(),ammoAmount:t,isOpen:!1,lid:{pos:{x:0,y:0},rot:0,velocity:{x:0,y:0},torque:0}}}createLeaderboard(){console.log("Creating/updating leaderboard for all players");const t=new Set;t.add(this.userId),this.players.forEach((e,s)=>{t.add(s)}),this.lobbyPlayers.forEach((e,s)=>{t.add(s)}),t.forEach(t=>{this.leaderboard.has(t)||(this.leaderboard.set(t,{playerId:t,wins:0,kills:0,deaths:0}),console.log(`Created leaderboard entry for ${t}`))}),this.updateLeaderboardDisplay(),console.log("Leaderboard created/updated:",Array.from(this.leaderboard.entries()))}updateLeaderboardDisplay(){this.leaderboardBody&&(this.leaderboardBody.innerHTML="",Array.from(this.leaderboard.entries()).sort((t,e)=>{const[,s]=t,[,a]=e;return a.wins!==s.wins?a.wins-s.wins:a.kills-s.kills}).forEach(([t,e])=>{const s=document.createElement("tr");s.className="leaderboard_row",t===this.userId&&s.classList.add("current-player");const a=document.createElement("td");a.textContent=t===this.userId?"You":t.substring(0,8),a.className="player_name",s.appendChild(a);const i=document.createElement("td");i.textContent=e.wins.toString(),i.className="wins",s.appendChild(i);const r=document.createElement("td");r.textContent=e.kills.toString(),r.className="kills",s.appendChild(r);const o=document.createElement("td");o.textContent=e.deaths.toString(),o.className="deaths",s.appendChild(o),this.leaderboardBody&&this.leaderboardBody.appendChild(s)}))}clearLeaderboard(){this.leaderboard.clear(),this.leaderboardBody&&(this.leaderboardBody.innerHTML="")}drawCharacter(e,s=!1){if(!this.ctx)return;if(e.stats.health.value<=0)return;const a=L;this.drawCharacterLayer(e,"BODY",a.body),this.drawCharacterLayer(e,"WEAPON",a.weapon),this.drawCharacterLayer(e,"HEAD",a.head),this.drawCharacterLayer(e,"HEADWEAR",a.headwear),this.ctx.fillStyle="#fff",this.ctx.font="12px Arial",this.ctx.textAlign="center";const i=s?"You":e.id.substring(0,6);this.ctx.fillText(i,e.transform.pos.x,e.transform.pos.y-t.VISUAL.ID_DISPLAY_OFFSET)}drawCharacterLayer(t,e,s){if(!this.ctx)return;const a=function(t,e){switch(t){case"BODY":return T[e]||T.DEFAULT;case"WEAPON":return b[e]||b.GLOCK;case"HEAD":return v[e]||v.DEFAULT;case"HEADWEAR":return O[e]||O.DEFAULT;default:throw new Error(`Unknown character layer: ${t}`)}}(e,s);"string"==typeof a?this.drawCharacterPart(t,a,e):Array.isArray(a)&&a.forEach((s,a)=>{this.drawCharacterPart(t,s,e,a)})}drawCharacterPart(t,e,s,a){if(!this.ctx)return;let i=this.characterImages.get(e);if(!i&&(i=new Image,i.src=e,this.characterImages.set(e,i),!i.complete))return;if(!i.complete||0===i.naturalWidth)return;const r=t.stats.size/650*650,o=`${t.id}_${s}_${a||0}`,n=this.characterOffsets?.get(o)||{x:0,y:0};this.ctx.save(),void 0!==t.transform.rot?(this.ctx.translate(t.transform.pos.x,t.transform.pos.y),this.ctx.rotate(t.transform.rot),this.ctx.translate(n.x,n.y),this.ctx.drawImage(i,-r/2,-r/2,r,r)):this.ctx.drawImage(i,t.transform.pos.x-r/2+n.x,t.transform.pos.y-r/2+n.y,r,r),this.ctx.restore()}drawProjectile(t){if(!this.ctx)return;const e=Math.sqrt(t.velocity.x*t.velocity.x+t.velocity.y*t.velocity.y),s=t.velocity.x/e,a=t.velocity.y/e,i=t.transform.pos.x+s*(t.length/2),r=t.transform.pos.y+a*(t.length/2),o=t.transform.pos.x-s*(t.length/2),n=t.transform.pos.y-a*(t.length/2);this.ctx.fillStyle=t.color,this.ctx.strokeStyle=t.color,this.ctx.lineWidth=t.size,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(o,n),this.ctx.lineTo(i,r),this.ctx.stroke()}drawParticles(){this.ctx&&this.particles.forEach(t=>{const e=p(t.color);e&&this.ctx&&(this.ctx.save(),this.ctx.globalAlpha=t.opacity,0!==t.torque?(this.ctx.translate(t.x+t.size/2,t.y+t.size/2),this.ctx.rotate(t.rotation),this.ctx.fillStyle=`rgb(${e.r}, ${e.g}, ${e.b})`,this.ctx.fillRect(-t.size/2,-t.size/2,t.size,t.size)):(this.ctx.fillStyle=`rgb(${e.r}, ${e.g}, ${e.b})`,this.ctx.fillRect(Math.floor(t.x),Math.floor(t.y),t.size,t.size)),this.ctx.restore())})}drawAmmoBoxes(){this.ctx&&this.ammoBoxes.forEach(t=>{if(!this.ctx)return;this.ammoBoxImages||(this.ammoBoxImages={});const e=["BODY","BULLETS","LID"];if(e.forEach(t=>{if(!this.ammoBoxImages[t]){const e=new Image;e.src=n[t],this.ammoBoxImages[t]=e}}),!e.every(t=>this.ammoBoxImages[t]?.complete&&this.ammoBoxImages[t]?.naturalWidth>0))return;const s=35,a=t.transform.pos.x,i=t.transform.pos.y;t.isOpen&&(t.lid.velocity.x*=.85,t.lid.velocity.y*=.85,t.lid.torque*=.85,t.lid.pos.x+=t.lid.velocity.x,t.lid.pos.y+=t.lid.velocity.y,t.lid.rot+=t.lid.torque),this.ctx.save(),this.ctx.translate(a,i),this.ctx.rotate(t.transform.rot||0),this.ctx.drawImage(this.ammoBoxImages.BODY,-17.5,-17.5,s,s),t.isOpen||(this.ctx.drawImage(this.ammoBoxImages.BULLETS,-17.5,-17.5,s,s),this.ctx.drawImage(this.ammoBoxImages.LID,-17.5,-17.5,s,s)),this.ctx.restore(),t.isOpen&&(this.ctx.save(),this.ctx.translate(a+t.lid.pos.x,i+t.lid.pos.y),this.ctx.rotate((t.transform.rot||0)+t.lid.rot),this.ctx.drawImage(this.ammoBoxImages.LID,-17.5,-17.5,s,s),this.ctx.restore())})}clearCtx(t){t?t.clearRect(0,0,l,h):this.decalCtx&&this.ctx&&(this.ctx.clearRect(0,0,l,h),this.decalCtx.clearRect(0,0,l,h))}animateCharacterPart(t,e,s,a,i){const r=`${t}_${e}_${i||0}`;this.characterAnimations.set(r,{playerId:t,part:e,partIndex:i,frames:s,duration:a,startTime:Date.now(),originalOffset:{x:0,y:0}}),this.roomManager.sendMessage(JSON.stringify({type:"character-animation",playerId:t,part:e,partIndex:i,frames:s,duration:a}))}updateCharacterAnimations(){const t=[],e=Date.now();this.characterAnimations.forEach((s,a)=>{const i=(e-s.startTime)/s.duration;if(0!==s.duration&&i>=1)return void t.push(a);const r=Object.keys(s.frames).map(Number).sort((t,e)=>t-e);let o,n,l=0;for(let t=0;t<r.length-1;t++){const e=r[t],s=r[t+1];if(i>=e&&i<s){l=t;break}}if(i>=1){const t=s.frames[r[r.length-1]];o=t.x,n=t.y}else{const t=s.frames[r[l]],e=s.frames[r[l+1]]||t,a=(i-r[l])/(r[l+1]-r[l])||0;o=t.x+(e.x-t.x)*a,n=t.y+(e.y-t.y)*a}this.characterOffsets.set(a,{x:o,y:n})}),t.forEach(t=>{this.characterAnimations.delete(t),this.characterOffsets&&this.characterOffsets.delete(t)})}createDecal(t,s,a,i=e){if(!this.decalCtx)return;if(t<0||t>l||s<0||s>h)return;const r=i.RADIUS.MIN+Math.random()*(i.RADIUS.MAX-i.RADIUS.MIN),o=i.DENSITY.MIN+Math.random()*(i.DENSITY.MAX-i.DENSITY.MIN),n=i.OPACITY.MIN+Math.random()*(i.OPACITY.MAX-i.OPACITY.MIN),m=Math.floor(r*r*Math.PI*o),c=p(i.COLOR);if(c){this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over";for(let e=0;e<m;e++){const e=Math.random()*Math.PI*2,a=Math.random()*r,o=t+Math.cos(e)*a,m=s+Math.sin(e)*a;if(o<0||o>=l||m<0||m>=h)continue;const y=n+(Math.random()-.5)*i.VARIATION,d=Math.max(.05,Math.min(.6,y));this.decalCtx.fillStyle=`rgba(${c.r}, ${c.g}, ${c.b}, ${d})`,this.decalCtx.fillRect(Math.floor(o),Math.floor(m),1,1)}this.decalCtx.restore(),this.decals.set(a,{x:t,y:s,params:i}),this.roomManager.sendMessage(JSON.stringify({type:"add-decal",decalId:a,x:t,y:s,params:i}))}else console.error(`Invalid hex color: ${i.COLOR}`)}applyDecal(t,e,s,a){if(!this.decalCtx)return;if(this.decals.has(s))return;if(t<0||t>l||e<0||e>h)return;const i=a.RADIUS.MIN+Math.random()*(a.RADIUS.MAX-a.RADIUS.MIN),r=a.DENSITY.MIN+Math.random()*(a.DENSITY.MAX-a.DENSITY.MIN),o=a.OPACITY.MIN+Math.random()*(a.OPACITY.MAX-a.OPACITY.MIN),n=Math.floor(i*i*Math.PI*r),m=p(a.COLOR);if(m){this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over";for(let s=0;s<n;s++){const s=Math.random()*Math.PI*2,r=Math.random()*i,n=t+Math.cos(s)*r,c=e+Math.sin(s)*r;if(n<0||n>=l||c<0||c>=h)continue;const y=o+(Math.random()-.5)*a.VARIATION,d=Math.max(.05,Math.min(.6,y));this.decalCtx.fillStyle=`rgba(${m.r}, ${m.g}, ${m.b}, ${d})`,this.decalCtx.fillRect(Math.floor(n),Math.floor(c),1,1)}this.decalCtx.restore(),this.decals.set(s,{x:t,y:e,params:a})}else console.error(`Invalid hex color: ${a.COLOR}`)}createParticles(t,e,s,a,i){const r=Math.floor(a.COUNT.MIN+Math.random()*(a.COUNT.MAX-a.COUNT.MIN)),o=[];for(let n=0;n<r;n++){const r=a.LIFETIME.MIN+Math.random()*(a.LIFETIME.MAX-a.LIFETIME.MIN),l=a.SPEED.MIN+Math.random()*(a.SPEED.MAX-a.SPEED.MIN),h=a.SIZE.MIN+Math.random()*(a.SIZE.MAX-a.SIZE.MIN),m=a.OPACITY.MIN+Math.random()*(a.OPACITY.MAX-a.OPACITY.MIN),c=a.TORQUE.MIN+Math.random()*(a.TORQUE.MAX-a.TORQUE.MIN);let y;y=i?Math.atan2(i.y,i.x)+(Math.random()-.5)*a.SPREAD:Math.random()*Math.PI*2;const d={lifetime:r,speed:l,size:h,opacity:m,torque:c,angle:y,velocityX:Math.cos(y)*l,velocityY:Math.sin(y)*l,rotation:Math.random()*Math.PI*2},p={id:`${s}_${n}`,x:t,y:e,velocityX:d.velocityX,velocityY:d.velocityY,size:d.size,opacity:d.opacity,maxOpacity:d.opacity,color:a.COLOR,lifetime:d.lifetime,age:0,collide:a.COLLIDE,fade:a.FADE,paint:a.PAINT,stain:a.STAIN,torque:d.torque,rotation:d.rotation,hasCollided:!1};this.particles.set(p.id,p),o.push(d)}this.roomManager.sendMessage(JSON.stringify({type:"add-particles",particleId:s,x:t,y:e,particleData:o,color:a.COLOR,collide:a.COLLIDE,fade:a.FADE}))}applyParticles(t,e,s,a,i,r,o){a.forEach((a,n)=>{const l={id:`${s}_${n}`,x:t,y:e,velocityX:a.velocityX,velocityY:a.velocityY,size:a.size,opacity:a.opacity,maxOpacity:a.opacity,color:i,lifetime:a.lifetime,age:0,collide:r,fade:o,paint:!1,stain:a.stain,torque:a.torque,rotation:a.rotation,hasCollided:!1};this.particles.set(l.id,l)})}updateParticles(){const t=[];this.particles.forEach((e,s)=>{if(e.x+=e.velocityX,e.y+=e.velocityY,e.age+=16,e.rotation+=e.torque*Math.PI/180/60,e.fade){const t=e.age/e.lifetime;e.opacity=e.maxOpacity*(1-t)}if(e.hasCollided&&e.stain){this.stampParticle(e.x,e.y,`stain_${s}_${Date.now()}`,e);const t=(e.age-(e.lifetime-.5*e.lifetime))/(.5*e.lifetime);t>0&&(e.size=Math.max(.5,e.size*(1-.1*t)),e.opacity=e.opacity*(1-t))}if(e.age>=e.lifetime||e.x<-10||e.x>810||e.y<-10||e.y>610){if(e.collide&&e.age>=e.lifetime&&e.x>=0&&e.x<=l&&e.y>=0&&e.y<=h&&!e.hasCollided){e.hasCollided=!0;const t=.875+.1*Math.random();e.velocityX*=1-t,e.velocityY*=1-t;const s=.5*e.lifetime;return void(e.lifetime+=s)}e.paint&&!e.stain&&e.age>=e.lifetime&&e.x>=0&&e.x<=l&&e.y>=0&&e.y<=h&&this.stampParticle(e.x,e.y,`stamp_${s}`,e),t.push(s)}}),t.forEach(t=>this.particles.delete(t))}stampParticle(t,e,s,a){if(!this.decalCtx)return;const i=p(a.color);i&&(this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over",0!==a.torque?(this.decalCtx.translate(a.x+a.size/2,a.y+a.size/2),this.decalCtx.rotate(a.rotation),this.decalCtx.fillStyle=`rgba(${i.r}, ${i.g}, ${i.b}, ${a.opacity})`,this.decalCtx.fillRect(-a.size/2,-a.size/2,a.size,a.size)):(this.decalCtx.fillStyle=`rgba(${i.r}, ${i.g}, ${i.b}, ${a.opacity})`,this.decalCtx.fillRect(Math.floor(a.x),Math.floor(a.y),a.size,a.size)),this.decalCtx.restore(),this.decals.set(s,{x:a.x,y:a.y,params:null}),this.roomManager.sendMessage(JSON.stringify({type:"particle-stamp",stampId:s,x:a.x,y:a.y,color:a.color,opacity:a.opacity,size:a.size,rotation:a.rotation,torque:a.torque})))}applyParticleStamp(t,e,s,a,i,r,o,n){if(!this.decalCtx)return;if(this.decals.has(s))return;const l=p(a);l&&(this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over",void 0!==o&&void 0!==n&&0!==n?(this.decalCtx.translate(t+r/2,e+r/2),this.decalCtx.rotate(o),this.decalCtx.fillStyle=`rgba(${l.r}, ${l.g}, ${l.b}, ${i})`,this.decalCtx.fillRect(-r/2,-r/2,r,r)):(this.decalCtx.fillStyle=`rgba(${l.r}, ${l.g}, ${l.b}, ${i})`,this.decalCtx.fillRect(Math.floor(t),Math.floor(e),r,r)),this.decalCtx.restore(),this.decals.set(s,{x:t,y:e,params:null}))}createEmitter(t,e,s){const a=t===this.userId?this.myPlayer:this.players.get(t);if(!a)return;const i=e-a.transform.pos.x,r=s-a.transform.pos.y,o=Math.atan2(r,i),n=`particle_emitter_${t}_${Date.now()}`,l=1e3+2e3*Math.random();this.emitters.set(n,{playerId:t,offsetX:i,offsetY:r,direction:o,lifetime:l,age:0,lastEmission:0,emissionInterval:200+300*Math.random()}),this.roomManager.sendMessage(JSON.stringify({type:"particle-emitter",emitterId:n,playerId:t,offsetX:i,offsetY:r,direction:o,lifetime:l})),console.log(`Emitter created on ${t} for ${l}ms`)}updateEmitters(){const t=[];this.emitters.forEach((e,i)=>{e.age+=16;const r=e.playerId===this.userId?this.myPlayer:this.players.get(e.playerId);if(!r||r.stats.health.value<=0)return void t.push(i);const o=r.transform.pos.x+e.offsetX,n=r.transform.pos.y+e.offsetY;if(e.age>=e.lastEmission+e.emissionInterval){const t=.6*Math.PI,s=(Math.random()-.5)*t,r=e.direction+s,l=3,h=4*(Math.random()-.5),m=Math.max(.5,l+h);this.createParticles(o+8*(Math.random()-.5),n+8*(Math.random()-.5),`blood_splatter_${i}_${e.age}`,a,{x:Math.cos(r)*m,y:Math.sin(r)*m}),e.lastEmission=e.age,e.emissionInterval=120+180*Math.random()}e.age>=e.lifetime&&(this.createDecal(o,n,`emitter_decal_${i}`,s),t.push(i))}),t.forEach(t=>this.emitters.delete(t))}showJoinRoomModal(){if(!(this.modal&&this.modalInput&&this.modalConfirmButton&&this.modalCancelButton&&this.modalErrorDiv))return;this.modal.classList.remove("hidden"),this.modalInput.value="",this.modalErrorDiv.textContent="",this.modalInput.focus();const t=()=>{this.modal&&this.modalInput&&this.modalConfirmButton&&this.modalCancelButton&&this.modalErrorDiv&&(this.modal.classList.add("hidden"),this.modalConfirmButton.onclick=null,this.modalCancelButton.onclick=null,this.modalInput.onkeydown=null)};this.modalConfirmButton.onclick=()=>{if(!this.modalInput||!this.modalErrorDiv)return;const e=this.modalInput.value.trim();if(!e)return void(this.modalErrorDiv.textContent="Invalid code...");let s=null;try{const t=new URL(e,window.location.origin);s=t.pathname.startsWith("/room_")?t.pathname.replace("/","").replace("/",""):new URLSearchParams(t.search).get("room")}catch{e.startsWith("room_")&&(s=e)}s?(t(),this.joinRoomById(s)):this.modalErrorDiv.textContent="Invalid code..."},this.modalCancelButton.onclick=t,this.modalInput.onkeydown=e=>{"Enter"===e.key&&this.modalConfirmButton&&this.modalConfirmButton.click(),"Escape"===e.key&&t()}}updateLobbyPlayersList(){this.lobbyPlayersList&&(this.lobbyPlayersList.innerHTML="",Array.from(this.lobbyPlayers.values()).sort((t,e)=>t.isHost&&!e.isHost?-1:!t.isHost&&e.isHost?1:0).forEach(t=>{const e=document.createElement("div");e.className="lobby_player";const s=document.createElement("div");s.className="player_color",s.style.backgroundColor=t.color;const a=document.createElement("div");a.className="player_name",a.textContent=`${t.id}${t.isHost?" (Host)":""}`;const i=document.createElement("div");if(i.className="player_controls",this.isHost&&t.id!==this.userId){const e=document.createElement("button");e.textContent="Promote",e.onclick=()=>this.promotePlayer(t.id);const s=document.createElement("button");s.textContent="Kick",s.className="danger",s.onclick=()=>this.kickPlayer(t.id),i.appendChild(e),i.appendChild(s)}e.appendChild(s),e.appendChild(a),e.appendChild(i),this.lobbyPlayersList&&this.lobbyPlayersList.appendChild(e)}))}updateDisplay(t,e){if(this.roomControls&&this.lobbyContainer&&this.gameContainer&&this.chatContainer&&this.leaderboardContainer)switch(this.clearDisplay(),t){case"lobby":this.lobbyContainer.style.display="flex",this.chatContainer.style.display="flex",e&&this.roomIdDisplay&&(this.roomIdDisplay.textContent=e),this.inLobby=!0;break;case"room":this.roomControls.style.display="flex";break;case"game":if(this.gameContainer.style.display="flex",this.chatContainer.style.display="flex",this.leaderboardContainer.style.display="flex",e){const t=this.gameRoomIdDisplay;t&&(t.textContent=e)}this.inLobby=!1}}updateHostDisplay(){this.startGameBtn&&this.gameOptionsContainer&&(this.startGameBtn.style.display=this.isHost?"block":"none",this.startGameBtn.disabled=this.lobbyPlayers.size<1,this.gameOptionsContainer.style.display=this.isHost?"flex":"none")}clearDisplay(){this.roomControls&&this.lobbyContainer&&this.gameContainer&&this.chatContainer&&this.leaderboardContainer&&this.upgradeContainer&&(this.roomControls.style.display="none",this.lobbyContainer.style.display="none",this.gameContainer.style.display="none",this.chatContainer.style.display="none",this.leaderboardContainer.style.display="none",this.upgradeContainer.style.display="none")}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{new B}):new B})();