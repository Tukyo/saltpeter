{"version":3,"file":"app.js","mappings":"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","sources":["webpack://saltpeter/./src/client/upgrades/unique/ sync ^\\.\\/.*\\/.*$","webpack://saltpeter/./src/client/upgrades/unique/spatialtargeting/spatialtargeting.ts","webpack://saltpeter/./src/client/upgrades/unique/phoenixmodule/phoenixmodule.ts","webpack://saltpeter/./src/client/upgrades/resource/ sync ^\\.\\/.*\\/.*$","webpack://saltpeter/./src/client/Types.ts","webpack://saltpeter/./src/client/upgrades/stats/hemoglobinsaturator/hemoglobinsaturator.ts","webpack://saltpeter/./src/client/upgrades/stats/locomotionmodule/locomotionmodule.ts","webpack://saltpeter/./src/client/upgrades/unique/clustermodule/clustermodule.ts","webpack://saltpeter/./src/client/upgrades/unique/muzzlesplitter/muzzlesplitter.ts","webpack://saltpeter/./src/client/upgrades/unique/spectralimage/spectralimage.ts","webpack://saltpeter/./src/client/upgrades/stats/bioregulator/bioregulator.ts","webpack://saltpeter/./src/client/upgrades/stats/damagebuffer/damagebuffer.ts","webpack://saltpeter/./src/client/upgrades/equipment/switch/switch.ts","webpack://saltpeter/./src/client/upgrades/unique/kineticbrain/kineticbrain.ts","webpack://saltpeter/./src/client/upgrades/resource/carepackage/carepackage.ts","webpack://saltpeter/./src/client/upgrades/unique/projectilearray/projectilearray.ts","webpack://saltpeter/./src/client/upgrades/stats/ sync ^\\.\\/.*\\/.*$","webpack://saltpeter/./src/client/upgrades/equipment/ sync ^\\.\\/.*\\/.*$","webpack://saltpeter/webpack/bootstrap","webpack://saltpeter/webpack/runtime/define property getters","webpack://saltpeter/webpack/runtime/hasOwnProperty shorthand","webpack://saltpeter/webpack/runtime/make namespace object","webpack://saltpeter/./src/client/Config.ts","webpack://saltpeter/./src/client/Admin.ts","webpack://saltpeter/./src/client/Animator.ts","webpack://saltpeter/./src/client/AudioPool.ts","webpack://saltpeter/./src/client/AudioManager.ts","webpack://saltpeter/./src/client/CacheManager.ts","webpack://saltpeter/./src/client/CharacterConfig.ts","webpack://saltpeter/./src/client/CharacterManager.ts","webpack://saltpeter/./src/client/ChatManager.ts","webpack://saltpeter/./src/client/ControlsManager.ts","webpack://saltpeter/./src/client/CollisionsManager.ts","webpack://saltpeter/./src/client/DecalsManager.ts","webpack://saltpeter/./src/client/EventsManager.ts","webpack://saltpeter/./src/client/GameState.ts","webpack://saltpeter/./src/client/LobbyManager.ts","webpack://saltpeter/./src/client/ParticlesManager.ts","webpack://saltpeter/./src/client/RenderingManager.ts","webpack://saltpeter/./src/client/RoomController.ts","webpack://saltpeter/./src/client/RoomManager.ts","webpack://saltpeter/./src/client/SettingsManager.ts","webpack://saltpeter/./src/client/upgrades/equipment/index.ts","webpack://saltpeter/./src/client/upgrades/index.ts","webpack://saltpeter/./src/client/upgrades/resource/index.ts","webpack://saltpeter/./src/client/upgrades/stats/index.ts","webpack://saltpeter/./src/client/upgrades/unique/index.ts","webpack://saltpeter/./src/client/UpgradeManager.ts","webpack://saltpeter/./src/client/player/AmmoReservesUIController.ts","webpack://saltpeter/./src/client/UserInterface.ts","webpack://saltpeter/./src/client/Utility.ts","webpack://saltpeter/./src/client/WebsocketManager.ts","webpack://saltpeter/./src/client/player/CombatController.ts","webpack://saltpeter/./src/client/player/DashController.ts","webpack://saltpeter/./src/client/player/LuckController.ts","webpack://saltpeter/./src/client/player/MoveController.ts","webpack://saltpeter/./src/client/ObjectsManager.ts","webpack://saltpeter/./src/client/player/PlayerController.ts","webpack://saltpeter/./src/client/player/PlayerState.ts","webpack://saltpeter/./src/client/player/StaminaController.ts","webpack://saltpeter/./src/client/client.ts"],"sourcesContent":["var map = {\n\t\"./clustermodule/clustermodule\": 224,\n\t\"./clustermodule/clustermodule.ts\": 224,\n\t\"./kineticbrain/kineticbrain\": 748,\n\t\"./kineticbrain/kineticbrain.ts\": 748,\n\t\"./muzzlesplitter/muzzlesplitter\": 358,\n\t\"./muzzlesplitter/muzzlesplitter.ts\": 358,\n\t\"./phoenixmodule/phoenixmodule\": 96,\n\t\"./phoenixmodule/phoenixmodule.ts\": 96,\n\t\"./projectilearray/projectilearray\": 800,\n\t\"./projectilearray/projectilearray.ts\": 800,\n\t\"./spatialtargeting/spatialtargeting\": 88,\n\t\"./spatialtargeting/spatialtargeting.ts\": 88,\n\t\"./spectralimage/spectralimage\": 368,\n\t\"./spectralimage/spectralimage.ts\": 368\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 65;","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Allows player's rotation to slightly influence projectile direction.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"spatial_targeting\",\r\n        name: \"Spatial Targeting\",\r\n        subtitle: \"Projectile upgrade that syncs its spatial awareness with the user.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/spatialtargeting.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.SUPERIOR,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('spatial_targeting')) {\r\n                player.unique.push('spatial_targeting');\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based * 1.5, on death chance to trigger.\r\n// One-time use, double damage received permanently on trigger.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"phoenix_module\",\r\n        name: \"Phoenix Module\",\r\n        subtitle: \"Return from the flames with vengeance.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/phoenixmodule.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.LEGENDARY,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('phoenix_module')) {\r\n                player.unique.push('phoenix_module');\r\n            }\r\n        }\r\n    };\r\n}","var map = {\n\t\"./carepackage/carepackage\": 751,\n\t\"./carepackage/carepackage.ts\": 751\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 136;","import { DECALS, PARTICLES } from \"./Config\";\r\n\r\nimport { LobbyManager } from \"./LobbyManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\n// #region [ Core ]\r\n//\r\n/**\r\n * Represents a 2D vector with x and y coordinates.\r\n */\r\nexport type Vec2 = { x: number, y: number }\r\n\r\n/**\r\n * Represents an object's position and rotation in 2D space.\r\n */\r\nexport type Transform = {\r\n  pos: Vec2;\r\n  rot: number;\r\n}\r\n\r\n/**\r\n * Represents a directional relationship between two points in 2D space.\r\n */\r\nexport type Direction = { rootPos: Vec2; targetPos: Vec2; };\r\n//\r\n// #endregion\r\n\r\n// #region [ Game Object ]\r\n/**\r\n * Base interface for all game world entities.\r\n * Includes a unique ID, transform data, and a timestamp for synchronization.\r\n */\r\nexport interface GameObject {\r\n  id: string;\r\n  transform: Transform;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * All gameobject types.\r\n */\r\nexport type ObjectType = 'AmmoBox' | 'Player' | 'Projectile';\r\n\r\n/**\r\n * Mapping definition for stored player objects.\r\n */\r\nexport type Players = Map<string, Player>;\r\n\r\n/**\r\n * Full representation of the player object. Extends GameObject.\r\n */\r\nexport interface Player extends GameObject {\r\n  actions: {\r\n    dash: {\r\n      drain: number;\r\n      cooldown: number;\r\n      multiplier: number;\r\n      time: number;\r\n    }\r\n    melee: {\r\n      cooldown: number;\r\n      damage: number;\r\n      duration: number;\r\n      range: number;\r\n      size: number;\r\n    }\r\n    primary: {\r\n      buffer: number;\r\n      burst: {\r\n        amount: number;\r\n        delay: number;\r\n      }\r\n      magazine: {\r\n        currentAmmo: number;\r\n        currentReserve: number;\r\n        maxReserve: number;\r\n        size: number;\r\n      }\r\n      offset: number;\r\n      projectile: {\r\n        amount: number;\r\n        color: string;\r\n        damage: number;\r\n        length: number;\r\n        range: number;\r\n        size: number;\r\n        speed: number;\r\n        spread: number;\r\n      }\r\n      reload: { time: number; }\r\n    }\r\n    sprint: {\r\n      drain: number;\r\n      multiplier: number;\r\n    }\r\n  }\r\n  color: string;\r\n  equipment: string[],\r\n  flags: {\r\n    hidden: boolean;\r\n    invulnerable: boolean;\r\n  }\r\n  physics: {\r\n    acceleration: number;\r\n    friction: number;\r\n  }\r\n  rig: {\r\n    body: string;\r\n    head: string;\r\n    headwear: string;\r\n    weapon: string;\r\n  }\r\n  stats: {\r\n    defense: number;\r\n    health: {\r\n      max: number;\r\n      value: number;\r\n    }\r\n    luck: number;\r\n    size: number;\r\n    speed: number;\r\n    stamina: {\r\n      max: number;\r\n      recovery: {\r\n        delay: number;\r\n        rate: number;\r\n      }\r\n      value: number;\r\n    }\r\n  }\r\n  unique: string[];\r\n}\r\n\r\nexport interface Projectile extends GameObject {\r\n  color: string;\r\n  damage: number;\r\n  distanceTraveled: number;\r\n  length: number;\r\n  ownerId: string;\r\n  range: number;\r\n  size: number;\r\n  velocity: Vec2;\r\n}\r\n\r\nexport type ProjectileOverrides = {\r\n  canTriggerUnique?: boolean;\r\n  bypassDefault?: boolean;\r\n  color?: string;\r\n  damage?: number;\r\n  length?: number;\r\n  range?: number;\r\n  size?: number;\r\n  speed?: number;\r\n  spread?: number;\r\n  amount?: number;\r\n};\r\n\r\nexport interface AmmoBox extends GameObject {\r\n  ammoAmount: number;\r\n  isOpen: boolean;\r\n  lid: {\r\n    pos: Vec2;\r\n    rot: number;\r\n    velocity: Vec2;\r\n    torque: number;\r\n  };\r\n}\r\n\r\nexport interface SpawnObjectParams {\r\n  transform: Transform;\r\n  type: ObjectType;\r\n  data?: any;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Animation ]\r\n//\r\nexport interface AnimationParams {\r\n  playerId: string;\r\n  part: string;\r\n  frames: { [key: number]: { x: number, y: number } };\r\n  duration: number;\r\n  partIndex?: number;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Audio ]\r\n//\r\nexport interface AudioParams {\r\n  delay?: {\r\n    min: number;\r\n    max: number;\r\n  }\r\n  listener: Vec2;\r\n  loop?: boolean;\r\n  output?: string;\r\n  priority?: number;\r\n  pitch?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  spatial?: {\r\n    blend?: number;\r\n    pos?: Vec2;\r\n    rolloff?: {\r\n      distance: number;\r\n      factor: number;\r\n      type?: 'linear' | 'logarithmic';\r\n    }\r\n  }\r\n  src: string;\r\n  volume?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Lobby & Room ]\r\n//\r\nexport type ResetType = 'Room' | 'Lobby'\r\n\r\nexport interface RoomMessage {\r\n  type: 'join-room' | 'create-room' | 'leave-room' | 'room-message' | 'room-created' | 'room-joined' | 'room-joined-game' | 'room-error' | 'user-joined' | 'user-left';\r\n  roomId?: string;\r\n  userId: string;\r\n  message?: string;\r\n  data?: any;\r\n  gameActive?: boolean;\r\n}\r\n\r\nexport interface LobbyPlayer {\r\n  id: string;\r\n  color: string;\r\n  isHost: boolean;\r\n}\r\n\r\nexport type LobbyControlsParams = {\r\n  lobby: LobbyManager;\r\n  lobbyOptions: LobbyOptionsParams;\r\n  myPlayer: Player;\r\n  roomId: string;\r\n  userId: string;\r\n}\r\n\r\nexport type LobbyOptionsParams = {\r\n  maxPlayers: number;\r\n  maxWins: number;\r\n  isHost: boolean;\r\n  privateRoom: boolean;\r\n  upgradesEnabled: boolean;\r\n}\r\n\r\nexport type ChatMessage = {\r\n    senderId: string;\r\n    message: string;\r\n    isOwn?: boolean;\r\n};\r\n//\r\n// #endregion\r\n\r\n// #region [ Settings ]\r\n//\r\nexport interface GameSettings {\r\n  audio: {\r\n    mixer: {\r\n      master: number;\r\n      interface: number;\r\n      music: number;\r\n      sfx: number;\r\n      voice: number;\r\n    }\r\n  }\r\n  controls: {\r\n    keybinds: {\r\n      attack: string;\r\n      dash: string;\r\n      melee: string;\r\n      moveDown: string;\r\n      moveLeft: string;\r\n      moveRight: string;\r\n      moveUp: string;\r\n      reload: string;\r\n      sprint: string;\r\n    },\r\n    gamepad: {\r\n      attack: number;\r\n      dash: number;\r\n      deadzone: number;\r\n      melee: number;\r\n      reload: number;\r\n      sprint: number;\r\n    }\r\n  }\r\n  graphics: {\r\n    physics: {\r\n      ammoReserves: boolean;\r\n    }\r\n    renderBackgroundParticles: boolean;\r\n    showStaticOverlay: boolean;\r\n  }\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Params ]\r\n//\r\nexport type RandomColorParams = {\r\n  format: 'hex' | 'rgb';\r\n  mode: 'any' | 'primary' | 'pastel' | 'vibrant' | 'dark' | 'light' | 'grayscale';\r\n\r\n}\r\n\r\nexport type SetInputParams = {\r\n  inputId: string;\r\n  value: number;\r\n}\r\n\r\nexport type SetSliderParams = {\r\n  sliderId: string;\r\n  targetValue: number;\r\n  maxValue: number;\r\n  lerpTime?: number;\r\n}\r\n\r\nexport type SetSpanParams = {\r\n  spanId: string;\r\n  value: string | number;\r\n}\r\n\r\nexport type SetToggleParams = {\r\n  toggleId: string;\r\n  value: boolean;\r\n}\r\n\r\nexport type PlayerHitParams = {\r\n    target: Player;\r\n    shooterId: string;\r\n    damage: number;\r\n    newHealth: number;\r\n    source: Projectile | ShrapnelPiece;\r\n    wasKill: boolean;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Leaderboard ]\r\n//\r\nexport interface LeaderboardEntry {\r\n  playerId: string;\r\n  kills: number;\r\n  deaths: number;\r\n  wins: number;\r\n}\r\n\r\nexport type Leaderboard = Map<string, LeaderboardEntry>;\r\n//\r\n// #endregion\r\n\r\n// #region [ Combat ]\r\n//\r\nexport type AttackType = 'melee' | 'ranged';\r\n//\r\n// #endregion\r\n\r\n// #region [ Visual ]\r\n//\r\nexport type CharacterAnimation = Map<string, {\r\n  playerId: string;\r\n  part: string;\r\n  partIndex?: number;\r\n  frames: { [key: number]: { x: number, y: number } };\r\n  duration: number;\r\n  startTime: number;\r\n  originalOffset: { x: number, y: number };\r\n}>\r\n\r\nexport type Particle = {\r\n  age: number;\r\n  collide: boolean;\r\n  color: string;\r\n  fade: boolean;\r\n  hasCollided: boolean;\r\n  id: string;\r\n  initialSize: number;\r\n  lifetime: number;\r\n  maxOpacity: number;\r\n  noiseStrength: number;\r\n  noiseScale: number;\r\n  opacity: number;\r\n  paint: boolean;\r\n  pos: Vec2;\r\n  rotation: number;\r\n  size: number;\r\n  sizeOverLifetime: number;\r\n  stain: boolean;\r\n  torque: number;\r\n  velocity: Vec2\r\n}\r\n\r\nexport type EmitterParams = {\r\n  type?: string;\r\n  id: string;\r\n  interval: number;\r\n  lifetime: number;\r\n  offset: Vec2;\r\n  playerId: string;\r\n  pos: Vec2;\r\n  particleType: typeof PARTICLES[keyof typeof PARTICLES];\r\n}\r\n\r\nexport type Emitter = {\r\n  age: number;\r\n  direction: number;\r\n  emissionInterval: number;\r\n  lastEmission: number;\r\n  lifetime: number;\r\n  offset: Vec2;\r\n  playerId: string;\r\n  particleType: typeof PARTICLES[keyof typeof PARTICLES];\r\n}\r\n\r\nexport type Decal = {\r\n  params: typeof DECALS[keyof typeof DECALS] | null;\r\n  pos: Vec2;\r\n}\r\n\r\nexport type Shrapnel = {\r\n  amount: number;\r\n  damage: number;\r\n  images: string[];\r\n  lifetime: { min: number, max: number };\r\n  pos: Vec2;\r\n  size: { min: number, max: number };\r\n  speed: { min: number, max: number };\r\n  torque: { min: number, max: number };\r\n}\r\n\r\nexport type ShrapnelPiece = {\r\n  id: string;\r\n  image: string;\r\n  transform: Transform;\r\n  velocity: Vec2;\r\n  rotationSpeed: number;\r\n  size: number;\r\n  age: number;\r\n  lifetime: number;\r\n  ownerId: string;\r\n  damage: number;\r\n}\r\n\r\nexport type DeathDecal = { // TODO: Somehow pass the pool based on current charConfig\r\n  gore: {\r\n    amount: number;\r\n    // pool: string;\r\n  }\r\n  blood: {\r\n    amount: number;\r\n    // pool: string;\r\n  }\r\n  ownerId: string;\r\n  pos: Vec2;\r\n  radius: number;\r\n}\r\n\r\nexport type DeathStamp = {\r\n  transform: Transform;\r\n  type: string;\r\n  scale: number;\r\n  src: string;\r\n}\r\n\r\nexport type ReserveBulletParticle = {\r\n  transform: Transform;\r\n  velocity: Vec2;\r\n  torque: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport type CharacterLayer = 'BODY' | 'WEAPON' | 'HEAD' | 'HEADWEAR' | 'UPGRADES';\r\n//\r\n// #endregion\r\n\r\n// #region [ Upgrades ]\r\n//\r\nexport enum UpgradeRarity {\r\n  COMMON = 0,\r\n  UNCOMMON = 1,\r\n  SPECIAL = 2,\r\n  SUPERIOR = 3,\r\n  RARE = 4,\r\n  EXCEPTIONAL = 5,\r\n  LEGENDARY = 6,\r\n  MYTHICAL = 7,\r\n  ENLIGHTENED = 8,\r\n  HOLY = 9\r\n}\r\n\r\nexport enum UpgradeType {\r\n  EQUIPMENT = 'equipment',\r\n  RESOURCE = 'resource',\r\n  STAT = 'stat',\r\n  UNIQUE = 'unique',\r\n}\r\n\r\nexport interface Upgrade {\r\n  id: string;\r\n  icon: string;\r\n  name: string;\r\n  rarity: UpgradeRarity;\r\n  subtitle: string;\r\n  type: UpgradeType;\r\n  unique: boolean;\r\n  func: (player: Player) => void;\r\n}\r\n\r\nexport type UpgradeParams = {\r\n  playerState: PlayerState;\r\n  ui: UserInterface;\r\n  utility: Utility;\r\n}\r\n//\r\n// #endregion","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Increases the player's max health.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"hemoglobin_saturator\",\r\n        name: \"Hemoglobin Saturator\",\r\n        subtitle: \"Increases red blood cell density for extended durability.\",\r\n        icon: \"/assets/img/icon/upgrades/stats/hemoglobinsaturator.png\",\r\n        type: UpgradeType.STAT,\r\n        rarity: UpgradeRarity.UNCOMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            params.playerState.updateStat('stats.health.max', player.stats.health.max + 10);\r\n            params.playerState.updateStat('stats.health.value', player.stats.health.max); // Heal to new max\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Increases speed but also increases dash cooldown.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"locomotion_module\",\r\n        name: \"Locomotion Module\",\r\n        subtitle: \"Primitave locomotion module installed on the user's footwear.\",\r\n        icon: \"/assets/img/icon/upgrades/stats/locomotionmodule.png\",\r\n        type: UpgradeType.STAT,\r\n        rarity: UpgradeRarity.COMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            params.playerState.updateStat('stats.speed', player.stats.speed + 1);\r\n            params.playerState.updateStat('actions.dash.cooldown', player.actions.dash.cooldown * 1.5);\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based, causes projectiles to sometimes break into shrapnel on impact.\r\n// Varying amounts of pieces can spawn, and shrapnel does 1 damage to any enemy hit.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"cluster_module\",\r\n        name: \"Cluster Module\",\r\n        subtitle: \"Cluster enhancement module for primary attacks.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/clustermodule.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.RARE,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('cluster_module')) {\r\n                player.unique.push('cluster_module');\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based, can replace standard shot with split shot.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"muzzle_splitter\",\r\n        name: \"Muzzle Splitter\",\r\n        subtitle: \"Muzzle modification for primary attacks, requires certain skillset.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/muzzlesplitter.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.SPECIAL,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('muzzle_splitter')) {\r\n                player.unique.push('muzzle_splitter');\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Dash replaced with spectral teleport, and increased range. No collisions when dashing.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"spectral_image\",\r\n        name: \"Spectral Image\",\r\n        subtitle: \"Forward imaging coordinate transponder.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/spectralimage.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.EXCEPTIONAL,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('spectral_image')) {\r\n                player.unique.push('spectral_image');\r\n                params.playerState.updateStat('actions.dash.time', player.actions.dash.time + 50);\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Increases stamina, and stamina recovery, but increases regen delay after using.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"bioregulator\",\r\n        name: \"Bioregulator\",\r\n        subtitle: \"Increases energy regulation efficiency, with a small boot overhead.\",\r\n        icon: \"/assets/img/icon/upgrades/stats/bioregulator.png\",\r\n        type: UpgradeType.STAT,\r\n        rarity: UpgradeRarity.COMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            params.playerState.updateStat('stats.stamina.max', player.stats.stamina.max * 1.1);\r\n            params.playerState.updateStat('stats.stamina.recovery.rate', player.stats.stamina.recovery.rate + 1);\r\n            params.playerState.updateStat('stats.stamina.recovery.delay', player.stats.stamina.recovery.delay * 1.25);\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Increases damage and shot buffer by 10%.\r\n// Bullets hit harder, but can be shot less often each time this is taken. \r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"damage_buffer\",\r\n        name: \"Damage Buffer\",\r\n        subtitle: \"Type D125 buffer, which improves damage at a small cost. \",\r\n        icon: \"/assets/img/icon/upgrades/stats/damagebuffer.png\",\r\n        type: UpgradeType.STAT,\r\n        rarity: UpgradeRarity.UNCOMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            params.playerState.updateStat('actions.primary.projectile.damage', player.actions.primary.projectile.damage * 1.1);\r\n            params.playerState.updateStat('actions.primary.buffer', player.actions.primary.buffer * 1.1);\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// During dash cooldown, player will be able to hold shoot to auto-fire.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"switch\",\r\n        name: \"Switch\",\r\n        subtitle: \"Completely legal and completely functional.\",\r\n        icon: \"/assets/img/icon/upgrades/equipment/switch.png\",\r\n        type: UpgradeType.EQUIPMENT,\r\n        rarity: UpgradeRarity.RARE,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            if (!player.equipment.includes('switch')) {\r\n                player.equipment.push('switch');\r\n                params.playerState.updateStat('actions.primary.projectile.spread', player.actions.primary.projectile.spread *= 1.15);\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based, creates visible aura around player.\r\n// Enemy projectiles in radius have a chance to be deflected.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"kinetic_brain\",\r\n        name: \"Kinetic Brain\",\r\n        subtitle: \"Cerebral kinetic stem implant, unable to function at maximum capacity.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/kineticbrain.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.EXCEPTIONAL,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('kinetic_brain')) {\r\n                player.unique.push('kinetic_brain');\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Gives the player some ammo in their reserves.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"care_package\",\r\n        name: \"Care Package\",\r\n        subtitle: \"These are hard to come by.\",\r\n        icon: \"/assets/img/icon/upgrades/resource/carepackage.png\",\r\n        type: UpgradeType.RESOURCE,\r\n        rarity: UpgradeRarity.COMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            const ammo = 20;\r\n            player.actions.primary.magazine.currentReserve += ammo;\r\n            params.ui.ammoReservesUIController.spawnAmmoInReserveUI(ammo);\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based, chance to add extra projectiles on shot in random direction.\r\n// Extra shots have more spread, less distance and do half damage.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"projectile_array\",\r\n        name: \"Projectile Array\",\r\n        subtitle: \"Chance to fire an array of extra projectiles.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/projectilearray.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.RARE,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('projectile_array')) {\r\n                player.unique.push('projectile_array');\r\n            }\r\n        }\r\n    };\r\n}","var map = {\n\t\"./bioregulator/bioregulator\": 528,\n\t\"./bioregulator/bioregulator.ts\": 528,\n\t\"./damagebuffer/damagebuffer\": 612,\n\t\"./damagebuffer/damagebuffer.ts\": 612,\n\t\"./hemoglobinsaturator/hemoglobinsaturator\": 168,\n\t\"./hemoglobinsaturator/hemoglobinsaturator.ts\": 168,\n\t\"./locomotionmodule/locomotionmodule\": 204,\n\t\"./locomotionmodule/locomotionmodule.ts\": 204\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 823;","var map = {\n\t\"./switch/switch\": 617,\n\t\"./switch/switch.ts\": 617\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 854;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const PLAYER_DEFAULTS = {\r\n    ACTIONS: {\r\n        DASH: {\r\n            COOLDOWN: 1000, // ms\r\n            DRAIN: 40, // per dash\r\n            MULTIPLIER: 3,\r\n            TIME: 150 // ms\r\n        },\r\n        MELEE: {\r\n            COOLDOWN: 250, // ms\r\n            DAMAGE: 10,\r\n            DURATION: 100, // ms\r\n            RANGE: 10, // px\r\n            SIZE: 2, // px^2 area at tip\r\n        },\r\n        PRIMARY: {\r\n            BUFFER: 250, // ms\r\n            BURST: {\r\n                AMOUNT: 1,\r\n                DELAY: 75 // ms\r\n            },\r\n            MAGAZINE: {\r\n                SIZE: 10,\r\n                STARTING_RESERVE: 20,\r\n                MAX_RESERVE: 50\r\n            },\r\n            OFFSET: 10, // px\r\n            PROJECTILE: {\r\n                AMOUNT: 1,\r\n                COLOR: '#fff5beff',\r\n                DAMAGE: 25,\r\n                LENGTH: 15,\r\n                RANGE: 5,\r\n                SIZE: 1,\r\n                SPEED: 35,\r\n                SPREAD: 10,\r\n                UNIQUE: []\r\n            },\r\n            RELOAD: {\r\n                TIME: 750 // ms\r\n            }\r\n        },\r\n        SPRINT: {\r\n            DRAIN: 5, // per ms\r\n            MULTIPLIER: 1.75\r\n        },\r\n    },\r\n    DATA: {\r\n        ID_LENGTH: 12\r\n    },\r\n    EQUIPMENT: [],\r\n    FLAGS: {\r\n        HIDDEN: false,\r\n        INVULNERABLE: false\r\n    },\r\n    PHYSICS: {\r\n        ACCELERATION: 0.55,\r\n        FRICTION: 0.85\r\n    },\r\n    RIG: {\r\n        BODY: 'DEFAULT',\r\n        HEAD: 'DEFAULT',\r\n        HEADWEAR: 'DEFAULT',\r\n        WEAPON: 'GLOCK'\r\n    },\r\n    STATS: {\r\n        DEFENSE: 0,\r\n        HEALTH: {\r\n            MAX: 100\r\n        },\r\n        LUCK: 1,\r\n        SIZE: 100, // px^2\r\n        SPEED: 6,\r\n        STAMINA: {\r\n            MAX: 100,\r\n            RECOVERY: {\r\n                DELAY: 1000,\r\n                RATE: 25\r\n            }\r\n        }\r\n    },\r\n    UNIQUE: [],\r\n    VISUAL: {\r\n        ID_DISPLAY_OFFSET: 25\r\n    }\r\n};\r\n\r\nexport const OBJECT_DEFAULTS = {\r\n    DATA: {\r\n        ID_LENGTH: 8\r\n    },\r\n};\r\n\r\nexport const DECALS = {\r\n    PROJECTILE: {\r\n        RADIUS: {\r\n            MIN: 4,\r\n            MAX: 8\r\n        },\r\n        DENSITY: {\r\n            MIN: 0.175,\r\n            MAX: 0.35\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.15,\r\n            MAX: 0.25\r\n        },\r\n        VARIATION: 0.215,\r\n        COLOR: \"#000000\"\r\n    },\r\n    BLOOD: {\r\n        RADIUS: {\r\n            MIN: 5,\r\n            MAX: 17.5\r\n        },\r\n        DENSITY: {\r\n            MIN: 0.1,\r\n            MAX: 0.175\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.275,\r\n            MAX: 0.315\r\n        },\r\n        VARIATION: 0.5,\r\n        COLOR: \"#781414\"\r\n    },\r\n    EXPLOSION: {\r\n        RADIUS: {\r\n            MIN: 25,\r\n            MAX: 40\r\n        },\r\n        DENSITY: {\r\n            MIN: 0.375,\r\n            MAX: 0.575\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.35,\r\n            MAX: 0.525\r\n        },\r\n        VARIATION: 0.2,\r\n        COLOR: \"#434343\"\r\n    }\r\n};\r\n\r\nexport const PARTICLES = {\r\n    BLOOD_DRIP: {\r\n        COUNT: {\r\n            MIN: 1,\r\n            MAX: 4\r\n        },\r\n        LIFETIME: {\r\n            MIN: 800,\r\n            MAX: 1000\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            },\r\n            SCALE: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.25,\r\n            MAX: 0.75\r\n        },\r\n        SPEED: {\r\n            MIN: 0.25,\r\n            MAX: 0.75\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        SIZE: {\r\n            MIN: 0.125,\r\n            MAX: 2.275\r\n        },\r\n        TORQUE: {\r\n            MIN: -720,\r\n            MAX: 720\r\n        },\r\n        COLLIDE: true,\r\n        FADE: true,\r\n        PAINT: false,\r\n        SPREAD: 0.25,\r\n        STAIN: true,\r\n        COLOR: \"#8b1a1a\"\r\n    },\r\n    BLOOD_SPRAY: {\r\n        COUNT: {\r\n            MIN: 4,\r\n            MAX: 12\r\n        },\r\n        LIFETIME: {\r\n            MIN: 150,\r\n            MAX: 1200\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            },\r\n            SCALE: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.425,\r\n            MAX: 0.775\r\n        },\r\n        SPEED: {\r\n            MIN: 1.5,\r\n            MAX: 4.75\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        SIZE: {\r\n            MIN: 0.75,\r\n            MAX: 3.5\r\n        },\r\n        TORQUE: {\r\n            MIN: -720,\r\n            MAX: 720\r\n        },\r\n        COLLIDE: true,\r\n        FADE: false,\r\n        PAINT: true,\r\n        SPREAD: 0.425,\r\n        STAIN: true,\r\n        COLOR: \"#8b1a1a\"\r\n    },\r\n    MUZZLE_FLASH: {\r\n        COUNT: {\r\n            MIN: 8,\r\n            MAX: 15\r\n        },\r\n        LIFETIME: {\r\n            MIN: 150,\r\n            MAX: 300\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            },\r\n            SCALE: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.4,\r\n            MAX: 0.8\r\n        },\r\n        SPEED: {\r\n            MIN: 4,\r\n            MAX: 10\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        SIZE: {\r\n            MIN: 1,\r\n            MAX: 3\r\n        },\r\n        TORQUE: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        COLLIDE: false,\r\n        FADE: true,\r\n        PAINT: false,\r\n        SPREAD: 0.6,\r\n        STAIN: false,\r\n        COLOR: \"#ffaa00\"\r\n    },\r\n    SHELL_CASING: {\r\n        COUNT: {\r\n            MIN: 1,\r\n            MAX: 1\r\n        },\r\n        LIFETIME: {\r\n            MIN: 250,\r\n            MAX: 550\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            },\r\n            SCALE: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 1.0,\r\n            MAX: 1.0\r\n        },\r\n        SPEED: {\r\n            MIN: 5,\r\n            MAX: 8\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        SIZE: {\r\n            MIN: 2,\r\n            MAX: 2\r\n        },\r\n        TORQUE: {\r\n            MIN: -720,\r\n            MAX: 720\r\n        },\r\n        COLLIDE: true,\r\n        FADE: false,\r\n        PAINT: true,\r\n        SPREAD: 0.4,\r\n        STAIN: false,\r\n        COLOR: \"#d4af37\"\r\n    },\r\n    SMOKE: {\r\n        COUNT: {\r\n            MIN: 3,\r\n            MAX: 6\r\n        },\r\n        LIFETIME: {\r\n            MIN: 800,\r\n            MAX: 1400\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0.1,\r\n                MAX: 0.3\r\n            },\r\n            SCALE: {\r\n                MIN: 40,\r\n                MAX: 80\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.15,\r\n            MAX: 0.35\r\n        },\r\n        SPEED: {\r\n            MIN: 0.5,\r\n            MAX: 1.5\r\n        },\r\n        SIZE: {\r\n            MIN: 4,\r\n            MAX: 8\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 2,\r\n            MAX: 3\r\n        },\r\n        TORQUE: {\r\n            MIN: -180,\r\n            MAX: 180\r\n        },\r\n        COLLIDE: false,\r\n        FADE: true,\r\n        PAINT: false,\r\n        SPREAD: 0.4,\r\n        STAIN: false,\r\n        COLOR: \"#5a5a5a\"\r\n    },\r\n    SPARKS: {\r\n        COUNT: {\r\n            MIN: 8,\r\n            MAX: 16\r\n        },\r\n        LIFETIME: {\r\n            MIN: 150,\r\n            MAX: 300\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0.25,\r\n                MAX: 5\r\n            },\r\n            SCALE: {\r\n                MIN: 0.25,\r\n                MAX: 1.5\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.4,\r\n            MAX: 0.8\r\n        },\r\n        SPEED: {\r\n            MIN: 4,\r\n            MAX: 10\r\n        },\r\n        SIZE: {\r\n            MIN: 1,\r\n            MAX: 3\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        TORQUE: {\r\n            MIN: -720,\r\n            MAX: 720\r\n        },\r\n        COLLIDE: false,\r\n        FADE: true,\r\n        PAINT: false,\r\n        SPREAD: 0.6,\r\n        STAIN: false,\r\n        COLOR: \"#ffaa00\"\r\n    }\r\n};\r\n\r\nexport const SHRAPNEL = {\r\n    PIECE: [\r\n        '/assets/img/effects/shrapnel/shrapnel_00.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_01.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_02.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_03.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_04.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_05.png'\r\n    ]\r\n};\r\n\r\nexport const AMMO_BOX = {\r\n    BASE: '/assets/img/object/ammobox/base.png',\r\n    BULLETS: '/assets/img/object/ammobox/bullets.png',\r\n    LID: '/assets/img/object/ammobox/lid.png',\r\n}\r\n\r\nexport const CANVAS = {\r\n    WIDTH: 800,\r\n    HEIGHT: 600,\r\n    BORDER_COLOR: '#333',\r\n    BORDER_WIDTH: 2,\r\n    BORDER_MARGIN: 15,\r\n};\r\n\r\nexport const GAMEPAD_MAP = {\r\n    // Face buttons\r\n    A: 0,\r\n    B: 1,\r\n    X: 2,\r\n    Y: 3,\r\n\r\n    // Bumpers\r\n    LB: 4,\r\n    RB: 5,\r\n\r\n    // Triggers\r\n    LT: 6,\r\n    RT: 7,\r\n\r\n    // System buttons\r\n    SELECT: 8,\r\n    START: 9,\r\n\r\n    // Stick clicks\r\n    L_STICK: 10,\r\n    R_STICK: 11,\r\n\r\n    // D-Pad\r\n    DPAD_UP: 12,\r\n    DPAD_DOWN: 13,\r\n    DPAD_LEFT: 14,\r\n    DPAD_RIGHT: 15,\r\n\r\n    // Home/Guide button\r\n    HOME: 16,\r\n\r\n    // Axes\r\n    AXES: {\r\n        LEFT_STICK_X: 0,\r\n        LEFT_STICK_Y: 1,\r\n        RIGHT_STICK_X: 2,\r\n        RIGHT_STICK_Y: 3\r\n    }\r\n};\r\n\r\nexport const GAME = {\r\n    CHARACTER_SIZE: 650,\r\n    CONNECTION_TIMEOUT: 1000,\r\n    CONTROLS: {\r\n        KEYBINDS: {\r\n            MELEE: 'mouse2',\r\n            MOVE_UP: 'w',\r\n            MOVE_LEFT: 'a',\r\n            MOVE_DOWN: 's',\r\n            MOVE_RIGHT: 'd',\r\n            RELOAD: 'r',\r\n            SPRINT: 'shift',\r\n            ATTACK: 'mouse1',\r\n            DASH: ' '\r\n        },\r\n        GAMEPAD: {\r\n            MELEE: GAMEPAD_MAP.RB,\r\n            DASH: GAMEPAD_MAP.LB,\r\n            DEADZONE: 0.2,\r\n            RELOAD: GAMEPAD_MAP.A,\r\n            SPRINT: GAMEPAD_MAP.LT,\r\n            ATTACK: GAMEPAD_MAP.RT\r\n        }\r\n    },\r\n    GAME_END_DELAY: 5000,\r\n    GRAPHICS: {\r\n        PHYSICS: {\r\n            AMMORESERVES: true\r\n        },\r\n        STATIC_OVERLAY: true,\r\n        BACKGROUND_PARTICLES: true\r\n    },\r\n    MAX_PLAYERS: 4,\r\n    MAX_WINS: 5,\r\n    RECONNECT_DELAY: 3000,\r\n    ROUND_END_DELAY: 3000,\r\n    NEW_ROUND_DELAY: 500\r\n};\r\n\r\nexport const UI = {\r\n    PLAYER_ID_LENGTH: 6,\r\n    FONT: '12px Arial',\r\n    TEXT_COLOR: '#fff'\r\n};\r\n\r\nexport const ROOM = {\r\n    ID_PREFIX: 'room_',\r\n    ID_LENGTH: 10\r\n};\r\n\r\nexport const CHAT = {\r\n    MAX_MESSAGES: 100,\r\n    MAX_MESSAGE_LENGTH: 200\r\n};\r\n\r\nexport const NETWORK = {\r\n    MOVE_INTERVAL: 10, //ms\r\n    ROTATE_INTERVAL: 25 //ms\r\n}\r\n\r\nexport const AUDIO = {\r\n    MIXER: {\r\n        MASTER: 1.0,\r\n        INTERFACE: 0.85,\r\n        MUSIC: 0.75,\r\n        SFX: 0.9,\r\n        VOICE: 1.0\r\n    },\r\n    SETTINGS: {\r\n        MAX_CONCURRENT: 5, // Max simultaneous instances of same sound\r\n        POOL_SIZE: 10, // Number of Audio objects per sound\r\n        PRELOAD_SOUNDS: true\r\n    }\r\n};\r\n\r\nexport const SFX = {\r\n    IMPACT: {\r\n        FLESH: {\r\n            BULLET: [\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_00.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_01.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_02.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_03.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_04.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_05.ogg'\r\n            ]\r\n        },\r\n        METAL: {\r\n            BULLET: [\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_00.ogg',\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_01.ogg',\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_02.ogg',\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_03.ogg',\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_04.ogg'\r\n            ]\r\n        }\r\n    },\r\n    PLAYER: {\r\n        MALE: {\r\n            GRUNT: [\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_00.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_01.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_02.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_03.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_04.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_05.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_06.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_07.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_08.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_09.ogg'\r\n            ]\r\n        },\r\n        // FEMALE: {\r\n        //     GRUNT: [\r\n\r\n        //     ]\r\n        // }\r\n    },\r\n    WEAPON: {\r\n        GLOCK: {\r\n            ATTACK: [\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_00.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_01.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_02.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_03.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_04.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_05.ogg'\r\n            ],\r\n            EMPTY: [\r\n                '/assets/audio/sfx/weapons/glock/glock_empty_00.ogg'\r\n            ],\r\n            RELOAD: {\r\n                END: [\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_end_00.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_end_01.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_end_02.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_end_03.ogg'\r\n                    \r\n                ],\r\n                START: [\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_start_00.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_start_01.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_start_02.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_start_03.ogg'\r\n                ]\r\n            },\r\n            SHELL: [\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_00.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_01.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_02.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_03.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_04.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_05.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_06.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_07.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_08.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_09.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_10.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_11.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_12.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_13.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_14.ogg'\r\n            ],\r\n        }\r\n    }\r\n};","import { CacheManager } from \"./CacheManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nconst ADMIN_KEYS = {\r\n    KEYS: ['Control', 'Shift', 'Alt', '-', '+'],\r\n    REQUIRED_COUNT: 5\r\n} as const;\r\n\r\nconst CONSOLE_KEY = 'Control';\r\n\r\nexport class Admin {\r\n    private adminKeysHeld: Set<string> = new Set();\r\n\r\n    constructor(private cacheManager: CacheManager, private ui: UserInterface) {\r\n        this.initKeyListener();\r\n        this.initConsoleKeybinds();\r\n    }\r\n\r\n    // #region [ Admin (Locked) ]\r\n    //\r\n    /**\r\n     * Listens for admin key combo and shows modal when detected.\r\n     */\r\n    private initKeyListener(): void {\r\n        window.addEventListener('keydown', (e) => {\r\n            this.adminKeysHeld.add(e.key);\r\n            this.checkAdminCombo();\r\n        });\r\n\r\n        window.addEventListener('keyup', (e) => {\r\n            this.adminKeysHeld.delete(e.key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks held keys against the ADMIN_KEYS configuration.\r\n     */\r\n    private checkAdminCombo(): void {\r\n        const hasAllKeys = ADMIN_KEYS.KEYS.every(key => this.adminKeysHeld.has(key));\r\n\r\n        if (hasAllKeys && this.adminKeysHeld.size === ADMIN_KEYS.REQUIRED_COUNT) {\r\n            this.adminKeysHeld.clear(); // Prevent repeated triggers\r\n            this.showAdminModal();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows the admin modal using the general website modal.\r\n     */\r\n    private showAdminModal(): void {\r\n        if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalConfirmButton ||\r\n            !this.ui.modalCancelButton || !this.ui.modalErrorDiv || !this.ui.modalText) return;\r\n\r\n        this.ui.modal.classList.remove('hidden');\r\n        this.ui.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.ui.modalInput.value = '';\r\n        this.ui.modalInput.style.display = 'block';\r\n        this.ui.modalErrorDiv.textContent = '';\r\n        this.ui.modalText.textContent = 'Enter Admin Command.';\r\n        this.ui.modalConfirmButton.textContent = 'Execute';\r\n        this.ui.modalCancelButton.textContent = 'Cancel';\r\n\r\n        this.ui.modalInput.focus();\r\n\r\n        this.ui.modalConfirmButton.onclick = () => {\r\n            if (!this.ui.modalInput || !this.ui.modalErrorDiv) return;\r\n\r\n            const value = this.ui.modalInput.value.trim();\r\n            if (!value.includes(':')) {\r\n                this.ui.modalErrorDiv.textContent = 'Invalid format.';\r\n                return;\r\n            }\r\n\r\n            const [command, key] = value.split(':');\r\n            if (!command || !key) {\r\n                this.ui.modalErrorDiv.textContent = 'Invalid format.';\r\n                return;\r\n            }\r\n\r\n            this.executeAdminCommand(command.trim(), key.trim());\r\n            this.ui.closeModal();\r\n        };\r\n\r\n        this.ui.modalCancelButton.onclick = () => this.ui.closeModal();\r\n    }\r\n\r\n    /**\r\n     * Executes a command that is in the input field of the admin modal.\r\n     */\r\n    private executeAdminCommand(command: string, key: string): void {\r\n        // This will be called from your main game class with the WebSocket\r\n        console.log(`Admin command: ${command} with key: ${key}`);\r\n\r\n        // You'll expose this via a callback or event system\r\n        this.onAdminCommand?.(command, key);\r\n    }\r\n\r\n    // Public callback for Client.ts\r\n    public onAdminCommand?: (command: string, key: string) => void;\r\n\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Console ]\r\n    //\r\n    /**\r\n     * Clears cache with tilde key\r\n     */\r\n    private initConsoleKeybinds(): void {\r\n        document.addEventListener('keydown', (e) => {\r\n            if (!e.getModifierState(CONSOLE_KEY)) return;\r\n            if (e.key === '`') { e.preventDefault(); this.clearCacheCommand(); }\r\n        });\r\n    }\r\n\r\n    private clearCacheCommand(): void {\r\n        this.cacheManager.clear().then(() => {\r\n            console.log('Cache cleared! Reload the page.');\r\n            location.reload();\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { AnimationParams, CharacterAnimation, Vec2 } from \"./Types\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { NETWORK } from \"./Config\";\r\n\r\nexport class Animator {\r\n    private characterAnimations: CharacterAnimation = new Map();\r\n    public characterOffsets: Map<string, Vec2> = new Map();\r\n\r\n    constructor(private playerState: PlayerState, private roomManager: RoomManager, private userId: string) { }\r\n\r\n    // #region [ Animation ]\r\n    /**\r\n     * Animates a specific character part locally with generateCharacterAnimation and broadcasts for other clients to sync animations.\r\n     */\r\n    public animateCharacterPart(params: AnimationParams): void {\r\n        this.generateCharacterAnimation(params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'character-animation',\r\n            params: params\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Rotates a specific part of a player with the passed rotation.\r\n     */\r\n    public rotateCharacterPart(playerId: string, rotation: number): void {\r\n        if (playerId === this.userId) {\r\n            this.playerState.myPlayer.transform.rot = rotation;\r\n        } else {\r\n            const player = this.playerState.players.get(playerId);\r\n            if (!player) return;\r\n            player.transform.rot = rotation;\r\n        }\r\n\r\n        const now = Date.now();\r\n        const rotationDiff = Math.abs(rotation - this.playerState.lastSentRotation);\r\n        if (rotationDiff > 0.1 && now - this.playerState.lastSentRotationTime >= NETWORK.ROTATE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    rot: this.playerState.myPlayer.transform.rot\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentRotation = rotation;\r\n            this.playerState.lastSentRotationTime = now;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to a network request to process a character animation.\r\n     */\r\n    public animateCharacterPartNetwork(params: AnimationParams): void {\r\n        this.generateCharacterAnimation(params);\r\n    }\r\n\r\n    /**\r\n     * Assembles the character animation and adds it to the characterAnimations mapping for playback during update processing.\r\n     */\r\n    private generateCharacterAnimation(params: AnimationParams): void {\r\n        const { playerId, part, frames, duration, partIndex } = params;\r\n        const animationId = `${playerId}_${part}_${partIndex || 0}`;\r\n\r\n        this.characterAnimations.set(animationId, {\r\n            playerId: playerId,\r\n            part: part,\r\n            partIndex: partIndex,\r\n            frames: frames,\r\n            duration: duration,\r\n            startTime: Date.now(),\r\n            originalOffset: { x: 0, y: 0 }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Process visual character animations by updating part positions.\r\n     */\r\n    public updateCharacterAnimations(delta: number): void {\r\n        const animationsToRemove: string[] = [];\r\n        const currentTime = Date.now();\r\n\r\n        this.characterAnimations.forEach((animation, animationId) => {\r\n            const elapsed = currentTime - animation.startTime;\r\n            const progress = elapsed / animation.duration;\r\n\r\n            if (animation.duration !== 0 && progress >= 1) {\r\n                // Animation complete, remove it\r\n                animationsToRemove.push(animationId);\r\n                return;\r\n            }\r\n\r\n            // Find current keyframe\r\n            const frameKeys = Object.keys(animation.frames).map(Number).sort((a, b) => a - b);\r\n            let currentFrameIndex = 0;\r\n\r\n            for (let i = 0; i < frameKeys.length - 1; i++) {\r\n                const frameProgress = frameKeys[i];\r\n                const nextFrameProgress = frameKeys[i + 1];\r\n\r\n                if (progress >= frameProgress && progress < nextFrameProgress) {\r\n                    currentFrameIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let lerpedX, lerpedY;\r\n            if (progress >= 1) { // Hold at last keyframe for infinite animation\r\n                const lastFrame = animation.frames[frameKeys[frameKeys.length - 1]];\r\n                lerpedX = lastFrame.x;\r\n                lerpedY = lastFrame.y;\r\n            } else { // Normal animation with no lerp\r\n                const currentFrame = animation.frames[frameKeys[currentFrameIndex]];\r\n                const nextFrame = animation.frames[frameKeys[currentFrameIndex + 1]] || currentFrame;\r\n                const frameProgress = (progress - frameKeys[currentFrameIndex]) / (frameKeys[currentFrameIndex + 1] - frameKeys[currentFrameIndex]) || 0;\r\n                lerpedX = currentFrame.x + (nextFrame.x - currentFrame.x) * frameProgress;\r\n                lerpedY = currentFrame.y + (nextFrame.y - currentFrame.y) * frameProgress;\r\n            }\r\n\r\n            this.characterOffsets.set(animationId, { x: lerpedX, y: lerpedY });\r\n        });\r\n\r\n        // Remove completed animations\r\n        animationsToRemove.forEach(id => {\r\n            this.characterAnimations.delete(id);\r\n            if (this.characterOffsets) {\r\n                this.characterOffsets.delete(id);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears all active character animations and offsets.\r\n     */\r\n    public clearAllAnimations(): void {\r\n        this.characterAnimations.clear();\r\n        this.characterOffsets.clear();\r\n    }\r\n    //\r\n    // #endregion\r\n}","export class AudioPool {\r\n    private pools: Map<string, HTMLAudioElement[]> = new Map();\r\n    private activeAudio: Map<string, HTMLAudioElement[]> = new Map();\r\n\r\n    constructor(private poolSize: number = 10, private maxConcurrent: number = 5) { }\r\n\r\n    private createPool(src: string): HTMLAudioElement[] {\r\n        const pool: HTMLAudioElement[] = [];\r\n        for (let i = 0; i < this.poolSize; i++) {\r\n            const audio = new Audio(src);\r\n            audio.preload = 'auto';\r\n            audio.addEventListener('ended', () => this.returnToPool(src, audio));\r\n            audio.addEventListener('pause', () => this.returnToPool(src, audio));\r\n            pool.push(audio);\r\n        }\r\n        return pool;\r\n    }\r\n\r\n    private returnToPool(src: string, audio: HTMLAudioElement): void {\r\n        const active = this.activeAudio.get(src);\r\n        if (active) {\r\n            const index = active.indexOf(audio);\r\n            if (index > -1) {\r\n                active.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        const pool = this.pools.get(src);\r\n        if (pool && !pool.includes(audio)) {\r\n            pool.push(audio);\r\n        }\r\n    }\r\n\r\n    public getAudio(src: string): HTMLAudioElement | null {\r\n        // Check if we're at max concurrent instances\r\n        const active = this.activeAudio.get(src) || [];\r\n        if (active.length >= this.maxConcurrent) {\r\n            return null; // Skip playing if too many instances\r\n        }\r\n\r\n        // Get or create pool for this sound\r\n        let pool = this.pools.get(src);\r\n        if (!pool) {\r\n            pool = this.createPool(src);\r\n            this.pools.set(src, pool);\r\n            this.activeAudio.set(src, []);\r\n        }\r\n\r\n        // Get available audio from pool\r\n        const audio = pool.pop();\r\n        if (audio) {\r\n            // Reset audio properties\r\n            audio.currentTime = 0;\r\n            audio.volume = 1;\r\n            audio.playbackRate = 1;\r\n            audio.loop = false;\r\n\r\n            // Move to active list\r\n            active.push(audio);\r\n            return audio;\r\n        }\r\n\r\n        return null; // Pool exhausted\r\n    }\r\n\r\n    public preloadSound(src: string): void {\r\n        if (!this.pools.has(src)) {\r\n            const pool = this.createPool(src);\r\n            this.pools.set(src, pool);\r\n            this.activeAudio.set(src, []);\r\n        }\r\n    }\r\n}","import { AUDIO, CANVAS } from \"./Config\";\r\n\r\nimport { AudioPool } from \"./AudioPool\";\r\nimport { AudioParams } from \"./Types\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class AudioManager {\r\n    private audioPool: AudioPool;\r\n\r\n    constructor(\r\n        private roomManager: RoomManager,\r\n        private settingsManager: SettingsManager,\r\n        private utility: Utility\r\n    ) {\r\n        this.audioPool = new AudioPool(AUDIO.SETTINGS.POOL_SIZE, AUDIO.SETTINGS.MAX_CONCURRENT); //TODO: Abstract config reliance\r\n    }\r\n\r\n    // #region [ Playback ]\r\n    //\r\n    /**\r\n     * Plays an audio source using the predefined pool for the audio source.\r\n     */\r\n    public playAudio(params: AudioParams): void {\r\n        const audio = this.audioPool.getAudio(params.src);\r\n        if (!audio) {\r\n            console.warn(`Audio pool exhausted or max concurrent reached for: ${params.src}`);\r\n            return;\r\n        }\r\n\r\n        // [ Volume ]\r\n        let volume = 1.0;\r\n        if (params.volume) {\r\n            volume = params.volume.min + Math.random() * (params.volume.max - params.volume.min);\r\n        }\r\n\r\n        // [ 2D Spatial Audio ]\r\n        const blend = params.spatial?.blend ?? 0;\r\n        if (blend > 0 && params.spatial?.pos) {\r\n            const dx = params.spatial.pos.x - params.listener.x;\r\n            const dy = params.spatial.pos.y - params.listener.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            let distanceVolume: number;\r\n\r\n            if (params.spatial.rolloff) {\r\n                const rolloffType = params.spatial.rolloff.type || 'linear';\r\n                const factor = params.spatial.rolloff.factor;\r\n                const maxDistance = params.spatial.rolloff.distance;\r\n\r\n                if (rolloffType === 'logarithmic') {\r\n                    // Factor determines reference distance as % of max distance\r\n                    const referenceDistance = maxDistance * factor;\r\n\r\n                    if (distance < referenceDistance) {\r\n                        distanceVolume = 1.0;\r\n                    } else {\r\n                        const normalizedDistance = (distance - referenceDistance) / (maxDistance - referenceDistance);\r\n                        distanceVolume = Math.max(0, 1 - Math.pow(normalizedDistance, 0.5));\r\n                    }\r\n                } else {\r\n                    // Linear: factor is just multiplier on falloff curve\r\n                    distanceVolume = Math.max(0, 1 - (distance / maxDistance) * factor);\r\n                }\r\n            } else {\r\n                // Default: simple linear falloff using canvas dimensions as fallback\r\n                const maxDistance = Math.max(CANVAS.WIDTH, CANVAS.HEIGHT); //TODO: Remove reliance on config\r\n                distanceVolume = Math.max(0, 1 - (distance / maxDistance));\r\n            }\r\n\r\n            volume *= (1 - blend) + (distanceVolume * blend);\r\n        }\r\n\r\n        // [ Mixer ]\r\n        const outputGroup = params.output?.toLowerCase() || null;\r\n        const mixer = this.settingsManager.getSettings().audio.mixer;\r\n        if (outputGroup && mixer[outputGroup as keyof typeof mixer] !== undefined) {\r\n            volume *= mixer[outputGroup as keyof typeof mixer];\r\n        }\r\n\r\n        volume *= this.settingsManager.getSettings().audio.mixer.master;\r\n        audio.volume = Math.max(0, Math.min(1, volume));\r\n\r\n        // [ Pitch ]\r\n        if (params.pitch) {\r\n            const pitch = params.pitch.min + Math.random() * (params.pitch.max - params.pitch.min);\r\n            audio.playbackRate = Math.max(0.25, Math.min(4, pitch));\r\n        }\r\n\r\n        // [ Loop ]\r\n        if (params.loop !== undefined) {\r\n            audio.loop = params.loop;\r\n        }\r\n\r\n        // [ Trigger Delay ]\r\n        let delayMs = 0;\r\n        if (params.delay) {\r\n            delayMs = (params.delay.min + Math.random() * (params.delay.max - params.delay.min)) * 1000; // Convert to seconds\r\n        }\r\n\r\n        this.utility.safeTimeout(() => {\r\n            audio.play().catch((error: unknown) => {\r\n                console.warn('Audio play failed:', error);\r\n            });\r\n        }, delayMs);\r\n    }\r\n\r\n    /**\r\n     * Syncs an audio trigger over the network.\r\n     */\r\n    public playAudioNetwork(params: AudioParams): void {\r\n        this.playAudio(params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'play-audio',\r\n            params: params\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Preloading ]\r\n    /**\r\n     * Preloads all audio of a single filetype for the game.\r\n     */\r\n    public preloadAudioAssets(sfx: any, extension: string): void {\r\n        this.preloadSFX(sfx, extension);\r\n    }\r\n\r\n    /**\r\n     * Iterate through the passed audio object, and preload them for the session.\r\n     */\r\n    private preloadSFX(obj: any, extension: string): void {\r\n        for (const key in obj) {\r\n            const value = obj[key];\r\n\r\n            if (Array.isArray(value)) {\r\n                // If it's an array, assume it's an array of audio file paths\r\n                value.forEach(src => {\r\n                    if (typeof src === 'string' && (src.endsWith(extension))) { // All sound files should be .ogg\r\n                        this.audioPool.preloadSound(src);\r\n                    }\r\n                });\r\n            } else if (typeof value === 'object' && value !== null) {\r\n                // If it's an object, recurse into it\r\n                this.preloadSFX(value, extension);\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","export class CacheManager {\r\n    private dbName = 'SaltpeterCache';\r\n    private dbVersion = 1;\r\n    private db: IDBDatabase | null = null;\r\n\r\n    constructor() {\r\n        this.initDB();\r\n    }\r\n\r\n    /**\r\n     * Initializes the IndexedDB database\r\n     */\r\n    private async initDB(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = indexedDB.open(this.dbName, this.dbVersion);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => {\r\n                this.db = request.result;\r\n                resolve();\r\n            };\r\n\r\n            request.onupgradeneeded = (event) => {\r\n                const db = (event.target as IDBOpenDBRequest).result;\r\n                if (!db.objectStoreNames.contains('settings')) {\r\n                    db.createObjectStore('settings');\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Writes any value to the cache\r\n     */\r\n    public async write(key: string, value: any): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.put(value, key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reads a value from the cache\r\n     */\r\n    public async read(key: string): Promise<any> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readonly');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.get(key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve(request.result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes a value from the cache\r\n     */\r\n    public async delete(key: string): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.delete(key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears all cached data\r\n     */\r\n    public async clear(): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.clear();\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n}","export class CharacterConfig {\r\n    public WEAPON = {\r\n        GLOCK: [\r\n            '/assets/img/weapon/glock/body.png',\r\n            '/assets/img/weapon/glock/slide.png',\r\n        ],\r\n        KNIFE: [\r\n            '/assets/img/weapon/melee/knife_00.png'\r\n        ]\r\n    };\r\n\r\n    public BODY = {\r\n        DEFAULT: '/assets/img/char/default/body.png'\r\n    };\r\n\r\n    public HEAD = {\r\n        DEFAULT: '/assets/img/char/default/head.png'\r\n    };\r\n\r\n    public HEADWEAR = {\r\n        DEFAULT: '/assets/img/char/default/headwear.png'\r\n    };\r\n\r\n    public UPGRADES = {\r\n        KINETIC_BRAIN: '/assets/img/char/upgrades/kineticbrain.png'\r\n    };\r\n\r\n    public CHARACTER_DECALS = {\r\n        DEFAULT: {\r\n            BLOOD: [\r\n                '/assets/img/effects/blood/blood_00.png',\r\n                '/assets/img/effects/blood/blood_01.png',\r\n                '/assets/img/effects/blood/blood_02.png',\r\n                '/assets/img/effects/blood/blood_03.png',\r\n                '/assets/img/effects/blood/blood_04.png'\r\n            ],\r\n            GORE: [\r\n                '/assets/img/effects/gore/gore_00.png',\r\n                '/assets/img/effects/gore/gore_01.png',\r\n                '/assets/img/effects/gore/gore_02.png',\r\n                '/assets/img/effects/gore/gore_03.png',\r\n                '/assets/img/effects/gore/gore_04.png',\r\n                '/assets/img/effects/gore/gore_05.png',\r\n                '/assets/img/effects/gore/gore_06.png',\r\n                '/assets/img/effects/gore/gore_07.png',\r\n                '/assets/img/effects/gore/gore_08.png',\r\n                '/assets/img/effects/gore/gore_09.png',\r\n                '/assets/img/effects/gore/gore_10.png',\r\n                '/assets/img/effects/gore/gore_11.png',\r\n                '/assets/img/effects/gore/gore_12.png',\r\n                '/assets/img/effects/gore/gore_13.png'\r\n            ]\r\n        }\r\n    }\r\n\r\n    constructor() { }\r\n}","import { CharacterConfig } from \"./CharacterConfig\";\r\nimport { CharacterLayer } from \"./Types\";\r\n\r\nexport class CharacterManager {\r\n    constructor(private charConfig: CharacterConfig) { }\r\n\r\n    public getCharacterAsset(layer: CharacterLayer, variant: string): string | string[] {\r\n        switch (layer) {\r\n            case 'BODY':\r\n                return this.charConfig.BODY[variant as keyof typeof this.charConfig.BODY] || this.charConfig.BODY.DEFAULT;\r\n            case 'WEAPON':\r\n                return this.charConfig.WEAPON[variant as keyof typeof this.charConfig.WEAPON] || this.charConfig.WEAPON.GLOCK;\r\n            case 'HEAD':\r\n                return this.charConfig.HEAD[variant as keyof typeof this.charConfig.HEAD] || this.charConfig.HEAD.DEFAULT;\r\n            case 'HEADWEAR':\r\n                return this.charConfig.HEADWEAR[variant as keyof typeof this.charConfig.HEADWEAR] || this.charConfig.HEADWEAR.DEFAULT;\r\n            case 'UPGRADES':\r\n                return variant;\r\n            default:\r\n                throw new Error(`Unknown character layer: ${layer}`);\r\n        }\r\n    }\r\n\r\n    public getUpgradeVisual(upgradeName: string): string | null {\r\n        const upperName = upgradeName.toUpperCase();\r\n        return this.charConfig.UPGRADES[upperName as keyof typeof this.charConfig.UPGRADES] || null;\r\n    }\r\n}","import { CHAT } from \"./Config\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { ChatMessage } from \"./Types\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nexport class ChatManager {\r\n    constructor(private roomManager: RoomManager, private ui: UserInterface) { }\r\n\r\n    // #region [ Chat Management ]\r\n    //\r\n    /**\r\n     * Sends a message in the chat.\r\n     */\r\n    public sendChatMessage(userId: string): void {\r\n        if (!this.ui.chatInput || !this.ui.chatInput.value.trim()) return;\r\n\r\n        const message = this.ui.chatInput.value.trim();\r\n        if (message.length > CHAT.MAX_MESSAGE_LENGTH) { //TODO: Abstract reliance on config\r\n            alert(`Message too long! Max ${CHAT.MAX_MESSAGE_LENGTH} characters.`);\r\n            return;\r\n        }\r\n\r\n        // Send message to server\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'chat-message',\r\n            message: message,\r\n            timestamp: Date.now()\r\n        }));\r\n\r\n        // Display own message immediately\r\n        this.displayChatMessage({senderId: userId, message: message, isOwn: true});\r\n\r\n        // Clear input\r\n        this.ui.chatInput.value = '';\r\n    }\r\n\r\n    /**\r\n     * Displayes messages sent in the chat.\r\n     */\r\n    public displayChatMessage(params: ChatMessage): void {\r\n        if (!this.ui.chatMessages) return;\r\n        const { senderId, message, isOwn = false } = params;\r\n\r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.className = `chat_message ${isOwn ? 'own' : 'other'}`;\r\n\r\n        const senderSpan = document.createElement('span');\r\n        senderSpan.className = 'sender';\r\n        senderSpan.textContent = isOwn ? 'You:' : `${senderId}:`;\r\n\r\n        const contentSpan = document.createElement('span');\r\n        contentSpan.className = 'content';\r\n        contentSpan.textContent = message;\r\n\r\n        messageDiv.appendChild(senderSpan);\r\n        messageDiv.appendChild(contentSpan);\r\n\r\n        this.ui.chatMessages.appendChild(messageDiv);\r\n\r\n        // Scroll to bottom\r\n        this.ui.chatMessages.scrollTop = this.ui.chatMessages.scrollHeight;\r\n\r\n        // Limit message history\r\n        while (this.ui.chatMessages.children.length > CHAT.MAX_MESSAGES) {\r\n            this.ui.chatMessages.removeChild(this.ui.chatMessages.firstChild!);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the chat.\r\n     */\r\n    public clearChat(): void {\r\n        if (this.ui.chatMessages) {\r\n            this.ui.chatMessages.innerHTML = '';\r\n        }\r\n        if (this.ui.chatInput) {\r\n            this.ui.chatInput.value = '';\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { Vec2 } from \"./Types\";\r\n\r\nimport { SettingsManager } from \"./SettingsManager\";\r\n\r\nexport class ControlsManager {\r\n    private activeKeys: Set<string> = new Set();\r\n    private gamepadKeys: Set<string> = new Set();\r\n    private previousKeys: Set<string> = new Set();\r\n\r\n    private mousePos: Vec2 = { x: 0, y: 0 };;\r\n\r\n    private gamepadConnected: boolean = false;\r\n    public gamepadConnectionEnabled: boolean = true;\r\n\r\n    private gamepadRAxis: number | null = null;\r\n\r\n    constructor(private settingsManager: SettingsManager) {\r\n        this.initGamepad();\r\n    }\r\n\r\n    // #region [ Keys ]\r\n    //\r\n    /**\r\n     * Returns true if the key is currently being held down.\r\n     */\r\n    public held(key: string): boolean {\r\n        return this.activeKeys.has(key);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the key was pressed this frame.\r\n     */\r\n    public triggered(key: string): boolean {\r\n        return this.activeKeys.has(key) && !this.previousKeys.has(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a read-only copy of the currently active (pressed) keys.\r\n     */\r\n    public getActiveKeys(): ReadonlySet<string> {\r\n        return this.activeKeys;\r\n    }\r\n\r\n    /**\r\n     * Adds a key to the active key set.\r\n     */\r\n    public addKey(key: string): void {\r\n        this.activeKeys.add(key);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the active key set.\r\n     */\r\n    public removeKey(key: string): void {\r\n        this.activeKeys.delete(key);\r\n    }\r\n\r\n    /**\r\n     * Clears all currently active (pressed) keys.\r\n     */\r\n    public clearActiveKeys(): void {\r\n        this.activeKeys.clear();\r\n    }\r\n\r\n    /**\r\n     * Monitors the previous keys set, allowing for action triggers.\r\n     */\r\n    public updatePreviousKeys(): void {\r\n        this.previousKeys = new Set(this.activeKeys);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Mouse ]\r\n    //\r\n    /**\r\n     * Returns the current mouse position as a read-only Vec2.\r\n     */\r\n    public getMousePos(): Readonly<Vec2> {\r\n        return this.mousePos;\r\n    }\r\n\r\n    /**\r\n     * Updates the stored mouse position.\r\n     */\r\n    public setMousePos(pos: Vec2): void {\r\n        this.mousePos.x = pos.x;\r\n        this.mousePos.y = pos.y;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Gamepad ]\r\n    //\r\n    /**\r\n     * Initializes gamepad connection listeners.\r\n     */\r\n    private initGamepad(): void {\r\n        window.addEventListener(\"gamepadconnected\", () => {\r\n            console.log(\"Gamepad connected!\");\r\n            this.gamepadConnected = true;\r\n        });\r\n\r\n        window.addEventListener(\"gamepaddisconnected\", () => {\r\n            console.log(\"Gamepad disconnected!\");\r\n            this.gamepadConnected = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to poll for gamepad inputs when one is connected.\r\n     * \r\n     * Gamepad bindings map to the keyboard bindings to trigger actions.\r\n     */\r\n    public pollGamepad(): void {\r\n        if (!this.gamepadConnected) return;\r\n\r\n        const gamepads = navigator.getGamepads();\r\n        const gamepad = gamepads[0];\r\n        if (!gamepad) return;\r\n\r\n        const settings = this.settingsManager.getSettings();\r\n        const keybinds = settings.controls.keybinds;\r\n        const gamepadMap = settings.controls.gamepad;\r\n        const deadzone = gamepadMap.deadzone;\r\n\r\n        // Clear previous gamepad keys\r\n        this.gamepadKeys.forEach(key => this.activeKeys.delete(key));\r\n        this.gamepadKeys.clear();\r\n\r\n        const xAxis = gamepad.axes[0];\r\n        const yAxis = gamepad.axes[1];\r\n\r\n        if (xAxis > deadzone) {\r\n            this.activeKeys.add(keybinds.moveRight);\r\n            this.gamepadKeys.add(keybinds.moveRight);\r\n        }\r\n\r\n        if (xAxis < -deadzone) {\r\n            this.activeKeys.add(keybinds.moveLeft);\r\n            this.gamepadKeys.add(keybinds.moveLeft);\r\n        }\r\n\r\n        if (yAxis > deadzone) {\r\n            this.activeKeys.add(keybinds.moveDown);\r\n            this.gamepadKeys.add(keybinds.moveDown);\r\n        }\r\n\r\n        if (yAxis < -deadzone) {\r\n            this.activeKeys.add(keybinds.moveUp);\r\n            this.gamepadKeys.add(keybinds.moveUp);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.melee].pressed) {\r\n            this.activeKeys.add(keybinds.melee);\r\n            this.gamepadKeys.add(keybinds.melee);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.dash].pressed) {\r\n            this.activeKeys.add(keybinds.dash);\r\n            this.gamepadKeys.add(keybinds.dash);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.reload].pressed) {\r\n            this.activeKeys.add(keybinds.reload);\r\n            this.gamepadKeys.add(keybinds.reload);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.attack].pressed) {\r\n            this.activeKeys.add(keybinds.attack);\r\n            this.gamepadKeys.add(keybinds.attack);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.sprint].pressed) {\r\n            this.activeKeys.add(keybinds.sprint);\r\n            this.gamepadKeys.add(keybinds.sprint);\r\n        }\r\n\r\n        // Right stick aiming\r\n        const rightX = gamepad.axes[2];\r\n        const rightY = gamepad.axes[3];\r\n        const aimMagnitude = Math.sqrt(rightX * rightX + rightY * rightY);\r\n\r\n        if (aimMagnitude > deadzone) {\r\n            this.gamepadRAxis = Math.atan2(rightY, rightX) + Math.PI / 2;\r\n        } else {\r\n            this.gamepadRAxis = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current right axis input.\r\n     */\r\n    public getGamepadRAxis(): number | null {\r\n        return this.gamepadRAxis;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { CANVAS } from \"./Config\";\r\nimport { Player } from \"./Types\";\r\n\r\nimport { ObjectsManager } from \"./ObjectsManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\n\r\nexport class CollisionsManager {\r\n    constructor(\r\n        private objectsManager: ObjectsManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string\r\n    ) {}\r\n\r\n    /**\r\n     * Responsible for handling all collisions in the game. Routes to other collision functions.\r\n     */\r\n    public checkCollisions(delta: number): void {\r\n        const minX = CANVAS.BORDER_MARGIN;\r\n        const maxX = CANVAS.WIDTH - CANVAS.BORDER_MARGIN;\r\n        const minY = CANVAS.BORDER_MARGIN;\r\n        const maxY = CANVAS.HEIGHT - CANVAS.BORDER_MARGIN;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = Math.max(minX, Math.min(maxX, this.playerState.myPlayer.transform.pos.x));\r\n        this.playerState.myPlayer.transform.pos.y = Math.max(minY, Math.min(maxY, this.playerState.myPlayer.transform.pos.y));\r\n\r\n        this.checkObjectCollisions(delta);\r\n        this.checkPlayersCollisions(delta);\r\n    }\r\n\r\n    /**\r\n     * Checks for my player colliding with objects in the game. \r\n     */\r\n    private checkObjectCollisions(delta: number): void {\r\n        if (!this.collisionsEnabled(this.playerState.myPlayer)) return;\r\n\r\n        const collisionRadius = this.getPlayerCollider(this.playerState.myPlayer, 5);\r\n\r\n        this.objectsManager.ammoBoxes.forEach((ammoBox, boxId) => {\r\n            if (ammoBox.isOpen) return;\r\n\r\n            const dx = this.playerState.myPlayer.transform.pos.x - ammoBox.transform.pos.x;\r\n            const dy = this.playerState.myPlayer.transform.pos.y - ammoBox.transform.pos.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (distance <= collisionRadius) {\r\n                // Calculate how much ammo can actually be picked up\r\n                const currentReserve = this.playerState.myPlayer.actions.primary.magazine.currentReserve;\r\n                const maxReserve = this.playerState.myPlayer.actions.primary.magazine.maxReserve;\r\n                const actualAmmoAdded = Math.min(ammoBox.ammoAmount, maxReserve - currentReserve);\r\n\r\n                // Only pick up if we can actually add ammo\r\n                if (actualAmmoAdded > 0) {\r\n                    this.playerState.myPlayer.actions.primary.magazine.currentReserve += actualAmmoAdded;\r\n\r\n                    // Spawn UI bullets based on ACTUAL ammo added, not ammo box amount\r\n                    this.ui.ammoReservesUIController.spawnAmmoInReserveUI(actualAmmoAdded);\r\n\r\n                    console.log(`Picked up ammo box! +${actualAmmoAdded} bullets. Inventory: ${this.playerState.myPlayer.actions.primary.magazine.currentReserve}/${this.playerState.myPlayer.actions.primary.magazine.maxReserve}`);\r\n\r\n                    // Generate random lid physics\r\n                    const angle = Math.random() * Math.PI * 2;\r\n                    const speed = 2 + Math.random() * 3;\r\n\r\n                    ammoBox.isOpen = true;\r\n                    ammoBox.lid.velocity = {\r\n                        x: Math.cos(angle) * speed,\r\n                        y: Math.sin(angle) * speed\r\n                    };\r\n                    ammoBox.lid.torque = (Math.random() - 0.5) * 0.3;\r\n\r\n                    // Broadcast pickup with full box state\r\n                    this.roomManager.sendMessage(JSON.stringify({\r\n                        type: 'ammo-pickup',\r\n                        ammoBoxId: boxId,\r\n                        playerId: this.userId,\r\n                        boxState: {\r\n                            isOpen: true,\r\n                            lid: ammoBox.lid\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Checks for collisions with other players, blocking movement.\r\n     */\r\n    private checkPlayersCollisions(delta: number): void {\r\n        if (!this.collisionsEnabled(this.playerState.myPlayer)) return;\r\n\r\n        this.playerState.players.forEach((player: Player) => {\r\n            if (!this.collisionsEnabled(player)) return;\r\n\r\n            const dx = this.playerState.myPlayer.transform.pos.x - player.transform.pos.x;\r\n            const dy = this.playerState.myPlayer.transform.pos.y - player.transform.pos.y;\r\n            const dist = Math.sqrt(dx * dx + dy * dy);\r\n            const minDist = this.getPlayerCollider(this.playerState.myPlayer) + this.getPlayerCollider(player);\r\n\r\n            if (dist < minDist && dist > 0.01) { // Push myself away from the other player\r\n                const overlap = minDist - dist;\r\n                const pushX = (dx / dist) * overlap;\r\n                const pushY = (dy / dist) * overlap;\r\n\r\n                this.playerState.myPlayer.transform.pos.x += pushX;\r\n                this.playerState.myPlayer.transform.pos.y += pushY;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the player collider, with padding if needed.\r\n     */\r\n    public getPlayerCollider(player: Player, padding?: number): number {\r\n        let col = player.stats.size / 4\r\n\r\n        if (padding && padding > 0) {\r\n            col = (player.stats.size / 4) + padding\r\n        }\r\n\r\n        return col;\r\n    }\r\n    \r\n    /**\r\n     * Checks if the specific player's collisions are enabled.\r\n     */\r\n    public collisionsEnabled(player: Player): boolean {\r\n        if (player.stats.health.value <= 0) return false\r\n        if (player.flags.hidden && player.flags.invulnerable) return false\r\n        return true\r\n    }\r\n}","import { CANVAS, DECALS } from \"./Config\";\r\nimport { Decal } from \"./Types\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class DecalsManager {\r\n    public decals: Map<string, Decal> = new Map();\r\n\r\n    constructor(\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // #region [ Decals ]\r\n    //\r\n    /**\r\n     * Create a decal and broadcast over the network.\r\n     */\r\n    public createDecal(x: number, y: number, decalId: string, params: typeof DECALS[keyof typeof DECALS] = DECALS.PROJECTILE): void {\r\n        this.generateDecal(x, y, decalId, params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'add-decal',\r\n            decalId: decalId,\r\n            x: x,\r\n            y: y,\r\n            params: params\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Create a decal locally when receiving a decal network message.\r\n     */\r\n    public createDecalNetwork(x: number, y: number, decalId: string, params: typeof DECALS[keyof typeof DECALS]): void {\r\n        if (this.decals.has(decalId)) return; // Don't create duplicate decals\r\n\r\n        this.generateDecal(x, y, decalId, params);\r\n    }\r\n\r\n    /**\r\n     * Locally generate the decal and stamp it to the decal canvas.\r\n     */\r\n    public generateDecal(x: number, y: number, decalId: string, params: typeof DECALS[keyof typeof DECALS]): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        // Don't create decals outside canvas bounds\r\n        if (x < 0 || x > CANVAS.WIDTH || y < 0 || y > CANVAS.HEIGHT) return;\r\n\r\n        // Use random values within MIN/MAX ranges\r\n        const radius = params.RADIUS.MIN + Math.random() * (params.RADIUS.MAX - params.RADIUS.MIN);\r\n        const density = params.DENSITY.MIN + Math.random() * (params.DENSITY.MAX - params.DENSITY.MIN);\r\n        const opacity = params.OPACITY.MIN + Math.random() * (params.OPACITY.MAX - params.OPACITY.MIN);\r\n\r\n        const numPixels = Math.floor((radius * radius * Math.PI) * density);\r\n\r\n        const rgb = this.utility.hexToRgb(params.COLOR);\r\n        if (!rgb) {\r\n            console.error(`Invalid hex color: ${params.COLOR}`);\r\n            return;\r\n        }\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.globalCompositeOperation = 'source-over';\r\n\r\n        // Create scattered decal pixels around impact point\r\n        for (let i = 0; i < numPixels; i++) {\r\n            // Random position within decal radius\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const distance = Math.random() * radius;\r\n            const pixelX = x + Math.cos(angle) * distance;\r\n            const pixelY = y + Math.sin(angle) * distance;\r\n\r\n            // Skip if outside canvas\r\n            if (pixelX < 0 || pixelX >= CANVAS.WIDTH || pixelY < 0 || pixelY >= CANVAS.HEIGHT) continue;\r\n\r\n            // Random opacity with variation\r\n            const pixelOpacity = opacity + (Math.random() - 0.5) * params.VARIATION;\r\n            const clampedOpacity = Math.max(0.05, Math.min(0.6, pixelOpacity));\r\n\r\n            // Use custom color from params\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${clampedOpacity})`;\r\n            this.ui.decalCtx.fillRect(Math.floor(pixelX), Math.floor(pixelY), 1, 1);\r\n        }\r\n\r\n        this.ui.decalCtx.restore();\r\n\r\n        // Store decal with params\r\n        this.decals.set(decalId, { params, pos: { x, y } });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { GAMEPAD_MAP } from \"./Config\";\r\n\r\nimport { Animator } from \"./Animator\";\r\nimport { ChatManager } from \"./ChatManager\";\r\nimport { ControlsManager } from \"./ControlsManager\";\r\nimport { GameState } from \"./GameState\";\r\nimport { RoomController } from \"./RoomController\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class EventsManager {\r\n    constructor(\r\n        private animator: Animator,\r\n        private chatManager: ChatManager,\r\n        private controlsManager: ControlsManager,\r\n        private gameState: GameState,\r\n        private roomController: RoomController,\r\n        private playerState: PlayerState,\r\n        private settingsManager: SettingsManager,\r\n        private ui: UserInterface,\r\n        private userId: string\r\n    ) { }\r\n\r\n    // #region [ Events ]\r\n    //\r\n    /**\r\n     * Initializes all event listeners to the required DOM elements.\r\n     */\r\n    public initEventListeners(): void {\r\n        if (!this.ui.canvas || !this.ui.hostButton || !this.ui.joinButton || !this.ui.quickplayButton ||\r\n            !this.ui.lobbyLeaveButton || !this.ui.lobbyCodeButton || !this.ui.gameLeaveButton ||\r\n            !this.ui.gameCodeButton || !this.ui.startGameBtn || !this.ui.chatSendBtn || !this.ui.chatInput) return;\r\n\r\n        this.ui.hostButton.addEventListener(\"click\", () => this.roomController.hostRoom());\r\n        this.ui.joinButton.addEventListener(\"click\", () => this.roomController.joinRoom());\r\n        this.ui.quickplayButton.addEventListener(\"click\", () => this.roomController.quickPlay());\r\n        this.ui.lobbyLeaveButton.addEventListener(\"click\", () => this.roomController.leaveRoom());\r\n        this.ui.lobbyCodeButton.addEventListener(\"click\", () => this.roomController.copyRoomCode());\r\n        this.ui.gameLeaveButton.addEventListener(\"click\", () => this.roomController.leaveRoom());\r\n        this.ui.gameCodeButton.addEventListener(\"click\", () => this.roomController.copyRoomCode());\r\n        this.ui.startGameBtn.addEventListener(\"click\", () => this.onStartButtonClick());\r\n\r\n        // [ Chat ]\r\n        this.ui.chatSendBtn.addEventListener(\"click\", () => this.chatManager.sendChatMessage(this.userId));\r\n        this.ui.chatInput.addEventListener(\"keypress\", (e) => {\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault();\r\n                this.chatManager.sendChatMessage(this.userId);\r\n            }\r\n        });\r\n        this.ui.chatInput.addEventListener(\"focus\", () => {\r\n            this.controlsManager.clearActiveKeys();\r\n\r\n            this.playerState.canShoot = false;\r\n            this.playerState.isSprinting = false;\r\n            this.playerState.isDashing = false;\r\n            this.playerState.isBurstActive = false;\r\n            this.playerState.currentBurstShot = 0;\r\n        });\r\n\r\n        this.ui.chatInput.addEventListener(\"blur\", () => {\r\n            this.controlsManager.clearActiveKeys();\r\n\r\n            this.playerState.canShoot = true;\r\n            this.playerState.isSprinting = false;\r\n            this.playerState.isDashing = false;\r\n        });\r\n\r\n        this.ui.settingsButton?.addEventListener('click', () => {\r\n            this.ui.showSettingsPage();\r\n        });\r\n\r\n        this.ui.settingsCloseButton?.addEventListener('click', () => {\r\n            this.ui.hideSettingsPage();\r\n        })\r\n\r\n        // Prevent right-click context menu on the entire window\r\n        window.addEventListener('contextmenu', (e) => {\r\n            e.preventDefault();\r\n        });\r\n\r\n        // Listen on document for events, not canvas.\r\n        // If this presents issues, swap \"document.\" with \"this.interface.canvas\"\r\n        document.addEventListener('keydown', (e) => this.onKeyDown(e));\r\n        document.addEventListener('keyup', (e) => this.onKeyUp(e));\r\n\r\n        document.addEventListener('mouseup', (e) => this.onMouseUp(e));\r\n        document.addEventListener('mousemove', (e) => this.onMouseMove(e));\r\n\r\n        this.ui.canvas.addEventListener('mousedown', (e) => this.onMouseDown(e)); // Canvas only listening for mouse (shooting mainly)\r\n\r\n        this.ui.switchSettingsPage('sound'); // Init settings page to sound tab on dom load\r\n\r\n        this.ui.controlsTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('controls');\r\n        });\r\n\r\n        this.ui.graphicsTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('graphics');\r\n        });\r\n\r\n        this.ui.soundTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('sound');\r\n        });\r\n\r\n        // Settings page click to open when hidden\r\n        this.ui.controlsBody?.addEventListener('click', () => {\r\n            if (this.ui.controlsBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('controls');\r\n            }\r\n        });\r\n\r\n        this.ui.graphicsBody?.addEventListener('click', () => {\r\n            if (this.ui.graphicsBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('graphics');\r\n            }\r\n        });\r\n\r\n        this.ui.soundBody?.addEventListener('click', () => {\r\n            if (this.ui.soundBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('sound');\r\n            }\r\n        });\r\n\r\n        this.initSettingsAudioSliders();\r\n        this.initSettingsInputListeners();\r\n        this.initSettingsToggleListeners();\r\n    }\r\n\r\n    /**\r\n     * Handles all key press events.\r\n     */\r\n    private onKeyDown(e: KeyboardEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        const key = e.key.toLowerCase();\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        const isGameKey = Object.values(keybinds).includes(key);\r\n        if (!isGameKey) return;\r\n\r\n        e.preventDefault();\r\n        this.controlsManager.addKey(key);\r\n    }\r\n\r\n    /**\r\n     * Handles all key release events.\r\n     */\r\n    private onKeyUp(e: KeyboardEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        const key = e.key.toLowerCase();\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        if (!Object.values(keybinds).includes(key)) return;\r\n\r\n        e.preventDefault();\r\n        this.controlsManager.removeKey(key);\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse click events.\r\n     */\r\n    private onMouseDown(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused || !this.ui.canvas) return;\r\n\r\n        if (e.button === 0) {\r\n            this.updateMouse(e);\r\n            this.controlsManager.addKey('mouse1'); // Left Click\r\n        } else if (e.button === 1) {\r\n            this.controlsManager.addKey('mouse3'); // Middle Click\r\n        } else if (e.button === 2) {\r\n            this.updateMouse(e);\r\n            this.controlsManager.addKey('mouse2'); // Right Click\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse release events.\r\n     */\r\n    private onMouseUp(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        if (e.button === 0) {\r\n            this.controlsManager.removeKey('mouse1'); // Left Click\r\n        } else if (e.button === 1) {\r\n            this.controlsManager.addKey('mouse3'); // Middle Click\r\n        } else if (e.button === 2) {\r\n            this.controlsManager.removeKey('mouse2'); // Right Click\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse movement events.\r\n     */\r\n    private onMouseMove(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        this.updateMouse(e);\r\n        const mousePos = this.controlsManager.getMousePos();\r\n\r\n        // Calculate rotation based on mouse position\r\n        const dx = mousePos.x - this.playerState.myPlayer.transform.pos.x;\r\n        const dy = mousePos.y - this.playerState.myPlayer.transform.pos.y;\r\n        const rotation = Math.atan2(dy, dx) + Math.PI / 2;\r\n\r\n        // Rotate my character\r\n        this.animator.rotateCharacterPart(this.userId, rotation);\r\n    }\r\n\r\n    /**\r\n     * Processes mouse position and updates.\r\n     */\r\n    private updateMouse(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.ui.canvas) return;\r\n\r\n        const rect = this.ui.canvas.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n\r\n        this.controlsManager.setMousePos({ x, y });\r\n    }\r\n\r\n    /**\r\n     * Called when the Start Game button is pressed.\r\n     */\r\n    private onStartButtonClick(): void {\r\n        const event = new CustomEvent(\"customEvent_startGame\");\r\n        window.dispatchEvent(event);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Page ]\r\n    //\r\n    /**\r\n     * Initializes event listeners for audio sliders on audio settings page.\r\n     */\r\n    private initSettingsAudioSliders(): void {\r\n        const sliders = [\r\n            { slider: this.ui.masterSlider, fill: this.ui.masterFill, value: this.ui.masterValue, channel: 'master' },\r\n            { slider: this.ui.interfaceSlider, fill: this.ui.interfaceFill, value: this.ui.interfaceValue, channel: 'interface' },\r\n            { slider: this.ui.musicSlider, fill: this.ui.musicFill, value: this.ui.musicValue, channel: 'music' },\r\n            { slider: this.ui.sfxSlider, fill: this.ui.sfxFill, value: this.ui.sfxValue, channel: 'sfx' },\r\n            { slider: this.ui.voiceSlider, fill: this.ui.voiceFill, value: this.ui.voiceValue, channel: 'voice' }\r\n        ];\r\n\r\n        sliders.forEach(({ slider, fill, value, channel }) => {\r\n            if (!slider || !fill || !value) return;\r\n\r\n            slider.addEventListener('mousedown', (e) => {\r\n                const handleMove = (moveEvent: MouseEvent) => {\r\n                    const sliderValue = this.ui.calculateSliderValue(slider, moveEvent.clientX);\r\n                    this.ui.updateSettingsSlider(fill, value, sliderValue);\r\n\r\n                    this.settingsManager.updateSettings({\r\n                        audio: {\r\n                            mixer: {\r\n                                [channel]: sliderValue\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n\r\n                const handleUp = () => {\r\n                    document.removeEventListener('mousemove', handleMove);\r\n                    document.removeEventListener('mouseup', handleUp);\r\n                };\r\n\r\n                handleMove(e);\r\n                document.addEventListener('mousemove', handleMove);\r\n                document.addEventListener('mouseup', handleUp);\r\n                e.preventDefault();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners for input fields on all settings pages.\r\n     */\r\n    private initSettingsInputListeners(): void {\r\n        const inputs = [\r\n            { input: this.ui.deadzoneInput, settingPath: 'controls.gamepad.deadzone', parse: parseFloat }\r\n            // Future inputs go here: { input: this.ui.someInput, settingPath: 'path.to.setting', parse: parseFloat }\r\n        ];\r\n\r\n        inputs.forEach(({ input, settingPath, parse }) => {\r\n            if (!input) return;\r\n\r\n            input.addEventListener('change', () => {\r\n                const rawValue = input.value;\r\n                const parsedValue = parse(rawValue);\r\n\r\n                if (isNaN(parsedValue)) return; // Invalid input\r\n\r\n                // Build nested update object\r\n                const pathParts = settingPath.split('.');\r\n                const update: any = {};\r\n                let current = update;\r\n\r\n                for (let i = 0; i < pathParts.length - 1; i++) {\r\n                    current[pathParts[i]] = {};\r\n                    current = current[pathParts[i]];\r\n                }\r\n                current[pathParts[pathParts.length - 1]] = parsedValue;\r\n\r\n                this.settingsManager.updateSettings(update);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners for toggles on all settings pages.\r\n     */\r\n    private initSettingsToggleListeners(): void {\r\n        const toggles = [\r\n            { toggle: this.ui.particleJSToggle, settingPath: 'graphics.renderBackgroundParticles' },\r\n            { toggle: this.ui.staticVfxToggle, settingPath: 'graphics.showStaticOverlay' },\r\n            { toggle: this.ui.ammoReservesPhysicsToggle, settingPath: 'graphics.physics.ammoReserves' }\r\n        ];\r\n\r\n        toggles.forEach(({ toggle, settingPath }) => {\r\n            if (!toggle) return;\r\n\r\n            toggle.addEventListener('click', () => {\r\n                const currentValue = toggle.getAttribute('aria-checked') === 'true';\r\n                const newValue = !currentValue;\r\n\r\n                // Update toggle visually\r\n                if (newValue) {\r\n                    toggle.setAttribute('checked', 'true');\r\n                    toggle.setAttribute('aria-checked', 'true');\r\n                } else {\r\n                    toggle.removeAttribute('checked');\r\n                    toggle.setAttribute('aria-checked', 'false');\r\n                }\r\n\r\n                // Build nested update object\r\n                const pathParts = settingPath.split('.');\r\n                const update: any = {};\r\n                let current = update;\r\n\r\n                for (let i = 0; i < pathParts.length - 1; i++) {\r\n                    current[pathParts[i]] = {};\r\n                    current = current[pathParts[i]];\r\n                }\r\n                current[pathParts[pathParts.length - 1]] = newValue;\r\n\r\n                this.settingsManager.updateSettings(update);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the keybinds interface, with user prefs or defaults.\r\n     * \r\n     * Also sets up keybind change listeners.\r\n     */\r\n    public initKeybindListeners(): void {\r\n        const controlsSettings = this.settingsManager.getSettings().controls;\r\n        this.ui.initKeybindsInterface(\r\n            controlsSettings,\r\n            (action, type, newBinding) => this.onBindingChange(action, type, newBinding)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Event that fires on keybind or gamepad press when input change modal is visible.\r\n     */\r\n    public onBindingChange(action: string, type: 'keybind' | 'gamepad', newBinding: string | number): void {\r\n        if (type === 'keybind') {\r\n            this.settingsManager.updateSettings({\r\n                controls: {\r\n                    keybinds: {\r\n                        [action]: newBinding as string\r\n                    }\r\n                }\r\n            });\r\n\r\n            const element = document.getElementById(`${action}Keybind`);\r\n            if (element) {\r\n                element.textContent = newBinding === ' ' ? 'SPACE' : (newBinding as string).toUpperCase();\r\n            }\r\n        } else {\r\n            this.settingsManager.updateSettings({\r\n                controls: {\r\n                    gamepad: {\r\n                        [action]: newBinding as number\r\n                    }\r\n                }\r\n            });\r\n\r\n            const element = document.getElementById(`${action}Gamepad`);\r\n            if (element) {\r\n                const buttonName = Object.keys(GAMEPAD_MAP).find(\r\n                    key => typeof GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === 'number'\r\n                        && GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === newBinding\r\n                );\r\n                element.textContent = buttonName || newBinding.toString();\r\n            }\r\n        }\r\n    }\r\n}","import { GAME } from \"./Config\";\r\n\r\nexport class GameState {\r\n    /**\r\n     * Tracks paused state of the application.\r\n     */\r\n    public isPaused = false;\r\n\r\n    /**\r\n     * Becomes true when game loop starts.\r\n     * \r\n     * False when game loop is no longer ongoing (end game, websocket disconnect, leave room)\r\n     */\r\n    public gameInProgress = false;\r\n\r\n    /**\r\n     * Max wins needed for session to end.\r\n     */\r\n    public gameMaxWins = GAME.MAX_WINS;\r\n\r\n    /**\r\n     * Max players allowed in a game.\r\n     */\r\n    public gameMaxPlayers = GAME.MAX_PLAYERS;\r\n\r\n    constructor() {}\r\n}","import { LobbyControlsParams, LobbyOptionsParams, LobbyPlayer, SetInputParams, SetToggleParams } from \"./Types\";\r\n\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class LobbyManager {\r\n    public inLobby = false;\r\n    public lobbyPlayers: Map<string, LobbyPlayer> = new Map(); // Temporary partial player object used for lobby only information\r\n\r\n    constructor(private utility: Utility, private ui: UserInterface, private roomManager: RoomManager) { }\r\n\r\n    // #region [ Lobby Controls ]\r\n    //\r\n    /**\r\n     * Calls updateDisplay to show the lobby specific controls.\r\n     */\r\n    public showLobbyControls(params: LobbyControlsParams): void {\r\n        const { lobby, lobbyOptions, myPlayer, roomId, userId } = params;\r\n        const { isHost, maxWins, privateRoom, upgradesEnabled } = lobbyOptions;\r\n\r\n        this.ui.updateDisplay(lobby, \"lobby\", roomId);\r\n\r\n        // Add myself to lobby\r\n        this.lobbyPlayers.set(userId, {\r\n            id: userId,\r\n            color: myPlayer.color,\r\n            isHost: isHost\r\n        });\r\n\r\n        // Setup lobby inputs/toggles using nested options\r\n        this.setupLobbyOptions(lobbyOptions);\r\n\r\n        const winsInputParams: SetInputParams = {\r\n            inputId: \"winsInput\",\r\n            value: maxWins\r\n        };\r\n        const privateToggleParams: SetToggleParams = {\r\n            toggleId: \"privateToggle\",\r\n            value: privateRoom\r\n        };\r\n        const upgradesToggleParams: SetToggleParams = {\r\n            toggleId: \"upgradesToggle\",\r\n            value: upgradesEnabled\r\n        };\r\n\r\n        this.utility.setToggle(privateToggleParams);\r\n        this.utility.setToggle(upgradesToggleParams);\r\n        this.utility.setInput(winsInputParams);\r\n\r\n        this.ui.displayLobbyPlayers(isHost, lobby, userId);\r\n        this.ui.updateHostDisplay(isHost, lobby);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Lobby Options ]\r\n    //\r\n    /**\r\n     * Sets up lobby toggles and input for game settings.\r\n     */\r\n    public setupLobbyOptions(params: LobbyOptionsParams): void {\r\n        this.setupLobbyToggle('privateToggle', params.isHost, 'privateRoom', () => params.privateRoom, (val) => params.privateRoom = val);\r\n        this.setupLobbyToggle('upgradesToggle', params.isHost, 'upgradesEnabled', () => params.upgradesEnabled, (val) => params.upgradesEnabled = val);\r\n        this.setupLobbyInput('winsInput', params.isHost, 'maxWins', () => params.maxWins, (val) => params.maxWins = val);\r\n        this.setupLobbyInput('playersInput', params.isHost, 'maxPlayers', () => params.maxPlayers, (val) => params.maxPlayers = val);\r\n    }\r\n\r\n    /**\r\n     * Called by setupLobbyOptions - Responsible for toggles.\r\n     */\r\n    private setupLobbyToggle(elementProp: 'privateToggle' | 'upgradesToggle', isHost: boolean, messageKey: string, getter: () => boolean, setter: (val: boolean) => void): void {\r\n        const element = this.ui[elementProp];\r\n        if (!element) return;\r\n\r\n        // Store the handler so we can remove it later\r\n        const handlerKey = `${elementProp}Handler` as keyof this;\r\n\r\n        // Remove existing listener if it exists\r\n        if (this[handlerKey]) {\r\n            element.removeEventListener('click', this[handlerKey] as EventListener);\r\n        }\r\n\r\n        // Create and store the new handler\r\n        const handler = () => {\r\n            if (!isHost) return;\r\n\r\n            const newValue = !getter();\r\n            setter(newValue);\r\n\r\n            const toggleParams: SetToggleParams = {\r\n                toggleId: elementProp,\r\n                value: newValue\r\n            }\r\n            this.utility.setToggle(toggleParams);\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'lobby-options',\r\n                [messageKey]: newValue\r\n            }));\r\n\r\n            console.log(`${messageKey} changed to: ${newValue}`);\r\n        };\r\n\r\n        // Store handler for later removal & add listener\r\n        (this as any)[handlerKey] = handler;\r\n        element.addEventListener('click', handler);\r\n    }\r\n\r\n    /**\r\n     * Called by setupLobbyOptions - Responsible for input fields.\r\n     */\r\n    private setupLobbyInput(elementProp: 'winsInput' | 'playersInput', isHost: boolean, messageKey: string, getter: () => number, setter: (val: number) => void): void {\r\n        const element = this.ui[elementProp];\r\n        if (!element) return;\r\n\r\n        // Store the handler so we can remove it later\r\n        const handlerKey = `${elementProp}Handler` as keyof this;\r\n\r\n        // Remove existing listener if it exists\r\n        if (this[handlerKey]) {\r\n            element.removeEventListener('change', this[handlerKey] as EventListener);\r\n        }\r\n\r\n        // Create and store the new handler\r\n        const handler = () => {\r\n            if (!isHost) return;\r\n\r\n            const newValue = parseInt(element.value);\r\n            if (isNaN(newValue) || newValue < 1) {\r\n                element.value = getter().toString();\r\n                return;\r\n            }\r\n\r\n            setter(newValue);\r\n\r\n            const inputParams: SetInputParams = {\r\n                inputId: elementProp,\r\n                value: newValue\r\n            }\r\n            this.utility.setInput(inputParams);\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'lobby-options',\r\n                [messageKey]: newValue\r\n            }));\r\n\r\n            console.log(`${messageKey} changed to: ${newValue}`);\r\n        };\r\n\r\n        // Store handler for later removal & setup listener\r\n        (this as any)[handlerKey] = handler;\r\n        element.addEventListener('change', handler);\r\n    }\r\n\r\n    /**\r\n     * Syncs lobby options when state change messages are received over websocket.\r\n     */\r\n    public syncLobbyOptions(options: any): void {\r\n        this.syncOption(options, 'privateRoom', 'isPrivateRoom', 'privateToggle', this.utility.setToggle.bind(this.utility), 'Lobby privacy', (v) => v ? 'Private' : 'Public');\r\n        this.syncOption(options, 'maxWins', 'gameMaxWins', 'winsInput', this.utility.setInput.bind(this.utility), 'Game max wins');\r\n        this.syncOption(options, 'maxPlayers', 'gameMaxPlayers', 'playersInput', this.utility.setInput.bind(this.utility), 'Game max players');\r\n        this.syncOption(options, 'upgradesEnabled', 'isUpgradesEnabled', 'upgradesToggle', this.utility.setToggle.bind(this.utility), 'Game upgrades toggled');\r\n    }\r\n\r\n    /**\r\n     * [DO NOT CALL] Syncs a lobby option - called by syncLobbyOptions.\r\n     */\r\n    private syncOption<T extends SetInputParams | SetToggleParams>(options: any, key: string, prop: string, elementId: string, fn: (params: T) => void, label: string, format?: (v: any) => string): void {\r\n        if (options[key] === undefined) return;\r\n\r\n        (this as any)[prop] = options[key];\r\n\r\n        // Build params object based on element type\r\n        const params = elementId.includes('Input')\r\n            ? { inputId: elementId, value: options[key] } as T\r\n            : { toggleId: elementId, value: options[key] } as T;\r\n\r\n        fn(params);\r\n\r\n        const displayValue = format ? format(options[key]) : options[key];\r\n        console.log(`${label} synced to: ${displayValue}`);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Lobby Player Management ]\r\n    //\r\n    /**\r\n     * Promote specific player to host.\r\n     */\r\n    public promotePlayer(playerId: string): void {\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'promote-player',\r\n            targetPlayerId: playerId\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Kick specific  player from the current lobby.\r\n     */\r\n    public kickPlayer(playerId: string): void {\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'kick-player',\r\n            targetPlayerId: playerId\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { CANVAS, DECALS, OBJECT_DEFAULTS, PARTICLES } from \"./Config\";\r\n\r\nimport { CharacterConfig } from \"./CharacterConfig\";\r\nimport { DecalsManager } from \"./DecalsManager\";\r\nimport { DeathDecal, DeathStamp, Emitter, EmitterParams, Particle, PlayerHitParams, Shrapnel, ShrapnelPiece, Vec2 } from \"./Types\";\r\nimport { RenderingManager } from \"./RenderingManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { CollisionsManager } from \"./CollisionsManager\";\r\n\r\n\r\nexport class ParticlesManager {\r\n    public particles: Map<string, Particle> = new Map();\r\n    public emitters: Map<string, Emitter> = new Map();\r\n    public shrapnel: Map<string, ShrapnelPiece> = new Map();\r\n\r\n    constructor(\r\n        private charConfig: CharacterConfig,\r\n        private collisionsManager: CollisionsManager,\r\n        private decalsManager: DecalsManager,\r\n        private playerState: PlayerState,\r\n        private renderingManager: RenderingManager,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // #region [ Particles ]\r\n    //\r\n    // [ Basic Particles ]\r\n    //\r\n    /**\r\n     * Creates particles with params. Entrypoint for all particle creations.\r\n     */\r\n    public createParticles(x: number, y: number, particleId: string, params: typeof PARTICLES[keyof typeof PARTICLES], direction?: Vec2): void {\r\n        this.generateParticles(x, y, particleId, params, direction);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'add-particles',\r\n            particleId: particleId,\r\n            x: x,\r\n            y: y,\r\n            params: params,\r\n            direction: direction\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Responsible for actual generation of particles locally.\r\n     */\r\n    public generateParticles(x: number, y: number, particleId: string, params: typeof PARTICLES[keyof typeof PARTICLES], direction?: Vec2): void {\r\n        const count = Math.floor(params.COUNT.MIN + Math.random() * (params.COUNT.MAX - params.COUNT.MIN));\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const lifetime = params.LIFETIME.MIN + Math.random() * (params.LIFETIME.MAX - params.LIFETIME.MIN);\r\n            const speed = params.SPEED.MIN + Math.random() * (params.SPEED.MAX - params.SPEED.MIN);\r\n            const size = params.SIZE.MIN + Math.random() * (params.SIZE.MAX - params.SIZE.MIN);\r\n            const opacity = params.OPACITY.MIN + Math.random() * (params.OPACITY.MAX - params.OPACITY.MIN);\r\n            const torque = params.TORQUE.MIN + Math.random() * (params.TORQUE.MAX - params.TORQUE.MIN);\r\n            const noiseStrength = params.NOISE ? (params.NOISE.STRENGTH.MIN + Math.random() * (params.NOISE.STRENGTH.MAX - params.NOISE.STRENGTH.MIN)) : 0;\r\n            const noiseScale = params.NOISE ? (params.NOISE.SCALE.MIN + Math.random() * (params.NOISE.SCALE.MAX - params.NOISE.SCALE.MIN)) : 0;\r\n            const sizeOverLifetime = params.SIZE_OVER_LIFETIME ? (params.SIZE_OVER_LIFETIME.MIN + Math.random() * (params.SIZE_OVER_LIFETIME.MAX - params.SIZE_OVER_LIFETIME.MIN)) : 0;\r\n\r\n            let angle;\r\n            if (direction) {\r\n                angle = Math.atan2(direction.y, direction.x) + (Math.random() - 0.5) * params.SPREAD;\r\n            } else {\r\n                angle = Math.random() * Math.PI * 2;\r\n            }\r\n\r\n            const particle = {\r\n                age: 0,\r\n                collide: params.COLLIDE,\r\n                color: params.COLOR,\r\n                fade: params.FADE,\r\n                hasCollided: false,\r\n                id: `${particleId}_${i}`,\r\n                initialSize: size,\r\n                lifetime: lifetime,\r\n                maxOpacity: opacity,\r\n                noiseScale: noiseScale,\r\n                noiseStrength: noiseStrength,\r\n                opacity: opacity,\r\n                paint: params.PAINT,\r\n                pos: {\r\n                    x: x,\r\n                    y: y\r\n                },\r\n                size: size,\r\n                stain: params.STAIN,\r\n                torque: torque,\r\n                rotation: Math.random() * Math.PI * 2,\r\n                sizeOverLifetime: sizeOverLifetime,\r\n                velocity: {\r\n                    x: Math.cos(angle) * speed,\r\n                    y: Math.sin(angle) * speed\r\n                }\r\n            };\r\n\r\n            this.particles.set(particle.id, particle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles updating of all particles in the game during the update loop.\r\n     */\r\n    public updateParticles(delta: number): void {\r\n        const particlesToRemove: string[] = [];\r\n\r\n        this.particles.forEach((particle, id) => {\r\n            if (particle.noiseStrength > 0 && particle.noiseScale > 0) {\r\n                const time = Date.now() * 0.001; // Use time for animation\r\n                const noiseX = this.utility.simplexNoise2D(particle.pos.x / particle.noiseScale, time);\r\n                const noiseY = this.utility.simplexNoise2D(particle.pos.y / particle.noiseScale, time + 100);\r\n\r\n                particle.velocity.x += noiseX * particle.noiseStrength * delta;\r\n                particle.velocity.y += noiseY * particle.noiseStrength * delta;\r\n            }\r\n\r\n            if (particle.sizeOverLifetime > 0) {\r\n                const ageRatio = particle.age / particle.lifetime;\r\n                particle.size = particle.initialSize * (1 + ageRatio * particle.sizeOverLifetime);\r\n            }\r\n\r\n            particle.pos.x += particle.velocity.x * delta;\r\n            particle.pos.y += particle.velocity.y * delta;\r\n            particle.age += 16.67 * delta;\r\n\r\n            particle.rotation += (particle.torque * Math.PI / 180) * delta;\r\n\r\n            if (particle.fade) {\r\n                const ageRatio = particle.age / particle.lifetime;\r\n                particle.opacity = particle.maxOpacity * (1 - ageRatio);\r\n            }\r\n\r\n            // Handle staining during extended collision life\r\n            if (particle.hasCollided && particle.stain) {\r\n                // Paint every frame during extended life\r\n                this.stampParticle(particle);\r\n\r\n                // Calculate how far we are through the extended life\r\n                const extendedLifeRatio = (particle.age - (particle.lifetime - particle.lifetime * 0.5)) / (particle.lifetime * 0.5);\r\n\r\n                if (extendedLifeRatio > 0) {\r\n                    // Shrink particle during extended life\r\n                    particle.size = Math.max(0.5, particle.size * (1 - extendedLifeRatio * 0.1));\r\n\r\n                    // Fade opacity during extended life (from current opacity to 0)\r\n                    particle.opacity = particle.opacity * (1 - extendedLifeRatio);\r\n                }\r\n            }\r\n\r\n            const shouldRemove = particle.age >= particle.lifetime ||\r\n                particle.pos.x < -10 || particle.pos.x > CANVAS.WIDTH + 10 ||\r\n                particle.pos.y < -10 || particle.pos.y > CANVAS.HEIGHT + 10;\r\n\r\n            if (shouldRemove) {\r\n                // Handle collision for particles with COLLIDE property\r\n                if (particle.collide && particle.age >= particle.lifetime &&\r\n                    particle.pos.x >= 0 && particle.pos.x <= CANVAS.WIDTH &&\r\n                    particle.pos.y >= 0 && particle.pos.y <= CANVAS.HEIGHT &&\r\n                    !particle.hasCollided) {\r\n\r\n                    // Simulate collision with ground/surface\r\n                    particle.hasCollided = true;\r\n\r\n                    // Reduce speed\r\n                    const speedReduction = 0.875 + Math.random() * 0.1;\r\n                    particle.velocity.x *= (1 - speedReduction);\r\n                    particle.velocity.y *= (1 - speedReduction);\r\n\r\n                    // Extend lifetime\r\n                    const lifetimeExtension = particle.lifetime * 0.5;\r\n                    particle.lifetime += lifetimeExtension;\r\n\r\n                    // Don't remove this particle yet\r\n                    return;\r\n                }\r\n\r\n                // Handle painting before removal (only for non-staining particles)\r\n                if (particle.paint && !particle.stain && particle.age >= particle.lifetime &&\r\n                    particle.pos.x >= 0 && particle.pos.x <= CANVAS.WIDTH &&\r\n                    particle.pos.y >= 0 && particle.pos.y <= CANVAS.HEIGHT) {\r\n\r\n                    this.stampParticle(particle);\r\n                }\r\n\r\n                particlesToRemove.push(id);\r\n            }\r\n        });\r\n\r\n        particlesToRemove.forEach(id => this.particles.delete(id));\r\n    }\r\n\r\n    /**\r\n     * Responsible for the actual rendering of particles spawned via emitters and particle functions.\r\n     */\r\n    public drawParticles(): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        this.particles.forEach(particle => {\r\n            const rgb = this.utility.hexToRgb(particle.color);\r\n            if (!rgb) return;\r\n\r\n            if (!this.ui.ctx) return;\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.globalAlpha = particle.opacity;\r\n\r\n            // Apply rotation if torque exists\r\n            if (particle.torque !== 0) {\r\n                this.ui.ctx.translate(particle.pos.x + particle.size / 2, particle.pos.y + particle.size / 2);\r\n                this.ui.ctx.rotate(particle.rotation);\r\n                this.ui.ctx.fillStyle = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n                this.ui.ctx.fillRect(-particle.size / 2, -particle.size / 2, particle.size, particle.size);\r\n            } else {\r\n                this.ui.ctx.fillStyle = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n                this.ui.ctx.fillRect(Math.floor(particle.pos.x), Math.floor(particle.pos.y), particle.size, particle.size);\r\n            }\r\n\r\n            this.ui.ctx.restore();\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Persistence ]\r\n    //\r\n    /**\r\n     * Stamps local particles onto the decal canvas.\r\n     */\r\n    private stampParticle(particle: Particle): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        const rgb = this.utility.hexToRgb(particle.color);\r\n        if (!rgb) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.globalCompositeOperation = 'source-over';\r\n\r\n        // Paint with rotation if particle had torque\r\n        if (particle.torque !== 0) {\r\n            this.ui.decalCtx.translate(particle.pos.x + particle.size / 2, particle.pos.y + particle.size / 2);\r\n            this.ui.decalCtx.rotate(particle.rotation);\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${particle.opacity})`;\r\n            this.ui.decalCtx.fillRect(-particle.size / 2, -particle.size / 2, particle.size, particle.size);\r\n        } else {\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${particle.opacity})`;\r\n            this.ui.decalCtx.fillRect(Math.floor(particle.pos.x), Math.floor(particle.pos.y), particle.size, particle.size);\r\n        }\r\n\r\n        this.ui.decalCtx.restore();\r\n\r\n        const id = `stamp_${Date.now()}`;\r\n\r\n        this.decalsManager.decals.set(id, {\r\n            params: null,\r\n            pos: {\r\n                x: particle.pos.x,\r\n                y: particle.pos.y\r\n            }\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Emitters ]\r\n    //\r\n    /**\r\n     * Creates a particle emitter in the game, and syncs this action via websocket message \"particle-emitter\".\r\n     */\r\n    public createEmitter(params: EmitterParams): void {\r\n        // Create an emitter locally\r\n        this.generateEmitter(params);\r\n\r\n        // Broadcast to other clients\r\n        const message: EmitterParams = {\r\n            type: 'particle-emitter',\r\n            id: params.id,\r\n            interval: params.interval,\r\n            lifetime: params.lifetime,\r\n            offset: {\r\n                x: params.offset.x,\r\n                y: params.offset.y\r\n            },\r\n            pos: {\r\n                x: params.pos.x,\r\n                y: params.pos.y\r\n            },\r\n            particleType: params.particleType,\r\n            playerId: params.playerId\r\n        };\r\n        this.roomManager.sendMessage(JSON.stringify(message));\r\n\r\n        console.log(`Emitter created on ${params.playerId} for ${params.lifetime}ms`);\r\n    }\r\n\r\n    /**\r\n     * Actual generation of the emitter object into the emitter mapping.\r\n     */\r\n    public generateEmitter(params: EmitterParams): void {\r\n        // Calculate offset from center\r\n        const offsetX = params.pos.x - params.offset.x;\r\n        const offsetY = params.pos.y - params.offset.y;\r\n\r\n        // Calculate direction (away from center towards hit point)\r\n        const angle = Math.atan2(offsetY, offsetX);\r\n\r\n        this.emitters.set(params.id, {\r\n            age: 0,\r\n            direction: angle,\r\n            emissionInterval: params.interval,\r\n            lastEmission: 0,\r\n            lifetime: params.lifetime,\r\n            offset: {\r\n                x: offsetX,\r\n                y: offsetY\r\n            },\r\n            particleType: params.particleType,\r\n            playerId: params.playerId\r\n        });\r\n    }\r\n    /**\r\n     * Process all particle emitters in the game during the update loop.\r\n     */\r\n    public updateEmitters(delta: number): void {\r\n        const emittersToRemove: string[] = [];\r\n\r\n        this.emitters.forEach((emitter, emitterId) => {\r\n            emitter.age += 16.67 * delta;\r\n\r\n            const player = emitter.playerId === this.userId ? this.playerState.myPlayer : this.playerState.players.get(emitter.playerId);\r\n            if (!player || player.stats.health.value <= 0) {\r\n                emittersToRemove.push(emitterId);\r\n                return;\r\n            }\r\n\r\n            // Calculate current world position\r\n            const worldX = player.transform.pos.x + emitter.offset.x;\r\n            const worldY = player.transform.pos.y + emitter.offset.y;\r\n\r\n            if (emitter.age >= emitter.lastEmission + emitter.emissionInterval) {\r\n                // Create directional spray with cone spread\r\n                const coneSpread = Math.PI * 0.6; // 108 degree cone\r\n                const randomSpread = (Math.random() - 0.5) * coneSpread;\r\n                const angle = emitter.direction + randomSpread;\r\n\r\n                // Variable speed for more natural spray\r\n                const baseSpeed = 3;\r\n                const speedVariation = (Math.random() - 0.5) * 4; // -2 to +2\r\n                const finalSpeed = Math.max(0.5, baseSpeed + speedVariation);\r\n\r\n                this.generateParticles( // Create particles locally\r\n                    worldX + (Math.random() - 0.5) * 8,\r\n                    worldY + (Math.random() - 0.5) * 8,\r\n                    `emitter_particles_${emitterId}_${emitter.age}`,\r\n                    emitter.particleType,\r\n                    {\r\n                        x: Math.cos(angle) * finalSpeed,\r\n                        y: Math.sin(angle) * finalSpeed\r\n                    }\r\n                );\r\n\r\n                emitter.lastEmission = emitter.age;\r\n                emitter.emissionInterval = 120 + Math.random() * 180; // More consistent timing\r\n            }\r\n\r\n            // Remove expired emitters\r\n            if (emitter.age >= emitter.lifetime) {\r\n                this.decalsManager.generateDecal(worldX, worldY, `emitter_decal_${emitterId}`, DECALS.BLOOD);\r\n                emittersToRemove.push(emitterId);\r\n            }\r\n        });\r\n\r\n        emittersToRemove.forEach(id => this.emitters.delete(id));\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Gore ]\r\n    //\r\n    /**\r\n     * Generates gore particles using the decals for the character object.\r\n     */\r\n    public generateGore(params: DeathDecal): void {\r\n        const gorePool = [...this.charConfig.CHARACTER_DECALS.DEFAULT.GORE]; // TODO: Get current pool for gore\r\n        for (let i = 0; i < params.gore.amount && gorePool.length > 0; i++) {\r\n            const goreAsset = this.utility.getRandomInArray(gorePool);\r\n            gorePool.splice(gorePool.indexOf(goreAsset), 1);\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const distance = this.utility.getRandomNum(0, params.radius);\r\n\r\n            const goreDecal: DeathStamp = {\r\n                type: 'gore',\r\n                src: goreAsset,\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x + Math.cos(angle) * distance,\r\n                        y: params.pos.y + Math.sin(angle) * distance\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2),\r\n                },\r\n                scale: this.utility.getRandomNum(0.65, 1.05)\r\n            };\r\n\r\n            const decalId = `death_gore_${params.ownerId}_${Date.now()}_${i}`;\r\n            this.stampGore(goreDecal);\r\n            this.decalsManager.decals.set(decalId, {\r\n                params: null,\r\n                pos: {\r\n                    x: goreDecal.transform.pos.x,\r\n                    y: goreDecal.transform.pos.y\r\n                }\r\n            });\r\n        }\r\n\r\n        const bloodPool = [...this.charConfig.CHARACTER_DECALS.DEFAULT.BLOOD]; // TODO: Get current pool for blood\r\n        for (let i = 0; i < params.blood.amount && bloodPool.length > 0; i++) {\r\n            const bloodAsset = this.utility.getRandomInArray(bloodPool);\r\n            bloodPool.splice(bloodPool.indexOf(bloodAsset), 1);\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const distance = this.utility.getRandomNum(0, params.radius * 0.7);\r\n\r\n            const bloodDecal: DeathStamp = {\r\n                type: 'blood',\r\n                src: bloodAsset,\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x + Math.cos(angle) * distance,\r\n                        y: params.pos.y + Math.sin(angle) * distance\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2),\r\n                },\r\n                scale: this.utility.getRandomNum(1.25, 1.45)\r\n            };\r\n\r\n            const decalId = `death_blood_${params.ownerId}_${Date.now()}_${i}`;\r\n            this.stampGore(bloodDecal);\r\n            this.decalsManager.decals.set(decalId, {\r\n                params: null,\r\n                pos: {\r\n                    x: bloodDecal.transform.pos.x,\r\n                    y: bloodDecal.transform.pos.y\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Persists gore on the decal canvas.\r\n     */\r\n    private stampGore(params: DeathStamp): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        let image = this.renderingManager.characterImages.get(params.src);\r\n\r\n        if (!image) {\r\n            image = new Image();\r\n            image.src = params.src;\r\n            this.renderingManager.characterImages.set(params.src, image);\r\n\r\n            if (!image.complete) {\r\n                image.onload = () => {\r\n                    this.stampGore(params);\r\n                };\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.translate(params.transform.pos.x, params.transform.pos.y);\r\n        this.ui.decalCtx.rotate(params.transform.rot);\r\n\r\n        const drawSize = 32 * params.scale;\r\n        this.ui.decalCtx.drawImage(\r\n            image,\r\n            -drawSize / 2,\r\n            -drawSize / 2,\r\n            drawSize,\r\n            drawSize\r\n        );\r\n\r\n        this.ui.decalCtx.restore();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Shrapnel ]\r\n    //\r\n    /**\r\n     * Creates shrapnel pieces and sends network message with Shrapnel data.\r\n     */\r\n    public spawnShrapnel(params: Shrapnel): void {\r\n        const pieces: ShrapnelPiece[] = [];\r\n\r\n        // Generate all pieces locally\r\n        for (let i = 0; i < params.amount; i++) {\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const speed = this.utility.getRandomNum(params.speed.min, params.speed.max);\r\n            const lifetime = this.utility.getRandomNum(params.lifetime.min, params.lifetime.max);\r\n            const size = this.utility.getRandomNum(params.size.min, params.size.max);\r\n            const torque = this.utility.getRandomNum(params.torque.min, params.torque.max) * (Math.PI / 180); // Convert radians > deg\r\n\r\n            const piece: ShrapnelPiece = {\r\n                id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n                image: params.images[i], // Already randomly selected in triggerUnique\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x,\r\n                        y: params.pos.y\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2), // Random start rot\r\n                },\r\n                velocity: {\r\n                    x: Math.cos(angle) * speed,\r\n                    y: Math.sin(angle) * speed\r\n                },\r\n                rotationSpeed: torque, // Random spin\r\n                size: size,\r\n                age: 0,\r\n                lifetime: lifetime,\r\n                ownerId: this.userId,\r\n                damage: params.damage\r\n            };\r\n\r\n            pieces.push(piece);\r\n            this.shrapnel.set(piece.id, piece);\r\n        }\r\n\r\n        // Send ONE message with all pieces\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'shrapnel-spawn',\r\n            pieces: pieces\r\n        }));\r\n\r\n        console.log(`Spawned ${pieces.length} shrapnel pieces`);\r\n    }\r\n\r\n    /**\r\n     * Generates shrapnel baed on received network message 'shrapnel-spawn' data.\r\n     */\r\n    public generateShrapnel(params: ShrapnelPiece[]): void {\r\n        params.forEach(piece => {\r\n            this.shrapnel.set(piece.id, piece);\r\n        });\r\n\r\n        console.log(`Received ${params.length} shrapnel pieces from network`);\r\n    }\r\n\r\n    /**\r\n     * When shrapnel exists, handles updating of each piece via Client udpate loop.\r\n     */\r\n    public updateShrapnel(delta: number): void {\r\n        if (this.shrapnel.size === 0) return;\r\n\r\n        const shrapnelToRemove: string[] = [];\r\n\r\n        this.shrapnel.forEach((piece, id) => {\r\n            // Update physics\r\n            piece.transform.pos.x += piece.velocity.x * delta;\r\n            piece.transform.pos.y += piece.velocity.y * delta;\r\n            piece.transform.rot += piece.rotationSpeed * delta;\r\n            piece.age += 16.67 * delta;\r\n\r\n            // Apply friction\r\n            // TODO: Add world friction\r\n            piece.velocity.x *= 0.98;\r\n            piece.velocity.y *= 0.98;\r\n\r\n            // Only owner checks collisions and deals damage\r\n            if (piece.ownerId === this.userId) {\r\n                // Check collision with all players\r\n                this.playerState.players.forEach((player, playerId) => {\r\n                    if (player.stats.health.value > 0) {\r\n                        const dx = piece.transform.pos.x - player.transform.pos.x;\r\n                        const dy = piece.transform.pos.y - player.transform.pos.y;\r\n                        const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                        // Collision detection (using player collider + shrapnel size for padding)\r\n                        if (distance <= this.collisionsManager.getPlayerCollider(player, piece.size)) {\r\n                            const actualDamage = Math.max(0, piece.damage - player.stats.defense);\r\n                            const newHealth = Math.max(0, player.stats.health.value - actualDamage);\r\n                            player.stats.health.value = newHealth;\r\n\r\n                            // Remove this shrapnel piece after hit\r\n                            shrapnelToRemove.push(id);\r\n                            console.log(`Shrapnel hit ${playerId} for ${piece.damage} damage`);\r\n\r\n                            const params: PlayerHitParams = {\r\n                                target: player,\r\n                                shooterId: this.userId,\r\n                                damage: piece.damage,\r\n                                newHealth: newHealth,\r\n                                source: piece,\r\n                                wasKill: newHealth <= 0\r\n                            }\r\n                            window.dispatchEvent(new CustomEvent(\"customEvent_playerHitRelay\", { detail: { params }}));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Remove if lifetime expired or out of bounds\r\n            if (piece.age >= piece.lifetime ||\r\n                piece.transform.pos.x < 0 || piece.transform.pos.x > CANVAS.WIDTH ||\r\n                piece.transform.pos.y < 0 || piece.transform.pos.y > CANVAS.HEIGHT) {\r\n\r\n                // Stamp as decal if died in bounds\r\n                if (piece.transform.pos.x >= 0 && piece.transform.pos.x <= CANVAS.WIDTH &&\r\n                    piece.transform.pos.y >= 0 && piece.transform.pos.y <= CANVAS.HEIGHT) {\r\n                    this.stampShrapnel(piece);\r\n                }\r\n\r\n                shrapnelToRemove.push(id);\r\n            }\r\n        });\r\n\r\n        // Remove dead shrapnel\r\n        shrapnelToRemove.forEach(id => this.shrapnel.delete(id));\r\n    }\r\n\r\n    /**\r\n     * Draws the moving shrapnel to the canvas for rendering.\r\n     */\r\n    public drawShrapnel(): void {\r\n        if (!this.ui.ctx || this.shrapnel.size === 0) return;\r\n\r\n        this.shrapnel.forEach(piece => {\r\n            if (!this.ui.ctx) return;\r\n\r\n            let image = this.renderingManager.characterImages.get(piece.image);\r\n\r\n            if (!image) {\r\n                image = new Image();\r\n                image.src = piece.image;\r\n                this.renderingManager.characterImages.set(piece.image, image);\r\n\r\n                if (!image.complete) { return; }\r\n            }\r\n\r\n            if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.translate(piece.transform.pos.x, piece.transform.pos.y);\r\n            this.ui.ctx.rotate(piece.transform.rot);\r\n\r\n            this.ui.ctx.drawImage(\r\n                image,\r\n                -piece.size / 2,\r\n                -piece.size / 2,\r\n                piece.size,\r\n                piece.size\r\n            );\r\n\r\n            this.ui.ctx.restore();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stamps dead shrapnel to the decal canvas to persist visually.\r\n     */\r\n    private stampShrapnel(params: ShrapnelPiece): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        let image = this.renderingManager.characterImages.get(params.image);\r\n        if (!image || !image.complete || image.naturalWidth === 0) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.translate(params.transform.pos.x, params.transform.pos.y);\r\n        this.ui.decalCtx.rotate(params.transform.rot);\r\n\r\n        this.ui.decalCtx.drawImage(\r\n            image,\r\n            -params.size / 2,\r\n            -params.size / 2,\r\n            params.size,\r\n            params.size\r\n        );\r\n\r\n        this.ui.decalCtx.restore();\r\n\r\n        // Register decal\r\n        this.decalsManager.decals.set(`shrapnel_${params.id}`, {\r\n            params: null,\r\n            pos: {\r\n                x: params.transform.pos.x,\r\n                y: params.transform.pos.y\r\n            }\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { AMMO_BOX, CANVAS, GAME, PLAYER_DEFAULTS, UI } from \"./Config\";\r\nimport { CharacterLayer, Player, Projectile } from \"./Types\";\r\n\r\nimport { Animator } from \"./Animator\";\r\nimport { CharacterManager } from \"./CharacterManager\";\r\nimport { ObjectsManager } from \"./ObjectsManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nexport class RenderingManager {\r\n    public characterImages: Map<string, HTMLImageElement> = new Map();\r\n    public ammoBoxImages: { [layer: string]: HTMLImageElement } = {};\r\n\r\n    constructor(\r\n        private animator: Animator,\r\n        private charManager: CharacterManager,\r\n        private objectsManager: ObjectsManager,\r\n        private ui: UserInterface,\r\n    ) { }\r\n\r\n    /**\r\n     * Clear all canvas rendering context in the game.\r\n     * \r\n     * / OR /\r\n     * \r\n     * Pass the specific CanvasRenderingContext2D to clear.\r\n     */\r\n    public clearCtx(customCtx?: CanvasRenderingContext2D): void {\r\n        if (customCtx) {\r\n            customCtx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n            return;\r\n        }\r\n\r\n        if (!this.ui.decalCtx || !this.ui.ctx) return;\r\n\r\n        this.ui.ctx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n        this.ui.decalCtx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n    }\r\n\r\n    // [ Character ]\r\n    //\r\n    /**\r\n     * Draws the corresponding character layers defined in the rig to create the player character.\r\n     */\r\n    public drawCharacter(player: Player, isMe: boolean = false): void {\r\n        if (!this.ui.ctx) return;\r\n        if (player.stats.health.value <= 0) return;\r\n\r\n        // Static ghost memory (attached per instance)\r\n        const staticGhosts = (this as any)._spectralGhosts ??= {\r\n            lastHidden: new Map<string, boolean>(),\r\n            flashes: [] as {\r\n                x: number;\r\n                y: number;\r\n                t: number;\r\n                type: 'start' | 'end';\r\n                playerId: string;\r\n            }[]\r\n        };\r\n\r\n        const now = Date.now();\r\n        const wasHidden = staticGhosts.lastHidden.get(player.id) ?? false;\r\n        const isHidden = player.flags.hidden;\r\n        const isSpectral = player.unique.includes(\"spectral_image\");\r\n\r\n        // Detect start of dash (flash out)\r\n        if (!wasHidden && isHidden && isSpectral) {\r\n            staticGhosts.flashes.push({\r\n                x: player.transform.pos.x,\r\n                y: player.transform.pos.y,\r\n                t: now,\r\n                type: 'start',\r\n                playerId: player.id\r\n            });\r\n        }\r\n\r\n        // Detect end of dash (flash in)\r\n        if (wasHidden && !isHidden && isSpectral) {\r\n            staticGhosts.flashes.push({\r\n                x: player.transform.pos.x,\r\n                y: player.transform.pos.y,\r\n                t: now,\r\n                type: 'end',\r\n                playerId: player.id\r\n            });\r\n        }\r\n\r\n        staticGhosts.lastHidden.set(player.id, isHidden);\r\n\r\n        // Render ghost flashes\r\n        for (const ghost of staticGhosts.flashes) {\r\n            if (ghost.playerId !== player.id) continue;\r\n            const age = now - ghost.t;\r\n            if (age > player.actions.dash.time) continue;\r\n\r\n            const alpha = ghost.type === 'start'\r\n                ? 1 - (age / player.actions.dash.time)\r\n                : (age / player.actions.dash.time);\r\n\r\n            this.ui.ctx.save();\r\n\r\n            // Invert-style effect via difference + high saturation\r\n            this.ui.ctx.globalAlpha = alpha * 0.8;\r\n            this.ui.ctx.globalCompositeOperation = 'difference';\r\n            this.ui.ctx.filter = 'saturate(100) contrast(2)';\r\n\r\n            const ghostPlayer = {\r\n                ...player,\r\n                transform: {\r\n                    ...player.transform,\r\n                    pos: { x: ghost.x, y: ghost.y }\r\n                }\r\n            };\r\n\r\n            this.drawCharacterLayers(ghostPlayer);\r\n            this.ui.ctx.restore();\r\n        }\r\n\r\n        if (isHidden) return;\r\n\r\n        // Main player\r\n        this.drawCharacterLayers(player);\r\n\r\n        this.ui.ctx.fillStyle = UI.TEXT_COLOR;\r\n        this.ui.ctx.font = UI.FONT;\r\n        this.ui.ctx.textAlign = 'center';\r\n\r\n        const displayName = isMe ? 'You' : player.id.substring(0, 6);\r\n        this.ui.ctx.fillText(\r\n            displayName,\r\n            player.transform.pos.x,\r\n            player.transform.pos.y - PLAYER_DEFAULTS.VISUAL.ID_DISPLAY_OFFSET\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Entrypoint for rendering of all character layers.\r\n     */\r\n    private drawCharacterLayers(player: Player): void {\r\n        this.drawCharacterLayer(player, 'BODY', player.rig.body);\r\n        this.drawCharacterLayer(player, 'WEAPON', player.rig.weapon);\r\n        this.drawCharacterLayer(player, 'HEAD', player.rig.head);\r\n        this.drawCharacterLayer(player, 'HEADWEAR', player.rig.headwear);\r\n        this.drawUpgradeLayers(player);\r\n    }\r\n\r\n    /**\r\n     * Retrieves character assets and draws each layer using drawCharacterPart.\r\n     */\r\n    private drawCharacterLayer(player: Player, layer: CharacterLayer, variant: string): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        const assets = this.charManager.getCharacterAsset(layer, variant);\r\n\r\n        if (typeof assets === 'string') {\r\n            this.drawCharacterPart(player, assets, layer);\r\n        }\r\n        else if (Array.isArray(assets)) {\r\n            assets.forEach((assetPath, index) => {\r\n                this.drawCharacterPart(player, assetPath, layer, index);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the actual rendering for all player parts on each layer.\r\n     */\r\n    private drawCharacterPart(player: Player, assetPath: string, partType: CharacterLayer, partIndex?: number): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        let image = this.characterImages.get(assetPath);\r\n\r\n        if (!image) {\r\n            image = new Image();\r\n            image.src = assetPath;\r\n            this.characterImages.set(assetPath, image);\r\n            if (!image.complete) return;\r\n        }\r\n\r\n        if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n        const drawSize = GAME.CHARACTER_SIZE * (player.stats.size / GAME.CHARACTER_SIZE);\r\n\r\n        // Check for animation offset\r\n        const animationId = `${player.id}_${partType}_${partIndex || 0}`;\r\n        const animationOffset = this.animator.characterOffsets?.get(animationId) || { x: 0, y: 0 };\r\n\r\n        this.ui.ctx.save();\r\n\r\n        // Apply rotation if it exists\r\n        if (player.transform.rot !== undefined) {\r\n            this.ui.ctx.translate(player.transform.pos.x, player.transform.pos.y);\r\n            this.ui.ctx.rotate(player.transform.rot);\r\n\r\n            // Apply animation offset\r\n            this.ui.ctx.translate(animationOffset.x, animationOffset.y);\r\n\r\n            this.ui.ctx.drawImage(\r\n                image,\r\n                -drawSize / 2,\r\n                -drawSize / 2,\r\n                drawSize,\r\n                drawSize\r\n            );\r\n        } else {\r\n            this.ui.ctx.drawImage(\r\n                image,\r\n                player.transform.pos.x - drawSize / 2 + animationOffset.x,\r\n                player.transform.pos.y - drawSize / 2 + animationOffset.y,\r\n                drawSize,\r\n                drawSize\r\n            );\r\n        }\r\n\r\n        this.ui.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draws the equipment and unique upgrades that have a character layer visual component.\r\n     */\r\n    private drawUpgradeLayers(player: Player): void {\r\n        // Check unique upgrades\r\n        player.unique.forEach(uniqueName => {\r\n            const assetPath = this.charManager.getUpgradeVisual(uniqueName);\r\n            if (assetPath) {\r\n                this.drawCharacterPart(player, assetPath, 'UPGRADES');\r\n            }\r\n        });\r\n\r\n        // Check equipment upgrades\r\n        player.equipment.forEach(equipmentName => {\r\n            const assetPath = this.charManager.getUpgradeVisual(equipmentName);\r\n            if (assetPath) {\r\n                this.drawCharacterPart(player, assetPath, 'UPGRADES');\r\n            }\r\n        });\r\n    }\r\n    //\r\n\r\n    // [ Objects ]\r\n    //\r\n    /**\r\n     * Draws object entities on the canvas.\r\n     */\r\n    public drawObjects(): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        //TODO: Use this function to draw all 'objects' in the scene.\r\n\r\n        // Ammo Boxes\r\n        this.objectsManager.ammoBoxes.forEach(ammoBox => {\r\n            if (!this.ui.ctx) return;\r\n\r\n            // Load and cache images\r\n            if (!this.ammoBoxImages) this.ammoBoxImages = {};\r\n            const layers: (keyof typeof AMMO_BOX)[] = ['BASE', 'BULLETS', 'LID'];\r\n            layers.forEach(layer => {\r\n                if (!this.ammoBoxImages[layer]) {\r\n                    const img = new Image();\r\n                    img.src = AMMO_BOX[layer];\r\n                    this.ammoBoxImages[layer] = img;\r\n                }\r\n            });\r\n\r\n            if (!layers.every(layer => this.ammoBoxImages[layer]?.complete && this.ammoBoxImages[layer]?.naturalWidth > 0)) return;\r\n\r\n            const scale = 35;\r\n            const x = ammoBox.transform.pos.x;\r\n            const y = ammoBox.transform.pos.y;\r\n\r\n            // Update lid physics if open\r\n            if (ammoBox.isOpen) {\r\n                ammoBox.lid.velocity.x *= 0.85;\r\n                ammoBox.lid.velocity.y *= 0.85;\r\n                ammoBox.lid.torque *= 0.85;\r\n\r\n                ammoBox.lid.pos.x += ammoBox.lid.velocity.x;\r\n                ammoBox.lid.pos.y += ammoBox.lid.velocity.y;\r\n                ammoBox.lid.rot += ammoBox.lid.torque;\r\n            }\r\n\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.translate(x, y);\r\n            this.ui.ctx.rotate(ammoBox.transform.rot || 0);\r\n\r\n            // Draw body\r\n            this.ui.ctx.drawImage(this.ammoBoxImages['BASE'], -scale / 2, -scale / 2, scale, scale);\r\n\r\n            // Draw bullets only if NOT open\r\n            if (!ammoBox.isOpen) {\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['BULLETS'], -scale / 2, -scale / 2, scale, scale);\r\n                // Draw closed lid here\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['LID'], -scale / 2, -scale / 2, scale, scale);\r\n            }\r\n\r\n            this.ui.ctx.restore();\r\n\r\n            // Draw flying lid separately if open\r\n            if (ammoBox.isOpen) {\r\n                this.ui.ctx.save();\r\n                this.ui.ctx.translate(x + ammoBox.lid.pos.x, y + ammoBox.lid.pos.y);\r\n                this.ui.ctx.rotate((ammoBox.transform.rot || 0) + ammoBox.lid.rot);\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['LID'], -scale / 2, -scale / 2, scale, scale);\r\n                this.ui.ctx.restore();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draws the rect of the projectile and renders it on the main canvas.\r\n     */\r\n    public drawProjectile(projectile: Projectile): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        // Calculate projectile direction\r\n        const speed = Math.sqrt(projectile.velocity.x * projectile.velocity.x + projectile.velocity.y * projectile.velocity.y);\r\n        const dirX = projectile.velocity.x / speed;\r\n        const dirY = projectile.velocity.y / speed;\r\n\r\n        // Calculate front and back points\r\n        const frontX = projectile.transform.pos.x + dirX * (projectile.length / 2);\r\n        const frontY = projectile.transform.pos.y + dirY * (projectile.length / 2);\r\n        const backX = projectile.transform.pos.x - dirX * (projectile.length / 2);\r\n        const backY = projectile.transform.pos.y - dirY * (projectile.length / 2);\r\n\r\n        // Draw the capsule body (rectangle)\r\n        this.ui.ctx.fillStyle = projectile.color;\r\n        this.ui.ctx.strokeStyle = projectile.color;\r\n        this.ui.ctx.lineWidth = projectile.size;\r\n        this.ui.ctx.lineCap = 'round';\r\n\r\n        this.ui.ctx.beginPath();\r\n        this.ui.ctx.moveTo(backX, backY);\r\n        this.ui.ctx.lineTo(frontX, frontY);\r\n        this.ui.ctx.stroke();\r\n    }\r\n}","import { GAME } from \"./Config\";\r\n\r\nimport { GameState } from \"./GameState\";\r\nimport { LobbyManager } from \"./LobbyManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UpgradeManager } from \"./UpgradeManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\nimport { WebsocketManager } from \"./WebsocketManager\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class RoomController {\r\n    constructor(\r\n        private gameState: GameState,\r\n        private lobbyManager: LobbyManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private upgradeManager: UpgradeManager,\r\n        private userId: string,\r\n        private utility: Utility,\r\n        private wsManager: WebsocketManager\r\n    ) { }\r\n\r\n    /**\r\n     * Calls updateDisplay to show the room specific controls.\r\n     */\r\n    public showRoomControls(): void {\r\n        this.ui.updateDisplay(this.lobbyManager, \"room\");\r\n    }\r\n\r\n    /**\r\n     * Creates a websocket connection on the server, and a room with the roomManager.\r\n     */\r\n    public hostRoom(): void {\r\n        if (!this.wsManager.getWebSocket()) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                const roomId = this.roomManager.createRoom();\r\n                if (!roomId) return;\r\n\r\n                this.playerState.isHost = true;\r\n\r\n                this.lobbyManager.showLobbyControls({\r\n                    lobby: this.lobbyManager,\r\n                    lobbyOptions: {\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    },\r\n                    myPlayer: this.playerState.myPlayer,\r\n                    roomId: roomId,\r\n                    userId: this.userId\r\n                });\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        } else {\r\n            const roomId = this.roomManager.createRoom();\r\n            if (!roomId) return;\r\n\r\n            this.playerState.isHost = true;\r\n\r\n            this.lobbyManager.showLobbyControls({\r\n                lobby: this.lobbyManager,\r\n                lobbyOptions: {\r\n                    maxPlayers: this.gameState.gameMaxPlayers,\r\n                    maxWins: this.gameState.gameMaxWins,\r\n                    isHost: this.playerState.isHost,\r\n                    privateRoom: this.roomManager.isPrivateRoom,\r\n                    upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                },\r\n                myPlayer: this.playerState.myPlayer,\r\n                roomId: roomId,\r\n                userId: this.userId\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Displays the room joining modal, and allows pasting of room code.\r\n     */\r\n    public joinRoom(): void {\r\n        this.ui.showJoinRoomModal((roomId: string) => {\r\n            this.joinRoomById(roomId);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Directly connect to a game with it's room id.\r\n     * \r\n     * Called by the room join modal.\r\n     */\r\n    private joinRoomById(roomId: string): void {\r\n        if (!roomId) return;\r\n        if (!this.wsManager.getWebSocket()) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                this.roomManager.joinRoom(roomId!);\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        } else {\r\n            this.roomManager.joinRoom(roomId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls quickplay endpoint on server to find a random open public room.\r\n     */\r\n    public quickPlay(): void {\r\n        fetch('/quickplay')\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('No available rooms');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                if (!this.wsManager.getWebSocket()) {\r\n                    this.wsManager.connectWebSocket();\r\n                    this.utility.safeTimeout(() => {\r\n                        this.roomManager.joinRoom(data.roomId);\r\n                    }, GAME.CONNECTION_TIMEOUT);\r\n                } else {\r\n                    this.roomManager.joinRoom(data.roomId);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (!this.ui.modal || !this.ui.modalConfirmButton || !this.ui.modalCancelButton ||\r\n                    !this.ui.modalContent || !this.ui.modalText || !this.ui.modalInput ||\r\n                    !this.ui.modalErrorDiv || !this.ui.modalButtons) return;\r\n\r\n                this.ui.modal.classList.remove('hidden');\r\n                this.ui.modalInput.style.display = 'none';\r\n                this.ui.modalErrorDiv.textContent = ' ';\r\n                this.ui.modalButtons.style.display = 'flex';\r\n                this.ui.modalCancelButton.style.display = 'none';\r\n\r\n                this.ui.modalText.textContent = 'No available games found.';\r\n\r\n                this.ui.modalConfirmButton.textContent = 'Confirm';\r\n                this.ui.modalConfirmButton.onclick = () => {\r\n                    if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalCancelButton ||\r\n                        !this.ui.modalText || !this.ui.modalConfirmButton) return;\r\n\r\n                    this.ui.modal.classList.add('hidden');\r\n                    this.ui.modalInput.style.display = 'flex';\r\n                    this.ui.modalText.textContent = 'Join Room';\r\n                    this.ui.modalCancelButton.style.display = 'flex';\r\n                    this.ui.modalConfirmButton.onclick = null;\r\n                };\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Called when leaving the current room - resets game state.\r\n     */\r\n    public leaveRoom(): void {\r\n        this.roomManager.leaveRoom();\r\n\r\n        window.dispatchEvent(new CustomEvent(\"customEvent_resetGameState\", {\r\n            detail: { resetType: \"Room\" }\r\n        }));\r\n\r\n        this.showRoomControls();\r\n    }\r\n\r\n    /**\r\n     * Used to check for a room link in the URL when loading the page.\r\n     */\r\n    public checkForRoomInURL(): void {\r\n        const roomId = this.getRoomIdFromURL();\r\n        if (roomId) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                this.roomManager.joinRoom(roomId);\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * [DO NOT CALL - Call checkForRoomInURL] Directly parses the room ID from the URL if one is found. \r\n     */\r\n    private getRoomIdFromURL(): string | null {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        return urlParams.get('room');\r\n    }\r\n\r\n    /**\r\n     * Gets the room ID contextually, and copies it to clipboard.\r\n     */\r\n    public copyRoomCode(): void {\r\n        // Get room ID from either lobby or game container\r\n        const roomId = this.lobbyManager.inLobby\r\n            ? this.ui.roomIdDisplay?.textContent\r\n            : this.ui.gameRoomIdDisplay?.textContent;\r\n\r\n        if (!roomId) return;\r\n\r\n        navigator.clipboard.writeText(roomId).then(() => {\r\n            if (!this.ui.modal || !this.ui.modalConfirmButton || !this.ui.modalCancelButton ||\r\n                !this.ui.modalContent || !this.ui.modalText || !this.ui.modalInput ||\r\n                !this.ui.modalErrorDiv || !this.ui.modalButtons) return;\r\n\r\n            this.ui.modal.classList.remove('hidden');\r\n            this.ui.modalInput.style.display = 'none';\r\n            this.ui.modalErrorDiv.textContent = ' ';\r\n            this.ui.modalButtons.style.display = 'flex';\r\n            this.ui.modalCancelButton.style.display = 'none';\r\n\r\n            this.ui.modalText.textContent = 'Room code copied!';\r\n            this.ui.modalConfirmButton.textContent = 'Confirm';\r\n\r\n            // Define the close function\r\n            const closeModal = () => {\r\n                if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalCancelButton ||\r\n                    !this.ui.modalText || !this.ui.modalConfirmButton) return;\r\n\r\n                this.ui.modal.classList.add('hidden');\r\n                this.ui.modalInput.style.display = 'flex';\r\n                this.ui.modalText.textContent = 'Join Room';\r\n                this.ui.modalCancelButton.style.display = 'flex';\r\n                this.ui.modalConfirmButton.onclick = null;\r\n            };\r\n\r\n            this.ui.modalConfirmButton.onclick = closeModal;\r\n\r\n            // Auto-close after 3 seconds\r\n            this.utility.safeTimeout(() => {\r\n                if (this.ui.modal && !this.ui.modal.classList.contains('hidden')) {\r\n                    closeModal();\r\n                }\r\n            }, 3000);\r\n        }).catch(() => {\r\n            alert(\"Could not copy. Please copy manually.\");\r\n        });\r\n    }\r\n}","import { ROOM } from './Config';\r\nimport { RoomMessage } from './Types';\r\n\r\nimport { Utility } from './Utility';\r\n\r\nexport class RoomManager {\r\n  private currentRoom: string | null = null;\r\n  private ws: WebSocket | null = null;\r\n  private messageHandlers: ((message: RoomMessage) => void)[] = [];\r\n\r\n  public isPrivateRoom = false;\r\n\r\n  constructor(private userId: string, private utility: Utility) { }\r\n\r\n  /**\r\n   * Assigns the active WebSocket connection and sets up message handling.\r\n   */\r\n  public setWebSocket(ws: WebSocket): void {\r\n    this.ws = ws;\r\n    this.setupMessageHandler();\r\n  }\r\n\r\n  /**\r\n   * Creates a new room and automatically joins it as the host.\r\n   */\r\n  public createRoom(): string | null {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot create room: Not connected to server. Please refresh the page.');\r\n      return null;\r\n    }\r\n\r\n    const roomId = this.utility.generateUID(ROOM.ID_LENGTH, ROOM.ID_PREFIX);\r\n    this.joinRoom(roomId, true);\r\n    return roomId;\r\n  }\r\n\r\n  /**\r\n   * Joins an existing room or creates one if isHost is true.\r\n   */\r\n  public joinRoom(roomId: string, isHost: boolean = false): void {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot join room: Not connected to server. Please refresh the page.');\r\n      return;\r\n    }\r\n\r\n    const message: RoomMessage = {\r\n      type: isHost ? 'create-room' : 'join-room',\r\n      roomId,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n    this.currentRoom = roomId;\r\n    this.utility.generateLink(roomId, 'room');\r\n  }\r\n\r\n  /**\r\n   * Leaves the current room and resets the client state.\r\n   */\r\n  public leaveRoom(): void {\r\n    if (!this.currentRoom || !this.ws) return;\r\n\r\n    const message: RoomMessage = {\r\n      type: 'leave-room',\r\n      roomId: this.currentRoom,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n    this.currentRoom = null;\r\n    window.history.pushState({}, '', window.location.origin);\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of the current active room.\r\n   */\r\n  public sendMessage(text: string): void {\r\n    if (!this.currentRoom || !this.ws) return;\r\n\r\n    if (this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot send message: Not connected to server. Please refresh the page.');\r\n      return;\r\n    }\r\n\r\n    const message: RoomMessage = {\r\n      type: 'room-message',\r\n      roomId: this.currentRoom,\r\n      userId: this.userId,\r\n      message: text\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n  }\r\n\r\n  /**\r\n   * Sends an admin command from the frontend to backend.\r\n   */\r\n  public sendAdminCommand(command: string, key: string): void {\r\n    if (!this.ws) return;\r\n\r\n    const message = {\r\n      type: 'admin-command',\r\n      id: command,\r\n      key: key,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of the current active room.\r\n   */\r\n  public getCurrentRoom(): string | null {\r\n    return this.currentRoom;\r\n  }\r\n\r\n  /**\r\n   * Generates a shareable link for the current room.\r\n   */\r\n  public getRoomLink(param?: string): string | null {\r\n    return this.currentRoom ? this.utility.generateLink(this.currentRoom, param) : null;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to handle incoming room messages.\r\n   */\r\n  public onMessage(handler: (message: RoomMessage) => void): void {\r\n    this.messageHandlers.push(handler);\r\n  }\r\n\r\n  /**\r\n   * Processes incoming WebSocket messages and dispatches them to all handlers.\r\n   */\r\n  private setupMessageHandler(): void {\r\n    if (!this.ws) return;\r\n\r\n    this.ws.onmessage = (event) => {\r\n      try {\r\n        const message: RoomMessage = JSON.parse(event.data);\r\n        this.messageHandlers.forEach(handler => handler(message));\r\n      } catch (error) {\r\n        // Handle plain text messages (backwards compatibility)\r\n        const plainMessage: RoomMessage = {\r\n          type: 'room-message',\r\n          userId: 'server',\r\n          message: event.data\r\n        };\r\n        this.messageHandlers.forEach(handler => handler(plainMessage));\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { AUDIO, GAME } from \"./Config\";\r\nimport { GameSettings } from \"./Types\";\r\n\r\nimport { CacheManager } from \"./CacheManager\";\r\n\r\nexport class SettingsManager {\r\n    private gameSettings: GameSettings\r\n\r\n    constructor(private cacheManager: CacheManager) {\r\n        this.gameSettings = this.initSettings();\r\n    }\r\n\r\n    /**\r\n     * Initializes default options when the game starts.\r\n     */\r\n    public initSettings(): GameSettings {\r\n        return { // [ IMPORTANT ] Keep track of the default game options here\r\n            audio: {\r\n                mixer: {\r\n                    master: AUDIO.MIXER.MASTER,\r\n                    interface: AUDIO.MIXER.INTERFACE,\r\n                    music: AUDIO.MIXER.MUSIC,\r\n                    sfx: AUDIO.MIXER.SFX,\r\n                    voice: AUDIO.MIXER.VOICE\r\n                }\r\n            },\r\n            controls: {\r\n                keybinds: {\r\n                    attack: GAME.CONTROLS.KEYBINDS.ATTACK,\r\n                    dash: GAME.CONTROLS.KEYBINDS.DASH,\r\n                    melee: GAME.CONTROLS.KEYBINDS.MELEE,\r\n                    moveDown: GAME.CONTROLS.KEYBINDS.MOVE_DOWN,\r\n                    moveLeft: GAME.CONTROLS.KEYBINDS.MOVE_LEFT,\r\n                    moveRight: GAME.CONTROLS.KEYBINDS.MOVE_RIGHT,\r\n                    moveUp: GAME.CONTROLS.KEYBINDS.MOVE_UP,\r\n                    reload: GAME.CONTROLS.KEYBINDS.RELOAD,\r\n                    sprint: GAME.CONTROLS.KEYBINDS.SPRINT,\r\n                },\r\n                gamepad: {\r\n                    attack: GAME.CONTROLS.GAMEPAD.ATTACK,\r\n                    dash: GAME.CONTROLS.GAMEPAD.DASH,\r\n                    deadzone: GAME.CONTROLS.GAMEPAD.DEADZONE,\r\n                    melee: GAME.CONTROLS.GAMEPAD.MELEE,\r\n                    reload: GAME.CONTROLS.GAMEPAD.RELOAD,\r\n                    sprint: GAME.CONTROLS.GAMEPAD.SPRINT\r\n                }\r\n            },\r\n            graphics: {\r\n                physics: {\r\n                    ammoReserves: GAME.GRAPHICS.PHYSICS.AMMORESERVES\r\n                },\r\n                renderBackgroundParticles: GAME.GRAPHICS.BACKGROUND_PARTICLES,\r\n                showStaticOverlay: GAME.GRAPHICS.STATIC_OVERLAY,\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the currently stored gameSettings.\r\n     */\r\n    public getSettings(): GameSettings { return this.gameSettings }\r\n\r\n    /**\r\n     * Recursively updates any setting(s) passed within the stored gameSettings.\r\n     */\r\n    public updateSettings(settings: any): void {\r\n        const merge = (target: any, source: any): void => {\r\n            for (const key in source) {\r\n                if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\r\n                    if (!target[key]) target[key] = {};\r\n                    merge(target[key], source[key]);\r\n                } else {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        };\r\n\r\n        merge(this.gameSettings, settings);\r\n        this.cacheManager.write('gameSettings', this.gameSettings);\r\n    }\r\n\r\n    /**\r\n     * Loads the currently cached gameSettings from the cacheManager.\r\n     */\r\n    public async loadSettings(): Promise<void> {\r\n        const cached = await this.cacheManager.read('gameSettings');\r\n        if (cached) {\r\n            this.gameSettings = cached;\r\n        }\r\n    }\r\n}","export const equipment = [\r\n    'switch'\r\n];","import { equipment } from './equipment';\r\nimport { resource } from './resource';\r\nimport { stats } from './stats';\r\nimport { unique } from './unique';\r\n\r\nexport const upgradeFiles = {\r\n    equipment,\r\n    resource,\r\n    stats,\r\n    unique\r\n};","export const resource = [\r\n    'carepackage'\r\n];","export const stats = [\r\n    'bioregulator',\r\n    'damagebuffer',\r\n    'hemoglobinsaturator',\r\n    'locomotionmodule'\r\n];","export const unique = [\r\n    'clustermodule',\r\n    'kineticbrain',\r\n    'muzzlesplitter',\r\n    'phoenixmodule',\r\n    'projectilearray',\r\n    'spatialtargeting',\r\n    'spectralimage'\r\n];","import { PLAYER_DEFAULTS } from './Config';\r\nimport { Player, Upgrade, UpgradeParams, UpgradeRarity, UpgradeType } from './Types';\r\n\r\nimport { upgradeFiles } from './upgrades';\r\n\r\nimport { UserInterface } from './UserInterface';\r\nimport { Utility } from './Utility';\r\n\r\nimport { PlayerState } from './player/PlayerState';\r\n\r\nexport class UpgradeManager {\r\n    public takenUniques = new Set<string>(); // Pool of uniques already taken by players during this session\r\n    public upgradesCompleted = new Set<string>(); // Tracks round end upgrade progress\r\n\r\n    public isUpgradesEnabled = true;\r\n\r\n    private rarityConfig = {\r\n        [UpgradeRarity.COMMON]: {\r\n            weight: 35,\r\n            color: '#7e7e7e'\r\n        },\r\n        [UpgradeRarity.UNCOMMON]: {\r\n            weight: 20,\r\n            color: '#61b6d5'\r\n        },\r\n        [UpgradeRarity.SPECIAL]: {\r\n            weight: 15,\r\n            color: '#58d688'\r\n        },\r\n        [UpgradeRarity.SUPERIOR]: {\r\n            weight: 12,\r\n            color: '#ffc233'\r\n        },\r\n        [UpgradeRarity.RARE]: {\r\n            weight: 8,\r\n            color: '#0077ff'\r\n        },\r\n        [UpgradeRarity.EXCEPTIONAL]: {\r\n            weight: 5,\r\n            color: '#00ff62'\r\n        },\r\n        [UpgradeRarity.LEGENDARY]: {\r\n            weight: 2.5,\r\n            color: '#f6ff00'\r\n        },\r\n        [UpgradeRarity.MYTHICAL]: {\r\n            weight: 1.5,\r\n            color: '#ff0000'\r\n        },\r\n        [UpgradeRarity.ENLIGHTENED]: {\r\n            weight: 0.9,\r\n            color: '#9500ff'\r\n        },\r\n        [UpgradeRarity.HOLY]: {\r\n            weight: 0.1,\r\n            color: '#ff00f7'\r\n        }\r\n    };\r\n\r\n    public upgrades: Upgrade[] = []\r\n\r\n    constructor(\r\n        private playerState: PlayerState,\r\n        private ui: UserInterface,\r\n        private utility: Utility\r\n    ) { \r\n        this.initUpgrades();\r\n    }\r\n\r\n    /**\r\n     * Initializes upgrades[] by importing the upgradeFiles from the index.ts in the upgrades folder.\r\n     */\r\n    private initUpgrades(): void {\r\n        const params: UpgradeParams = {\r\n            playerState: this.playerState,\r\n            ui: this.ui,\r\n            utility: this.utility\r\n        };\r\n\r\n        upgradeFiles.equipment.forEach(filename => {\r\n            const upgrade = require(`./upgrades/equipment/${filename}/${filename}`).create(params);\r\n            this.upgrades.push(upgrade);\r\n        });\r\n\r\n        upgradeFiles.resource.forEach(filename => {\r\n            const upgrade = require(`./upgrades/resource/${filename}/${filename}`).create(params);\r\n            this.upgrades.push(upgrade);\r\n        });\r\n\r\n        upgradeFiles.stats.forEach(filename => {\r\n            const upgrade = require(`./upgrades/stats/${filename}/${filename}`).create(params);\r\n            this.upgrades.push(upgrade);\r\n        });\r\n\r\n        upgradeFiles.unique.forEach(filename => {\r\n            const upgrade = require(`./upgrades/unique/${filename}/${filename}`).create(params);\r\n            this.upgrades.push(upgrade);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a selected amount of upgrades for a specific player in the game.\r\n     * \r\n     * Used to display upgrades for all round losers after brief roud-end pause.\r\n     */\r\n    public getUpgrades(count: number, player: Player): Upgrade[] {\r\n        // Filter available upgrades based on type restrictions\r\n        const availableUpgrades = this.upgrades.filter(upgrade => {\r\n            // Check if unique upgrade has already been taken globally\r\n            if (upgrade.unique && this.takenUniques.has(upgrade.id)) {\r\n                return false;\r\n            }\r\n\r\n            // Check if equipment is already owned by this player\r\n            if (upgrade.type === UpgradeType.EQUIPMENT && player.equipment.includes(upgrade.id)) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        // Weighted random selection using rarity config\r\n        const selected: Upgrade[] = [];\r\n\r\n        for (let i = 0; i < Math.min(count, availableUpgrades.length); i++) {\r\n            if (availableUpgrades.length === 0) break;\r\n\r\n            // Calculate weighted random selection using this.rarityConfig\r\n            const totalWeight = availableUpgrades.reduce((sum, upgrade) => {\r\n                return sum + this.getRarityWeight(upgrade.rarity);\r\n            }, 0);\r\n\r\n            let random = Math.random() * totalWeight;\r\n            let selectedUpgrade: Upgrade | null = null;\r\n\r\n            for (const upgrade of availableUpgrades) {\r\n                random -= this.getRarityWeight(upgrade.rarity);\r\n                if (random <= 0) {\r\n                    selectedUpgrade = upgrade;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (selectedUpgrade) {\r\n                selected.push(selectedUpgrade);\r\n                // Remove from available pool to prevent duplicates in this selection\r\n                const index = availableUpgrades.indexOf(selectedUpgrade);\r\n                availableUpgrades.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        return selected;\r\n    }\r\n\r\n    /**\r\n     * Applies a specific upgrade to a specific player by mutating their myPlayer object.\r\n     */\r\n    public applyUpgrade(upgradeId: string, player: Player): boolean {\r\n        const upgrade = this.upgrades.find(u => u.id === upgradeId);\r\n        if (!upgrade) return false;\r\n\r\n        // Double-check restrictions\r\n        if (upgrade.unique && this.takenUniques.has(upgradeId)) {\r\n            console.warn(`Unique upgrade ${upgradeId} already taken globally`);\r\n            return false;\r\n        }\r\n\r\n        if (upgrade.type === UpgradeType.EQUIPMENT && this.hasEquipment(player, upgradeId)) {\r\n            console.warn(`Equipment ${upgradeId} already owned by player`);\r\n            return false;\r\n        }\r\n\r\n        // Track unique upgrades globally\r\n        if (upgrade.unique) {\r\n            this.takenUniques.add(upgradeId);\r\n        }\r\n\r\n        // Apply the upgrade to the player object\r\n        upgrade.func(player);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes a unique upgrade from the global pool.\r\n     * \r\n     * This process involved adding the unique item to the client's takenUniques array.\r\n     * \r\n     * Network message 'upgrade-taken' broadcasts this to all players.\r\n     */\r\n    public removeUpgradeFromPool(upgradeId: string): void {\r\n        this.takenUniques.add(upgradeId);\r\n    }\r\n\r\n    /**\r\n     * Resets the global uniques pool to a clean slate.\r\n     */\r\n    public resetUpgrades(player: Player): void {\r\n        this.takenUniques.clear();\r\n\r\n        player.equipment = PLAYER_DEFAULTS.EQUIPMENT;\r\n        player.unique = PLAYER_DEFAULTS.UNIQUE;\r\n    }\r\n\r\n    // #region [ Helpers ]\r\n    //\r\n    /**\r\n     * Returns boolean based on if the selected player has a specific equipment piece or not.\r\n     */\r\n    public hasEquipment(player: Player, equipmentId: string): boolean {\r\n        return player.equipment.includes(equipmentId);\r\n    }\r\n\r\n    /**\r\n     * Returns boolean based on if the selected player has a specific unique item or not.\r\n     */\r\n    private hasUnique(player: Player, uniqueId: string): boolean {\r\n        return player.unique.includes(uniqueId);\r\n    }\r\n\r\n    /**\r\n     * Gets the color associated with a specific rarity.\r\n     */\r\n    private getRarityColor(rarity: UpgradeRarity): string {\r\n        return this.rarityConfig[rarity].color;\r\n    }\r\n\r\n    /**\r\n     * Gets the weight of a specific rarity.\r\n     */\r\n    private getRarityWeight(rarity: UpgradeRarity): number {\r\n        return this.rarityConfig[rarity].weight;\r\n    }\r\n}\r\n\r\n/**\r\n Upgrade Ideas:\r\n ionic compound\r\n randomly chance to combine all nProjeciles into one\r\n explosion on dash\r\n while sprinting, luck doubled\r\n bullet trails\r\n projectile with padding on sides = projectiles that are detonated on reload\r\n on death respawn as 1hp ghost who can melee with .25s invuln\r\n > [ Stats ]\r\n  - Size -- / Speed ++\r\n  - Damage ++ / Buffer ++\r\n  - \r\n > [ Persistent ]\r\n  - Projectile burst into more projectiles on non-player hit.\r\n  - Dash becomes teleport but uses twice as much stamina.\r\n  - Switch, unlocking further firing modes \r\n > [ Luck Based ]\r\n  - Explosive\r\n    > explode on hit\r\n    > stick, then explode after timer\r\n    > only explode on player hit\r\n  - Fire\r\n    > leave behind a flame on ground hit that persists and does damage for some time\r\n    > burn player on hit for timer\r\n  - Oil\r\n    > leave oil puddles on hit, flammable, oil on fire persists much longer\r\n  - Poison\r\n    > decrease player health gradually for timer on player hit\r\n    > leave pool of poison on ground for timer\r\n    > spray poison out on ground hit\r\n  - Bounce\r\n    > chance for projectile to bounce\r\n  - Orbital Laser\r\n    > chance to spawn cluster of lasers on non-boundary hit\r\n*/","import { ReserveBulletParticle } from \"../Types\";\r\n\r\nimport { SettingsManager } from \"../SettingsManager\";\r\nimport { UserInterface } from \"../UserInterface\";\r\nimport { Utility } from \"../Utility\";\r\n\r\nexport class AmmoReservesUIController {\r\n    private ammoReserveIcon: HTMLImageElement | null = null;\r\n    private projectileIcon: HTMLImageElement | null = null;\r\n\r\n    public reserveBulletParticles: ReserveBulletParticle[] = [];\r\n\r\n    constructor(\r\n        private settings: SettingsManager,\r\n        private ui: UserInterface,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // [ Ammo Reserve Canvas ]\r\n    //\r\n    /**\r\n     * Initializes the ammo reserve canvas in the HUD.\r\n     */\r\n    public initAmmoReserveCanvas(): void { // TODO: Unify where UI element references are stored\r\n        this.ammoReserveIcon = new Image();\r\n        this.ammoReserveIcon.src = '/assets/img/icon/inventory/ammobox.png';\r\n        this.ammoReserveIcon.onload = () => {\r\n            this.renderAmmoReserves();\r\n        };\r\n\r\n        this.projectileIcon = new Image();\r\n        this.projectileIcon.src = '/assets/img/icon/inventory/9mm.png';\r\n\r\n        // Start physics loop if it is enabled in the user's prefs\r\n        if (this.settings.getSettings().graphics.physics.ammoReserves) {\r\n            requestAnimationFrame(() => this.updateAmmoReservePhysics());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When picking up ammo, this function spawns the casings in the player's ammo reserve UI.\r\n     */\r\n    public spawnAmmoInReserveUI(amount: number = 1): void {\r\n        if (!this.ui.ammoReservesCtx || !this.projectileIcon) return;\r\n\r\n        const physicsEnabled = this.settings.getSettings().graphics.physics.ammoReserves;\r\n\r\n        const spawnDelay = 100;\r\n        const { collisionHeight, collisionWidth, collisionX, collisionY } = this.getAmmoReserveCollisionZone();\r\n\r\n        const scale = 0.25;\r\n        const bulletWidth = 11 * scale;\r\n        const bulletHeight = 28 * scale;\r\n\r\n        for (let i = 0; i < amount; i++) {\r\n            this.utility.safeTimeout(() => {\r\n                if (physicsEnabled) {\r\n                    // Physics mode: spawn with velocity from right side\r\n                    const x = collisionX + collisionWidth;\r\n                    const y = collisionY + collisionHeight / 2;\r\n                    const speed = 2 + Math.random() * 8;\r\n                    const angle = (Math.random() - 0.5) * (Math.PI / 3);\r\n                    const vx = Math.cos(angle) * speed;\r\n                    const vy = Math.sin(angle) * speed;\r\n                    const rotation = Math.random() * Math.PI * 2;\r\n                    const torque = (Math.random() - 0.5) * 0.1;\r\n\r\n                    this.reserveBulletParticles.push({\r\n                        transform: {\r\n                            pos: { x, y },\r\n                            rot: rotation,\r\n                        },\r\n                        velocity: { x: vx, y: vy },\r\n                        torque,\r\n                        width: bulletWidth,\r\n                        height: bulletHeight\r\n                    });\r\n                } else {\r\n                    // Static mode: spawn at random position, no velocity\r\n                    const x = collisionX + Math.random() * collisionWidth;\r\n                    const y = collisionY + Math.random() * collisionHeight;\r\n                    const rotation = Math.random() * Math.PI * 2;\r\n\r\n                    this.reserveBulletParticles.push({\r\n                        transform: {\r\n                            pos: { x, y },\r\n                            rot: rotation,\r\n                        },\r\n                        velocity: { x: 0, y: 0 },\r\n                        torque: 0,\r\n                        width: bulletWidth,\r\n                        height: bulletHeight\r\n                    });\r\n                    this.renderAmmoReserves(); // Render static bullet immediately\r\n                }\r\n            }, i * spawnDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes ammo from the reserves UI when ammo is taken from the player's reserves.\r\n     */\r\n    public removeAmmoFromReserveUI(amount: number = 1): void {\r\n        const removeDelay = 100; // ms, match spawnBullet\r\n        for (let i = 0; i < amount; i++) {\r\n            this.utility.safeTimeout(() => {\r\n                if (this.reserveBulletParticles.length > 0) {\r\n                    this.reserveBulletParticles.shift();\r\n                }\r\n                if (!this.settings.getSettings().graphics.physics.ammoReserves) {\r\n                    this.renderAmmoReserves();\r\n                }\r\n            }, i * removeDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes ammo reserve physics for the projectiles in the ammo reserve UI.\r\n     */\r\n    private updateAmmoReservePhysics(): void {\r\n        if (!this.settings.getSettings().graphics.physics.ammoReserves) return;\r\n        if (!this.ui.ammoReservesCtx || !this.ammoReserveIcon) return;\r\n\r\n        // TODO: Add sleeping when they come to a stop and end simulation\r\n\r\n        // Physics constants\r\n        const friction = 0.9;\r\n        const bounce = 0.5;\r\n\r\n        const { collisionHeight, collisionWidth, collisionX, collisionY } = this.getAmmoReserveCollisionZone();\r\n\r\n        // Clear\r\n        this.ui.ammoReservesCtx.clearRect(0, 0, this.ui.ammoReservesCanvas!.width, this.ui.ammoReservesCanvas!.height);\r\n\r\n        // Draw background box\r\n        this.ui.ammoReservesCtx.drawImage(\r\n            this.ammoReserveIcon,\r\n            0, 0,\r\n            this.ui.ammoReservesCanvas!.width,\r\n            this.ui.ammoReservesCanvas!.height\r\n        );\r\n\r\n        // Update and draw bullets\r\n        for (let bullet of this.reserveBulletParticles) {\r\n            // Physics\r\n            bullet.transform.pos.x += bullet.velocity.x;\r\n            bullet.transform.pos.y += bullet.velocity.y;\r\n            bullet.transform.rot += bullet.torque;\r\n\r\n            bullet.velocity.x *= friction;\r\n            bullet.velocity.y *= friction;\r\n            bullet.torque *= friction;\r\n\r\n            // Wall collisions\r\n            // Left\r\n            if (bullet.transform.pos.x - bullet.width / 2 < collisionX) {\r\n                bullet.transform.pos.x = collisionX + bullet.width / 2;\r\n                bullet.velocity.x *= -bounce;\r\n            }\r\n            // Right\r\n            if (bullet.transform.pos.x + bullet.width / 2 > collisionX + collisionWidth) {\r\n                bullet.transform.pos.x = collisionX + collisionWidth - bullet.width / 2;\r\n                bullet.velocity.x *= -bounce;\r\n            }\r\n            // Top\r\n            if (bullet.transform.pos.y - bullet.height / 2 < collisionY) {\r\n                bullet.transform.pos.y = collisionY + bullet.height / 2;\r\n                bullet.velocity.y *= -bounce;\r\n            }\r\n            // Bottom\r\n            if (bullet.transform.pos.y + bullet.height / 2 > collisionY + collisionHeight) {\r\n                bullet.transform.pos.y = collisionY + collisionHeight - bullet.height / 2;\r\n                bullet.velocity.y *= -bounce;\r\n            }\r\n        }\r\n\r\n        // Optional: bullet-bullet collisions (efficient, skip if <2 bullets)\r\n        for (let i = 0; i < this.reserveBulletParticles.length; i++) {\r\n            for (let j = i + 1; j < this.reserveBulletParticles.length; j++) {\r\n                const a = this.reserveBulletParticles[i];\r\n                const b = this.reserveBulletParticles[j];\r\n                const dx = a.transform.pos.x - b.transform.pos.x;\r\n                const dy = a.transform.pos.y - b.transform.pos.y;\r\n                const dist = Math.sqrt(dx * dx + dy * dy);\r\n                const minDist = (a.width + b.width) / 2;\r\n                if (dist < minDist) {\r\n                    // Simple elastic collision\r\n                    const angle = Math.atan2(dy, dx);\r\n                    const overlap = minDist - dist;\r\n                    const ax = Math.cos(angle) * overlap / 2;\r\n                    const ay = Math.sin(angle) * overlap / 2;\r\n\r\n                    a.transform.pos.x += ax;\r\n                    a.transform.pos.y += ay;\r\n                    b.transform.pos.x -= ax;\r\n                    b.transform.pos.y -= ay;\r\n\r\n                    // Swap velocities (1D along collision axis)\r\n                    const va = a.velocity.x * Math.cos(angle) + a.velocity.y * Math.sin(angle);\r\n                    const vb = b.velocity.x * Math.cos(angle) + b.velocity.y * Math.sin(angle);\r\n                    const avg = (va + vb) / 2;\r\n                    a.velocity.x += (avg - va) * bounce;\r\n                    b.velocity.x += (avg - vb) * bounce;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Draw bullets\r\n        for (let bullet of this.reserveBulletParticles) {\r\n            this.ui.ammoReservesCtx.save();\r\n            this.ui.ammoReservesCtx.translate(bullet.transform.pos.x, bullet.transform.pos.y);\r\n            this.ui.ammoReservesCtx.rotate(bullet.transform.rot);\r\n            this.ui.ammoReservesCtx.drawImage(\r\n                this.projectileIcon!,\r\n                -bullet.width / 2,\r\n                -bullet.height / 2,\r\n                bullet.width,\r\n                bullet.height\r\n            );\r\n            this.ui.ammoReservesCtx.restore();\r\n        }\r\n\r\n        requestAnimationFrame(() => this.updateAmmoReservePhysics());\r\n    }\r\n\r\n    /**\r\n     * Renders the ammo reserves canvas.\r\n     */\r\n    private renderAmmoReserves(): void {\r\n        if (!this.ui.ammoReservesCtx || !this.ammoReserveIcon || !this.ammoReserveIcon.complete) return;\r\n\r\n        // Clear the canvas\r\n        this.ui.ammoReservesCtx.clearRect(0, 0, this.ui.ammoReservesCanvas!.width, this.ui.ammoReservesCanvas!.height);\r\n\r\n        // Draw the ammobox icon to fill the entire canvas\r\n        this.ui.ammoReservesCtx.drawImage(\r\n            this.ammoReserveIcon,\r\n            0, 0,\r\n            this.ui.ammoReservesCanvas!.width,\r\n            this.ui.ammoReservesCanvas!.height\r\n        );\r\n\r\n        if (!this.settings.getSettings().graphics.physics.ammoReserves) {\r\n            for (let bullet of this.reserveBulletParticles) {\r\n                this.ui.ammoReservesCtx.save();\r\n                this.ui.ammoReservesCtx.translate(bullet.transform.pos.x, bullet.transform.pos.y);\r\n                this.ui.ammoReservesCtx.rotate(bullet.transform.rot);\r\n                this.ui.ammoReservesCtx.drawImage(\r\n                    this.projectileIcon!,\r\n                    -bullet.width / 2,\r\n                    -bullet.height / 2,\r\n                    bullet.width,\r\n                    bullet.height\r\n                );\r\n                this.ui.ammoReservesCtx.restore();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the ammo reserves collision zone to help with physics calculations for rendered projectiles.\r\n     */\r\n    private getAmmoReserveCollisionZone(): { collisionHeight: number; collisionWidth: number; collisionX: number; collisionY: number } {\r\n        const collisionWidth = 63;\r\n        const collisionHeight = 27;\r\n        const collisionX = (this.ui.ammoReservesCanvas!.width - collisionWidth) / 2 - 3;\r\n        const collisionY = (this.ui.ammoReservesCanvas!.height - collisionHeight) / 2 - 1;\r\n\r\n        const params = { collisionHeight, collisionWidth, collisionX, collisionY };\r\n\r\n        return params;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { CANVAS, GAMEPAD_MAP } from \"./Config\";\r\nimport { GameSettings, Leaderboard, Players } from \"./Types\";\r\n\r\nimport { LobbyManager } from \"./LobbyManager\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { AmmoReservesUIController } from \"./player/AmmoReservesUIController\";\r\n\r\nexport class UserInterface {\r\n    public ammoReservesUIController: AmmoReservesUIController;\r\n\r\n    // [ Canvas ]\r\n    //\r\n    public ammoReservesCanvas: HTMLCanvasElement | null = null;\r\n    public ammoReservesCtx: CanvasRenderingContext2D | null = null;\r\n    public canvas: HTMLCanvasElement | null = null;\r\n    public ctx: CanvasRenderingContext2D | null = null;\r\n    public decalCanvas: HTMLCanvasElement | null = null;\r\n    public decalCtx: CanvasRenderingContext2D | null = null;\r\n    //\r\n    //\r\n    // [ Containers ]\r\n    //\r\n    public gameContainer: HTMLDivElement | null = null;\r\n    public gameOptionsContainer: HTMLDivElement | null = null;\r\n    public lobbyContainer: HTMLDivElement | null = null;\r\n    public roomControls: HTMLDivElement | null = null;\r\n    public upgradeContainer: HTMLElement | null = null;\r\n    //\r\n    //\r\n    // [ Displays ]\r\n    //\r\n    public gameRoomIdDisplay: HTMLSpanElement | null = null;\r\n    public lobbyPlayersList: HTMLDivElement | null = null;\r\n    public roomIdDisplay: HTMLSpanElement | null = null;\r\n    public userIdDisplay: HTMLSpanElement | null = null;\r\n    //\r\n    //\r\n    // [ Buttons ]\r\n    //\r\n    public gameCodeButton: HTMLButtonElement | null = null;\r\n    public gameLeaveButton: HTMLButtonElement | null = null;\r\n    public hostButton: HTMLButtonElement | null = null;\r\n    public joinButton: HTMLButtonElement | null = null;\r\n    public lobbyCodeButton: HTMLButtonElement | null = null;\r\n    public lobbyLeaveButton: HTMLButtonElement | null = null;\r\n    public quickplayButton: HTMLButtonElement | null = null;\r\n    public startGameBtn: HTMLButtonElement | null = null;\r\n    //\r\n    //\r\n    // [ Inputs / Toggles ]\r\n    //\r\n    public playersInput: HTMLInputElement | null = null;\r\n    public privateToggle: HTMLElement | null = null;\r\n    public upgradesToggle: HTMLElement | null = null;\r\n    public winsInput: HTMLInputElement | null = null;\r\n    //\r\n    //\r\n    // [ Chat ]\r\n    //\r\n    public chatContainer: HTMLDivElement | null = null;\r\n    public chatInput: HTMLInputElement | null = null;\r\n    public chatMessages: HTMLDivElement | null = null;\r\n    public chatSendBtn: HTMLButtonElement | null = null;\r\n    //\r\n    //\r\n    // [ Modal ]\r\n    //\r\n    public modal: HTMLElement | null = null;\r\n    public modalButtons: HTMLDivElement | null = null;\r\n    public modalCancelButton: HTMLButtonElement | null = null;\r\n    public modalConfirmButton: HTMLButtonElement | null = null;\r\n    public modalContent: HTMLElement | null = null;\r\n    public modalErrorDiv: HTMLElement | null = null;\r\n    public modalInput: HTMLInputElement | null = null;\r\n    public modalText: HTMLSpanElement | null = null;\r\n    //\r\n    //\r\n    // [ Leaderboard ]\r\n    //\r\n    public leaderboard: Leaderboard = new Map();\r\n    public leaderboardBody: HTMLTableSectionElement | null = null;\r\n    public leaderboardContainer: HTMLDivElement | null = null;\r\n    //\r\n    //\r\n    // [ Settings ]\r\n    public settingsContainer: HTMLDivElement | null = null;\r\n    public settingsButton: HTMLButtonElement | null = null;\r\n    public settingsCloseButton: HTMLButtonElement | null = null;\r\n    public controlsTab: HTMLDivElement | null = null;\r\n    public graphicsTab: HTMLDivElement | null = null;\r\n    public soundTab: HTMLDivElement | null = null;\r\n    public controlsBody: HTMLDivElement | null = null;\r\n    public graphicsBody: HTMLDivElement | null = null;\r\n    public soundBody: HTMLDivElement | null = null;\r\n\r\n    public masterSlider: HTMLDivElement | null = null;\r\n    public masterFill: HTMLDivElement | null = null;\r\n    public masterValue: HTMLDivElement | null = null;\r\n    public interfaceSlider: HTMLDivElement | null = null;\r\n    public interfaceFill: HTMLDivElement | null = null;\r\n    public interfaceValue: HTMLDivElement | null = null;\r\n    public musicSlider: HTMLDivElement | null = null;\r\n    public musicFill: HTMLDivElement | null = null;\r\n    public musicValue: HTMLDivElement | null = null;\r\n    public sfxSlider: HTMLDivElement | null = null;\r\n    public sfxFill: HTMLDivElement | null = null;\r\n    public sfxValue: HTMLDivElement | null = null;\r\n    public voiceSlider: HTMLDivElement | null = null;\r\n    public voiceFill: HTMLDivElement | null = null;\r\n    public voiceValue: HTMLDivElement | null = null;\r\n\r\n    public deadzoneInput: HTMLInputElement | null = null;\r\n\r\n    public particleJSToggle: HTMLElement | null = null;\r\n    public staticVfxToggle: HTMLElement | null = null;\r\n    public ammoReservesPhysicsToggle: HTMLElement | null = null;\r\n    //\r\n    //\r\n    // [ Stats ]\r\n    public accuracyStat: HTMLSpanElement | null = null;\r\n    public damageStat: HTMLSpanElement | null = null;\r\n    public luckStat: HTMLSpanElement | null = null;\r\n    public rangeStat: HTMLSpanElement | null = null;\r\n    public shotSpeedStat: HTMLSpanElement | null = null;\r\n    public speedStat: HTMLSpanElement | null = null;\r\n\r\n    constructor(\r\n        private playerState: PlayerState,\r\n        private settingsManager: SettingsManager,\r\n        private utility: Utility\r\n    ) {\r\n        this.ammoReservesUIController = new AmmoReservesUIController(\r\n            this.settingsManager,\r\n            this,\r\n            this.utility\r\n        );\r\n\r\n        this.initInterfaceListeners();\r\n    }\r\n\r\n    // #region [ Init ]\r\n    //\r\n    /**\r\n     * Responsible for initializing all elements defined in the class structure.\r\n     * \r\n     * Do not use \"getElement\" type lookups on runtime. Cache them all on start.\r\n     */\r\n    public initInterface() {\r\n        this.canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\r\n        this.decalCanvas = document.createElement('canvas') as HTMLCanvasElement;\r\n        this.ammoReservesCanvas = document.getElementById('ammoReservesCanvas') as HTMLCanvasElement;\r\n\r\n        this.roomControls = document.getElementById('roomControls') as HTMLDivElement;\r\n        this.gameContainer = document.getElementById('gameContainer') as HTMLDivElement;\r\n        this.lobbyContainer = document.getElementById('lobbyContainer') as HTMLDivElement;\r\n        this.lobbyPlayersList = document.getElementById('lobbyPlayersList') as HTMLDivElement;\r\n        this.startGameBtn = document.getElementById('startGameBtn') as HTMLButtonElement;\r\n        this.gameOptionsContainer = document.getElementById('gameOptionsContainer') as HTMLDivElement;\r\n\r\n        this.userIdDisplay = document.getElementById('userId') as HTMLSpanElement;\r\n        this.roomIdDisplay = document.getElementById('roomId') as HTMLSpanElement;\r\n        this.gameRoomIdDisplay = document.getElementById('gameRoomId') as HTMLSpanElement;\r\n\r\n        this.chatContainer = document.getElementById('chatContainer') as HTMLDivElement;\r\n        this.chatMessages = document.getElementById('chatMessages') as HTMLDivElement;\r\n        this.chatInput = document.getElementById('chatInput') as HTMLInputElement;\r\n        this.chatSendBtn = document.getElementById('chatSendBtn') as HTMLButtonElement;\r\n\r\n        this.privateToggle = document.getElementById('privateToggle') as HTMLElement;\r\n        this.upgradesToggle = document.getElementById('upgradesToggle') as HTMLElement;\r\n        this.winsInput = document.getElementById('winsInput') as HTMLInputElement;\r\n        this.playersInput = document.getElementById('playersInput') as HTMLInputElement;\r\n\r\n        this.upgradeContainer = document.getElementById('upgradeContainer') as HTMLElement;\r\n\r\n        this.leaderboardContainer = document.getElementById('leaderboardContainer') as HTMLDivElement;\r\n        this.leaderboardBody = document.getElementById('leaderboardBody') as HTMLTableSectionElement;\r\n\r\n        this.hostButton = document.getElementById('atomHost') as HTMLButtonElement;\r\n        this.joinButton = document.getElementById('atomJoin') as HTMLButtonElement;\r\n        this.quickplayButton = document.getElementById('atomQuickplay') as HTMLButtonElement;\r\n\r\n        this.lobbyLeaveButton = document.getElementById('lobbyLeaveBtn') as HTMLButtonElement;\r\n        this.lobbyCodeButton = document.getElementById('lobbyCodeBtn') as HTMLButtonElement;\r\n\r\n        this.gameLeaveButton = document.getElementById('gameLeaveBtn') as HTMLButtonElement;\r\n        this.gameCodeButton = document.getElementById('gameCodeBtn') as HTMLButtonElement;\r\n\r\n        this.modal = document.getElementById('modal') as HTMLDivElement;\r\n        this.modalInput = document.getElementById('joinRoomInput') as HTMLInputElement;\r\n        this.modalButtons = document.getElementById('modalButtons') as HTMLDivElement;\r\n        this.modalConfirmButton = document.getElementById('joinRoomConfirmBtn') as HTMLButtonElement;\r\n        this.modalCancelButton = document.getElementById('joinRoomCancelBtn') as HTMLButtonElement;\r\n        this.modalErrorDiv = document.getElementById('joinRoomError') as HTMLDivElement;\r\n        this.modalContent = document.getElementById('modalContent') as HTMLDivElement;\r\n        this.modalText = document.getElementById('modalText') as HTMLSpanElement;\r\n\r\n        this.settingsContainer = document.getElementById('settingsContainer') as HTMLDivElement;\r\n        this.settingsButton = document.getElementById('atomSettings') as HTMLButtonElement;\r\n        this.settingsCloseButton = document.getElementById('settingsCloseButton') as HTMLButtonElement;\r\n        this.controlsTab = document.getElementById('controlsTab') as HTMLDivElement;\r\n        this.graphicsTab = document.getElementById('graphicsTab') as HTMLDivElement;\r\n        this.soundTab = document.getElementById('soundTab') as HTMLDivElement;\r\n        this.controlsBody = document.getElementById('controlsBody') as HTMLDivElement;\r\n        this.graphicsBody = document.getElementById('graphicsBody') as HTMLDivElement;\r\n        this.soundBody = document.getElementById('soundBody') as HTMLDivElement;\r\n\r\n        this.masterSlider = document.getElementById('masterSlider') as HTMLDivElement;\r\n        this.masterFill = document.getElementById('masterFill') as HTMLDivElement;\r\n        this.masterValue = document.getElementById('masterValue') as HTMLDivElement;\r\n        this.interfaceSlider = document.getElementById('interfaceSlider') as HTMLDivElement;\r\n        this.interfaceFill = document.getElementById('interfaceFill') as HTMLDivElement;\r\n        this.interfaceValue = document.getElementById('interfaceValue') as HTMLDivElement;\r\n        this.musicSlider = document.getElementById('musicSlider') as HTMLDivElement;\r\n        this.musicFill = document.getElementById('musicFill') as HTMLDivElement;\r\n        this.musicValue = document.getElementById('musicValue') as HTMLDivElement;\r\n        this.sfxSlider = document.getElementById('sfxSlider') as HTMLDivElement;\r\n        this.sfxFill = document.getElementById('sfxFill') as HTMLDivElement;\r\n        this.sfxValue = document.getElementById('sfxValue') as HTMLDivElement;\r\n        this.voiceSlider = document.getElementById('voiceSlider') as HTMLDivElement;\r\n        this.voiceFill = document.getElementById('voiceFill') as HTMLDivElement;\r\n        this.voiceValue = document.getElementById('voiceValue') as HTMLDivElement;\r\n\r\n        this.deadzoneInput = document.getElementById('deadzoneInput') as HTMLInputElement;\r\n\r\n        this.particleJSToggle = document.getElementById('particleJSToggle') as HTMLElement;\r\n        this.staticVfxToggle = document.getElementById('staticToggle') as HTMLElement;\r\n        this.ammoReservesPhysicsToggle = document.getElementById('ammoReservesPhysicsToggle') as HTMLElement;\r\n\r\n        this.accuracyStat = document.getElementById('accuracyValue') as HTMLSpanElement;\r\n        this.damageStat = document.getElementById('damageValue') as HTMLSpanElement;\r\n        this.luckStat = document.getElementById('luckValue') as HTMLSpanElement;\r\n        this.rangeStat = document.getElementById('rangeValue') as HTMLSpanElement;\r\n        this.shotSpeedStat = document.getElementById('shotSpeedValue') as HTMLSpanElement;\r\n        this.speedStat = document.getElementById('speedValue') as HTMLSpanElement;\r\n\r\n        if (!this.canvas || !this.decalCanvas || !this.ammoReservesCanvas || !this.roomControls || !this.gameContainer ||\r\n            !this.lobbyContainer || !this.userIdDisplay || !this.roomIdDisplay || !this.gameRoomIdDisplay ||\r\n            !this.lobbyPlayersList || !this.startGameBtn || !this.gameOptionsContainer ||\r\n            !this.chatContainer || !this.chatMessages || !this.chatInput || !this.chatSendBtn ||\r\n            !this.privateToggle || !this.upgradesToggle || !this.winsInput || !this.playersInput ||\r\n            !this.upgradeContainer || !this.leaderboardContainer || !this.leaderboardBody || !this.hostButton ||\r\n            !this.joinButton || !this.quickplayButton || !this.lobbyLeaveButton || !this.lobbyCodeButton ||\r\n            !this.gameLeaveButton || !this.gameCodeButton || !this.settingsButton || !this.settingsCloseButton ||\r\n            !this.settingsContainer || !this.controlsTab || !this.graphicsTab || !this.soundTab || !this.controlsBody ||\r\n            !this.graphicsBody || !this.soundBody || !this.masterSlider || !this.masterFill || !this.interfaceSlider ||\r\n            !this.interfaceFill || !this.musicSlider || !this.musicFill || !this.sfxSlider || !this.sfxFill ||\r\n            !this.voiceSlider || !this.voiceFill || !this.masterValue || !this.interfaceValue ||\r\n            !this.musicValue || !this.sfxValue || !this.voiceValue || !this.accuracyStat || !this.damageStat ||\r\n            !this.luckStat || !this.rangeStat || !this.shotSpeedStat || !this.speedStat || !this.deadzoneInput ||\r\n            !this.particleJSToggle || !this.staticVfxToggle || !this.ammoReservesPhysicsToggle\r\n        ) {\r\n            alert('Failed to load game. Please refresh the page.');\r\n            throw new Error('Critical error: Required DOM elements are missing.');\r\n        }\r\n\r\n        this.canvas.width = CANVAS.WIDTH;\r\n        this.canvas.height = CANVAS.HEIGHT;\r\n        this.decalCanvas.width = CANVAS.WIDTH;\r\n        this.decalCanvas.height = CANVAS.HEIGHT;\r\n        this.ammoReservesCanvas.width = 100;\r\n        this.ammoReservesCanvas.height = 64;\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.decalCtx = this.decalCanvas.getContext('2d');\r\n        this.ammoReservesCtx = this.ammoReservesCanvas.getContext('2d');\r\n\r\n        if (!this.ctx || !this.decalCtx || !this.ammoReservesCtx) {\r\n            alert('Failed to load game. Please refresh the page.');\r\n            throw new Error('Could not get canvas context');\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Display ]\r\n    //\r\n    /**\r\n     * Updates the display based on the current state.\r\n     */\r\n    public updateDisplay(lobby: LobbyManager, target: \"lobby\" | \"room\" | \"game\", roomId?: string): void {\r\n        if (!this.roomControls || !this.lobbyContainer || !this.gameContainer ||\r\n            !this.chatContainer || !this.leaderboardContainer) return;\r\n\r\n        this.clearDisplay();\r\n\r\n        switch (target) {\r\n            case \"lobby\":\r\n                this.lobbyContainer.style.display = \"flex\";\r\n                this.chatContainer.style.display = \"flex\";\r\n                if (roomId && this.roomIdDisplay) {\r\n                    this.roomIdDisplay.textContent = roomId;\r\n                }\r\n                lobby.inLobby = true;\r\n                break;\r\n\r\n            case \"room\":\r\n                this.roomControls.style.display = \"flex\";\r\n                break;\r\n\r\n            case \"game\":\r\n                this.gameContainer.style.display = \"flex\";\r\n                this.chatContainer.style.display = \"flex\";\r\n                this.leaderboardContainer.style.display = \"flex\";\r\n                if (roomId) {\r\n                    const gameRoomId = this.gameRoomIdDisplay;\r\n                    if (gameRoomId) gameRoomId.textContent = roomId;\r\n                }\r\n                lobby.inLobby = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows host controls when called.\r\n     */\r\n    public updateHostDisplay(isHost: boolean, lobby: LobbyManager): void {\r\n        if (!this.startGameBtn || !this.gameOptionsContainer) return;\r\n\r\n        this.startGameBtn.style.display = isHost ? 'block' : 'none';\r\n        this.startGameBtn.disabled = lobby.lobbyPlayers.size < 1;\r\n\r\n        this.gameOptionsContainer.style.display = isHost ? 'flex' : 'none';\r\n    }\r\n\r\n    /**\r\n     * Displays connected players in the lobby interface.\r\n     */\r\n    public displayLobbyPlayers(isHost: boolean, lobby: LobbyManager, userId: string): void {\r\n        if (!this.lobbyPlayersList) return;\r\n\r\n        this.lobbyPlayersList.innerHTML = '';\r\n\r\n        // Sort players: host first, then others\r\n        const sortedPlayers = Array.from(lobby.lobbyPlayers.values()).sort((a, b) => {\r\n            if (a.isHost && !b.isHost) return -1;\r\n            if (!a.isHost && b.isHost) return 1;\r\n            return 0;\r\n        });\r\n\r\n        sortedPlayers.forEach(player => {\r\n            const playerDiv = document.createElement('div');\r\n            playerDiv.className = 'lobby_player';\r\n\r\n            const colorDiv = document.createElement('div');\r\n            colorDiv.className = 'player_color';\r\n            colorDiv.style.backgroundColor = player.color;\r\n\r\n            const nameDiv = document.createElement('div');\r\n            nameDiv.className = 'player_name';\r\n            nameDiv.textContent = `${player.id}${player.isHost ? ' (Host)' : ''}`;\r\n\r\n            const controlsDiv = document.createElement('div');\r\n            controlsDiv.className = 'player_controls';\r\n\r\n            // Only show controls if I'm the host and this isn't me\r\n            if (isHost && player.id !== userId) {\r\n                const promoteBtn = document.createElement('button');\r\n                promoteBtn.textContent = 'Promote';\r\n                promoteBtn.onclick = () => lobby.promotePlayer(player.id);\r\n\r\n                const kickBtn = document.createElement('button');\r\n                kickBtn.textContent = 'Kick';\r\n                kickBtn.className = 'danger';\r\n                kickBtn.onclick = () => lobby.kickPlayer(player.id);\r\n\r\n                controlsDiv.appendChild(promoteBtn);\r\n                controlsDiv.appendChild(kickBtn);\r\n            }\r\n\r\n            playerDiv.appendChild(colorDiv);\r\n            playerDiv.appendChild(nameDiv);\r\n            playerDiv.appendChild(controlsDiv);\r\n\r\n            if (this.lobbyPlayersList) {\r\n                this.lobbyPlayersList.appendChild(playerDiv);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refreshes the display to a blank slate.\r\n     */\r\n    private clearDisplay(): void {\r\n        if (!this.roomControls || !this.lobbyContainer || !this.gameContainer ||\r\n            !this.chatContainer || !this.leaderboardContainer || !this.upgradeContainer) return;\r\n\r\n        this.roomControls.style.display = \"none\";\r\n        this.lobbyContainer.style.display = \"none\";\r\n        this.gameContainer.style.display = \"none\";\r\n        this.chatContainer.style.display = \"none\";\r\n        this.leaderboardContainer.style.display = \"none\";\r\n        this.upgradeContainer.style.display = \"none\";\r\n    }\r\n\r\n    /**\r\n     * Unified modal closure function used to close and refresh the modal.\r\n     */\r\n    public closeModal(): void {\r\n        if (!this.modal || !this.modalInput || !this.modalConfirmButton ||\r\n            !this.modalCancelButton || !this.modalText) return;\r\n\r\n        this.modal.classList.add('hidden');\r\n        this.modalInput.style.display = 'flex';\r\n        this.modalText.textContent = 'Join Room';\r\n        this.modalConfirmButton.onclick = null;\r\n        this.modalCancelButton.onclick = null;\r\n        this.modalInput.onkeydown = null;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Room Modal ]\r\n    //\r\n    /**\r\n     * Shows the join room modal for pasting room codes.\r\n     */\r\n    public showJoinRoomModal(onConfirm: (roomId: string) => void): void {\r\n        if (!this.modal || !this.modalInput || !this.modalConfirmButton ||\r\n            !this.modalCancelButton || !this.modalErrorDiv) return;\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.modalInput.value = '';\r\n        this.modalErrorDiv.textContent = '';\r\n\r\n        this.modalConfirmButton.textContent = 'Join'\r\n\r\n        this.modalInput.focus();\r\n\r\n        this.modalConfirmButton.onclick = () => {\r\n            if (!this.modalInput || !this.modalErrorDiv) return;\r\n\r\n            const value = this.modalInput.value.trim();\r\n            if (!value) {\r\n                this.modalErrorDiv.textContent = 'Invalid code...';\r\n                return;\r\n            }\r\n\r\n            let roomId: string | null = null;\r\n            try {\r\n                const url = new URL(value, window.location.origin);\r\n                if (url.pathname.startsWith(\"/room_\")) {\r\n                    roomId = url.pathname.replace(\"/\", \"\");\r\n                } else {\r\n                    roomId = new URLSearchParams(url.search).get(\"room\");\r\n                }\r\n            } catch {\r\n                if (value.startsWith(\"room_\")) {\r\n                    roomId = value;\r\n                }\r\n            }\r\n\r\n            if (!roomId) {\r\n                this.modalErrorDiv.textContent = 'Invalid code...';\r\n                return;\r\n            }\r\n\r\n            this.closeModal();\r\n            onConfirm(roomId); // pass back the parsed roomId\r\n        };\r\n\r\n        this.modalCancelButton.onclick = () => this.closeModal();\r\n    }\r\n\r\n    /**\r\n     * Displays a wanring modal if the player starts a game alone.\r\n     */\r\n    public soloGameWarning(onConfirm: () => void): void {\r\n        if (!this.modal || !this.modalConfirmButton || !this.modalCancelButton ||\r\n            !this.modalContent || !this.modalText || !this.modalInput ||\r\n            !this.modalErrorDiv || !this.modalButtons) return;\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.modalInput.style.display = 'none';\r\n        this.modalErrorDiv.textContent = ' ';\r\n        this.modalButtons.style.display = 'flex';\r\n        this.modalCancelButton.style.display = 'flex';\r\n\r\n        this.modalText.textContent = 'Start game as only player? Other players will be unable to join until you return to the lobby.';\r\n        this.modalConfirmButton.textContent = 'Start Game';\r\n        this.modalCancelButton.textContent = 'Cancel';\r\n\r\n        this.modalConfirmButton.onclick = () => {\r\n            this.closeModal();\r\n            onConfirm(); // Proceed with starting the game\r\n        };\r\n\r\n        this.modalCancelButton.onclick = () => this.closeModal();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Modal ]\r\n    /**\r\n     * Shows the settings modal.\r\n     */\r\n    public showSettingsPage(): void {\r\n        if (!this.settingsContainer) return;\r\n        this.settingsContainer.classList.remove('hidden');\r\n    }\r\n\r\n    /**\r\n     * Hides the settings modal.\r\n     */\r\n    public hideSettingsPage(): void {\r\n        if (!this.settingsContainer) return;\r\n        this.settingsContainer.classList.add('hidden');\r\n    }\r\n\r\n    /**\r\n     * Switches active settings page.\r\n     */\r\n    public switchSettingsPage(page: 'controls' | 'graphics' | 'sound'): void {\r\n        if (!this.controlsBody || !this.graphicsBody || !this.soundBody ||\r\n            !this.controlsTab || !this.graphicsTab || !this.soundTab) return;\r\n\r\n        // Remove active class from all tabs\r\n        this.controlsTab.classList.remove('settings_tab_active');\r\n        this.graphicsTab.classList.remove('settings_tab_active');\r\n        this.soundTab.classList.remove('settings_tab_active');\r\n\r\n        // Remove hidden class from all pages\r\n        this.controlsBody.classList.remove('settings_page_hidden');\r\n        this.graphicsBody.classList.remove('settings_page_hidden');\r\n        this.soundBody.classList.remove('settings_page_hidden');\r\n\r\n        // Hide all pages and activate the selected tab\r\n        switch (page) {\r\n            case 'controls':\r\n                this.controlsTab.classList.add('settings_tab_active');\r\n                this.graphicsBody.classList.add('settings_page_hidden');\r\n                this.soundBody.classList.add('settings_page_hidden');\r\n                break;\r\n            case 'graphics':\r\n                this.graphicsTab.classList.add('settings_tab_active');\r\n                this.controlsBody.classList.add('settings_page_hidden');\r\n                this.soundBody.classList.add('settings_page_hidden');\r\n                break;\r\n            case 'sound':\r\n                this.soundTab.classList.add('settings_tab_active');\r\n                this.controlsBody.classList.add('settings_page_hidden');\r\n                this.graphicsBody.classList.add('settings_page_hidden');\r\n                break;\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Sliders ]\r\n    //\r\n    /**\r\n     * Updates settings specific sliders that also have value elements associated.\r\n     */\r\n    public updateSettingsSlider(fillElement: HTMLDivElement, valueElement: HTMLDivElement, value: number): void {\r\n        const percentage = Math.max(0, Math.min(100, value * 100));\r\n        fillElement.style.width = `${percentage}%`;\r\n        valueElement.textContent = `${Math.round(percentage)}%`;\r\n    }\r\n\r\n    /**\r\n     * Calculates the value of the slider based on the hovered mouse position.\r\n     */\r\n    public calculateSliderValue(sliderElement: HTMLDivElement, mouseX: number): number {\r\n        const rect = sliderElement.getBoundingClientRect();\r\n        const position = mouseX - rect.left;\r\n        const width = rect.width;\r\n        return Math.max(0, Math.min(1, position / width));\r\n    }\r\n\r\n    /**\r\n     * Initializes the sound sliders in the sound settings page with user prefs or defaults.\r\n     */\r\n    public initSoundSliders(settings: GameSettings): void {\r\n        const audioSettings = settings.audio.mixer;\r\n        if (this.masterFill && this.masterValue) this.updateSettingsSlider(this.masterFill, this.masterValue, audioSettings.master);\r\n        if (this.interfaceFill && this.interfaceValue) this.updateSettingsSlider(this.interfaceFill, this.interfaceValue, audioSettings.interface);\r\n        if (this.musicFill && this.musicValue) this.updateSettingsSlider(this.musicFill, this.musicValue, audioSettings.music);\r\n        if (this.sfxFill && this.sfxValue) this.updateSettingsSlider(this.sfxFill, this.sfxValue, audioSettings.sfx);\r\n        if (this.voiceFill && this.voiceValue) this.updateSettingsSlider(this.voiceFill, this.voiceValue, audioSettings.voice);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Inputs ]\r\n    //\r\n    /**\r\n     * Initializes all inputs in settings pages with user prefs or defaults.\r\n     */\r\n    public initSettingsInputs(settings: GameSettings): void {\r\n        if (this.deadzoneInput) {\r\n            this.deadzoneInput.value = settings.controls.gamepad.deadzone.toString();\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Toggles ]\r\n    //\r\n    /**\r\n     * Initializes all toggles in settings pages with user prefs or defaults.\r\n     */\r\n    public initSettingsToggles(settings: GameSettings): void {\r\n        if (this.particleJSToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'particleJSToggle',\r\n                value: settings.graphics.renderBackgroundParticles\r\n            });\r\n        }\r\n\r\n        if (this.staticVfxToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'staticToggle',\r\n                value: settings.graphics.showStaticOverlay\r\n            });\r\n        }\r\n\r\n        if (this.ammoReservesPhysicsToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'ammoReservesPhysicsToggle',\r\n                value: settings.graphics.physics.ammoReserves\r\n            });\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Interfaces ]\r\n    //\r\n    /**\r\n     * Initializes the keybinds settings page interface.\r\n     */\r\n    public initKeybindsInterface(controlsSettings: { keybinds: Record<string, string>, gamepad: Record<string, number> }, onBindingChange: (action: string, type: 'keybind' | 'gamepad', newBinding: string | number) => void): void {\r\n        // [ Keys ]\r\n        Object.keys(controlsSettings.keybinds).forEach(action => {\r\n            const elementId = `${action}Keybind`;\r\n            const element = document.getElementById(elementId);\r\n            if (element) {\r\n                const key = controlsSettings.keybinds[action];\r\n                element.textContent = key === ' ' ? 'SPACE' : key.toUpperCase();\r\n\r\n                element.addEventListener('click', () => {\r\n                    this.showRebindModal(action, 'keybind', (newBinding) => {\r\n                        onBindingChange(action, 'keybind', newBinding as string);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        // [ Gamepad ]\r\n        Object.keys(controlsSettings.gamepad).forEach(action => {\r\n            const elementId = `${action}Gamepad`;\r\n            const element = document.getElementById(elementId);\r\n\r\n            if (element && controlsSettings.gamepad[action] !== undefined) {\r\n                const buttonValue = controlsSettings.gamepad[action];\r\n                const buttonName = Object.keys(GAMEPAD_MAP).find(\r\n                    key => typeof GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === 'number'\r\n                        && GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === buttonValue\r\n                );\r\n                element.textContent = buttonName || buttonValue.toString();\r\n\r\n                element.addEventListener('click', () => {\r\n                    this.showRebindModal(action, 'gamepad', (newBinding) => {\r\n                        onBindingChange(action, 'gamepad', newBinding as number);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Shows the controls rebinding modal when called.\r\n     * \r\n     * Can be used for rebinding keyboard or gamepad.\r\n     */\r\n    public showRebindModal(action: string, type: 'keybind' | 'gamepad', onRebind: (newBinding: string | number) => void): void {\r\n        if (!this.modal || !this.modalText || !this.modalInput || !this.modalConfirmButton || !this.modalCancelButton || !this.modalErrorDiv) return;\r\n\r\n        const duplicateWarnings = [\r\n            \"Binding already assigned!\",\r\n            \"Binding already in use!\",\r\n            \"That binding is assigned already!\",\r\n            \"Binding already being used!\",\r\n            \"Already bound to another action!\"\r\n        ];\r\n        let warningIndex = 0;\r\n\r\n        // Check for gamepad if type is gamepad\r\n        if (type === 'gamepad') {\r\n            const gamepads = navigator.getGamepads();\r\n            const hasGamepad = Array.from(gamepads).some(gp => gp !== null);\r\n\r\n            if (!hasGamepad) {\r\n                this.modal.classList.remove('hidden');\r\n                this.modalErrorDiv.textContent = '';\r\n                this.modalText.textContent = 'No gamepad detected';\r\n                this.modalInput.style.display = 'none';\r\n                this.modalConfirmButton.classList.add('hidden');\r\n                this.modalCancelButton.textContent = 'Close';\r\n\r\n                this.modalCancelButton.onclick = () => this.closeModal();\r\n\r\n                this.utility.safeTimeout(() => {\r\n                    this.closeModal();\r\n                }, 3000);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalErrorDiv.textContent = '';\r\n        this.modalInput.style.display = 'none';\r\n        this.modalText.textContent = `Press any ${type === 'keybind' ? 'key' : 'button'} for ${action.toUpperCase()}`;\r\n        this.modalConfirmButton.classList.add('hidden');\r\n        this.modalCancelButton.textContent = 'Cancel';\r\n\r\n        const checkDuplicate = (binding: string | number): boolean => {\r\n            if (type === 'keybind') {\r\n                const allKeybinds = Object.entries(this.settingsManager?.getSettings().controls.keybinds || {});\r\n                return allKeybinds.some(([key, value]) => key !== action && value === binding);\r\n            } else {\r\n                const allGamepad = Object.entries(this.settingsManager?.getSettings().controls.gamepad || {});\r\n                return allGamepad.some(([key, value]) => key !== action && value === binding);\r\n            }\r\n        };\r\n\r\n        const handleKeyPress = (e: KeyboardEvent) => {\r\n            e.preventDefault();\r\n            if (e.key === 'Escape') {\r\n                cleanup();\r\n                this.closeModal();\r\n                return;\r\n            }\r\n\r\n            const newKey = e.key.toLowerCase();\r\n\r\n            if (checkDuplicate(newKey)) {\r\n                if (!this.modalErrorDiv) return;\r\n                this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                warningIndex++;\r\n                return;\r\n            }\r\n\r\n            cleanup();\r\n            onRebind(newKey);\r\n            this.closeModal();\r\n        };\r\n\r\n        const handleMouseDown = (e: MouseEvent) => {\r\n            // Check if click is on cancel button\r\n            if (e.target === this.modalCancelButton || this.modalCancelButton?.contains(e.target as Node)) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            let mouseKey = '';\r\n            if (e.button === 0) mouseKey = 'mouse1';\r\n            else if (e.button === 1) mouseKey = 'mouse3';\r\n            else if (e.button === 2) mouseKey = 'mouse2';\r\n\r\n            if (mouseKey) {\r\n                if (checkDuplicate(mouseKey)) {\r\n                    if (!this.modalErrorDiv) return;\r\n                    this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                    warningIndex++;\r\n                    return;\r\n                }\r\n\r\n                cleanup();\r\n                onRebind(mouseKey);\r\n                this.closeModal();\r\n            }\r\n        };\r\n\r\n        const handleGamepadPress = () => {\r\n            const gamepads = navigator.getGamepads();\r\n            for (const gamepad of gamepads) {\r\n                if (!gamepad) continue;\r\n\r\n                for (let i = 0; i < gamepad.buttons.length; i++) {\r\n                    if (gamepad.buttons[i].pressed) {\r\n                        if (checkDuplicate(i)) {\r\n                            if (!this.modalErrorDiv) return;\r\n                            this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                            warningIndex++;\r\n                            requestAnimationFrame(handleGamepadPress);\r\n                            return;\r\n                        }\r\n\r\n                        cleanup();\r\n                        onRebind(i);\r\n                        this.closeModal();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            requestAnimationFrame(handleGamepadPress);\r\n        };\r\n\r\n        const cleanup = () => {\r\n            if (type === 'keybind') {\r\n                document.removeEventListener('keydown', handleKeyPress);\r\n                document.removeEventListener('mousedown', handleMouseDown);\r\n            }\r\n            this.modalCancelButton!.onclick = null;\r\n        };\r\n\r\n        if (type === 'keybind') {\r\n            document.addEventListener('keydown', handleKeyPress);\r\n            document.addEventListener('mousedown', handleMouseDown);\r\n        } else {\r\n            requestAnimationFrame(handleGamepadPress);\r\n        }\r\n\r\n        this.modalCancelButton.onclick = () => {\r\n            cleanup();\r\n            this.closeModal();\r\n        };\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Leaderboard ]\r\n    //\r\n    /**\r\n     * Locally initialize the leaderboard, or update it if it already exists.\r\n     */\r\n    public createLeaderboard(lobby: LobbyManager, players: Players, userId: string): void {\r\n        // Create a set of all players\r\n        const allPlayers = new Set<string>();\r\n        allPlayers.add(userId);\r\n        players.forEach((_, playerId) => {\r\n            allPlayers.add(playerId);\r\n        });\r\n        lobby.lobbyPlayers.forEach((_, playerId) => {\r\n            allPlayers.add(playerId);\r\n        });\r\n\r\n        // Create/update leaderboard entries for all players\r\n        allPlayers.forEach(playerId => {\r\n            if (!this.leaderboard.has(playerId)) {\r\n                this.leaderboard.set(playerId, { // Create new entry with 0 stats\r\n                    playerId: playerId,\r\n                    wins: 0,\r\n                    kills: 0,\r\n                    deaths: 0\r\n                });\r\n                console.log(`Created leaderboard entry for ${playerId}`);\r\n            }\r\n            // If entry already exists, leave it alone (preserves existing stats)\r\n        });\r\n\r\n        this.updateLeaderboardDisplay(userId);\r\n        console.log('Leaderboard created/updated:', Array.from(this.leaderboard.entries()));\r\n    }\r\n\r\n    /**\r\n     * Update the table for the leaderboard to display the current game status.\r\n     */\r\n    public updateLeaderboardDisplay(localPlayer: string): void {\r\n        if (!this.leaderboardBody) return;\r\n\r\n        // Clear existing rows\r\n        this.leaderboardBody.innerHTML = '';\r\n\r\n        // Sort by wins (highest first), then by kills\r\n        const sortedEntries = Array.from(this.leaderboard.entries()).sort((a, b) => {\r\n            const [, entryA] = a;\r\n            const [, entryB] = b;\r\n\r\n            // First sort by wins (descending)\r\n            if (entryB.wins !== entryA.wins) {\r\n                return entryB.wins - entryA.wins;\r\n            }\r\n            // Then by kills (descending)\r\n            return entryB.kills - entryA.kills;\r\n        });\r\n\r\n        // Create table rows\r\n        sortedEntries.forEach(([playerId, entry]) => {\r\n            const row = document.createElement('tr');\r\n            row.className = 'leaderboard_row';\r\n\r\n            // Highlight current player\r\n            if (playerId === localPlayer) {\r\n                row.classList.add('current-player');\r\n            }\r\n\r\n            // Player name\r\n            const nameCell = document.createElement('td');\r\n            nameCell.textContent = playerId === localPlayer ? 'You' : playerId.substring(0, 8);\r\n            nameCell.className = 'player_name';\r\n            row.appendChild(nameCell);\r\n\r\n            // Wins\r\n            const winsCell = document.createElement('td');\r\n            winsCell.textContent = entry.wins.toString();\r\n            winsCell.className = 'wins';\r\n            row.appendChild(winsCell);\r\n\r\n            // Kills\r\n            const killsCell = document.createElement('td');\r\n            killsCell.textContent = entry.kills.toString();\r\n            killsCell.className = 'kills';\r\n            row.appendChild(killsCell);\r\n\r\n            // Deaths\r\n            const deathsCell = document.createElement('td');\r\n            deathsCell.textContent = entry.deaths.toString();\r\n            deathsCell.className = 'deaths';\r\n            row.appendChild(deathsCell);\r\n\r\n            if (this.leaderboardBody) {\r\n                this.leaderboardBody.appendChild(row);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reset the leaderboard to default state.\r\n     */\r\n    public clearLeaderboard(): void {\r\n        this.leaderboard.clear();\r\n        if (this.leaderboardBody) {\r\n            this.leaderboardBody.innerHTML = '';\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Events ]\r\n    //\r\n    /**\r\n     * Initializes listeners to interface elements.\r\n     */\r\n    private initInterfaceListeners(): void {\r\n        const uiDecimals = 2;\r\n        \r\n        // Accuracy (spread - inverted)\r\n        this.playerState.onStatChange('actions.primary.projectile.spread', (value) => {\r\n            if (this.accuracyStat) this.accuracyStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n\r\n        // Damage\r\n        this.playerState.onStatChange('actions.primary.projectile.damage', (value) => {\r\n            if (this.damageStat) this.damageStat.textContent = Math.round(value).toFixed(uiDecimals);\r\n        });\r\n\r\n        // Speed\r\n        this.playerState.onStatChange('stats.speed', (value) => {\r\n            if (this.speedStat) this.speedStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n\r\n        // Range\r\n        this.playerState.onStatChange('actions.primary.projectile.range', (value) => {\r\n            if (this.rangeStat) this.rangeStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n\r\n        // Shot Speed\r\n        this.playerState.onStatChange('actions.primary.projectile.speed', (value) => {\r\n            if (this.shotSpeedStat) this.shotSpeedStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n\r\n        // Luck\r\n        this.playerState.onStatChange('stats.luck', (value) => {\r\n            if (this.luckStat) this.luckStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { Direction, RandomColorParams, SetInputParams, SetSliderParams, SetSpanParams, SetToggleParams, Vec2 } from './Types';\r\n\r\nexport class Utility {\r\n    private lastFrameTime: number;\r\n    private simplexTable: Uint8Array;\r\n    private activeTimeouts: Set<number>;\r\n\r\n    constructor() {\r\n        this.lastFrameTime = performance.now();\r\n        this.simplexTable = this.generateSimplexTable();\r\n        this.activeTimeouts = new Set();\r\n    }\r\n\r\n    // #region [ General ]\r\n    //\r\n    public deepMerge(target: any, source: any): void {\r\n        for (const key in source) {\r\n            if (\r\n                source[key] !== null &&\r\n                typeof source[key] === 'object' &&\r\n                !Array.isArray(source[key])\r\n            ) {\r\n                if (!target[key]) target[key] = {};\r\n                this.deepMerge(target[key], source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Time ]\r\n    //\r\n    /**\r\n     * Calculates and returns delta time.\r\n     * \r\n     * https://en.wikipedia.org/wiki/Delta_timing\r\n     */\r\n    public deltaTime(): number {\r\n        const now = performance.now();\r\n        const delta = now - this.lastFrameTime;\r\n        this.lastFrameTime = now;\r\n\r\n        // Normalize to 60fps (16.67ms per frame)\r\n        // Cap at 100ms to prevent huge jumps during lag spikes\r\n        return Math.min(delta, 100) / 16.67;\r\n    }\r\n\r\n    /**\r\n     * Overrides 'setTimeout' with safe processing.\r\n     * \r\n     * Timeouts are stored in the 'activeTimeouts' set - allowing stale timeouts to be cleared.\r\n     */\r\n    public safeTimeout(callback: () => void, delay: number): number {\r\n        const id = window.setTimeout(() => {\r\n            this.activeTimeouts.delete(id);\r\n            callback();\r\n        }, delay);\r\n        this.activeTimeouts.add(id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Clears all active timeouts from the activeTimeouts cache.\r\n     */\r\n    public clearTimeoutCache(): void {\r\n        this.activeTimeouts.forEach(id => window.clearTimeout(id));\r\n        this.activeTimeouts.clear();\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Math ]\r\n    public getRandomNum(min: number, max: number): number {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n    /**\r\n     * Returns a random int between the passed min/max values.\r\n     */\r\n    public getRandomInt(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    /**\r\n     * Returns a random position in an array.\r\n     */\r\n    public getRandomInArray<T>(array: T[]): T {\r\n        return array[Math.floor(Math.random() * array.length)];\r\n    }\r\n\r\n    /**\r\n     * Returns a shuffled copy of an array.\r\n     */\r\n    public getShuffledArray<T>(array: T[]): T[] {\r\n        return array.slice().sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    /**\r\n     * Returns the dot product of two 2D vectors.\r\n     */\r\n    public getDotProduct(v1: Vec2, v2: Vec2): number {\r\n        return v1.x * v2.x + v1.y * v2.y;\r\n    }\r\n\r\n    /**\r\n     * Reflects a velocity vector off a surface normal.\r\n     * Formula: V' = V - 2(V·N)N\r\n     */\r\n    public getReflection(velocity: Vec2, normal: Vec2): Vec2 {\r\n        const dot = this.getDotProduct(velocity, normal);\r\n        return {\r\n            x: velocity.x - 2 * dot * normal.x,\r\n            y: velocity.y - 2 * dot * normal.y\r\n        };\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Direction ]\r\n    //\r\n    /**\r\n     * Returns the forward facing direction of the passed rotation.\r\n     */\r\n    public forward(rot: number): Vec2 {\r\n        return { x: Math.cos(rot), y: Math.sin(rot) };\r\n    }\r\n\r\n    /**\r\n     * Gets the current aim direction of the local player.\r\n     */\r\n    public getDirection(params: Direction): Vec2 {\r\n        const dx = params.targetPos.x - params.rootPos.x;\r\n        const dy = params.targetPos.y - params.rootPos.y;\r\n\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        if (distance === 0) return { x: 0, y: 0 }; // avoid NaN\r\n\r\n        return { x: dx / distance, y: dy / distance };\r\n    }\r\n\r\n    /**\r\n     * Returns a random based on the degree radius.\r\n     */\r\n    public getRandomDirection(degrees: number): Vec2 {\r\n        const randomAngle = Math.random() * (degrees * Math.PI / 180);\r\n        const direction = { x: Math.cos(randomAngle), y: Math.sin(randomAngle) }\r\n        return direction;\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Visual ]\r\n    /**\r\n     * Returns a random color. With no params passed, color will be completely random hex.\r\n     * \r\n     * Params can be used to return color templates in either hex or RGB.\r\n     */\r\n    public getRandomColor(params?: RandomColorParams): string {\r\n        const format = params?.format ?? 'hex';\r\n        const mode = params?.mode ?? 'any';\r\n\r\n        let hexColor: string;\r\n\r\n        switch (mode) {\r\n            case 'primary':\r\n                const primaries = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#00FFFF', '#FF00FF'];\r\n                hexColor = this.getRandomInArray(primaries);\r\n                break;\r\n\r\n            case 'pastel':\r\n                const r = this.getRandomInt(127, 254);\r\n                const g = this.getRandomInt(127, 254);\r\n                const b = this.getRandomInt(127, 254);\r\n                hexColor = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'vibrant':\r\n                const channels = [255, this.getRandomInt(0, 255), this.getRandomInt(0, 255)];\r\n                channels.sort(() => Math.random() - 0.5);\r\n                hexColor = `#${channels[0].toString(16).padStart(2, '0')}${channels[1].toString(16).padStart(2, '0')}${channels[2].toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'dark':\r\n                const dr = this.getRandomInt(0, 127);\r\n                const dg = this.getRandomInt(0, 127);\r\n                const db = this.getRandomInt(0, 127);\r\n                hexColor = `#${dr.toString(16).padStart(2, '0')}${dg.toString(16).padStart(2, '0')}${db.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'light':\r\n                const lr = this.getRandomInt(128, 255);\r\n                const lg = this.getRandomInt(128, 255);\r\n                const lb = this.getRandomInt(128, 255);\r\n                hexColor = `#${lr.toString(16).padStart(2, '0')}${lg.toString(16).padStart(2, '0')}${lb.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'grayscale':\r\n                const gray = this.getRandomInt(0, 255);\r\n                hexColor = `#${gray.toString(16).padStart(2, '0')}${gray.toString(16).padStart(2, '0')}${gray.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'any':\r\n            default:\r\n                hexColor = \"#\" + this.getRandomInt(0, 0xFFFFFF).toString(16).padStart(6, \"0\");\r\n                break;\r\n        }\r\n\r\n        // Convert to requested format\r\n        if (format === 'rgb') {\r\n            const rgb = this.hexToRgb(hexColor);\r\n            if (!rgb) return hexColor; // Fallback to hex if conversion fails\r\n            return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n        }\r\n\r\n        return hexColor;\r\n    }\r\n\r\n    /**\r\n     * Converts hex color code to RGB.\r\n     */\r\n    public hexToRgb(hex: string): { r: number, g: number, b: number } | null {\r\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    /**\r\n     * Generates the permutation table for simplex noise.\r\n     */\r\n    private generateSimplexTable(): Uint8Array {\r\n        const table = new Uint8Array(512);\r\n        for (let k = 0; k < 256; k++) table[k] = k;\r\n        for (let k = 0; k < 256; k++) {\r\n            const r = k + this.getRandomInt(0, 255 - k);\r\n            [table[k], table[r]] = [table[r], table[k]];\r\n        }\r\n        for (let k = 0; k < 256; k++) table[256 + k] = table[k];\r\n        return table;\r\n    }\r\n\r\n    /**\r\n     * 2D noise function using Simplex.\r\n     * \r\n     * https://en.wikipedia.org/wiki/Simplex_noise\r\n     */\r\n    public simplexNoise2D(x: number, y: number, override: boolean = false): number {\r\n        if (override) { this.simplexTable = this.generateSimplexTable(); }\r\n\r\n        const perm = this.simplexTable;\r\n\r\n        const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\r\n        const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\r\n\r\n        const s = (x + y) * F2;\r\n        const i = Math.floor(x + s);\r\n        const j = Math.floor(y + s);\r\n\r\n        const t = (i + j) * G2;\r\n        const X0 = i - t;\r\n        const Y0 = j - t;\r\n        const x0 = x - X0;\r\n        const y0 = y - Y0;\r\n\r\n        const i1 = x0 > y0 ? 1 : 0;\r\n        const j1 = x0 > y0 ? 0 : 1;\r\n\r\n        const x1 = x0 - i1 + G2;\r\n        const y1 = y0 - j1 + G2;\r\n        const x2 = x0 - 1.0 + 2.0 * G2;\r\n        const y2 = y0 - 1.0 + 2.0 * G2;\r\n\r\n        const ii = i & 255;\r\n        const jj = j & 255;\r\n\r\n        const gi0 = perm[ii + perm[jj]] % 12;\r\n        const gi1 = perm[ii + i1 + perm[jj + j1]] % 12;\r\n        const gi2 = perm[ii + 1 + perm[jj + 1]] % 12;\r\n\r\n        const grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\r\n        [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\r\n        [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\r\n\r\n        const dot = (g: number[], x: number, y: number) => g[0] * x + g[1] * y;\r\n\r\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\r\n        let n0 = t0 < 0 ? 0 : Math.pow(t0, 4) * dot(grad3[gi0], x0, y0);\r\n\r\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\r\n        let n1 = t1 < 0 ? 0 : Math.pow(t1, 4) * dot(grad3[gi1], x1, y1);\r\n\r\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\r\n        let n2 = t2 < 0 ? 0 : Math.pow(t2, 4) * dot(grad3[gi2], x2, y2);\r\n\r\n        return 70.0 * (n0 + n1 + n2);\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Generation ]\r\n    //\r\n    /**\r\n     * Returns a UID using pure random math. With 36 characters defined - 8 character long UID has ~2.8 trillion outcomes.\r\n     */\r\n    public generateUID(length: number, prefix?: string): string {\r\n        const chars = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n        let result = prefix ?? '';\r\n        for (let i = 0; i < length; i++) {\r\n            result += chars[this.getRandomInt(0, chars.length - 1)];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Generate a custom link using the url from the window object.\r\n     * \r\n     * Example: generateLink(abc123, 'room'); Result: https://www.link.com/?room=abc123\r\n     */\r\n    public generateLink(value: string, param?: string): string {\r\n        const base = window.location.origin;\r\n        if (param) {\r\n            return `${base}?${param}=${value}`;\r\n        }\r\n        return `${base}?${value}`;\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ DOM ]\r\n    //\r\n    /**\r\n     * Sets the value of the chosen HTMLInputElement in the DOM.\r\n     */\r\n    public setInput(params: SetInputParams): void {\r\n        const inputElement = document.getElementById(params.inputId) as HTMLInputElement | null;\r\n        if (inputElement) {\r\n            inputElement.value = params.value.toString();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sets a specific slider to a specific value.\r\n     * \r\n     * Slider must have a base element and a fill element. Optionally lerp the value between the target and the current, using the max.\r\n     */\r\n    public setSlider(params: SetSliderParams): void {\r\n        const { sliderId, targetValue, maxValue, lerpTime = 0 } = params;\r\n\r\n        const sliderContainer = document.getElementById(sliderId);\r\n        const sliderFill = sliderContainer?.querySelector('div') as HTMLElement;\r\n\r\n        if (!sliderContainer || !sliderFill) {\r\n            console.warn(`Slider not found: ${sliderId}...`);\r\n            return;\r\n        }\r\n\r\n        if (maxValue === 0) {\r\n            console.warn(\"maxValue cannot be 0...\");\r\n            return;\r\n        }\r\n\r\n        // Clamp target value between 0 and maxValue\r\n        const clampedTarget = Math.max(0, Math.min(maxValue, targetValue));\r\n        const targetPercentage = (clampedTarget / maxValue) * 100;\r\n\r\n        // Get current width percentage\r\n        const currentWidthStr = sliderFill.style.width || '100%';\r\n        const currentPercentage = parseFloat(currentWidthStr.replace('%', ''));\r\n\r\n        // If already at target, no animation needed\r\n        if (Math.abs(currentPercentage - targetPercentage) < 0.1) return;\r\n\r\n        // If lerpTime is <= 0, directly set the slider to the targetValue\r\n        if (lerpTime <= 0) {\r\n            sliderFill.style.transition = 'none';\r\n            sliderFill.style.width = `${targetPercentage}%`;\r\n            return;\r\n        }\r\n\r\n        // Animate using CSS transition\r\n        sliderFill.style.transition = `width ${lerpTime}ms ease-out`;\r\n        sliderFill.style.width = `${targetPercentage}%`;\r\n\r\n        // Clear transition after animation completes to avoid interfering with future updates\r\n        setTimeout(() => {\r\n            if (sliderFill) {\r\n                sliderFill.style.transition = '';\r\n            }\r\n        }, lerpTime);\r\n    }\r\n\r\n    /**\r\n     * Update a span element with a specific number or string.\r\n     */\r\n    public setSpan(params: SetSpanParams): void {\r\n        const spanElement = document.getElementById(params.spanId);\r\n\r\n        if (!spanElement) {\r\n            console.warn(`Span not found: ${params.spanId}`);\r\n            return;\r\n        }\r\n\r\n        spanElement.textContent = params.value.toString();\r\n    }\r\n\r\n    /**\r\n     * Updates the attributes of a toggle element for reference.\r\n     */\r\n    public setToggle(params: SetToggleParams): void {\r\n        const toggle = document.getElementById(params.toggleId);\r\n        if (toggle) {\r\n            if (params.value) {\r\n                toggle.setAttribute('checked', 'true');\r\n                toggle.setAttribute('aria-checked', 'true');\r\n            } else {\r\n                toggle.removeAttribute('checked');\r\n                toggle.setAttribute('aria-checked', 'false');\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { GAME } from \"./Config\";\r\n\r\nimport { GameState } from \"./GameState\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class WebsocketManager {\r\n    private ws: WebSocket | null = null;\r\n\r\n    constructor(\r\n        private gameState: GameState,\r\n        private roomManager: RoomManager,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    /**\r\n     * Used for creating the websocket connection between clients.\r\n     * \r\n     * Called when joining or creating a room.\r\n     */\r\n    public connectWebSocket(): void {\r\n        const wsProtocol = location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\r\n        let wsHost: string;\r\n\r\n        if (location.port === '8888') { // Electron testing → connect to localhost:8080\r\n            wsHost = 'localhost:8080';\r\n            this.ws = new WebSocket(`ws://${wsHost}`);\r\n        } else if (location.port === '9999') { // Electron production → connect to saltpeter.xyz\r\n            wsHost = 'saltpeter.xyz';\r\n            this.ws = new WebSocket(`wss://${wsHost}`);\r\n        } else { // Browser (not Electron)\r\n            wsHost = location.hostname === 'localhost' ? 'localhost:8080' : location.host;\r\n            this.ws = new WebSocket(`${wsProtocol}//${wsHost}`);\r\n        }\r\n\r\n        this.ws.onopen = () => {\r\n            console.log(\"Connected to WebSocket\");\r\n            this.roomManager.setWebSocket(this.ws!);\r\n        };\r\n\r\n        this.ws.onclose = () => {\r\n            console.log(\"Disconnected from WebSocket\");\r\n            this.gameState.gameInProgress = false;\r\n            this.utility.safeTimeout(() => this.connectWebSocket(), GAME.RECONNECT_DELAY);\r\n        };\r\n\r\n        this.ws.onerror = (error) => {\r\n            console.error(\"WebSocket error:\", error);\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the current WebSocket connection.\r\n     */\r\n    public getWebSocket(): WebSocket | null {\r\n        return this.ws;\r\n    }\r\n}","import { CANVAS, DECALS, OBJECT_DEFAULTS, PARTICLES, SFX, SHRAPNEL } from \"../Config\";\r\nimport { AttackType, PlayerHitParams, Projectile, ProjectileOverrides, Shrapnel, Vec2 } from \"../Types\";\r\n\r\nimport { Animator } from \"../Animator\";\r\nimport { AudioManager } from \"../AudioManager\";\r\nimport { CollisionsManager } from \"../CollisionsManager\";\r\nimport { DecalsManager } from \"../DecalsManager\";\r\nimport { GameState } from \"../GameState\";\r\nimport { LuckController } from \"./LuckController\";\r\nimport { ParticlesManager } from \"../ParticlesManager\";\r\nimport { PlayerState } from \"./PlayerState\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { Utility } from \"../Utility\";\r\nimport { PlayerController,  } from \"./PlayerController\";\r\nimport { UserInterface } from \"../UserInterface\";\r\n\r\nexport class CombatController {\r\n    public projectiles: Map<string, Projectile> = new Map();\r\n\r\n    constructor(\r\n        private animator: Animator,\r\n        private audioManager: AudioManager,\r\n        private collisionsManager: CollisionsManager,\r\n        private decalsManager: DecalsManager,\r\n        private gameState: GameState,\r\n        private luckController: LuckController,\r\n        private particlesManager: ParticlesManager,\r\n        private playerController: PlayerController,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // #region [ Attack ]\r\n    /**\r\n     * Entrypoint for triggering attacks based on type needed.\r\n     */\r\n    public triggerAttack(type: AttackType): void {\r\n        switch (type) {\r\n            case 'melee':\r\n                this.startMelee();\r\n                break;\r\n            case 'ranged':\r\n                this.startBurst();\r\n                break;\r\n            default:\r\n                console.warn(`Unknown attack type: ${type}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responsible for what happens during attack actions.\r\n     */\r\n    public updateAttack(delta: number): void {\r\n        if (!this.gameState.gameInProgress || this.playerState.myPlayer.stats.health.value <= 0) return;\r\n\r\n        const currentTime = Date.now();\r\n\r\n        // Handle reload\r\n        if (this.playerState.isReloading) {\r\n            if (currentTime >= this.playerState.reloadStartTime + this.playerState.myPlayer.actions.primary.reload.time) { // Reload complete\r\n                this.finishReload();\r\n            }\r\n            return; // Can't shoot while reloading\r\n        }\r\n\r\n        // Handle ongoing burst\r\n        if (this.playerState.isBurstActive && currentTime >= this.playerState.nextBurstShotTime) {\r\n            // Check if we still have ammo and haven't finished the intended burst amount\r\n            const ammoNeeded = this.playerState.myPlayer.actions.primary.burst.amount;\r\n            if (this.playerState.myPlayer.actions.primary.magazine.currentAmmo > 0 && this.playerState.currentBurstShot < ammoNeeded) {\r\n                const angle = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                const targetDir = { x: Math.cos(angle), y: Math.sin(angle) };\r\n\r\n                const triggeredUniques = this.triggerBurstUniques();\r\n                if (triggeredUniques.length === 0) {\r\n                    this.launchProjectile(targetDir);\r\n                }\r\n\r\n                this.playerState.currentBurstShot++;\r\n                this.playerState.myPlayer.actions.primary.magazine.currentAmmo--; // Use 1 ammo per shot in burst\r\n\r\n                console.log(`Burst shot ${this.playerState.currentBurstShot}! Magazine: ${this.playerState.myPlayer.actions.primary.magazine.currentAmmo}/${this.playerState.myPlayer.actions.primary.magazine.size}, Inventory: ${this.playerState.myPlayer.actions.primary.magazine.currentReserve}/${this.playerState.myPlayer.actions.primary.magazine.maxReserve}`);\r\n\r\n                if (this.playerState.currentBurstShot >= ammoNeeded || this.playerState.myPlayer.actions.primary.magazine.currentAmmo === 0) { // Burst complete (reached burst amount or out of ammo)\r\n                    this.playerState.isBurstActive = false;\r\n                    this.playerState.currentBurstShot = 0;\r\n                } else { // Schedule next shot in burst\r\n                    this.playerState.nextBurstShotTime = currentTime + this.playerState.myPlayer.actions.primary.burst.delay;\r\n                }\r\n            } else { // Out of ammo or reached burst limit\r\n                this.playerState.isBurstActive = false;\r\n                this.playerState.currentBurstShot = 0;\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Melee ]\r\n    //\r\n    /**\r\n     * Checks if the player can melee or not.\r\n     */\r\n    public canMelee(): boolean {\r\n        const now = Date.now(); 1\r\n        return (\r\n            !this.playerState.isMelee &&\r\n            now >= this.playerState.lastMeleeTime + this.playerState.myPlayer.actions.melee.cooldown &&\r\n            this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) &&\r\n            !this.playerState.isBurstActive &&\r\n            !this.playerState.isReloading\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Triggers a melee attack, using standard projectiles with special params.\r\n     */\r\n    private startMelee(): void {\r\n        this.playerState.isMelee = true;\r\n        this.playerState.lastMeleeTime = Date.now();\r\n\r\n        this.playerState.myPlayer.rig.weapon = 'KNIFE'; //TODO: Use whatever currently unlocked melee weapon is equipped\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'weapon-change',\r\n            playerId: this.userId,\r\n            weapon: 'KNIFE' //TODO: Use whatever currently unlocked melee weapon is equipped\r\n        }));\r\n\r\n        // Calculate melee direction (use current rotation)\r\n        const angle = this.playerState.myPlayer.transform.rot;\r\n        const range = this.playerState.myPlayer.actions.melee.range;\r\n        const size = this.playerState.myPlayer.actions.melee.size;\r\n\r\n        // Use the same spawn offset as normal projectiles\r\n        const spawnOffset = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer) +\r\n            this.playerState.myPlayer.actions.primary.projectile.size +\r\n            this.playerState.myPlayer.actions.primary.offset;\r\n\r\n        // Calculate spawn position at the tip of the weapon\r\n        const spawnX = this.playerState.myPlayer.transform.pos.x + Math.cos(angle - Math.PI / 2) * spawnOffset;\r\n        const spawnY = this.playerState.myPlayer.transform.pos.y + Math.sin(angle - Math.PI / 2) * spawnOffset;\r\n\r\n        const velocity = {\r\n            x: Math.cos(angle - Math.PI / 2) * range,\r\n            y: Math.sin(angle - Math.PI / 2) * range\r\n        };\r\n\r\n        const meleeProjectile = {\r\n            id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n            transform: {\r\n                pos: { x: spawnX, y: spawnY },\r\n                rot: angle\r\n            },\r\n            timestamp: Date.now(),\r\n            color: 'rgba(255, 255, 255, 0)',\r\n            damage: this.playerState.myPlayer.actions.melee.damage,\r\n            distanceTraveled: 0,\r\n            length: size,\r\n            ownerId: this.userId,\r\n            range: range,\r\n            size: size,\r\n            velocity: velocity\r\n        };\r\n\r\n        this.projectiles.set(meleeProjectile.id, meleeProjectile);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'projectile-launch',\r\n            projectile: meleeProjectile\r\n        }));\r\n\r\n        // Remove melee projectile after it has traveled its duration\r\n        this.utility.safeTimeout(() => {\r\n            this.projectiles.delete(meleeProjectile.id);\r\n            this.playerState.isMelee = false;\r\n\r\n            this.playerState.myPlayer.rig.weapon = 'GLOCK'; //TODO: Use whatever currently unlocked ranged primary is equipped\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'weapon-change',\r\n                playerId: this.userId,\r\n                weapon: 'GLOCK' //TODO: Use whatever currently unlocked ranged primary is equipped\r\n            }));\r\n        }, this.playerState.myPlayer.actions.melee.duration);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Ranged ]\r\n    //\r\n    /**\r\n     * Entrypoint for ranged attacks. When this is called, it starts the primary attack flow.\r\n     */\r\n    private startBurst(): void {\r\n        if (this.playerState.isBurstActive || !this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) || this.playerState.isReloading) return;\r\n\r\n        const now = Date.now();\r\n        if (now < this.playerState.lastShotTime + this.playerState.myPlayer.actions.primary.buffer) return;\r\n        this.playerState.lastShotTime = now;\r\n\r\n        // Check if we have enough ammo for the burst\r\n        const ammoNeeded = this.playerState.myPlayer.actions.primary.burst.amount;\r\n        const ammoToUse = Math.min(ammoNeeded, this.playerState.myPlayer.actions.primary.magazine.currentAmmo);\r\n\r\n        if (ammoToUse === 0) {\r\n            console.log('Out of ammo! Magazine empty.');\r\n\r\n            this.animator.animateCharacterPart({\r\n                playerId: this.userId,\r\n                part: 'WEAPON',\r\n                frames: {\r\n                    0: { x: 0, y: 8 } // Slide held back\r\n                },\r\n                duration: 0,\r\n                partIndex: 1\r\n            }); // duration=0 means infinite/held\r\n\r\n            this.audioManager.playAudioNetwork({\r\n                src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.EMPTY), // TODO: Use current weapon\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.975, max: 1.05 },\r\n                spatial: {\r\n                    blend: 1.0,\r\n                    pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n                },\r\n                volume: { min: 0.985, max: 1 }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.playerState.isBurstActive = true;\r\n        this.playerState.currentBurstShot = 0;\r\n\r\n        // Calculate direction from player's current rotation instead of mouse\r\n        const angle = this.playerState.myPlayer.transform.rot - Math.PI / 2; // Subtract PI/2 to convert from visual rotation to direction\r\n        const targetDir = { x: Math.cos(angle), y: Math.sin(angle) };\r\n\r\n        const triggeredUniques = this.triggerBurstUniques();\r\n        if (triggeredUniques.length === 0) {\r\n            this.launchProjectile(targetDir);\r\n        }\r\n\r\n        this.playerState.currentBurstShot++;\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo--; // Use 1 ammo per shot in burst\r\n\r\n        // Blend in empty sound as magazine gets low\r\n        // This is a local sound only, to help the player manage their ammo\r\n        const ammoRatio = this.playerState.myPlayer.actions.primary.magazine.currentAmmo / this.playerState.myPlayer.actions.primary.magazine.size;\r\n        const emptyBlend = 1 - ammoRatio; // 0 when full, 1 when empty\r\n\r\n        if (emptyBlend > 0.5) { // Only play when below 50% ammo (half mag empty)\r\n            const blendVolume = (emptyBlend - 0.5) * 2 * 0.5; // Remap 0.5-1.0 to 0-0.5 volume\r\n            this.audioManager.playAudio({ // Play sound locally\r\n                src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.EMPTY), // TODO: Use current weapon\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.975, max: 1.05 },\r\n                volume: { min: blendVolume, max: blendVolume }\r\n            });\r\n        }\r\n\r\n        // If burst has more shots and we have ammo, schedule the next one\r\n        if (this.playerState.myPlayer.actions.primary.burst.amount > 1 && this.playerState.myPlayer.actions.primary.magazine.currentAmmo > 0 && this.playerState.currentBurstShot < ammoToUse) {\r\n            this.playerState.nextBurstShotTime = Date.now() + this.playerState.myPlayer.actions.primary.burst.delay;\r\n        } else { // Burst complete\r\n            this.playerState.isBurstActive = false;\r\n            this.playerState.currentBurstShot = 0;\r\n\r\n            if (this.playerState.myPlayer.actions.primary.magazine.currentAmmo === 0) {\r\n                this.animator.animateCharacterPart({\r\n                    playerId: this.userId,\r\n                    part: 'WEAPON',\r\n                    frames: {\r\n                        0: { x: 0, y: 8 } // Slide held back\r\n                    },\r\n                    duration: 0,\r\n                    partIndex: 1\r\n                }); // duration=0 means infinite/held\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates physics for projectile and adds them to mapping.\r\n     */\r\n    private launchProjectile(dir: Vec2, overrides?: ProjectileOverrides): void {\r\n        console.log(`Fired shot!`);\r\n\r\n        // Use the passed direction and normalize it\r\n        const distance = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\r\n        if (distance === 0) return;\r\n\r\n        const dirX = dir.x / distance;\r\n        const dirY = dir.y / distance;\r\n\r\n        // Animate weapon slide (glock_slide.png is index 1 in the WEAPON.GLOCK array)\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 0 },    // Start position\r\n                0.5: { x: 0, y: 20 }, // Pull back slide\r\n                1: { x: 0, y: 0 }     // Return to start\r\n            },\r\n            duration: 175,\r\n            partIndex: 1\r\n        });\r\n\r\n        const canTriggerUnique = overrides?.canTriggerUnique ?? true;\r\n        const projectileAmount = overrides?.amount ?? this.playerState.myPlayer.actions.primary.projectile.amount;\r\n        const projectileColor = overrides?.color ?? this.playerState.myPlayer.actions.primary.projectile.color;\r\n        const projectileDamage = overrides?.damage ?? this.playerState.myPlayer.actions.primary.projectile.damage;\r\n        const projectileLength = overrides?.length ?? this.playerState.myPlayer.actions.primary.projectile.length;\r\n        const projectileRange = overrides?.range ?? this.playerState.myPlayer.actions.primary.projectile.range;\r\n        const projectileSize = overrides?.size ?? this.playerState.myPlayer.actions.primary.projectile.size;\r\n        const projectileSpeed = overrides?.speed ?? this.playerState.myPlayer.actions.primary.projectile.speed;\r\n        const projectileSpread = overrides?.spread ?? this.playerState.myPlayer.actions.primary.projectile.spread;\r\n\r\n        // Calculate spawn offset\r\n        const spawnOffset = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer) + projectileSize + this.playerState.myPlayer.actions.primary.offset;\r\n        const bulletSpawnX = this.playerState.myPlayer.transform.pos.x + dirX * spawnOffset;\r\n        const bulletSpawnY = this.playerState.myPlayer.transform.pos.y + dirY * spawnOffset;\r\n        const rightX = -dirY;\r\n        const rightY = dirX;\r\n\r\n        // TODO: Wrap all of these particles in some sort of defined type that contains this in one message\r\n\r\n        this.particlesManager.createParticles( // Muzzle flash\r\n            bulletSpawnX,\r\n            bulletSpawnY,\r\n            `muzzle_${Date.now()}`,\r\n            PARTICLES.MUZZLE_FLASH,\r\n            { x: dirX, y: dirY }\r\n        );\r\n\r\n        this.particlesManager.createParticles( // Muzzle smoke\r\n            bulletSpawnX,\r\n            bulletSpawnY,\r\n            `smoke_${Date.now()}`,\r\n            PARTICLES.SMOKE,\r\n            { x: dirX * 0.3, y: dirY * 0.3 }\r\n        );\r\n\r\n        this.particlesManager.createParticles( // Shell casing\r\n            bulletSpawnX - 5,\r\n            bulletSpawnY - 5,\r\n            `shell_${Date.now()}`,\r\n            PARTICLES.SHELL_CASING,\r\n            { x: rightX * 0.8 + dirX * -0.2, y: rightY * 0.8 + dirY * -0.2 } // Right + slightly back\r\n        );\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.ATTACK), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.95, max: 1.125 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y },\r\n                rolloff: {\r\n                    distance: Math.max(CANVAS.WIDTH, CANVAS.HEIGHT) * 2,\r\n                    factor: 0.5,\r\n                    type: 'logarithmic'\r\n                }\r\n            },\r\n            volume: { min: 0.965, max: 1 }\r\n        });\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.SHELL), // TODO: Use current weapon\r\n            delay: { min: 0.25, max: 0.5 }, // Play with a short delay trigger to simulate the shell hitting the ground\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.95, max: 1.125 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.375, max: 0.85 }\r\n        });\r\n\r\n        // Create projectiles\r\n        for (let i = 0; i < projectileAmount; i++) {\r\n            if (this.playerState.myPlayer.unique.length > 0 && canTriggerUnique) {\r\n                const shuffledUniques = this.utility.getShuffledArray(this.playerState.myPlayer.unique);\r\n\r\n                for (const unique of shuffledUniques) {\r\n                    if (this.luckController.luckRoll()) {\r\n                        this.triggerUnique(unique);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const spread = (Math.random() - 0.5) * (projectileSpread / 100);\r\n            const angle = Math.atan2(dirY, dirX) + spread;\r\n            const dir = this.utility.forward(angle);\r\n\r\n            const projectile: Projectile = {\r\n                id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n                transform: {\r\n                    pos: {\r\n                        x: this.playerState.myPlayer.transform.pos.x + Math.cos(angle) * spawnOffset,\r\n                        y: this.playerState.myPlayer.transform.pos.y + Math.sin(angle) * spawnOffset,\r\n                    },\r\n                    rot: angle\r\n                },\r\n                timestamp: Date.now(),\r\n                color: projectileColor,\r\n                damage: projectileDamage,\r\n                distanceTraveled: 0,\r\n                length: projectileLength,\r\n                ownerId: this.userId,\r\n                range: projectileRange * 100, // Convert to px\r\n                size: projectileSize,\r\n                velocity: {\r\n                    x: dir.x * projectileSpeed,\r\n                    y: dir.y * projectileSpeed,\r\n                },\r\n            };\r\n\r\n            this.projectiles.set(projectile.id, projectile);\r\n\r\n            // Send projectile to other players\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'projectile-launch',\r\n                projectile: projectile\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates all projectiles in the game locally.\r\n     */\r\n    public updateProjectiles(delta: number): void {\r\n        const projectilesToRemove: string[] = [];\r\n\r\n        this.projectiles.forEach((projectile, id) => {\r\n            // Update movement (with optional spatial targeting nudge)\r\n            if (projectile.ownerId === this.userId) {\r\n                if (this.playerState.myPlayer.unique.includes('spatial_targeting')) {\r\n                    const aim = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                    const dx = Math.cos(aim), dy = Math.sin(aim);\r\n                    const speed = Math.sqrt(projectile.velocity.x ** 2 + projectile.velocity.y ** 2);\r\n                    const vx = projectile.velocity.x / speed, vy = projectile.velocity.y / speed;\r\n                    const lerpFactor = 0.05;\r\n                    const lx = vx + (dx - vx) * lerpFactor;\r\n                    const ly = vy + (dy - vy) * lerpFactor;\r\n                    const norm = Math.sqrt(lx ** 2 + ly ** 2);\r\n\r\n                    projectile.velocity.x = (lx / norm) * speed;\r\n                    projectile.velocity.y = (ly / norm) * speed;\r\n                    projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n                }\r\n            }\r\n            projectile.transform.pos.x += projectile.velocity.x * delta;\r\n            projectile.transform.pos.y += projectile.velocity.y * delta;\r\n\r\n            // Update distance traveled\r\n            const frameDistance = Math.sqrt(\r\n                projectile.velocity.x * projectile.velocity.x +\r\n                projectile.velocity.y * projectile.velocity.y\r\n            ) * delta;\r\n            projectile.distanceTraveled += frameDistance;\r\n\r\n            // Check collision with my player (only if I'm alive)\r\n            if (this.collisionsManager.collisionsEnabled(this.playerState.myPlayer)) {\r\n                const dx = projectile.transform.pos.x - this.playerState.myPlayer.transform.pos.x;\r\n                const dy = projectile.transform.pos.y - this.playerState.myPlayer.transform.pos.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                const playerCollider = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer);\r\n                const canDeflect = this.playerState.myPlayer.unique.includes('kinetic_brain') &&\r\n                    distance <= playerCollider * 4 &&\r\n                    distance > playerCollider + projectile.size &&\r\n                    projectile.ownerId !== this.userId;\r\n\r\n                if (canDeflect) {\r\n                    if (this.luckController.luckRoll()) {\r\n                        console.log('Kinetic Brain activated! Deflecting projectile.');\r\n\r\n                        // Calculate normal from player center to projectile\r\n                        const normal = {\r\n                            x: (projectile.transform.pos.x - this.playerState.myPlayer.transform.pos.x) / distance,\r\n                            y: (projectile.transform.pos.y - this.playerState.myPlayer.transform.pos.y) / distance\r\n                        };\r\n\r\n                        const speedReduction = this.utility.getRandomNum(0.85, 0.95);\r\n\r\n                        // Reflect velocity off the normal\r\n                        const reflected = this.utility.getReflection(projectile.velocity, normal);\r\n                        projectile.velocity.x = reflected.x * speedReduction; // Slow down\r\n                        projectile.velocity.y = reflected.y * 0.85;\r\n\r\n                        // Change ownership\r\n                        projectile.ownerId = this.userId;\r\n                        projectile.color = this.playerState.myPlayer.actions.primary.projectile.color;\r\n\r\n                        // Update rotation\r\n                        projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n\r\n                        // Broadcast deflection\r\n                        this.roomManager.sendMessage(JSON.stringify({\r\n                            type: 'projectile-deflect',\r\n                            projectileId: projectile.id,\r\n                            newOwnerId: this.userId,\r\n                            velocity: projectile.velocity,\r\n                            color: projectile.color\r\n                        }));\r\n\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (distance <= playerCollider + projectile.size) { // Projectile collided with my player\r\n                    projectilesToRemove.push(id);\r\n\r\n                    const actualDamage = Math.max(0, projectile.damage - this.playerState.myPlayer.stats.defense);\r\n                    this.playerState.myPlayer.stats.health.value = Math.max(0, this.playerState.myPlayer.stats.health.value - actualDamage);\r\n\r\n                    const params: PlayerHitParams = {\r\n                        target: this.playerState.myPlayer,\r\n                        shooterId: projectile.ownerId,\r\n                        damage: projectile.damage,\r\n                        newHealth: this.playerState.myPlayer.stats.health.value,\r\n                        source: projectile,\r\n                        wasKill: this.playerState.myPlayer.stats.health.value <= 0\r\n                    }\r\n                    this.playerController.playerHit(params);\r\n                }\r\n            }\r\n\r\n            // Check collision with other players (for my projectiles only)\r\n            if (projectile.ownerId === this.userId) {\r\n                this.playerState.players.forEach((player, playerId) => {\r\n                    if (this.collisionsManager.collisionsEnabled(player)) { // Only check collision if the player has collisions enabled\r\n                        const dx2 = projectile.transform.pos.x - player.transform.pos.x;\r\n                        const dy2 = projectile.transform.pos.y - player.transform.pos.y;\r\n                        const distance2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\r\n\r\n                        if (distance2 <= this.collisionsManager.getPlayerCollider(player) + projectile.size) { // My projectile hit another player!\r\n                            projectilesToRemove.push(id);\r\n\r\n                            const actualDamage = Math.max(0, projectile.damage - player.stats.defense);\r\n                            const newHealth = Math.max(0, player.stats.health.value - actualDamage);\r\n                            player.stats.health.value = newHealth;\r\n\r\n                            const params: PlayerHitParams = {\r\n                                target: player,\r\n                                shooterId: this.userId,\r\n                                damage: projectile.damage,\r\n                                newHealth: newHealth,\r\n                                source: projectile,\r\n                                wasKill: newHealth <= 0\r\n                            }\r\n                            this.playerController.playerHit(params);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Check if projectile should be removed (range/bounds)\r\n            if (projectile.distanceTraveled >= projectile.range ||\r\n                projectile.transform.pos.x < 0 || projectile.transform.pos.x > CANVAS.WIDTH ||\r\n                projectile.transform.pos.y < 0 || projectile.transform.pos.y > CANVAS.HEIGHT) {\r\n\r\n                projectilesToRemove.push(id);\r\n\r\n                // Create burn mark where projectile expired (only for my projectiles)\r\n                if (projectile.ownerId === this.userId) {\r\n                    const triggeredUniques = this.triggerCollisionUniques(projectile.transform.pos);\r\n\r\n                    // TODO: Catch the triggered uniques, and use that string array, might be a bouncing bullet or something that makes it not get destroyed yet\r\n\r\n                    if (projectile.distanceTraveled >= projectile.range) {\r\n                        this.decalsManager.createDecal(projectile.transform.pos.x, projectile.transform.pos.y, `impact_${id}`, DECALS.PROJECTILE);\r\n                    }\r\n\r\n                    this.particlesManager.createParticles(projectile.transform.pos.x, projectile.transform.pos.y, `sparks_${id}`, PARTICLES.SPARKS);\r\n\r\n\r\n                    this.audioManager.playAudioNetwork({\r\n                        src: this.utility.getRandomInArray(SFX.IMPACT.METAL.BULLET), // TODO: Use current projectile type\r\n                        listener: {\r\n                            x: this.playerState.myPlayer.transform.pos.x,\r\n                            y: this.playerState.myPlayer.transform.pos.y\r\n                        },\r\n                        output: 'sfx',\r\n                        pitch: { min: 0.95, max: 1.125 },\r\n                        spatial: {\r\n                            blend: 1.0,\r\n                            pos: { x: projectile.transform.pos.x, y: projectile.transform.pos.y }\r\n                        },\r\n                        volume: { min: 0.965, max: 1 }\r\n                    });\r\n\r\n                    // Notify others to remove projectile\r\n                    this.roomManager.sendMessage(JSON.stringify({\r\n                        type: 'projectile-remove',\r\n                        projectileId: id\r\n                    }));\r\n                }\r\n            }\r\n        });\r\n\r\n        // Remove projectiles locally\r\n        projectilesToRemove.forEach(id => {\r\n            this.projectiles.delete(id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to toggle auto fire\r\n     */\r\n    public toggleAutoFire(timestamp: number): void {\r\n        this.playerState.canAutoFire = true;\r\n\r\n        const cachedBuffer = this.playerState.myPlayer.actions.primary.buffer\r\n\r\n        this.playerState.myPlayer.actions.primary.buffer *= 0.5; // TODO: Pass the buffer change\r\n\r\n        console.log(`Auto-fire enabled until ${timestamp}`);\r\n\r\n        this.utility.safeTimeout(() => {\r\n            this.playerState.canAutoFire = false;\r\n            this.playerState.myPlayer.actions.primary.buffer = cachedBuffer;\r\n            console.log('Auto-fire disabled.');\r\n        }, timestamp - Date.now()); // Duration of override\r\n    } // TODO: Timestamp duration should be optional, if not passed toggle is permanent on/off\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Uniques ]\r\n    //\r\n    /**\r\n     * Manually triggers a specific unique effect when called.\r\n     */\r\n    private triggerUnique(unique: string, pos?: Vec2): void {\r\n        if (unique === \"cluster_module\") {\r\n            if (pos) {\r\n                const amount = this.utility.getRandomInt(3, 6);\r\n                const images: string[] = [];\r\n                for (let i = 0; i < amount; i++) {\r\n                    images.push(this.utility.getRandomInArray(SHRAPNEL.PIECE));\r\n                }\r\n                const shrapnel: Shrapnel = {\r\n                    amount: amount,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage * 0.1,\r\n                    images: images,\r\n                    lifetime: { // ms\r\n                        min: 100,\r\n                        max: 500\r\n                    },\r\n                    pos: {\r\n                        x: pos.x,\r\n                        y: pos.y\r\n                    },\r\n                    size: { // px^2\r\n                        min: 8,\r\n                        max: 14\r\n                    },\r\n                    speed: { // px/frame*(dt)\r\n                        min: 10,\r\n                        max: 15\r\n                    },\r\n                    torque: { // deg/frame*dt\r\n                        min: -360,\r\n                        max: 360\r\n                    }\r\n                }\r\n                this.particlesManager.spawnShrapnel(shrapnel);\r\n            }\r\n        }\r\n\r\n        if (unique === \"projectile_array\") {\r\n            const amount = this.utility.getRandomInt(1, 3);\r\n            for (let i = 0; i < amount; i++) {\r\n                const dir = this.utility.getRandomDirection(360);\r\n\r\n                const params: ProjectileOverrides = {\r\n                    canTriggerUnique: false,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage / 2,\r\n                    range: this.utility.getRandomNum((this.playerState.myPlayer.actions.primary.projectile.range / 2), this.playerState.myPlayer.actions.primary.projectile.range),\r\n                    spread: this.utility.getRandomNum(this.playerState.myPlayer.actions.primary.projectile.spread, (this.playerState.myPlayer.actions.primary.projectile.spread * 2))\r\n                }\r\n\r\n\r\n                this.launchProjectile(dir, params);\r\n            }\r\n        }\r\n\r\n        console.log(`Triggered Unique: ${unique}`)\r\n    }\r\n\r\n    /**\r\n     * Responsible for processing possible unique triggers on burst. (Before launchProjectile is called...)\r\n     */\r\n    private triggerBurstUniques(): string[] {\r\n        const triggered: string[] = [];\r\n\r\n        if (this.playerState.myPlayer.unique.includes('muzzle_splitter')) {\r\n            if (this.luckController.luckRoll()) {\r\n                const baseAngle = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                const angleOffset = 10 * (Math.PI / 180); // 10 degrees\r\n\r\n                const dirA = { x: Math.cos(baseAngle - angleOffset), y: Math.sin(baseAngle - angleOffset) };\r\n                const dirB = { x: Math.cos(baseAngle + angleOffset), y: Math.sin(baseAngle + angleOffset) };\r\n\r\n                const baseParams: ProjectileOverrides = {\r\n                    canTriggerUnique: false,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                    range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                    size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                    speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                    color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                    length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                    spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                };\r\n\r\n                this.launchProjectile(dirA, baseParams);\r\n                this.launchProjectile(dirB, baseParams);\r\n\r\n                console.log(`Triggered burst unique: muzzle_splitter`);\r\n                triggered.push('muzzle_splitter');\r\n            }\r\n        }\r\n\r\n        return triggered;\r\n    }\r\n\r\n    /**\r\n     * Responsible for checking specific uniques on collision.\r\n     */\r\n    private triggerCollisionUniques(pos?: Vec2): string[] {\r\n        if (this.playerState.myPlayer.unique.length === 0) return [];\r\n\r\n        const succeededUniques: string[] = [];\r\n\r\n        for (const unique of this.playerState.myPlayer.unique) {\r\n            if (unique === 'cluster_module') {\r\n                const succeeded = this.luckController.luckRoll();\r\n\r\n                if (succeeded) {\r\n                    this.triggerUnique(unique, pos);\r\n                    succeededUniques.push('cluster_module');\r\n                }\r\n            }\r\n        }\r\n        return succeededUniques;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Reload ]\r\n    //\r\n    /**\r\n     * Checks if the player can reload or not.\r\n     */\r\n    private canReload(): boolean {\r\n        return (\r\n            !this.playerState.isReloading &&\r\n            this.playerState.myPlayer.actions.primary.magazine.currentAmmo < this.playerState.myPlayer.actions.primary.magazine.size &&\r\n            this.playerState.myPlayer.actions.primary.magazine.currentReserve > 0 && !this.playerState.isMelee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Manual trigger for reload. Called when pressing the assigned keybind.\r\n     */\r\n    public startReload(): void {\r\n        if (!this.canReload()) return;\r\n        console.log(`Reloading...`);\r\n\r\n        this.playerState.isReloading = true;\r\n        this.playerState.reloadStartTime = Date.now();\r\n\r\n        // Cancel any ongoing burst\r\n        this.playerState.isBurstActive = false;\r\n        this.playerState.currentBurstShot = 0;\r\n\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 8 } // Slide held back\r\n            },\r\n            duration: 0,\r\n            partIndex: 1\r\n        }); // duration=0 means infinite/held\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.RELOAD.START), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.975, max: 1.05 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.985, max: 1 }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ends the reload loop, and updates visual state.\r\n     */\r\n    private finishReload(): void {\r\n        const magazineSpace = this.playerState.myPlayer.actions.primary.magazine.size - this.playerState.myPlayer.actions.primary.magazine.currentAmmo;\r\n        const ammoToReload = Math.min(magazineSpace, this.playerState.myPlayer.actions.primary.magazine.currentReserve);\r\n\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo += ammoToReload;\r\n        this.playerState.myPlayer.actions.primary.magazine.currentReserve -= ammoToReload;\r\n        this.playerState.isReloading = false;\r\n\r\n        this.ui.ammoReservesUIController.removeAmmoFromReserveUI(ammoToReload);\r\n\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 20 }, // Start with slide back\r\n                1: { x: 0, y: 0 } // Return to start\r\n            },\r\n            duration: 175,\r\n            partIndex: 1\r\n        });\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.RELOAD.END), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.975, max: 1.05 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.985, max: 1 }\r\n        });\r\n\r\n        console.log(`Reload complete...`);\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { NETWORK } from \"../Config\";\r\n\r\nimport { PlayerState } from \"./PlayerState\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { MoveController } from \"./MoveController\";\r\nimport { StaminaController } from \"./StaminaController\";\r\nimport { CombatController } from \"./CombatController\";\r\nimport { CollisionsManager } from \"../CollisionsManager\";\r\n\r\nexport class DashController {\r\n    constructor(\r\n        private collisionsManager: CollisionsManager,\r\n        private combatController: CombatController,\r\n        private moveController: MoveController,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private staminaController: StaminaController,\r\n        private userId: string\r\n    ) { }\r\n\r\n    // #region [ Dash ]\r\n    //\r\n    /**\r\n     * Start a dash when the assigned keybind is pressed.\r\n     */\r\n    public startDash(): void {\r\n        if (this.playerState.isDashing || !this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) || !this.moveController.isMoving()) return;\r\n\r\n        const currentTime = Date.now(); // Cooldown check first\r\n        if (currentTime < this.playerState.lastDashTime + this.playerState.myPlayer.actions.dash.cooldown) {\r\n            console.log('Dash on cooldown');\r\n            return;\r\n        }\r\n\r\n        // Input check\r\n        let { inputX, inputY, inputLength } = this.moveController.getMoveInput();\r\n\r\n        // Normalize input\r\n        if (!this.moveController.isMoving()) {\r\n            console.log('No movement input for dash');\r\n            return;\r\n        }\r\n\r\n        inputX = inputX / inputLength;\r\n        inputY = inputY / inputLength;\r\n\r\n        if (!this.staminaController.requestStamina(this.playerState.myPlayer.actions.dash.drain)) {\r\n            console.log('Not enough stamina to dash');\r\n            return;\r\n        }\r\n\r\n        if (this.playerState.myPlayer.unique.includes('spectral_image')) {\r\n            // Set local state\r\n            this.playerState.myPlayer.flags.hidden = true;\r\n            this.playerState.myPlayer.flags.invulnerable = true;\r\n\r\n            // Broadcast partial update\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'partial-state',\r\n                userId: this.userId,\r\n                flags: {\r\n                    hidden: true,\r\n                    invulnerable: true\r\n                }\r\n            }));\r\n        }\r\n\r\n        // Start dash\r\n        this.playerState.isDashing = true;\r\n        this.playerState.dashStartTime = currentTime;\r\n        this.playerState.lastDashTime = currentTime;\r\n\r\n        // Set dash velocity\r\n        const dashSpeed = this.playerState.myPlayer.stats.speed * this.playerState.myPlayer.actions.dash.multiplier;\r\n        this.playerState.playerVelocityX = inputX * dashSpeed;\r\n        this.playerState.playerVelocityY = inputY * dashSpeed;\r\n\r\n        console.log(`Dashing! Speed: ${dashSpeed}`);\r\n    }\r\n\r\n    /**\r\n     * Process dash update loop when isDashing.\r\n     */\r\n    public updateDash(delta: number): void {\r\n        if (!this.playerState.isDashing) return;\r\n\r\n        const currentTime = Date.now();\r\n\r\n        let newX = this.playerState.myPlayer.transform.pos.x + this.playerState.playerVelocityX * delta;\r\n        let newY = this.playerState.myPlayer.transform.pos.y + this.playerState.playerVelocityY * delta;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = newX;\r\n        this.playerState.myPlayer.transform.pos.y = newY;\r\n\r\n        let moved = (this.playerState.playerVelocityX !== 0 || this.playerState.playerVelocityY !== 0);\r\n\r\n        // Send position update if moved\r\n        const distanceFromLastSent = Math.sqrt(\r\n            (this.playerState.myPlayer.transform.pos.x - this.playerState.lastSentX) ** 2 +\r\n            (this.playerState.myPlayer.transform.pos.y - this.playerState.lastSentY) ** 2\r\n        );\r\n\r\n        if (moved && distanceFromLastSent > 2 && currentTime - this.playerState.lastSentMoveTime >= NETWORK.MOVE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    pos: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    }\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentX = this.playerState.myPlayer.transform.pos.x;\r\n            this.playerState.lastSentY = this.playerState.myPlayer.transform.pos.y;\r\n            this.playerState.lastSentMoveTime = currentTime;\r\n        }\r\n\r\n        // Check if dash time is over\r\n        if (currentTime >= this.playerState.dashStartTime + this.playerState.myPlayer.actions.dash.time) {\r\n            if (this.playerState.myPlayer.unique.includes('spectral_image')) {\r\n                // Revert local state\r\n                this.playerState.myPlayer.flags.hidden = false;\r\n                this.playerState.myPlayer.flags.invulnerable = false;\r\n\r\n                // Broadcast partial update\r\n                this.roomManager.sendMessage(JSON.stringify({\r\n                    type: 'partial-state',\r\n                    userId: this.userId,\r\n                    flags: {\r\n                        hidden: false,\r\n                        invulnerable: false\r\n                    }\r\n                }));\r\n            }\r\n\r\n            this.playerState.isDashing = false;\r\n\r\n            if (this.playerState.myPlayer.equipment.includes('switch')) {\r\n                this.combatController.toggleAutoFire(Date.now() + this.playerState.myPlayer.actions.dash.cooldown);\r\n            }\r\n\r\n            console.log('Dash ended');\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { PlayerState } from \"./PlayerState\";\r\n\r\nexport class LuckController {\r\n    constructor(private playerState: PlayerState) { }\r\n\r\n    /**\r\n     * Perform a luck roll using the player's luck stat.\r\n     *\r\n     * Luck is a signed value centered around 0.\r\n     * - Uses tanh() to map luck smoothly into [-1, 1], which gives soft limits.\r\n     * - The resulting chance is 5%–95%, with heavy diminishing returns past ±10.\r\n     *\r\n     * Approximate success odds:\r\n     *   luck -20 → ~2%\r\n     *   luck -10 → ~4%\r\n     *   luck  -5 → ~6%\r\n     *   luck   0 → 10%\r\n     *   luck  +5 → 17%\r\n     *   luck +10 → 30%\r\n     *   luck +20 → 45%\r\n     * \r\n     * Optionally pass a multiplier to scale luck.\r\n     */\r\n    public luckRoll(multiplier: number = 1): boolean {\r\n        const effectiveLuck = this.playerState.myPlayer.stats.luck * multiplier;\r\n        const scaledLuck = Math.tanh(effectiveLuck / 10);\r\n\r\n        const baseChance = 0.1; // 10%\r\n        const softCap = 0.35; // 35%\r\n\r\n        const chance = baseChance + scaledLuck * softCap;\r\n        return Math.random() < chance;\r\n    }\r\n}","import { ControlsManager } from \"../ControlsManager\";\r\nimport { SettingsManager } from \"../SettingsManager\";\r\n\r\nexport class MoveController {\r\n    constructor(private controlsManager: ControlsManager, private settingsManager: SettingsManager) {}\r\n\r\n    /**\r\n     * Detects and returns the Vec2 movement input from the assigned keybinds.\r\n     */\r\n    public getMoveInput(): { inputX: number; inputY: number; inputLength: number } {\r\n        let inputX = 0;\r\n        let inputY = 0;\r\n\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveUp)) inputY -= 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveDown)) inputY += 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveLeft)) inputX -= 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveRight)) inputX += 1;\r\n\r\n        const inputLength = Math.sqrt(inputX * inputX + inputY * inputY);\r\n\r\n        if (inputLength > 0) {\r\n            inputX = inputX / inputLength;\r\n            inputY = inputY / inputLength;\r\n        }\r\n\r\n        return { inputX, inputY, inputLength };\r\n    }\r\n\r\n    /**\r\n     * Returns state based on if the player is currently moving or not.\r\n     */\r\n    public isMoving(): boolean {\r\n        return this.getMoveInput().inputLength > 0;\r\n    }\r\n}","import { OBJECT_DEFAULTS } from \"./Config\";\r\nimport { AmmoBox, GameObject, SpawnObjectParams } from \"./Types\";\r\n\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class ObjectsManager {\r\n    public ammoBoxes: Map<string, AmmoBox> = new Map();\r\n\r\n    constructor(private playerState: PlayerState, private utility: Utility) {}\r\n\r\n    // #region [ Objects ]\r\n    //\r\n    /**\r\n     * Spawns a GameObject in the scene, returning it's properties for the construction.\r\n     */\r\n    private spawnObject(params: SpawnObjectParams): GameObject {\r\n        const baseObject: GameObject = {\r\n            id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n            transform: params.transform,\r\n            timestamp: Date.now()\r\n        };\r\n\r\n        switch (params.type) { //TODO: Spawn the player, projectiles and any other GameObject types here\r\n            case 'AmmoBox':\r\n                return {\r\n                    id: baseObject.id,\r\n                    transform: baseObject.transform,\r\n                    timestamp: baseObject.timestamp,\r\n                    ammoAmount: params.data?.amount || 10,\r\n                    isOpen: false,\r\n                    lid: {\r\n                        pos: { x: 0, y: 0 },\r\n                        rot: 0,\r\n                        velocity: { x: 0, y: 0 },\r\n                        torque: 0\r\n                    }\r\n                } as AmmoBox;\r\n\r\n            default:\r\n                throw new Error(`Unknown object type: ${params.type}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructs an ammo box and returns the spawned object instantiated through spawnObject.\r\n     */\r\n    public spawnAmmoBox(amount: number): AmmoBox {\r\n        return this.spawnObject({\r\n            type: 'AmmoBox',\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            data: { amount }\r\n        }) as AmmoBox;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { DECALS, NETWORK, PARTICLES, SFX } from \"../Config\";\r\nimport { DeathDecal, EmitterParams, PlayerHitParams, SetSliderParams } from \"../Types\";\r\n\r\nimport { AudioManager } from \"../AudioManager\";\r\nimport { GameState } from \"../GameState\";\r\nimport { LuckController } from \"./LuckController\";\r\nimport { MoveController } from \"./MoveController\";\r\nimport { ObjectsManager } from \"../ObjectsManager\";\r\nimport { ParticlesManager } from \"../ParticlesManager\";\r\nimport { PlayerState } from \"./PlayerState\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { Utility } from \"../Utility\";\r\nimport { DecalsManager } from \"../DecalsManager\";\r\nimport { UserInterface } from \"../UserInterface\";\r\n\r\n\r\nexport class PlayerController {\r\n    constructor(\r\n        private audioManager: AudioManager,\r\n        private decalsManager: DecalsManager,\r\n        private gameState: GameState,\r\n        private luckController: LuckController,\r\n        private moveController: MoveController,\r\n        private objectsManager: ObjectsManager,\r\n        private particlesManager: ParticlesManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) {\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        window.addEventListener('customEvent_playerHitRelay', ((event: CustomEvent) => {\r\n            console.log('Player hit event received:', event.detail.params);\r\n            this.playerHit(event.detail.params);\r\n        }) as EventListener);\r\n    }\r\n\r\n    /**\r\n     * Updates the local player's position and movement state.\r\n     * \r\n     * Applies acceleration, friction, sprint multipliers, and stamina drain\r\n     * based on current movement input. Sends position updates to the server\r\n     * when movement exceeds the defined threshold or interval.\r\n     * \r\n     * Does not process updates when game is not active, player is dead, or dashing.\r\n     */\r\n    public updatePlayerPosition(delta: number): void {\r\n        if (!this.gameState.gameInProgress || this.playerState.myPlayer.stats.health.value <= 0 || this.playerState.isDashing) return;\r\n\r\n        const now = Date.now();\r\n        const { inputX, inputY } = this.moveController.getMoveInput();\r\n\r\n        // [ Sprinting ]\r\n        const canSprint = this.playerState.isSprinting && this.playerState.myPlayer.stats.stamina.value > 0 && this.moveController.isMoving();\r\n        const currentSpeed = canSprint ? this.playerState.myPlayer.stats.speed * this.playerState.myPlayer.actions.sprint.multiplier : this.playerState.myPlayer.stats.speed;\r\n        if (this.playerState.isSprinting && this.playerState.myPlayer.stats.stamina.value <= 0) { // Stop sprinting if out of stamina\r\n            this.playerState.isSprinting = false;\r\n            console.log('Out of stamina, stopped sprinting');\r\n        }\r\n        //\r\n\r\n        const targetVelocityX = inputX * currentSpeed;\r\n        const targetVelocityY = inputY * currentSpeed;\r\n\r\n        this.playerState.playerVelocityX += (targetVelocityX - this.playerState.playerVelocityX) * this.playerState.myPlayer.physics.acceleration * delta;\r\n        this.playerState.playerVelocityY += (targetVelocityY - this.playerState.playerVelocityY) * this.playerState.myPlayer.physics.acceleration * delta;\r\n\r\n        if (!this.moveController.isMoving()) {\r\n            this.playerState.playerVelocityX *= Math.pow(this.playerState.myPlayer.physics.friction, delta);\r\n            this.playerState.playerVelocityY *= Math.pow(this.playerState.myPlayer.physics.friction, delta);\r\n        }\r\n\r\n        let newX = this.playerState.myPlayer.transform.pos.x + this.playerState.playerVelocityX * delta;\r\n        let newY = this.playerState.myPlayer.transform.pos.y + this.playerState.playerVelocityY * delta;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = newX;\r\n        this.playerState.myPlayer.transform.pos.y = newY;\r\n\r\n        let moved = (this.playerState.playerVelocityX !== 0 || this.playerState.playerVelocityY !== 0);\r\n\r\n        const distanceFromLastSent = Math.sqrt(\r\n            (this.playerState.myPlayer.transform.pos.x - this.playerState.lastSentX) ** 2 +\r\n            (this.playerState.myPlayer.transform.pos.y - this.playerState.lastSentY) ** 2\r\n        );\r\n\r\n        if (moved && distanceFromLastSent > 2 && now - this.playerState.lastSentMoveTime >= NETWORK.MOVE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    pos: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    }\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentX = this.playerState.myPlayer.transform.pos.x;\r\n            this.playerState.lastSentY = this.playerState.myPlayer.transform.pos.y;\r\n            this.playerState.lastSentMoveTime = now;\r\n        }\r\n\r\n        if (Math.abs(this.playerState.playerVelocityX) < 0.01) this.playerState.playerVelocityX = 0;\r\n        if (Math.abs(this.playerState.playerVelocityY) < 0.01) this.playerState.playerVelocityY = 0;\r\n    }\r\n\r\n    /**\r\n     * Processes local hits to players. Sends network message for syncing.\r\n     */\r\n    public playerHit(params: PlayerHitParams): void {\r\n        // Update health slider\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const healthSliderParams: SetSliderParams = {\r\n            sliderId: 'healthBar',\r\n            targetValue: this.playerState.myPlayer.stats.health.value,\r\n            maxValue: this.playerState.myPlayer.stats.health.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n        this.utility.setSlider(healthSliderParams);\r\n\r\n        if (params.target.id === this.userId) { // Random chance to play grunt when I'm hit\r\n            if (this.utility.getRandomNum(0, 1) < 0.2) { // 20%\r\n                this.audioManager.playAudioNetwork({\r\n                    src: this.utility.getRandomInArray(SFX.PLAYER.MALE.GRUNT), // TODO: Allow player to define gender\r\n                    listener: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    },\r\n                    output: 'sfx',\r\n                    pitch: { min: 0.95, max: 1.075 },\r\n                    spatial: {\r\n                        blend: 1.0,\r\n                        pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n                    },\r\n                    volume: { min: 0.9, max: 1 }\r\n                });\r\n            }\r\n        } else { // The player hit was not me\r\n            this.audioManager.playAudioNetwork({ // Play hit sound\r\n                src: this.utility.getRandomInArray(SFX.IMPACT.FLESH.BULLET), // TODO: User current body material\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.925, max: 1.15 },\r\n                spatial: {\r\n                    blend: 1.0,\r\n                    pos: { x: params.source.transform.pos.x, y: params.source.transform.pos.y }\r\n                },\r\n                volume: { min: 0.95, max: 1 }\r\n            });\r\n\r\n            const bloodDirection = {\r\n                x: -params.source.velocity.x / Math.sqrt(params.source.velocity.x ** 2 + params.source.velocity.y ** 2),\r\n                y: -params.source.velocity.y / Math.sqrt(params.source.velocity.x ** 2 + params.source.velocity.y ** 2)\r\n            };\r\n\r\n            this.decalsManager.createDecal(params.source.transform.pos.x, params.source.transform.pos.y, `blood_${params.source.id}`, DECALS.BLOOD);\r\n            this.particlesManager.createParticles(params.source.transform.pos.x, params.source.transform.pos.y, `blood_${params.source.id}`, PARTICLES.BLOOD_SPRAY, bloodDirection);\r\n\r\n            const emission: EmitterParams = {\r\n                id: `particle_emitter_${params.target.id}_${Date.now()}`,\r\n                interval: this.utility.getRandomNum(200, 400), // ms\r\n                lifetime: this.utility.getRandomNum(1000, 3000), // ms\r\n                offset: {\r\n                    x: params.target.transform.pos.x,\r\n                    y: params.target.transform.pos.y\r\n                },\r\n                particleType: PARTICLES.BLOOD_DRIP,\r\n                playerId: params.target.id,\r\n                pos: {\r\n                    x: params.source.transform.pos.x,\r\n                    y: params.source.transform.pos.y\r\n                }\r\n            };\r\n            this.particlesManager.createEmitter(emission);\r\n\r\n            if (params.newHealth <= 0) { // If they died, I get a kill\r\n                console.log(`I killed ${params.target.id}!`);\r\n\r\n                const me = this.ui.leaderboard.get(this.userId);\r\n                if (me) { me.kills++; }\r\n\r\n                const other = this.ui.leaderboard.get(params.target.id);\r\n                if (other) { other.deaths++; }\r\n\r\n                this.ui.updateLeaderboardDisplay(this.userId);\r\n            }\r\n        }\r\n\r\n        const message = {\r\n            type: 'player-hit',\r\n            targetId: params.target.id,\r\n            shooterId: params.shooterId,\r\n            damage: params.damage,\r\n            newHealth: params.newHealth,\r\n            projectileId: params.source.id,\r\n            wasKill: params.wasKill\r\n        }\r\n\r\n        this.roomManager.sendMessage(JSON.stringify(message));\r\n    }\r\n\r\n    /**\r\n     * Record the player's own death when they are the targetId of a player-hit message and their health reaches 0.\r\n     */\r\n    public playerDeath(): void {\r\n        const triggeredUniques = this.triggerUniques();\r\n\r\n        console.log('I died! Waiting for round to end...');\r\n\r\n        this.playerState.resetPlayerState();\r\n\r\n        const ammoBox = this.objectsManager.spawnAmmoBox(10);\r\n        this.objectsManager.ammoBoxes.set(ammoBox.id, ammoBox);\r\n\r\n        const gore: DeathDecal = {\r\n            gore: {\r\n                amount: this.utility.getRandomInt(2, 5)\r\n            },\r\n            blood: {\r\n                amount: this.utility.getRandomInt(1, 3)\r\n            },\r\n            ownerId: this.userId,\r\n            pos: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            radius: this.playerState.myPlayer.stats.size\r\n        }\r\n        this.particlesManager.generateGore(gore);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-death',\r\n            playerId: this.userId,\r\n            x: this.playerState.myPlayer.transform.pos.x,\r\n            y: this.playerState.myPlayer.transform.pos.y,\r\n            size: this.playerState.myPlayer.stats.size,\r\n            ammoBox: ammoBox\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Used to trigger player related uniques during specific states like death, etc.\r\n     * \r\n     * Returns each unique that succeeds.\r\n     */\r\n    private triggerUniques(): string[] {\r\n        if (this.playerState.myPlayer.unique.length === 0) return [];\r\n\r\n        const succeededUniques: string[] = [];\r\n\r\n        for (const unique of this.playerState.myPlayer.unique) {\r\n            if (unique === 'phoenix_module') {\r\n                const succeeded = this.luckController.luckRoll(1.5);\r\n\r\n                if (succeeded) {\r\n                    console.log('Phoenix Module activated!');\r\n\r\n                    // Double damage permanently\r\n                    this.playerState.myPlayer.actions.primary.projectile.damage *= 2;\r\n\r\n                    // Remove phoenix module so it can't trigger again\r\n                    const index = this.playerState.myPlayer.unique.indexOf('phoenix_module');\r\n                    if (index > -1) {\r\n                        this.playerState.myPlayer.unique.splice(index, 1);\r\n                    }\r\n\r\n                    succeededUniques.push('phoenix_module');\r\n                }\r\n            }\r\n        }\r\n        return succeededUniques;\r\n    }\r\n}","import { CANVAS, PLAYER_DEFAULTS } from \"../Config\";\r\n\r\nimport { Player, Players } from \"../Types\";\r\nimport { Utility } from \"../Utility\";\r\n\r\nexport class PlayerState {\r\n    public myPlayer: Player; // My player object\r\n    public players: Players = new Map(); // Other players in game\r\n\r\n    public isHost = false;\r\n\r\n    public canShoot = true;\r\n    public canAutoFire = false;\r\n    public isBurstActive = false;\r\n    public isReloading = false;\r\n    public isMelee = false;\r\n    public isSprinting = false;\r\n    public isDashing = false;\r\n    public isStaminaRecoveryBlocked = false;\r\n\r\n    public lastSentX = 0;\r\n    public lastSentY = 0;\r\n    public lastSentRotation = 0;\r\n    public lastSentRotationTime = 0;\r\n    public lastSentMoveTime = 0;\r\n\r\n    public playerVelocityX = 0;\r\n    public playerVelocityY = 0;\r\n\r\n    public dashStartTime = 0;\r\n    public lastDashTime = 0;\r\n    public reloadStartTime = 0;\r\n    public lastShotTime = 0;\r\n    public lastMeleeTime = 0;\r\n    public nextBurstShotTime = 0;\r\n    public currentBurstShot = 0;\r\n    public lastStaminaDrainTime = 0;\r\n    public staminaRecoveryBlockedUntil = 0;\r\n\r\n    private statListeners: Map<string, (value: any) => void> = new Map();\r\n\r\n    constructor(userId: string, private utility: Utility) {\r\n        this.myPlayer = this.initPlayer(userId);\r\n    }\r\n\r\n    // #region [ State ]\r\n    //\r\n    // [ IMPORTANT ] Keep full track of Player object here\r\n    /**\r\n     * Initializes the default player object using the PLAYER_DEFAULTS defined in the config.\r\n     */\r\n    public initPlayer(userId: string): Player {\r\n        return this.myPlayer = {\r\n            id: userId,\r\n            transform: {\r\n                pos: {\r\n                    x: Math.random() * (CANVAS.WIDTH - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN,\r\n                    y: Math.random() * (CANVAS.HEIGHT - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN\r\n                },\r\n                rot: 0\r\n            },\r\n            timestamp: Date.now(),\r\n            color: this.utility.getRandomColor(), // TODO: Replace with char customization\r\n            actions: {\r\n                dash: {\r\n                    cooldown: PLAYER_DEFAULTS.ACTIONS.DASH.COOLDOWN,\r\n                    drain: PLAYER_DEFAULTS.ACTIONS.DASH.DRAIN,\r\n                    multiplier: PLAYER_DEFAULTS.ACTIONS.DASH.MULTIPLIER,\r\n                    time: PLAYER_DEFAULTS.ACTIONS.DASH.TIME\r\n                },\r\n                melee: {\r\n                    cooldown: PLAYER_DEFAULTS.ACTIONS.MELEE.COOLDOWN,\r\n                    damage: PLAYER_DEFAULTS.ACTIONS.MELEE.DAMAGE,\r\n                    duration: PLAYER_DEFAULTS.ACTIONS.MELEE.DURATION,\r\n                    range: PLAYER_DEFAULTS.ACTIONS.MELEE.RANGE,\r\n                    size: PLAYER_DEFAULTS.ACTIONS.MELEE.SIZE\r\n                },\r\n                primary: {\r\n                    buffer: PLAYER_DEFAULTS.ACTIONS.PRIMARY.BUFFER,\r\n                    burst: {\r\n                        amount: PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.AMOUNT,\r\n                        delay: PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.DELAY\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE,\r\n                        currentReserve: PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE,\r\n                        maxReserve: PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE,\r\n                        size: PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE\r\n                    },\r\n                    offset: PLAYER_DEFAULTS.ACTIONS.PRIMARY.OFFSET,\r\n                    projectile: {\r\n                        amount: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,\r\n                        color: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.COLOR,\r\n                        damage: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,\r\n                        length: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.LENGTH,\r\n                        range: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.RANGE,\r\n                        size: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SIZE,\r\n                        speed: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPEED,\r\n                        spread: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPREAD\r\n                    },\r\n                    reload: {\r\n                        time: PLAYER_DEFAULTS.ACTIONS.PRIMARY.RELOAD.TIME\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: PLAYER_DEFAULTS.ACTIONS.SPRINT.DRAIN,\r\n                    multiplier: PLAYER_DEFAULTS.ACTIONS.SPRINT.MULTIPLIER\r\n                }\r\n            },\r\n            equipment: PLAYER_DEFAULTS.EQUIPMENT,\r\n            flags: {\r\n                hidden: PLAYER_DEFAULTS.FLAGS.HIDDEN,\r\n                invulnerable: PLAYER_DEFAULTS.FLAGS.INVULNERABLE\r\n            },\r\n            physics: {\r\n                acceleration: PLAYER_DEFAULTS.PHYSICS.ACCELERATION,\r\n                friction: PLAYER_DEFAULTS.PHYSICS.FRICTION\r\n            },\r\n            rig: {\r\n                body: PLAYER_DEFAULTS.RIG.BODY,\r\n                head: PLAYER_DEFAULTS.RIG.HEAD,\r\n                headwear: PLAYER_DEFAULTS.RIG.HEADWEAR,\r\n                weapon: PLAYER_DEFAULTS.RIG.WEAPON\r\n            },\r\n            stats: {\r\n                defense: PLAYER_DEFAULTS.STATS.DEFENSE,\r\n                health: {\r\n                    max: PLAYER_DEFAULTS.STATS.HEALTH.MAX,\r\n                    value: PLAYER_DEFAULTS.STATS.HEALTH.MAX,\r\n                },\r\n                luck: PLAYER_DEFAULTS.STATS.LUCK,\r\n                size: PLAYER_DEFAULTS.STATS.SIZE,\r\n                speed: PLAYER_DEFAULTS.STATS.SPEED,\r\n                stamina: {\r\n                    max: PLAYER_DEFAULTS.STATS.STAMINA.MAX,\r\n                    recovery: {\r\n                        delay: PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.DELAY,\r\n                        rate: PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.RATE\r\n                    },\r\n                    value: PLAYER_DEFAULTS.STATS.STAMINA.MAX,\r\n                },\r\n            },\r\n            unique: PLAYER_DEFAULTS.UNIQUE\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Resets the current player state stored in memory to default.\r\n     */\r\n    public resetPlayerState(): void {\r\n        this.canShoot = true;\r\n        this.isBurstActive = false;\r\n        this.isReloading = false;\r\n        this.isMelee = false;\r\n        this.isSprinting = false;\r\n        this.isDashing = false;\r\n        this.isStaminaRecoveryBlocked = false;\r\n\r\n        this.playerVelocityX = 0;\r\n        this.playerVelocityY = 0;\r\n\r\n        this.dashStartTime = 0;\r\n        this.lastDashTime = 0;\r\n        this.reloadStartTime = 0;\r\n        this.lastMeleeTime = 0;\r\n        this.lastShotTime = 0;\r\n        this.nextBurstShotTime = 0;\r\n        this.currentBurstShot = 0;\r\n        this.lastStaminaDrainTime = 0;\r\n        this.staminaRecoveryBlockedUntil = 0;\r\n\r\n        this.lastSentX = 0;\r\n        this.lastSentY = 0;\r\n        this.lastSentRotation = 0;\r\n        this.lastSentRotationTime = 0;\r\n        this.lastSentMoveTime = 0;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Events ]\r\n    //\r\n    \r\n    public onStatChange(statPath: string, callback: (value: any) => void): void {\r\n        this.statListeners.set(statPath, callback);\r\n    }\r\n\r\n    private notifyChange(statPath: string, value: any): void {\r\n        const listener = this.statListeners.get(statPath);\r\n        if (listener) {\r\n            listener(value);\r\n        }\r\n    }\r\n\r\n    public updateStat(statPath: string, value: any): void {\r\n        // Navigate to the property and set it\r\n        const pathParts = statPath.split('.');\r\n        let obj: any = this.myPlayer;\r\n\r\n        for (let i = 0; i < pathParts.length - 1; i++) {\r\n            obj = obj[pathParts[i]];\r\n        }\r\n\r\n        const lastProp = pathParts[pathParts.length - 1];\r\n        obj[lastProp] = value;\r\n\r\n        console.log(`${lastProp}: ${value}`);\r\n\r\n        // Notify listeners\r\n        this.notifyChange(statPath, value);\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { PlayerState } from \"./PlayerState\";\r\n\r\nexport class StaminaController {\r\n    constructor(private playerState: PlayerState) { }\r\n\r\n    // #region [ Stamina ]\r\n    //\r\n    /**\r\n     * Requests stamina from my pool for actions that require it.\r\n     * \r\n     * If there is enough, drain the needed stamina and return true.\r\n     */\r\n    public requestStamina(amount: number): boolean {\r\n        if (this.playerState.myPlayer.stats.stamina.value < amount) {\r\n            console.log(`Insufficient stamina! Need: ${amount}, Have: ${this.playerState.myPlayer.stats.stamina}`);\r\n            return false;\r\n        }\r\n\r\n        this.playerState.myPlayer.stats.stamina.value -= amount;\r\n\r\n        // Block stamina recovery for the delay period\r\n        this.playerState.isStaminaRecoveryBlocked = true;\r\n        this.playerState.staminaRecoveryBlockedUntil = Date.now() + this.playerState.myPlayer.stats.stamina.recovery.delay;\r\n\r\n        console.log(`Stamina drained: -${amount}, Remaining: ${this.playerState.myPlayer.stats.stamina}`);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Process stamina requests and recovery.\r\n     */\r\n    public updateStamina(delta: number): void {\r\n        const currentTime = Date.now();\r\n\r\n        // Handle sprint stamina drain (every second while sprinting)\r\n        if (this.playerState.isSprinting && currentTime >= this.playerState.lastStaminaDrainTime + 100) {\r\n            if (!this.requestStamina(this.playerState.myPlayer.actions.sprint.drain)) {\r\n                // Out of stamina, stop sprinting\r\n                this.playerState.isSprinting = false;\r\n                console.log('Out of stamina, stopped sprinting');\r\n            }\r\n            this.playerState.lastStaminaDrainTime = currentTime;\r\n        }\r\n\r\n        // Handle stamina recovery\r\n        if (!this.playerState.isStaminaRecoveryBlocked || currentTime >= this.playerState.staminaRecoveryBlockedUntil) {\r\n            this.playerState.isStaminaRecoveryBlocked = false;\r\n\r\n            // Recover stamina if not at max and not sprinting\r\n            if (this.playerState.myPlayer.stats.stamina.value < this.playerState.myPlayer.stats.stamina.max && !this.playerState.isSprinting) {\r\n                const staminaRecoveryPerFrame = (this.playerState.myPlayer.stats.stamina.recovery.rate / 1000) * 16.67 * delta;\r\n                this.playerState.myPlayer.stats.stamina.value = Math.min(this.playerState.myPlayer.stats.stamina.max, this.playerState.myPlayer.stats.stamina.value + staminaRecoveryPerFrame);\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","\r\nimport { PLAYER_DEFAULTS, CANVAS, GAME, SFX, AUDIO } from './Config';\r\n\r\nimport { Player, RoomMessage, LobbyPlayer, LeaderboardEntry, ResetType, SetSliderParams, SetSpanParams, DeathDecal, EmitterParams, GameSettings } from './Types';\r\n\r\nimport { Admin } from './Admin';\r\nimport { Animator } from './Animator';\r\nimport { AudioManager } from './AudioManager';\r\nimport { CacheManager } from './CacheManager';\r\nimport { CharacterConfig } from './CharacterConfig';\r\nimport { CharacterManager } from './CharacterManager';\r\nimport { ChatManager } from './ChatManager';\r\nimport { ControlsManager } from './ControlsManager';\r\nimport { CollisionsManager } from './CollisionsManager';\r\nimport { DecalsManager } from './DecalsManager';\r\nimport { EventsManager } from './EventsManager';\r\nimport { GameState } from './GameState';\r\nimport { LobbyManager } from './LobbyManager';\r\nimport { ParticlesManager } from './ParticlesManager';\r\nimport { RenderingManager } from './RenderingManager';\r\nimport { RoomController } from './RoomController';\r\nimport { RoomManager } from './RoomManager';\r\nimport { SettingsManager } from './SettingsManager';\r\nimport { UpgradeManager } from './UpgradeManager';\r\nimport { UserInterface } from './UserInterface';\r\nimport { Utility } from './Utility';\r\nimport { WebsocketManager } from './WebsocketManager';\r\n\r\nimport { CombatController } from './player/CombatController';\r\nimport { DashController } from './player/DashController';\r\nimport { LuckController } from './player/LuckController';\r\nimport { MoveController } from './player/MoveController';\r\nimport { ObjectsManager } from './ObjectsManager';\r\nimport { PlayerController } from './player/PlayerController';\r\nimport { PlayerState } from './player/PlayerState';\r\nimport { StaminaController } from './player/StaminaController';\r\n\r\nclass Client {\r\n    private userId: string;\r\n\r\n    private isRoundInProgress = false;\r\n\r\n    private roundWinner: string | null = null;\r\n    private gameWinner: string | null = null; // TODO: Use the game winner to display lobby historical wins\r\n\r\n    private admin: Admin;\r\n    private animator: Animator;\r\n    private audioManager: AudioManager;\r\n    private cacheManager: CacheManager;\r\n    private charConfig: CharacterConfig;\r\n    private charManager: CharacterManager;\r\n    private chatManager: ChatManager;\r\n    private collisionsManager: CollisionsManager;\r\n    private combatController: CombatController;\r\n    private controlsManager: ControlsManager;\r\n    private dashController: DashController;\r\n    private decalsManager: DecalsManager;\r\n    private eventsManager: EventsManager;\r\n    private gameState: GameState;\r\n    private lobbyManager: LobbyManager;\r\n    private luckController: LuckController;\r\n    private moveController: MoveController;\r\n    private objectsManager: ObjectsManager;\r\n    private particlesManager: ParticlesManager;\r\n    private playerController: PlayerController;\r\n    private playerState: PlayerState;\r\n    private renderingManager: RenderingManager;\r\n    private roomController: RoomController;\r\n    private roomManager: RoomManager;\r\n    private settingsManager: SettingsManager;\r\n    private staminaController: StaminaController;\r\n    private upgradeManager: UpgradeManager;\r\n    private ui: UserInterface;\r\n    private utility: Utility;\r\n    private wsManager: WebsocketManager;\r\n\r\n    // #region [ Initialization ]\r\n    //\r\n    constructor() {\r\n        this.cacheManager = new CacheManager();\r\n        this.utility = new Utility();\r\n        this.gameState = new GameState();\r\n\r\n        this.settingsManager = new SettingsManager(this.cacheManager);\r\n        this.controlsManager = new ControlsManager(this.settingsManager);\r\n\r\n        this.charConfig = new CharacterConfig();\r\n        this.charManager = new CharacterManager(this.charConfig);\r\n\r\n        this.userId = this.utility.generateUID(PLAYER_DEFAULTS.DATA.ID_LENGTH);\r\n        this.playerState = new PlayerState(this.userId, this.utility);\r\n\r\n        this.ui = new UserInterface(this.playerState, this.settingsManager, this.utility);\r\n\r\n        this.admin = new Admin(this.cacheManager, this.ui);\r\n\r\n        this.objectsManager = new ObjectsManager(\r\n            this.playerState,\r\n            this.utility\r\n        );\r\n\r\n        this.roomManager = new RoomManager(this.userId, this.utility);\r\n        this.lobbyManager = new LobbyManager(this.utility, this.ui, this.roomManager);\r\n        this.wsManager = new WebsocketManager(this.gameState, this.roomManager, this.utility);\r\n        this.chatManager = new ChatManager(this.roomManager, this.ui);\r\n\r\n        this.upgradeManager = new UpgradeManager(\r\n            this.playerState,\r\n            this.ui,\r\n            this.utility\r\n        );\r\n\r\n        this.roomController = new RoomController(\r\n            this.gameState,\r\n            this.lobbyManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.upgradeManager,\r\n            this.userId,\r\n            this.utility,\r\n            this.wsManager\r\n        );\r\n\r\n        this.collisionsManager = new CollisionsManager(\r\n            this.objectsManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId\r\n        );\r\n\r\n        this.moveController = new MoveController(this.controlsManager, this.settingsManager);\r\n        this.staminaController = new StaminaController(this.playerState);\r\n        this.luckController = new LuckController(this.playerState);\r\n\r\n        this.audioManager = new AudioManager(this.roomManager, this.settingsManager, this.utility);\r\n        this.animator = new Animator(this.playerState, this.roomManager, this.userId);\r\n\r\n        this.renderingManager = new RenderingManager(\r\n            this.animator,\r\n            this.charManager,\r\n            this.objectsManager,\r\n            this.ui\r\n        );\r\n\r\n        this.decalsManager = new DecalsManager(\r\n            this.roomManager,\r\n            this.ui,\r\n            this.utility\r\n        );\r\n\r\n        this.particlesManager = new ParticlesManager(\r\n            this.charConfig,\r\n            this.collisionsManager,\r\n            this.decalsManager,\r\n            this.playerState,\r\n            this.renderingManager,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.playerController = new PlayerController(\r\n            this.audioManager,\r\n            this.decalsManager,\r\n            this.gameState,\r\n            this.luckController,\r\n            this.moveController,\r\n            this.objectsManager,\r\n            this.particlesManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.combatController = new CombatController(\r\n            this.animator,\r\n            this.audioManager,\r\n            this.collisionsManager,\r\n            this.decalsManager,\r\n            this.gameState,\r\n            this.luckController,\r\n            this.particlesManager,\r\n            this.playerController,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.dashController = new DashController(\r\n            this.collisionsManager,\r\n            this.combatController,\r\n            this.moveController,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.staminaController,\r\n            this.userId\r\n        );\r\n\r\n        this.eventsManager = new EventsManager(\r\n            this.animator,\r\n            this.chatManager,\r\n            this.controlsManager,\r\n            this.gameState,\r\n            this.roomController,\r\n            this.playerState,\r\n            this.settingsManager,\r\n            this.ui,\r\n            this.userId\r\n        );\r\n\r\n        if (document.readyState === 'loading') {\r\n            document.addEventListener('DOMContentLoaded', () => { this.initClient(); });\r\n        } else {\r\n            this.initClient();\r\n        }\r\n\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape' && this.gameState.gameInProgress && !this.lobbyManager.inLobby) {\r\n                e.preventDefault();\r\n                // TODO: Test stuff here!\r\n\r\n                const ammo = 20;\r\n\r\n                this.playerState.myPlayer.actions.primary.magazine.currentReserve += ammo;\r\n                this.ui.ammoReservesUIController.spawnAmmoInReserveUI(ammo);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Main initializer for the game client.\r\n     */\r\n    private async initClient(): Promise<void> {\r\n        this.ui.initInterface();\r\n        this.eventsManager.initEventListeners();\r\n        this.initGlobalEvents();\r\n\r\n        this.roomController.checkForRoomInURL();\r\n        this.roomController.showRoomControls();\r\n\r\n        const spanParams: SetSpanParams = {\r\n            spanId: 'userId',\r\n            value: this.userId\r\n        }\r\n        this.utility.setSpan(spanParams);\r\n\r\n        await this.settingsManager.loadSettings();\r\n        const settings: GameSettings = this.settingsManager.getSettings();\r\n\r\n        this.ui.initSoundSliders(settings);\r\n        this.ui.initSettingsInputs(settings);\r\n        this.ui.initSettingsToggles(settings)\r\n\r\n        this.ui.ammoReservesUIController.initAmmoReserveCanvas();\r\n\r\n        this.eventsManager.initKeybindListeners();\r\n\r\n        if (AUDIO.SETTINGS.PRELOAD_SOUNDS) {\r\n            this.audioManager.preloadAudioAssets(SFX, '.ogg');\r\n        }\r\n\r\n        this.watchForInputs();\r\n\r\n        this.admin.onAdminCommand = (command, key) => {\r\n            this.roomManager.sendAdminCommand(command, key);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners.\r\n     */\r\n    private initGlobalEvents(): void {\r\n        window.addEventListener(\"customEvent_startGame\", () => this.startGame());\r\n        window.addEventListener(\"customEvent_resetGameState\", (e: Event) => {\r\n            const event = e as CustomEvent<{ resetType: ResetType }>;\r\n            this.resetGameState(event.detail.resetType);\r\n        });\r\n\r\n        // Room manager message handler\r\n        this.roomManager.onMessage((message) => this.handleRoomMessage(message));\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Client <> Server ]\r\n    //\r\n    private handleRoomMessage(message: RoomMessage): void {\r\n        switch (message.type) {\r\n            case 'room-created':\r\n                console.log('Room created');\r\n                break;\r\n            case 'room-joined':\r\n                console.log('Joined room - lobby');\r\n                this.playerState.isHost = false;\r\n                this.lobbyManager.showLobbyControls({\r\n                    lobby: this.lobbyManager,\r\n                    lobbyOptions: {\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    },\r\n                    myPlayer: this.playerState.myPlayer,\r\n                    roomId: this.roomManager.getCurrentRoom() || \"\",\r\n                    userId: this.userId\r\n                });\r\n\r\n                // Send my lobby info\r\n                this.roomManager.sendMessage(JSON.stringify({\r\n                    type: 'lobby-join',\r\n                    color: this.playerState.myPlayer.color\r\n                }));\r\n\r\n                // Add myself to lobby\r\n                this.lobbyManager.lobbyPlayers.set(this.userId, {\r\n                    id: this.userId,\r\n                    color: this.playerState.myPlayer.color,\r\n                    isHost: this.playerState.isHost\r\n                });\r\n                this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n\r\n                if (this.lobbyManager.lobbyPlayers.size === 0) { // No other players added to lobby list\r\n                    this.playerState.isHost = true;\r\n                    this.lobbyManager.lobbyPlayers.get(this.userId)!.isHost = true;\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n                    console.log('I am the only player in the room...');\r\n                }\r\n                break;\r\n            case 'user-left':\r\n                console.log(`User ${message.userId} left`);\r\n                this.lobbyManager.lobbyPlayers.delete(message.userId);\r\n                this.playerState.players.delete(message.userId);\r\n\r\n                // Remove from leaderboard when player leaves\r\n                this.ui.leaderboard.delete(message.userId);\r\n                this.ui.updateLeaderboardDisplay(this.userId);\r\n                console.log(`Removed ${message.userId} from leaderboard`);\r\n\r\n                // Remove projectiles from disconnected player\r\n                this.combatController.projectiles.forEach((projectile, id) => {\r\n                    if (projectile.ownerId === message.userId) {\r\n                        this.combatController.projectiles.delete(id);\r\n                    }\r\n                });\r\n                this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                break;\r\n            case 'room-message':\r\n                this.handleGameMessage(message);\r\n                break;\r\n            case 'room-error':\r\n                alert(`Error: ${message.message}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private handleGameMessage(message: RoomMessage): void {\r\n        if (!message.message) return;\r\n\r\n        try {\r\n            const gameData = JSON.parse(message.message);\r\n\r\n            switch (gameData.type) {\r\n                //\r\n                // #region [ Lobby ]\r\n                //\r\n                case 'lobby-join':\r\n                    this.lobbyManager.lobbyPlayers.set(message.userId, {\r\n                        id: message.userId,\r\n                        color: gameData.color,\r\n                        isHost: false\r\n                    });\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n\r\n                    // If I'm host, send current lobby state to new player\r\n                    if (this.playerState.isHost) {\r\n                        this.roomManager.sendMessage(JSON.stringify({\r\n                            type: 'lobby-state',\r\n                            players: Array.from(this.lobbyManager.lobbyPlayers.values()),\r\n                            options: {\r\n                                privateRoom: this.roomManager.isPrivateRoom,\r\n                                maxPlayers: this.gameState.gameMaxPlayers,\r\n                                maxWins: this.gameState.gameMaxWins,\r\n                                upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                                // TODO: Add more room options here as enabled\r\n                            }\r\n                        }));\r\n                    }\r\n                    break;\r\n                case 'lobby-state':\r\n                    this.lobbyManager.lobbyPlayers.clear();\r\n\r\n                    gameData.players.forEach((player: LobbyPlayer) => {\r\n                        this.lobbyManager.lobbyPlayers.set(player.id, player);\r\n                    });\r\n\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n\r\n                    if (gameData.options) {\r\n                        this.lobbyManager.syncLobbyOptions(gameData.options);\r\n                    }\r\n                    break;\r\n                case 'lobby-options':\r\n                    this.lobbyManager.syncLobbyOptions(gameData);\r\n                    break;\r\n                case 'promote-player':\r\n                    this.lobbyManager.lobbyPlayers.forEach((player, id) => { // Update host status for all players\r\n                        player.isHost = id === gameData.targetPlayerId;\r\n                    });\r\n\r\n                    // Update my own host status\r\n                    this.playerState.isHost = gameData.targetPlayerId === this.userId;\r\n\r\n                    // If I just became host due to migration, log it\r\n                    if (this.playerState.isHost && gameData.reason === 'host-migration') {\r\n                        console.log('I am now the host due to host migration');\r\n                    }\r\n\r\n                    this.lobbyManager.setupLobbyOptions({\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    });\r\n\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n                    break;\r\n                case 'return-to-lobby': // New message type\r\n                    console.log('Returning to lobby - last player or game ended');\r\n\r\n                    // Update host status if I'm the new host\r\n                    if (gameData.newHostId === this.userId) {\r\n                        this.playerState.isHost = true;\r\n                        console.log('I am now the host as the last remaining player');\r\n                    }\r\n\r\n                    this.resetGameState('Lobby');\r\n\r\n                    // Show lobby\r\n                    this.lobbyManager.showLobbyControls({\r\n                        lobby: this.lobbyManager,\r\n                        lobbyOptions: {\r\n                            maxPlayers: this.gameState.gameMaxPlayers,\r\n                            maxWins: this.gameState.gameMaxWins,\r\n                            isHost: this.playerState.isHost,\r\n                            privateRoom: this.roomManager.isPrivateRoom,\r\n                            upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                        },\r\n                        myPlayer: this.playerState.myPlayer,\r\n                        roomId: this.roomManager.getCurrentRoom() || \"\",\r\n                        userId: this.userId\r\n                    });\r\n                    break;\r\n                case 'kick-player':\r\n                    if (gameData.targetPlayerId === this.userId) {\r\n                        alert('You have been kicked from the lobby');\r\n                        this.roomController.leaveRoom();\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Chat ]\r\n                //\r\n                case 'chat-message':\r\n                    if (message.userId !== this.userId) {\r\n                        this.chatManager.displayChatMessage({\r\n                            senderId: message.userId,\r\n                            message: gameData.message,\r\n                            isOwn: false\r\n                        });\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Player ]\r\n                //\r\n                // [ IMPORTANT ] Keep full track of Player object here\r\n                case 'player-state':\r\n                    console.log('Player State for player', gameData.id, ':', gameData);\r\n\r\n                    if (!this.lobbyManager.inLobby) {\r\n                        this.playerState.players.set(message.userId, {\r\n                            id: message.userId,\r\n                            transform: {\r\n                                pos: {\r\n                                    x: gameData.transform?.pos.x,\r\n                                    y: gameData.transform?.pos.y\r\n                                },\r\n                                rot: gameData.transform?.rot\r\n                            },\r\n                            timestamp: gameData.timestamp,\r\n                            color: gameData.color,\r\n                            actions: {\r\n                                dash: {\r\n                                    cooldown: gameData.actions?.dash.cooldown || PLAYER_DEFAULTS.ACTIONS.DASH.COOLDOWN,\r\n                                    drain: gameData.actions?.dash.drain || PLAYER_DEFAULTS.ACTIONS.DASH.DRAIN,\r\n                                    multiplier: gameData.actions?.dash.multiplier || PLAYER_DEFAULTS.ACTIONS.DASH.MULTIPLIER,\r\n                                    time: gameData.actions?.dash.time || PLAYER_DEFAULTS.ACTIONS.DASH.TIME\r\n                                },\r\n                                melee: {\r\n                                    cooldown: gameData.actions?.melee.cooldown || PLAYER_DEFAULTS.ACTIONS.MELEE.COOLDOWN,\r\n                                    damage: gameData.actions?.melee.damage || PLAYER_DEFAULTS.ACTIONS.MELEE.DAMAGE,\r\n                                    duration: gameData.actions?.melee.duration || PLAYER_DEFAULTS.ACTIONS.MELEE.DURATION,\r\n                                    range: gameData.actions?.melee.range || PLAYER_DEFAULTS.ACTIONS.MELEE.RANGE,\r\n                                    size: gameData.actions?.melee.size || PLAYER_DEFAULTS.ACTIONS.MELEE.SIZE\r\n                                },\r\n                                primary: {\r\n                                    buffer: gameData.actions?.primary.buffer || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BUFFER,\r\n                                    burst: {\r\n                                        amount: gameData.actions?.primary.burst.amount || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.AMOUNT,\r\n                                        delay: gameData.actions?.primary.burst.delay || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.DELAY\r\n                                    },\r\n                                    magazine: {\r\n                                        currentAmmo: gameData.actions?.primary.magazine.currentAmmo,\r\n                                        currentReserve: gameData.actions?.primary.magazine.currentReserve,\r\n                                        maxReserve: gameData.actions?.primary.magazine.maxReserve,\r\n                                        size: gameData.actions?.primary.magazine.size || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE\r\n                                    },\r\n                                    offset: gameData.actions?.primary.offset || PLAYER_DEFAULTS.ACTIONS.PRIMARY.OFFSET,\r\n                                    projectile: {\r\n                                        amount: gameData.actions?.primary.projectile.amount || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,\r\n                                        color: gameData.actions?.primary.projectile.color || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.COLOR,\r\n                                        damage: gameData.actions?.primary.projectile.damage || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,\r\n                                        length: gameData.actions?.primary.projectile.length || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.LENGTH,\r\n                                        range: gameData.actions?.primary.projectile.range || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.RANGE,\r\n                                        size: gameData.actions?.primary.projectile.size || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SIZE,\r\n                                        speed: gameData.actions?.primary.projectile.speed || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPEED,\r\n                                        spread: gameData.actions?.primary.projectile.spread || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPREAD\r\n                                    },\r\n                                    reload: {\r\n                                        time: gameData.actions?.primary.reload.time || PLAYER_DEFAULTS.ACTIONS.PRIMARY.RELOAD.TIME\r\n                                    }\r\n                                },\r\n                                sprint: {\r\n                                    drain: gameData.actions?.sprint.drain || PLAYER_DEFAULTS.ACTIONS.SPRINT.DRAIN,\r\n                                    multiplier: gameData.actions?.sprint.multiplier || PLAYER_DEFAULTS.ACTIONS.SPRINT.MULTIPLIER\r\n                                }\r\n                            },\r\n                            equipment: gameData.equipment || PLAYER_DEFAULTS.EQUIPMENT,\r\n                            flags: {\r\n                                hidden: gameData.flags.hidden || PLAYER_DEFAULTS.FLAGS.HIDDEN,\r\n                                invulnerable: gameData.flags.invulnerable || PLAYER_DEFAULTS.FLAGS.INVULNERABLE\r\n                            },\r\n                            physics: {\r\n                                acceleration: gameData.physics?.acceleration || PLAYER_DEFAULTS.PHYSICS.ACCELERATION,\r\n                                friction: gameData.physics?.friction || PLAYER_DEFAULTS.PHYSICS.FRICTION\r\n                            },\r\n                            rig: {\r\n                                body: gameData.rig?.body || PLAYER_DEFAULTS.RIG.BODY,\r\n                                head: gameData.rig?.head || PLAYER_DEFAULTS.RIG.HEAD,\r\n                                headwear: gameData.rig?.headwear || PLAYER_DEFAULTS.RIG.HEADWEAR,\r\n                                weapon: gameData.rig?.weapon || PLAYER_DEFAULTS.RIG.WEAPON\r\n                            },\r\n                            stats: {\r\n                                defense: gameData.stats?.defense || PLAYER_DEFAULTS.STATS.DEFENSE,\r\n                                health: {\r\n                                    max: gameData.stats?.health.max || PLAYER_DEFAULTS.STATS.HEALTH.MAX,\r\n                                    value: gameData.stats?.health.value || PLAYER_DEFAULTS.STATS.HEALTH.MAX\r\n                                },\r\n                                luck: gameData.stats?.luck || PLAYER_DEFAULTS.STATS.LUCK,\r\n                                size: gameData.stats?.size || PLAYER_DEFAULTS.STATS.SIZE,\r\n                                speed: gameData.stats?.speed || PLAYER_DEFAULTS.STATS.SPEED,\r\n                                stamina: {\r\n                                    max: gameData.stats?.stamina.max || PLAYER_DEFAULTS.STATS.STAMINA.MAX,\r\n                                    recovery: {\r\n                                        delay: gameData.stats?.stamina.recovery.delay || PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.DELAY,\r\n                                        rate: gameData.stats?.stamina.recovery.rate || PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.RATE\r\n                                    },\r\n                                    value: gameData.stats?.stamina.value || PLAYER_DEFAULTS.STATS.STAMINA.MAX,\r\n                                },\r\n                            },\r\n                            unique: gameData.unique || PLAYER_DEFAULTS.UNIQUE\r\n                        });\r\n                    }\r\n\r\n                    if (gameData.leaderboard) {\r\n                        gameData.leaderboard.forEach(([playerId, entry]: [string, LeaderboardEntry]) => {\r\n                            this.ui.leaderboard.set(playerId, entry);\r\n                        });\r\n                    }\r\n\r\n                    this.ui.createLeaderboard(this.lobbyManager, this.playerState.players, this.userId);\r\n                    break;\r\n                case 'partial-state': {\r\n                    if (message.userId === this.userId) return;\r\n\r\n                    const player = this.playerState.players.get(message.userId);\r\n                    if (!player) break;\r\n\r\n                    console.log('Partial State update for player', message.userId, ':', gameData);\r\n\r\n                    this.utility.deepMerge(player, gameData);\r\n                    break;\r\n                }\r\n                case 'player-move':\r\n                    if (!this.lobbyManager.inLobby && this.playerState.players.has(message.userId)) {\r\n                        const player = this.playerState.players.get(message.userId);\r\n                        if (!player) break;\r\n\r\n                        if (gameData.transform.pos) {\r\n                            player.transform.pos.x = gameData.transform.pos.x;\r\n                            player.transform.pos.y = gameData.transform.pos.y;\r\n                        }\r\n\r\n                        if (gameData.transform.rot !== undefined) {\r\n                            player.transform.rot = gameData.transform.rot;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'player-hit':\r\n                    if (gameData.projectileId) { // Remove the projectile for everyone\r\n                        this.combatController.projectiles.delete(gameData.projectileId);\r\n                    }\r\n\r\n                    if (gameData.targetId === this.userId) { // I got hit\r\n                        this.playerState.myPlayer.stats.health.value = gameData.newHealth;\r\n\r\n                        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n                        const healthSliderParams: SetSliderParams = {\r\n                            sliderId: 'healthBar',\r\n                            targetValue: this.playerState.myPlayer.stats.health.value,\r\n                            maxValue: this.playerState.myPlayer.stats.health.max,\r\n                            lerpTime: sliderLerpTime\r\n                        }\r\n                        this.utility.setSlider(healthSliderParams);\r\n\r\n                        if (this.playerState.myPlayer.stats.health.value <= 0) {\r\n                            this.playerController.playerDeath();\r\n                        }\r\n                    } else if (this.playerState.players.has(gameData.targetId)) { // Another player got hit\r\n                        const hitPlayer = this.playerState.players.get(gameData.targetId);\r\n                        if (!hitPlayer) break;\r\n\r\n                        hitPlayer.stats.health.value = gameData.newHealth;\r\n\r\n                        if (hitPlayer.stats.health.value <= 0) {\r\n                            console.log(`Player ${hitPlayer.id} died`);\r\n                        }\r\n                    }\r\n\r\n                    if (gameData.wasKill) {\r\n                        const shooter = this.ui.leaderboard.get(gameData.shooterId);\r\n                        if (shooter) {\r\n                            shooter.kills++;\r\n                        }\r\n\r\n                        const target = this.ui.leaderboard.get(gameData.targetId);\r\n                        if (target) {\r\n                            target.deaths++;\r\n                        }\r\n\r\n                        this.ui.updateLeaderboardDisplay(this.userId);\r\n                    }\r\n                    break;\r\n                case 'player-death':\r\n                    if (message.userId !== this.userId && gameData.ammoBox) { // Spawn ammo\r\n                        this.objectsManager.ammoBoxes.set(gameData.ammoBox.id, gameData.ammoBox);\r\n                        console.log(`Ammo box spawned at death of ${message.userId}`);\r\n                    }\r\n\r\n                    const gore: DeathDecal = {\r\n                        gore: {\r\n                            amount: this.utility.getRandomInt(2, 5)\r\n                        },\r\n                        blood: {\r\n                            amount: this.utility.getRandomInt(1, 3)\r\n                        },\r\n                        ownerId: message.userId,\r\n                        pos: {\r\n                            x: gameData.x,\r\n                            y: gameData.y\r\n                        },\r\n                        radius: gameData.size\r\n                    }\r\n                    this.particlesManager.generateGore(gore); // Spawn gore\r\n\r\n                    console.log(`Generated gore for ${message.userId}`);\r\n                    break;\r\n                case 'ammo-pickup':\r\n                    if (gameData.playerId === this.userId) break;\r\n\r\n                    if (this.objectsManager.ammoBoxes.has(gameData.ammoBoxId)) {\r\n                        const box = this.objectsManager.ammoBoxes.get(gameData.ammoBoxId);\r\n                        if (!box) break;\r\n\r\n                        // Update box state\r\n                        box.isOpen = gameData.boxState.isOpen;\r\n                        box.lid = gameData.boxState.lid;\r\n\r\n                        console.log(`Ammo box opened by ${gameData.playerId}`);\r\n                    }\r\n                    break;\r\n                case 'weapon-change':\r\n                    if (message.userId !== this.userId && this.playerState.players.has(message.userId)) {\r\n                        const player = this.playerState.players.get(message.userId);\r\n                        if (!player) break;\r\n\r\n                        player.rig.weapon = gameData.weapon;\r\n                        console.log(`${message.userId} switched to ${gameData.weapon}`);\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Projectile ]\r\n                //\r\n                case 'projectile-launch':\r\n                    if (!this.lobbyManager.inLobby && message.userId !== this.userId) {\r\n                        this.combatController.projectiles.set(gameData.projectile.id, gameData.projectile);\r\n                    }\r\n                    break;\r\n\r\n                case 'projectile-remove':\r\n                    if (!this.lobbyManager.inLobby) {\r\n                        this.combatController.projectiles.delete(gameData.projectileId);\r\n                    }\r\n                    break;\r\n                case 'projectile-deflect':\r\n                    if (!this.lobbyManager.inLobby && this.combatController.projectiles.has(gameData.projectileId)) {\r\n                        const projectile = this.combatController.projectiles.get(gameData.projectileId);\r\n                        if (!projectile) break;\r\n\r\n                        // Update projectile properties\r\n                        projectile.ownerId = gameData.newOwnerId;\r\n                        projectile.velocity = gameData.velocity;\r\n                        projectile.color = gameData.color;\r\n                        projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n\r\n                        console.log(`Projectile ${gameData.projectileId} deflected by ${gameData.newOwnerId}`);\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Game ]\r\n                //\r\n                case 'start-game':\r\n                    if (gameData.spawnMap && gameData.spawnMap[this.userId]) {\r\n                        this.playerState.myPlayer.transform.pos.x = gameData.spawnMap[this.userId].x;\r\n                        this.playerState.myPlayer.transform.pos.y = gameData.spawnMap[this.userId].y;\r\n                        console.log(\"My Player Spawn:\", gameData.spawnMap[this.userId].x, gameData.spawnMap[this.userId].y)\r\n                    }\r\n                    // For other players\r\n                    if (gameData.spawnMap) {\r\n                        this.playerState.players.forEach((player: Player, id: string) => {\r\n                            if (gameData.spawnMap[id]) {\r\n                                player.transform.pos.x = gameData.spawnMap[id].x;\r\n                                player.transform.pos.y = gameData.spawnMap[id].y;\r\n                                console.log(`Player ${id} spawn:`, gameData.spawnMap[id].x, gameData.spawnMap[id].y)\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    this.showGameControls(this.roomManager.getCurrentRoom() || '');\r\n                    this.startGameLoop();\r\n                    break;\r\n                case 'game-end':\r\n                    console.log(`Game ended! Winner: ${gameData.winnerId}`);\r\n                    this.gameWinner = gameData.winnerId;\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Round ]\r\n                //\r\n                case 'round-end':\r\n                    console.log(`Round ended! Winner: ${gameData.winnerId || 'No one'}`);\r\n                    this.endRound(gameData.winnerId);\r\n                    break;\r\n                case 'new-round':\r\n                    if (!gameData.spawnMap) return;\r\n                    console.log(gameData.spawnMap);\r\n\r\n                    // Hide upgrade UI\r\n                    if (this.ui.upgradeContainer) {\r\n                        this.ui.upgradeContainer.style.display = 'none';\r\n                    }\r\n\r\n                    console.log('New round started! Everyone respawning...');\r\n                    this.isRoundInProgress = true;\r\n                    this.roundWinner = null;\r\n\r\n                    this.playerState.myPlayer.stats.health.value = this.playerState.myPlayer.stats.health.max;\r\n\r\n                    const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n                    const healthSliderParams: SetSliderParams = {\r\n                        sliderId: 'healthBar',\r\n                        targetValue: this.playerState.myPlayer.stats.health.value,\r\n                        maxValue: this.playerState.myPlayer.stats.health.max,\r\n                        lerpTime: sliderLerpTime\r\n                    }\r\n\r\n                    const staminaSliderParams: SetSliderParams = {\r\n                        sliderId: 'staminaBar',\r\n                        targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n                        maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n                        lerpTime: sliderLerpTime\r\n                    }\r\n\r\n                    this.utility.setSlider(healthSliderParams);\r\n                    this.utility.setSlider(staminaSliderParams);\r\n\r\n                    this.playerState.myPlayer.transform.pos.x = gameData.spawnMap[this.userId].x;\r\n                    this.playerState.myPlayer.transform.pos.y = gameData.spawnMap[this.userId].y;\r\n\r\n                    this.resumeGame(); // Unpause locally\r\n\r\n                    // Receive all player's spawn locations and reset their health\r\n                    this.playerState.players.forEach((player: Player, playerId: string) => { // Respawn other players\r\n                        if (gameData.spawnMap[playerId]) {\r\n                            player.transform.pos.x = gameData.spawnMap[player.id].x;\r\n                            player.transform.pos.y = gameData.spawnMap[player.id].y;\r\n                            player.transform.rot = 0;\r\n\r\n                            // Reset vitals for good measure lol\r\n                            player.stats.health.value = player.stats.health.max;\r\n                            player.stats.stamina.value = player.stats.stamina.max;\r\n                        }\r\n                    });\r\n                    break;\r\n                case 'upgrade-taken': // Someone else took an upgrade\r\n                    if (gameData.upgradeId && gameData.isUnique) { // That upgrade is unique - remove it from my local uniques pool\r\n                        this.upgradeManager.removeUpgradeFromPool(gameData.upgradeId);\r\n                        console.log(`Unique upgrade ${gameData.upgradeId} taken by ${message.userId}`);\r\n                    }\r\n\r\n                    if (this.roundWinner === this.userId) { // I am the round winner - how many players have taken upgrades?\r\n                        this.upgradeManager.upgradesCompleted.add(message.userId);\r\n                        console.log(`${message.userId} completed upgrade. ${this.upgradeManager.upgradesCompleted.size}/${this.playerState.players.size} done`);\r\n\r\n                        // Check if all losers are done\r\n                        if (this.upgradeManager.upgradesCompleted.size >= this.playerState.players.size) {\r\n                            this.showWinnerContinueButton();\r\n                        }\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Audio ]\r\n                //\r\n                case 'play-audio':\r\n                    if (message.userId !== this.userId) {\r\n                        this.audioManager.playAudio(gameData.params);\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Visual ]\r\n                //\r\n                case 'add-decal':\r\n                    if (message.userId !== this.userId) {\r\n                        this.decalsManager.createDecalNetwork(gameData.x, gameData.y, gameData.decalId, gameData.params);\r\n                    }\r\n                    break;\r\n                case 'add-particles':\r\n                    if (message.userId !== this.userId) {\r\n                        this.particlesManager.generateParticles(\r\n                            gameData.x,\r\n                            gameData.y,\r\n                            gameData.particleId,\r\n                            gameData.params,\r\n                            gameData.direction\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'particle-emitter':\r\n                    if (message.userId !== this.userId) {\r\n                        const emission: EmitterParams = {\r\n                            id: gameData.id,\r\n                            interval: gameData.interval,\r\n                            lifetime: gameData.lifetime,\r\n                            offset: {\r\n                                x: gameData.offset.x,\r\n                                y: gameData.offset.y\r\n                            },\r\n                            particleType: gameData.particleType,\r\n                            playerId: gameData.playerId,\r\n                            pos: {\r\n                                x: gameData.pos.x,\r\n                                y: gameData.pos.y\r\n                            }\r\n                        }\r\n                        this.particlesManager.generateEmitter(emission);\r\n                    }\r\n                    break;\r\n                case 'character-animation':\r\n                    if (gameData.params.playerId !== this.userId) {\r\n                        this.animator.animateCharacterPartNetwork(gameData.params);\r\n                    }\r\n                    break;\r\n                case 'shrapnel-spawn':\r\n                    if (message.userId !== this.userId) {\r\n                        this.particlesManager.generateShrapnel(gameData.pieces);\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n            }\r\n        } catch (error) {\r\n            console.error('Error parsing game message:', error);\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Lobby ]\r\n    //\r\n    /**\r\n     * Return to the lobby for this room from the game.\r\n     * \r\n     * Called when game ends, or when you are the last player left in the game.\r\n     */\r\n    private returnToLobby(): void {\r\n        this.resetGameState('Lobby');\r\n\r\n        // Notify others and return to lobby\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'return-to-lobby',\r\n            reason: 'game-ended'\r\n        }));\r\n\r\n        this.lobbyManager.showLobbyControls({\r\n            lobby: this.lobbyManager,\r\n            lobbyOptions: {\r\n                maxPlayers: this.gameState.gameMaxPlayers,\r\n                maxWins: this.gameState.gameMaxWins,\r\n                isHost: this.playerState.isHost,\r\n                privateRoom: this.roomManager.isPrivateRoom,\r\n                upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n            },\r\n            myPlayer: this.playerState.myPlayer,\r\n            roomId: this.roomManager.getCurrentRoom() || \"\",\r\n            userId: this.userId\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Round ]\r\n    //\r\n    /**\r\n     * Processes end of round logic.\r\n     */\r\n    private endRound(winnerId: string | null): void {\r\n        if (!this.isRoundInProgress) {\r\n            console.log('Ignoring endRound - round already ended');\r\n            return;\r\n        }\r\n\r\n        console.log(`Server confirmed round end. Winner: ${winnerId || 'No one'}`);\r\n\r\n        this.isRoundInProgress = false;\r\n        this.roundWinner = winnerId;\r\n\r\n        if (!winnerId) { // Everyone died somehow\r\n            console.log('Round ended with no survivors!');\r\n            if (this.playerState.isHost) {\r\n                this.utility.safeTimeout(() => {\r\n                    this.startNewRound();\r\n                }, GAME.ROUND_END_DELAY);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Increment win for the winner\r\n        if (winnerId && this.ui.leaderboard.has(winnerId)) {\r\n            const winnerEntry = this.ui.leaderboard.get(winnerId);\r\n            if (!winnerEntry) return;\r\n\r\n            winnerEntry.wins++;\r\n            console.log(`${winnerId} won the round! Total wins: ${winnerEntry.wins}`);\r\n\r\n            // Check if they've won the game - use dynamic max wins\r\n            if (winnerEntry.wins >= this.gameState.gameMaxWins) {\r\n                this.endGame(winnerId); // TODO: Maybe don't rely on leaderboard data to end the game but actual player data stored for the round\r\n                return; // Don't start a new round\r\n            }\r\n\r\n            // Update display to show new win count\r\n            this.ui.updateLeaderboardDisplay(this.userId);\r\n        }\r\n\r\n        this.utility.safeTimeout(() => {\r\n            this.pauseGame(); // Everybody pause locally\r\n        }, GAME.ROUND_END_DELAY / 6);\r\n\r\n        // We have a winner, start the upgrade phase after a delay\r\n        this.utility.safeTimeout(() => {\r\n            this.startUpgradePhase(winnerId);\r\n        }, GAME.ROUND_END_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Processes end of game logic.\r\n     */\r\n    private endGame(winnerId: string): void {\r\n        this.gameWinner = winnerId;\r\n        console.log(`${winnerId} won the game with ${this.gameState.gameMaxWins} wins!`);\r\n\r\n        // Send game end message\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'game-end',\r\n            winnerId: winnerId\r\n        }));\r\n\r\n        // Return to lobby after delay\r\n        this.utility.safeTimeout(() => {\r\n            this.returnToLobby();\r\n        }, GAME.GAME_END_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Starts a new round, keeping track of full player states.\r\n     */\r\n    private startNewRound(): void {\r\n        console.log('Starting new round...');\r\n\r\n        // Locally update all other players for the winner, their state should already be updated after taking upgrades\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        // TODO: Probably won't need this eventually due to player-state messages being sent when upgrades are taken, but need more testing to be sure\r\n        this.playerState.players.forEach((player: Player) => {\r\n            player.transform.rot = 0;\r\n            player.timestamp = player.timestamp || Date.now();\r\n            player.actions.dash.cooldown = player.actions.dash.cooldown || PLAYER_DEFAULTS.ACTIONS.DASH.COOLDOWN;\r\n            player.actions.dash.drain = player.actions.dash.drain || PLAYER_DEFAULTS.ACTIONS.DASH.DRAIN;\r\n            player.actions.dash.multiplier = player.actions.dash.multiplier || PLAYER_DEFAULTS.ACTIONS.DASH.MULTIPLIER;\r\n            player.actions.dash.time = player.actions.dash.time || PLAYER_DEFAULTS.ACTIONS.DASH.TIME;\r\n            player.actions.melee.cooldown = player.actions.melee.cooldown || PLAYER_DEFAULTS.ACTIONS.MELEE.COOLDOWN;\r\n            player.actions.melee.damage = player.actions.melee.damage || PLAYER_DEFAULTS.ACTIONS.MELEE.DAMAGE;\r\n            player.actions.melee.duration = player.actions.melee.duration || PLAYER_DEFAULTS.ACTIONS.MELEE.DURATION;\r\n            player.actions.melee.range = player.actions.melee.range || PLAYER_DEFAULTS.ACTIONS.MELEE.RANGE;\r\n            player.actions.melee.size = player.actions.melee.size || PLAYER_DEFAULTS.ACTIONS.MELEE.SIZE;\r\n            player.actions.primary.buffer = player.actions.primary.buffer || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BUFFER;\r\n            player.actions.primary.burst.amount = player.actions.primary.burst.amount || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.AMOUNT;\r\n            player.actions.primary.burst.delay = player.actions.primary.burst.delay || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.DELAY;\r\n            player.actions.primary.magazine.currentAmmo = player.actions.primary.magazine.currentAmmo || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE;\r\n            player.actions.primary.magazine.currentReserve = player.actions.primary.magazine.currentReserve || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE;\r\n            player.actions.primary.magazine.maxReserve = player.actions.primary.magazine.maxReserve || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE;\r\n            player.actions.primary.magazine.size = player.actions.primary.magazine.size || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE;\r\n            player.actions.primary.offset = player.actions.primary.offset || PLAYER_DEFAULTS.ACTIONS.PRIMARY.OFFSET;\r\n            player.actions.primary.projectile.amount = player.actions.primary.projectile.amount || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.AMOUNT;\r\n            player.actions.primary.projectile.color = player.actions.primary.projectile.color || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.COLOR;\r\n            player.actions.primary.projectile.damage = player.actions.primary.projectile.damage || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.DAMAGE;\r\n            player.actions.primary.projectile.length = player.actions.primary.projectile.length || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.LENGTH;\r\n            player.actions.primary.projectile.range = player.actions.primary.projectile.range || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.RANGE;\r\n            player.actions.primary.projectile.size = player.actions.primary.projectile.size || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SIZE;\r\n            player.actions.primary.projectile.speed = player.actions.primary.projectile.speed || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPEED;\r\n            player.actions.primary.projectile.spread = player.actions.primary.projectile.spread || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPREAD;\r\n            player.actions.primary.reload.time = player.actions.primary.reload.time || PLAYER_DEFAULTS.ACTIONS.PRIMARY.RELOAD.TIME;\r\n            player.actions.sprint.drain = player.actions.sprint.drain || PLAYER_DEFAULTS.ACTIONS.SPRINT.DRAIN;\r\n            player.actions.sprint.multiplier = player.actions.sprint.multiplier || PLAYER_DEFAULTS.ACTIONS.SPRINT.MULTIPLIER;\r\n            player.equipment = player.equipment || PLAYER_DEFAULTS.EQUIPMENT;\r\n            player.flags.hidden = player.flags.hidden || PLAYER_DEFAULTS.FLAGS.HIDDEN;\r\n            player.flags.invulnerable = player.flags.invulnerable || PLAYER_DEFAULTS.FLAGS.INVULNERABLE;\r\n            player.physics.acceleration = player.physics.acceleration || PLAYER_DEFAULTS.PHYSICS.ACCELERATION;\r\n            player.physics.friction = player.physics.friction || PLAYER_DEFAULTS.PHYSICS.FRICTION;\r\n            player.rig.body = player.rig.body || PLAYER_DEFAULTS.RIG.BODY;\r\n            player.rig.head = player.rig.head || PLAYER_DEFAULTS.RIG.HEAD;\r\n            player.rig.headwear = player.rig.headwear || PLAYER_DEFAULTS.RIG.HEADWEAR;\r\n            player.rig.weapon = player.rig.weapon || PLAYER_DEFAULTS.RIG.WEAPON;\r\n            player.stats.defense = player.stats.defense || PLAYER_DEFAULTS.STATS.DEFENSE;\r\n            player.stats.health.max = player.stats.health.max || PLAYER_DEFAULTS.STATS.HEALTH.MAX;\r\n            player.stats.health.value = player.stats.health.max || PLAYER_DEFAULTS.STATS.HEALTH.MAX;\r\n            player.stats.luck = player.stats.luck || PLAYER_DEFAULTS.STATS.LUCK;\r\n            player.stats.size = player.stats.size || PLAYER_DEFAULTS.STATS.SIZE;\r\n            player.stats.speed = player.stats.speed || PLAYER_DEFAULTS.STATS.SPEED;\r\n            player.stats.stamina.max = player.stats.stamina.max || PLAYER_DEFAULTS.STATS.STAMINA.MAX;\r\n            player.stats.stamina.recovery.delay = player.stats.stamina.recovery.delay || PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.DELAY;\r\n            player.stats.stamina.recovery.rate = player.stats.stamina.recovery.rate || PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.RATE;\r\n            player.stats.stamina.value = player.stats.stamina.value || PLAYER_DEFAULTS.STATS.STAMINA.MAX;\r\n            player.unique = player.unique || PLAYER_DEFAULTS.UNIQUE\r\n        });\r\n\r\n        // Send the spawn map to all other players\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'new-round',\r\n            reservedSpawn: {\r\n                x: Math.random() * (CANVAS.WIDTH - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN,\r\n                y: Math.random() * (CANVAS.HEIGHT - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN\r\n            }\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Game ]\r\n    //\r\n    /**\r\n     * Update the display with the game canvas via updateDisplay.\r\n     */\r\n    private showGameControls(roomId: string): void {\r\n        this.ui.updateDisplay(this.lobbyManager, \"game\", roomId);\r\n    }\r\n\r\n    /**\r\n     * Called by the host when the start button is pressed in the lobby.\r\n     * \r\n     * Starts game loop via executeStartGame or displays a warning before continuing if solo.\r\n     */\r\n    private startGame(): void {\r\n        if (!this.playerState.isHost) return;\r\n\r\n        // Check if solo and show warning if needed\r\n        if (this.lobbyManager.lobbyPlayers.size === 1) {\r\n            this.ui.soloGameWarning(() => this.executeStartGame());\r\n            return; // Don't continue, let the modal handle it\r\n        }\r\n\r\n        // If not solo, proceed normally\r\n        this.executeStartGame();\r\n    }\r\n\r\n    /**\r\n     * Executes the beginning of a game and broadcasts the start to all lobbyplayers.\r\n     */\r\n    private executeStartGame(): void {\r\n        // Send start game message to other players\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'start-game',\r\n            reservedSpawn: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            }\r\n        }));\r\n\r\n        // Also start the game for myself as the host\r\n        this.showGameControls(this.roomManager.getCurrentRoom() || '');\r\n        this.startGameLoop();\r\n    }\r\n\r\n    /**\r\n     * Kicks of the game loop and initializes values to clean slate.\r\n     */\r\n    private startGameLoop(): void {\r\n        this.gameState.gameInProgress = true;\r\n        this.isRoundInProgress = true;\r\n\r\n        this.playerState.myPlayer.actions.primary.magazine.currentReserve = Math.floor(PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE / 2);\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo = this.playerState.myPlayer.actions.primary.magazine.size;\r\n        this.ui.ammoReservesUIController.spawnAmmoInReserveUI(this.playerState.myPlayer.actions.primary.magazine.currentReserve);\r\n        this.playerState.isReloading = false;\r\n\r\n        this.ui.createLeaderboard(this.lobbyManager, this.playerState.players, this.userId);\r\n\r\n        this.upgradeManager.resetUpgrades(this.playerState.myPlayer);\r\n\r\n        // Send my player data\r\n        // TODO: You can maybe just call this.initializePlayer and use the returned player object, unsure yet.\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-state',\r\n            id: this.playerState.myPlayer.id,\r\n            timestamp: this.playerState.myPlayer.timestamp,\r\n            color: this.playerState.myPlayer.color,\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y,\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            actions: {\r\n                dash: {\r\n                    cooldown: this.playerState.myPlayer.actions.dash.cooldown,\r\n                    drain: this.playerState.myPlayer.actions.dash.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.dash.multiplier,\r\n                    time: this.playerState.myPlayer.actions.dash.time\r\n                },\r\n                melee: {\r\n                    cooldown: this.playerState.myPlayer.actions.melee.cooldown,\r\n                    damage: this.playerState.myPlayer.actions.melee.damage,\r\n                    duration: this.playerState.myPlayer.actions.melee.duration,\r\n                    range: this.playerState.myPlayer.actions.melee.range,\r\n                    size: this.playerState.myPlayer.actions.melee.size\r\n                },\r\n                primary: {\r\n                    buffer: this.playerState.myPlayer.actions.primary.buffer,\r\n                    burst: {\r\n                        amount: this.playerState.myPlayer.actions.primary.burst.amount,\r\n                        delay: this.playerState.myPlayer.actions.primary.burst.delay\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: this.playerState.myPlayer.actions.primary.magazine.currentAmmo,\r\n                        currentReserve: this.playerState.myPlayer.actions.primary.magazine.currentReserve,\r\n                        maxReserve: this.playerState.myPlayer.actions.primary.magazine.maxReserve,\r\n                        size: this.playerState.myPlayer.actions.primary.magazine.size\r\n                    },\r\n                    offset: this.playerState.myPlayer.actions.primary.offset,\r\n                    projectile: {\r\n                        amount: this.playerState.myPlayer.actions.primary.projectile.amount,\r\n                        color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                        damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                        length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                        range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                        size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                        speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                        spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                    },\r\n                    reload: {\r\n                        time: this.playerState.myPlayer.actions.primary.reload.time\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: this.playerState.myPlayer.actions.sprint.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.sprint.multiplier\r\n                }\r\n            },\r\n            equipment: this.playerState.myPlayer.equipment,\r\n            flags: {\r\n                hidden: this.playerState.myPlayer.flags.hidden,\r\n                invulnerable: this.playerState.myPlayer.flags.invulnerable\r\n            },\r\n            physics: {\r\n                acceleration: this.playerState.myPlayer.physics.acceleration,\r\n                friction: this.playerState.myPlayer.physics.friction\r\n            },\r\n            rig: {\r\n                body: this.playerState.myPlayer.rig.body,\r\n                head: this.playerState.myPlayer.rig.head,\r\n                headwear: this.playerState.myPlayer.rig.headwear,\r\n                weapon: this.playerState.myPlayer.rig.weapon\r\n            },\r\n            stats: {\r\n                defense: this.playerState.myPlayer.stats.defense,\r\n                health: {\r\n                    max: this.playerState.myPlayer.stats.health.max,\r\n                    value: this.playerState.myPlayer.stats.health.value\r\n                },\r\n                luck: this.playerState.myPlayer.stats.luck,\r\n                size: this.playerState.myPlayer.stats.size,\r\n                speed: this.playerState.myPlayer.stats.speed,\r\n                stamina: {\r\n                    max: this.playerState.myPlayer.stats.stamina.max,\r\n                    recovery: {\r\n                        delay: this.playerState.myPlayer.stats.stamina.recovery.delay,\r\n                        rate: this.playerState.myPlayer.stats.stamina.recovery.rate\r\n                    },\r\n                    value: this.playerState.myPlayer.stats.stamina.value,\r\n                },\r\n            },\r\n            unique: this.playerState.myPlayer.unique\r\n        }));\r\n\r\n        this.gameLoop();\r\n\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const healthSliderParams: SetSliderParams = {\r\n            sliderId: 'healthBar',\r\n            targetValue: this.playerState.myPlayer.stats.health.value,\r\n            maxValue: this.playerState.myPlayer.stats.health.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n\r\n        const staminaSliderParams: SetSliderParams = {\r\n            sliderId: 'staminaBar',\r\n            targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n            maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n\r\n        this.utility.setSlider(healthSliderParams);\r\n        this.utility.setSlider(staminaSliderParams);\r\n    }\r\n\r\n    /**\r\n     * Core game processing function.\r\n     * \r\n     * Handles animation frame requests, update loops for all systems, and drawing functions.\r\n     */\r\n    private gameLoop(): void {\r\n        if (!this.gameState.gameInProgress || !this.ui.ctx || !this.ui.canvas || !this.ui.decalCtx || !this.ui.decalCanvas) return;\r\n\r\n        if (this.gameState.isPaused) { // Continue the loop but skip all updates\r\n            requestAnimationFrame(() => this.gameLoop());\r\n            return;\r\n        }\r\n\r\n        const dt = this.utility.deltaTime();\r\n\r\n        // Update\r\n        this.playerController.updatePlayerPosition(dt);\r\n        this.combatController.updateAttack(dt);\r\n        this.combatController.updateProjectiles(dt);\r\n        this.particlesManager.updateParticles(dt);\r\n        this.particlesManager.updateEmitters(dt);\r\n        this.particlesManager.updateShrapnel(dt);\r\n        this.animator.updateCharacterAnimations(dt);\r\n        this.staminaController.updateStamina(dt);\r\n        this.dashController.updateDash(dt);\r\n\r\n        this.collisionsManager.checkCollisions(dt);\r\n\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const staminaSliderParams: SetSliderParams = {\r\n            sliderId: 'staminaBar',\r\n            targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n            maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n        this.utility.setSlider(staminaSliderParams);\r\n\r\n        this.renderingManager.clearCtx(this.ui.ctx);\r\n\r\n        this.ui.ctx.drawImage(this.ui.decalCanvas, 0, 0)\r\n\r\n        this.renderingManager.drawObjects();\r\n\r\n        // Draw projectiles\r\n        this.combatController.projectiles.forEach(projectile => {\r\n            this.renderingManager.drawProjectile(projectile);\r\n        });\r\n\r\n        // Draw other players\r\n        this.playerState.players.forEach((player: Player) => {\r\n            this.renderingManager.drawCharacter(player);\r\n        });\r\n\r\n        this.renderingManager.drawCharacter(this.playerState.myPlayer, true);\r\n        this.particlesManager.drawParticles();\r\n        this.particlesManager.drawShrapnel();\r\n\r\n        // Continue game loop\r\n        requestAnimationFrame(() => this.gameLoop());\r\n    }\r\n\r\n    /**\r\n     * Pauses the game when called.\r\n     */\r\n    public pauseGame(): void {\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        this.gameState.isPaused = true;\r\n        console.log('Game paused');\r\n\r\n        this.controlsManager.clearActiveKeys();\r\n        this.playerState.isSprinting = false;\r\n        this.playerState.isDashing = false;\r\n        this.playerState.isBurstActive = false;\r\n        this.playerState.currentBurstShot = 0;\r\n    }\r\n\r\n    /**\r\n     * Resumes the game when called.\r\n     */\r\n    public resumeGame(): void {\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        this.gameState.isPaused = false;\r\n        console.log('Game resumed');\r\n    }\r\n\r\n    /**\r\n     * Resets the game state to default.\r\n     */\r\n    private resetGameState(resetType: ResetType): void {\r\n        // Clear game flags\r\n        this.gameState.gameInProgress = false;\r\n        this.gameState.isPaused = false;\r\n        this.isRoundInProgress = false;\r\n        this.gameWinner = null;\r\n        this.roundWinner = null;\r\n\r\n        this.gameState.gameMaxWins = GAME.MAX_WINS;\r\n        this.gameState.gameMaxPlayers = GAME.MAX_PLAYERS;\r\n\r\n        if (resetType === 'Room') {\r\n            this.lobbyManager.inLobby = false;\r\n            this.playerState.isHost = false;\r\n        }\r\n\r\n        // Clear all collections\r\n        this.playerState.players.clear();\r\n        this.combatController.projectiles.clear();\r\n        this.objectsManager.ammoBoxes.clear();\r\n        this.decalsManager.decals.clear();\r\n        this.particlesManager.particles.clear();\r\n        this.particlesManager.emitters.clear();\r\n        this.particlesManager.shrapnel.clear();\r\n        this.upgradeManager.upgradesCompleted.clear();\r\n\r\n        this.ui.ammoReservesUIController.reserveBulletParticles = [];\r\n\r\n        if (resetType === 'Room') {\r\n            this.lobbyManager.lobbyPlayers.clear();\r\n        }\r\n\r\n        // Reset UI and player\r\n        this.renderingManager.clearCtx();\r\n        this.chatManager.clearChat();\r\n        this.ui.clearLeaderboard();\r\n        this.playerState.resetPlayerState();\r\n        this.playerState.initPlayer(this.userId);\r\n        this.controlsManager.clearActiveKeys();\r\n        this.animator.clearAllAnimations();\r\n\r\n        this.utility.clearTimeoutCache();\r\n\r\n        // Reset upgrades and equipment\r\n        this.upgradeManager.resetUpgrades(this.playerState.myPlayer);\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Actions / Inputs ]\r\n    //\r\n    /**\r\n     * Provides polling for inputs and keybinds - checking for any actions assigned.\r\n     */\r\n    private watchForInputs(): void {\r\n        const poll = () => {\r\n            if (this.controlsManager.gamepadConnectionEnabled) {\r\n                this.controlsManager.pollGamepad();\r\n            }\r\n            this.checkActions();\r\n            requestAnimationFrame(poll);\r\n        };\r\n        poll();\r\n    }\r\n\r\n    /**\r\n     * Checks for keybinds and input actions during polling.\r\n     */\r\n    public checkActions(): void {\r\n        // TODO: MAYBE add menu navigation with keyboard/gamepad here\r\n\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        if (this.controlsManager.triggered(keybinds.dash)) {\r\n            this.dashController.startDash();\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.melee)) {\r\n            if (this.combatController.canMelee()) {\r\n                this.combatController.triggerAttack('melee');\r\n            }\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.reload)) {\r\n            this.combatController.startReload();\r\n        }\r\n\r\n        if (this.controlsManager.held(keybinds.sprint)) {\r\n            if (this.moveController.isMoving()) {\r\n                this.playerState.isSprinting = true;\r\n            }\r\n        } else {\r\n            this.playerState.isSprinting = false;\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.attack)) {\r\n            if (this.playerState.canShoot && !this.playerState.isBurstActive && !this.playerState.isMelee) {\r\n                this.combatController.triggerAttack('ranged');\r\n            }\r\n        }\r\n\r\n        if (this.controlsManager.held(keybinds.attack) && this.playerState.canAutoFire) {\r\n            this.combatController.triggerAttack('ranged');\r\n        }\r\n\r\n        const gamepadRAxis = this.controlsManager.getGamepadRAxis();\r\n        if (gamepadRAxis !== null) {\r\n            this.animator.rotateCharacterPart(this.userId, gamepadRAxis);\r\n        }\r\n\r\n        this.controlsManager.updatePreviousKeys();\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Upgrades ]\r\n    //\r\n    /**\r\n     * Start the upgrade phase by showing the relative UI for winners/losers.\r\n     */\r\n    private startUpgradePhase(winnerId: string | null): void {\r\n        console.log('Starting upgrade phase...');\r\n\r\n        this.upgradeManager.upgradesCompleted.clear(); // Reset upgrade tracking\r\n\r\n        const numUpgrades = 2; // TODO: This could change based on upgrades or other factors\r\n\r\n        // Show upgrade UI based on if I won or lost\r\n        if (winnerId === this.userId) {\r\n            this.showWinnerWaitScreen();\r\n        } else {\r\n            this.showUpgradeSelection(numUpgrades);\r\n        }\r\n    }\r\n\r\n    // [ Winner ]\r\n    //\r\n    /**\r\n     * Show the winner waiting screen.\r\n     * \r\n     * This screen will persist until all losers in the game finish picking upgrades.\r\n     */\r\n    private showWinnerWaitScreen(): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        const waitingDiv = document.createElement('div');\r\n        waitingDiv.className = 'upgrade_waiting';\r\n        waitingDiv.textContent = 'Waiting for other players...';\r\n\r\n        this.ui.upgradeContainer.appendChild(waitingDiv);\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    /**\r\n     * Update winner waiting screen to show the continue button, which will conclude the round-end upgrade process.\r\n     */\r\n    private showWinnerContinueButton(): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        const waitingDiv = document.createElement('div');\r\n        waitingDiv.className = 'upgrade_waiting';\r\n        waitingDiv.textContent = 'Upgrade phase complete.';\r\n\r\n        const continueBtn = document.createElement('button');\r\n        continueBtn.textContent = 'Continue';\r\n        continueBtn.onclick = () => {\r\n            if (!this.ui.upgradeContainer) return;\r\n            console.log(\"Winner pressed continue...\");\r\n\r\n            this.ui.upgradeContainer.style.display = 'none';\r\n\r\n            this.utility.safeTimeout(() => {\r\n                this.startNewRound();\r\n            }, GAME.NEW_ROUND_DELAY);\r\n        };\r\n\r\n        this.ui.upgradeContainer.appendChild(waitingDiv);\r\n        this.ui.upgradeContainer.appendChild(continueBtn);\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    // [ Losers ]\r\n    //\r\n    /**\r\n     * Displays the upgrade selection screen for losers during the upgrade phase.\r\n     */\r\n    private showUpgradeSelection(amount: number): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        // Get 3 random upgrades\r\n        const availableUpgrades = this.upgradeManager.getUpgrades(amount, this.playerState.myPlayer);\r\n\r\n        availableUpgrades.forEach(upgrade => {\r\n            const upgradeDiv = document.createElement('div');\r\n            upgradeDiv.className = 'upgrade_card container';\r\n            upgradeDiv.setAttribute('data-rarity', upgrade.rarity.toString());\r\n\r\n            // Create image element\r\n            const imageDiv = document.createElement('div');\r\n            imageDiv.className = 'upgrade_image';\r\n\r\n            const img = document.createElement('img');\r\n            img.src = upgrade.icon;\r\n            img.alt = upgrade.name;\r\n            img.className = 'upgrade_icon';\r\n\r\n            // Handle image load errors\r\n            img.onerror = () => {\r\n                console.warn(`Failed to load upgrade image: ${upgrade.icon}`);\r\n                img.style.display = 'none';\r\n            };\r\n\r\n            imageDiv.appendChild(img);\r\n\r\n            const nameDiv = document.createElement('div');\r\n            nameDiv.className = 'upgrade_name';\r\n            nameDiv.textContent = upgrade.name;\r\n\r\n            const subtitleDiv = document.createElement('div');\r\n            subtitleDiv.className = 'upgrade_subtitle';\r\n            subtitleDiv.textContent = upgrade.subtitle;\r\n\r\n            upgradeDiv.appendChild(imageDiv);\r\n            upgradeDiv.appendChild(nameDiv);\r\n            upgradeDiv.appendChild(subtitleDiv);\r\n\r\n            upgradeDiv.addEventListener('click', () => {\r\n                console.log(\"Selected upgrade: \", upgrade.name);\r\n                this.selectUpgrade(upgrade.id);\r\n            });\r\n\r\n            if (!this.ui.upgradeContainer) return;\r\n            this.ui.upgradeContainer.appendChild(upgradeDiv);\r\n        });\r\n\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    /**\r\n     * Triggers on click when a loser selects an upgrade from their displayed options.\r\n     * \r\n     * Processes selection upgrade and sends a network message to inform others of the action.\r\n     */\r\n    private selectUpgrade(upgradeId: string): void {\r\n        const success = this.upgradeManager.applyUpgrade(upgradeId, this.playerState.myPlayer);\r\n        if (!success) {\r\n            console.error('Failed to apply upgrade'); // Maybe two people picked same one, (apply upgrade checks uniques)\r\n            return;\r\n        }\r\n\r\n        this.finishUpgrade(upgradeId);\r\n    }\r\n\r\n    /**\r\n     * Closes upgrade loop for loser once they have selected an upgrade.\r\n     */\r\n    private finishUpgrade(selectedUpgradeId: string): void {\r\n        if (this.ui.upgradeContainer) { // Hide upgrade UI\r\n            this.ui.upgradeContainer.style.display = 'none';\r\n        }\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'upgrade-taken',\r\n            upgradeId: selectedUpgradeId,\r\n            userId: this.userId,\r\n            isUnique: this.upgradeManager.upgrades.find(u => u.id === selectedUpgradeId)?.unique || false\r\n        }));\r\n\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-state',\r\n            id: this.playerState.myPlayer.id,\r\n            timestamp: this.playerState.myPlayer.timestamp,\r\n            color: this.playerState.myPlayer.color,\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y,\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            actions: {\r\n                dash: {\r\n                    cooldown: this.playerState.myPlayer.actions.dash.cooldown,\r\n                    drain: this.playerState.myPlayer.actions.dash.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.dash.multiplier,\r\n                    time: this.playerState.myPlayer.actions.dash.time\r\n                },\r\n                melee: {\r\n                    cooldown: this.playerState.myPlayer.actions.melee.cooldown,\r\n                    damage: this.playerState.myPlayer.actions.melee.damage,\r\n                    duration: this.playerState.myPlayer.actions.melee.duration,\r\n                    range: this.playerState.myPlayer.actions.melee.range,\r\n                    size: this.playerState.myPlayer.actions.melee.size\r\n                },\r\n                primary: {\r\n                    buffer: this.playerState.myPlayer.actions.primary.buffer,\r\n                    burst: {\r\n                        amount: this.playerState.myPlayer.actions.primary.burst.amount,\r\n                        delay: this.playerState.myPlayer.actions.primary.burst.delay\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: this.playerState.myPlayer.actions.primary.magazine.currentAmmo,\r\n                        currentReserve: this.playerState.myPlayer.actions.primary.magazine.currentReserve,\r\n                        maxReserve: this.playerState.myPlayer.actions.primary.magazine.maxReserve,\r\n                        size: this.playerState.myPlayer.actions.primary.magazine.size\r\n                    },\r\n                    offset: this.playerState.myPlayer.actions.primary.offset,\r\n                    projectile: {\r\n                        amount: this.playerState.myPlayer.actions.primary.projectile.amount,\r\n                        color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                        damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                        length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                        range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                        size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                        speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                        spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                    },\r\n                    reload: {\r\n                        time: this.playerState.myPlayer.actions.primary.reload.time\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: this.playerState.myPlayer.actions.sprint.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.sprint.multiplier\r\n                }\r\n            },\r\n            equipment: this.playerState.myPlayer.equipment,\r\n            flags: {\r\n                hidden: this.playerState.myPlayer.flags.hidden,\r\n                invulnerable: this.playerState.myPlayer.flags.invulnerable\r\n            },\r\n            physics: {\r\n                acceleration: this.playerState.myPlayer.physics.acceleration,\r\n                friction: this.playerState.myPlayer.physics.friction\r\n            },\r\n            rig: {\r\n                body: this.playerState.myPlayer.rig.body,\r\n                head: this.playerState.myPlayer.rig.head,\r\n                headwear: this.playerState.myPlayer.rig.headwear,\r\n                weapon: this.playerState.myPlayer.rig.weapon\r\n            },\r\n            stats: {\r\n                defense: this.playerState.myPlayer.stats.defense,\r\n                health: {\r\n                    max: this.playerState.myPlayer.stats.health.max,\r\n                    value: this.playerState.myPlayer.stats.health.max\r\n                },\r\n                luck: this.playerState.myPlayer.stats.luck,\r\n                size: this.playerState.myPlayer.stats.size,\r\n                speed: this.playerState.myPlayer.stats.speed,\r\n                stamina: {\r\n                    max: this.playerState.myPlayer.stats.stamina.max,\r\n                    recovery: {\r\n                        delay: this.playerState.myPlayer.stats.stamina.recovery.delay,\r\n                        rate: this.playerState.myPlayer.stats.stamina.recovery.rate\r\n                    },\r\n                    value: this.playerState.myPlayer.stats.stamina.max\r\n                }\r\n            },\r\n            unique: this.playerState.myPlayer.unique\r\n        }));\r\n\r\n        console.log('Upgrade selected, waiting for others...');\r\n    }\r\n    //\r\n    // #endregion\r\n}\r\n\r\n// Initialize the game client\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        new Client();\r\n    });\r\n} else {\r\n    new Client();\r\n}\r\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","create","params","name","subtitle","icon","type","UNIQUE","rarity","SUPERIOR","unique","func","player","includes","push","LEGENDARY","UpgradeRarity","UpgradeType","STAT","UNCOMMON","playerState","updateStat","stats","health","max","COMMON","speed","actions","dash","cooldown","RARE","SPECIAL","EXCEPTIONAL","time","stamina","recovery","rate","delay","primary","projectile","damage","buffer","EQUIPMENT","equipment","spread","RESOURCE","magazine","currentReserve","ui","ammoReservesUIController","spawnAmmoInReserveUI","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","PLAYER_DEFAULTS","ACTIONS","DASH","COOLDOWN","DRAIN","MULTIPLIER","TIME","MELEE","DAMAGE","DURATION","RANGE","SIZE","PRIMARY","BUFFER","BURST","AMOUNT","DELAY","MAGAZINE","STARTING_RESERVE","MAX_RESERVE","OFFSET","PROJECTILE","COLOR","LENGTH","SPEED","SPREAD","RELOAD","SPRINT","DATA","ID_LENGTH","FLAGS","HIDDEN","INVULNERABLE","PHYSICS","ACCELERATION","FRICTION","RIG","BODY","HEAD","HEADWEAR","WEAPON","STATS","DEFENSE","HEALTH","MAX","LUCK","STAMINA","RECOVERY","RATE","VISUAL","ID_DISPLAY_OFFSET","OBJECT_DEFAULTS","DECALS","RADIUS","MIN","DENSITY","OPACITY","VARIATION","PARTICLES","BLOOD_DRIP","COUNT","LIFETIME","NOISE","STRENGTH","SCALE","SIZE_OVER_LIFETIME","TORQUE","COLLIDE","FADE","PAINT","STAIN","BLOOD_SPRAY","MUZZLE_FLASH","SHELL_CASING","SMOKE","SPARKS","SHRAPNEL","AMMO_BOX","BASE","BULLETS","LID","CANVAS","GAMEPAD_MAP","A","B","X","Y","LB","RB","LT","RT","SELECT","START","L_STICK","R_STICK","DPAD_UP","DPAD_DOWN","DPAD_LEFT","DPAD_RIGHT","HOME","AXES","LEFT_STICK_X","LEFT_STICK_Y","RIGHT_STICK_X","RIGHT_STICK_Y","GAME","CHARACTER_SIZE","CONNECTION_TIMEOUT","CONTROLS","KEYBINDS","MOVE_UP","MOVE_LEFT","MOVE_DOWN","MOVE_RIGHT","ATTACK","GAMEPAD","DEADZONE","GAME_END_DELAY","GRAPHICS","AMMORESERVES","STATIC_OVERLAY","BACKGROUND_PARTICLES","MAX_PLAYERS","MAX_WINS","RECONNECT_DELAY","ROUND_END_DELAY","NEW_ROUND_DELAY","AUDIO","SFX","IMPACT","FLESH","BULLET","METAL","PLAYER","MALE","GRUNT","GLOCK","EMPTY","END","SHELL","ADMIN_KEYS","KEYS","REQUIRED_COUNT","Admin","constructor","cacheManager","adminKeysHeld","Set","this","initKeyListener","initConsoleKeybinds","window","addEventListener","add","checkAdminCombo","delete","every","has","size","clear","showAdminModal","modal","modalInput","modalConfirmButton","modalCancelButton","modalErrorDiv","modalText","classList","remove","style","display","textContent","focus","onclick","trim","command","split","executeAdminCommand","closeModal","console","log","onAdminCommand","document","getModifierState","preventDefault","clearCacheCommand","then","location","reload","Animator","roomManager","userId","characterAnimations","Map","characterOffsets","animateCharacterPart","generateCharacterAnimation","sendMessage","JSON","stringify","rotateCharacterPart","playerId","rotation","myPlayer","transform","rot","players","now","Date","Math","abs","lastSentRotation","lastSentRotationTime","animateCharacterPartNetwork","part","frames","duration","partIndex","animationId","set","startTime","originalOffset","x","y","updateCharacterAnimations","delta","animationsToRemove","currentTime","forEach","animation","progress","frameKeys","Number","sort","a","b","lerpedX","lerpedY","currentFrameIndex","i","length","frameProgress","nextFrameProgress","lastFrame","currentFrame","nextFrame","clearAllAnimations","AudioPool","poolSize","maxConcurrent","pools","activeAudio","createPool","src","pool","audio","Audio","preload","returnToPool","active","index","indexOf","splice","getAudio","pop","volume","playbackRate","loop","preloadSound","AudioManager","settingsManager","utility","audioPool","playAudio","warn","min","random","blend","spatial","pos","dx","listener","dy","distance","sqrt","distanceVolume","rolloff","rolloffType","factor","maxDistance","referenceDistance","normalizedDistance","pow","outputGroup","output","toLowerCase","mixer","getSettings","master","pitch","delayMs","safeTimeout","play","catch","error","playAudioNetwork","preloadAudioAssets","sfx","extension","preloadSFX","Array","isArray","endsWith","CacheManager","dbName","dbVersion","db","initDB","Promise","reject","request","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","event","target","objectStoreNames","contains","createObjectStore","write","transaction","objectStore","put","read","CharacterConfig","KNIFE","DEFAULT","UPGRADES","KINETIC_BRAIN","CHARACTER_DECALS","BLOOD","GORE","CharacterManager","charConfig","getCharacterAsset","layer","variant","getUpgradeVisual","upgradeName","upperName","toUpperCase","ChatManager","sendChatMessage","chatInput","message","alert","timestamp","displayChatMessage","senderId","isOwn","chatMessages","messageDiv","createElement","className","senderSpan","contentSpan","appendChild","scrollTop","scrollHeight","children","removeChild","firstChild","clearChat","innerHTML","ControlsManager","activeKeys","gamepadKeys","previousKeys","mousePos","gamepadConnected","gamepadConnectionEnabled","gamepadRAxis","initGamepad","held","triggered","getActiveKeys","addKey","removeKey","clearActiveKeys","updatePreviousKeys","getMousePos","setMousePos","pollGamepad","gamepad","navigator","getGamepads","settings","keybinds","controls","gamepadMap","deadzone","xAxis","axes","yAxis","moveRight","moveLeft","moveDown","moveUp","buttons","melee","pressed","attack","sprint","rightX","rightY","aimMagnitude","atan2","PI","getGamepadRAxis","CollisionsManager","objectsManager","checkCollisions","checkObjectCollisions","checkPlayersCollisions","collisionsEnabled","collisionRadius","getPlayerCollider","ammoBoxes","ammoBox","boxId","isOpen","maxReserve","actualAmmoAdded","ammoAmount","angle","lid","velocity","cos","sin","torque","ammoBoxId","boxState","dist","minDist","overlap","pushX","pushY","padding","col","flags","hidden","invulnerable","DecalsManager","decals","createDecal","decalId","generateDecal","createDecalNetwork","decalCtx","radius","density","opacity","numPixels","floor","rgb","hexToRgb","save","globalCompositeOperation","pixelX","pixelY","pixelOpacity","clampedOpacity","fillStyle","g","fillRect","restore","EventsManager","animator","chatManager","controlsManager","gameState","roomController","initEventListeners","canvas","hostButton","joinButton","quickplayButton","lobbyLeaveButton","lobbyCodeButton","gameLeaveButton","gameCodeButton","startGameBtn","chatSendBtn","hostRoom","joinRoom","quickPlay","leaveRoom","copyRoomCode","onStartButtonClick","shiftKey","canShoot","isSprinting","isDashing","isBurstActive","currentBurstShot","settingsButton","showSettingsPage","settingsCloseButton","hideSettingsPage","onKeyDown","onKeyUp","onMouseUp","onMouseMove","onMouseDown","switchSettingsPage","controlsTab","graphicsTab","soundTab","controlsBody","graphicsBody","soundBody","initSettingsAudioSliders","initSettingsInputListeners","initSettingsToggleListeners","activeElement","gameInProgress","isPaused","values","button","updateMouse","rect","getBoundingClientRect","clientX","left","clientY","top","CustomEvent","dispatchEvent","slider","masterSlider","fill","masterFill","masterValue","channel","interfaceSlider","interfaceFill","interfaceValue","musicSlider","musicFill","musicValue","sfxSlider","sfxFill","sfxValue","voiceSlider","voiceFill","voiceValue","handleMove","moveEvent","sliderValue","calculateSliderValue","updateSettingsSlider","updateSettings","handleUp","removeEventListener","input","deadzoneInput","settingPath","parse","parseFloat","rawValue","parsedValue","isNaN","pathParts","update","current","toggle","particleJSToggle","staticVfxToggle","ammoReservesPhysicsToggle","newValue","getAttribute","setAttribute","removeAttribute","initKeybindListeners","controlsSettings","initKeybindsInterface","action","newBinding","onBindingChange","element","getElementById","buttonName","find","toString","GameState","gameMaxWins","gameMaxPlayers","LobbyManager","inLobby","lobbyPlayers","showLobbyControls","lobby","lobbyOptions","roomId","isHost","maxWins","privateRoom","upgradesEnabled","updateDisplay","color","setupLobbyOptions","winsInputParams","inputId","privateToggleParams","toggleId","upgradesToggleParams","setToggle","setInput","displayLobbyPlayers","updateHostDisplay","setupLobbyToggle","val","setupLobbyInput","maxPlayers","elementProp","messageKey","getter","setter","handlerKey","handler","toggleParams","parseInt","inputParams","syncLobbyOptions","options","syncOption","bind","v","elementId","fn","label","format","displayValue","promotePlayer","targetPlayerId","kickPlayer","ParticlesManager","collisionsManager","decalsManager","renderingManager","particles","emitters","shrapnel","createParticles","particleId","direction","generateParticles","count","lifetime","noiseStrength","noiseScale","sizeOverLifetime","particle","age","collide","fade","hasCollided","initialSize","maxOpacity","paint","stain","updateParticles","particlesToRemove","noiseX","simplexNoise2D","noiseY","ageRatio","stampParticle","extendedLifeRatio","speedReduction","lifetimeExtension","drawParticles","ctx","globalAlpha","translate","rotate","createEmitter","generateEmitter","interval","offset","particleType","offsetX","offsetY","emissionInterval","lastEmission","updateEmitters","emittersToRemove","emitter","emitterId","worldX","worldY","coneSpread","randomSpread","baseSpeed","speedVariation","finalSpeed","generateGore","gorePool","gore","amount","goreAsset","getRandomInArray","getRandomNum","goreDecal","scale","ownerId","stampGore","bloodPool","blood","bloodAsset","bloodDecal","image","characterImages","Image","complete","onload","naturalWidth","drawSize","drawImage","spawnShrapnel","pieces","piece","generateUID","images","rotationSpeed","generateShrapnel","updateShrapnel","shrapnelToRemove","actualDamage","defense","newHealth","shooterId","source","wasKill","detail","stampShrapnel","drawShrapnel","RenderingManager","charManager","ammoBoxImages","clearCtx","customCtx","clearRect","drawCharacter","isMe","staticGhosts","_spectralGhosts","lastHidden","flashes","wasHidden","isHidden","isSpectral","t","ghost","alpha","filter","ghostPlayer","drawCharacterLayers","font","textAlign","displayName","substring","fillText","drawCharacterLayer","rig","body","weapon","head","headwear","drawUpgradeLayers","assets","drawCharacterPart","assetPath","partType","animationOffset","uniqueName","equipmentName","drawObjects","layers","img","drawProjectile","dirX","dirY","frontX","frontY","backX","backY","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","RoomController","lobbyManager","upgradeManager","wsManager","showRoomControls","getWebSocket","createRoom","isPrivateRoom","isUpgradesEnabled","connectWebSocket","showJoinRoomModal","joinRoomById","fetch","response","ok","json","data","modalContent","modalButtons","resetType","checkForRoomInURL","getRoomIdFromURL","URLSearchParams","search","roomIdDisplay","gameRoomIdDisplay","clipboard","writeText","RoomManager","currentRoom","ws","messageHandlers","setWebSocket","setupMessageHandler","readyState","WebSocket","OPEN","send","generateLink","history","pushState","origin","text","sendAdminCommand","getCurrentRoom","getRoomLink","param","onMessage","onmessage","plainMessage","SettingsManager","gameSettings","initSettings","interface","music","voice","graphics","physics","ammoReserves","renderBackgroundParticles","showStaticOverlay","merge","loadSettings","cached","upgradeFiles","resource","UpgradeManager","takenUniques","upgradesCompleted","rarityConfig","weight","MYTHICAL","ENLIGHTENED","HOLY","upgrades","initUpgrades","filename","upgrade","getUpgrades","availableUpgrades","selected","totalWeight","reduce","sum","getRarityWeight","selectedUpgrade","applyUpgrade","upgradeId","u","hasEquipment","removeUpgradeFromPool","resetUpgrades","equipmentId","hasUnique","uniqueId","getRarityColor","AmmoReservesUIController","ammoReserveIcon","projectileIcon","reserveBulletParticles","initAmmoReserveCanvas","renderAmmoReserves","requestAnimationFrame","updateAmmoReservePhysics","ammoReservesCtx","physicsEnabled","collisionHeight","collisionWidth","collisionX","collisionY","getAmmoReserveCollisionZone","vx","vy","width","height","removeAmmoFromReserveUI","shift","ammoReservesCanvas","bullet","j","ax","ay","va","vb","avg","UserInterface","decalCanvas","gameContainer","gameOptionsContainer","lobbyContainer","roomControls","upgradeContainer","lobbyPlayersList","userIdDisplay","playersInput","privateToggle","upgradesToggle","winsInput","chatContainer","leaderboard","leaderboardBody","leaderboardContainer","settingsContainer","accuracyStat","damageStat","luckStat","rangeStat","shotSpeedStat","speedStat","initInterfaceListeners","initInterface","getContext","clearDisplay","gameRoomId","disabled","from","playerDiv","colorDiv","backgroundColor","nameDiv","controlsDiv","promoteBtn","kickBtn","onkeydown","onConfirm","url","URL","pathname","startsWith","replace","soloGameWarning","page","fillElement","valueElement","percentage","round","sliderElement","mouseX","position","initSoundSliders","audioSettings","initSettingsInputs","initSettingsToggles","showRebindModal","buttonValue","onRebind","duplicateWarnings","warningIndex","gamepads","some","gp","checkDuplicate","binding","entries","handleKeyPress","cleanup","newKey","handleMouseDown","stopPropagation","mouseKey","handleGamepadPress","createLeaderboard","allPlayers","_","wins","kills","deaths","updateLeaderboardDisplay","localPlayer","entryA","entryB","entry","row","nameCell","winsCell","killsCell","deathsCell","clearLeaderboard","onStatChange","toFixed","Utility","lastFrameTime","performance","simplexTable","generateSimplexTable","activeTimeouts","deepMerge","deltaTime","callback","setTimeout","clearTimeoutCache","clearTimeout","getRandomInt","array","getShuffledArray","slice","getDotProduct","v1","v2","getReflection","normal","dot","forward","getDirection","targetPos","rootPos","getRandomDirection","degrees","randomAngle","getRandomColor","hexColor","mode","primaries","padStart","channels","dr","dg","lr","lg","lb","gray","hex","exec","table","Uint8Array","k","override","perm","F2","G2","s","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","grad3","t0","t1","t2","prefix","chars","base","inputElement","setSlider","sliderId","targetValue","maxValue","lerpTime","sliderContainer","sliderFill","querySelector","targetPercentage","currentWidthStr","currentPercentage","transition","setSpan","spanElement","spanId","WebsocketManager","wsProtocol","protocol","wsHost","port","hostname","host","onopen","onclose","CombatController","audioManager","luckController","particlesManager","playerController","projectiles","triggerAttack","startMelee","startBurst","updateAttack","isReloading","reloadStartTime","finishReload","nextBurstShotTime","ammoNeeded","burst","currentAmmo","targetDir","triggerBurstUniques","launchProjectile","canMelee","isMelee","lastMeleeTime","range","spawnOffset","spawnX","spawnY","meleeProjectile","distanceTraveled","lastShotTime","ammoToUse","emptyBlend","blendVolume","dir","overrides","canTriggerUnique","projectileAmount","projectileColor","projectileDamage","projectileLength","projectileRange","projectileSize","projectileSpeed","projectileSpread","bulletSpawnX","bulletSpawnY","shuffledUniques","luckRoll","triggerUnique","updateProjectiles","projectilesToRemove","aim","lerpFactor","lx","ly","norm","frameDistance","playerCollider","reflected","projectileId","newOwnerId","playerHit","dx2","dy2","triggerCollisionUniques","toggleAutoFire","canAutoFire","cachedBuffer","baseAngle","angleOffset","dirA","dirB","baseParams","succeededUniques","canReload","startReload","magazineSpace","ammoToReload","DashController","combatController","moveController","staminaController","startDash","isMoving","lastDashTime","inputX","inputY","inputLength","getMoveInput","requestStamina","drain","dashStartTime","dashSpeed","multiplier","playerVelocityX","playerVelocityY","updateDash","newX","newY","moved","distanceFromLastSent","lastSentX","lastSentY","lastSentMoveTime","LuckController","effectiveLuck","luck","chance","tanh","MoveController","ObjectsManager","spawnObject","baseObject","spawnAmmoBox","PlayerController","setupEventListeners","updatePlayerPosition","currentSpeed","targetVelocityX","targetVelocityY","acceleration","friction","healthSliderParams","bloodDirection","emission","me","other","targetId","playerDeath","triggerUniques","resetPlayerState","PlayerState","isStaminaRecoveryBlocked","lastStaminaDrainTime","staminaRecoveryBlockedUntil","statListeners","initPlayer","statPath","notifyChange","lastProp","StaminaController","updateStamina","staminaRecoveryPerFrame","Client","isRoundInProgress","roundWinner","gameWinner","admin","dashController","eventsManager","initClient","ammo","initGlobalEvents","spanParams","watchForInputs","startGame","resetGameState","handleRoomMessage","handleGameMessage","gameData","reason","newHostId","sliderLerpTime","hitPlayer","shooter","box","spawnMap","showGameControls","startGameLoop","winnerId","endRound","staminaSliderParams","resumeGame","isUnique","showWinnerContinueButton","returnToLobby","startNewRound","winnerEntry","endGame","pauseGame","startUpgradePhase","reservedSpawn","executeStartGame","gameLoop","dt","poll","checkActions","showWinnerWaitScreen","showUpgradeSelection","waitingDiv","continueBtn","upgradeDiv","imageDiv","alt","subtitleDiv","selectUpgrade","finishUpgrade","selectedUpgradeId"],"sourceRoot":""}