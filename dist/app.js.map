{"version":3,"file":"app.js","mappings":"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","sources":["webpack://websockettest/./src/client/Config.ts","webpack://websockettest/./src/client/Admin.ts","webpack://websockettest/./src/client/Animator.ts","webpack://websockettest/./src/client/AudioPool.ts","webpack://websockettest/./src/client/AudioManager.ts","webpack://websockettest/./src/client/CacheManager.ts","webpack://websockettest/./src/client/CharacterConfig.ts","webpack://websockettest/./src/client/CharacterManager.ts","webpack://websockettest/./src/client/ChatManager.ts","webpack://websockettest/./src/client/ControlsManager.ts","webpack://websockettest/./src/client/CollisionsManager.ts","webpack://websockettest/./src/client/DecalsManager.ts","webpack://websockettest/./src/client/EventsManager.ts","webpack://websockettest/./src/client/GameState.ts","webpack://websockettest/./src/client/LobbyManager.ts","webpack://websockettest/./src/client/ParticlesManager.ts","webpack://websockettest/./src/client/RenderingManager.ts","webpack://websockettest/./src/client/RoomController.ts","webpack://websockettest/./src/client/RoomManager.ts","webpack://websockettest/./src/client/SettingsManager.ts","webpack://websockettest/./src/client/Types.ts","webpack://websockettest/./src/client/UpgradeManager.ts","webpack://websockettest/./src/client/UserInterface.ts","webpack://websockettest/./src/client/Utility.ts","webpack://websockettest/./src/client/WebsocketManager.ts","webpack://websockettest/./src/client/player/AmmoReservesUIController.ts","webpack://websockettest/./src/client/player/CombatController.ts","webpack://websockettest/./src/client/player/DashController.ts","webpack://websockettest/./src/client/player/LuckController.ts","webpack://websockettest/./src/client/player/MoveController.ts","webpack://websockettest/./src/client/ObjectsManager.ts","webpack://websockettest/./src/client/player/PlayerController.ts","webpack://websockettest/./src/client/player/PlayerState.ts","webpack://websockettest/./src/client/player/StaminaController.ts","webpack://websockettest/./src/client/client.ts"],"sourcesContent":["export const PLAYER_DEFAULTS = {\r\n    ACTIONS: {\r\n        DASH: {\r\n            COOLDOWN: 1000, // ms\r\n            DRAIN: 40, // per dash\r\n            MULTIPLIER: 3,\r\n            TIME: 150 // ms\r\n        },\r\n        MELEE: {\r\n            COOLDOWN: 250, // ms\r\n            DAMAGE: 10,\r\n            DURATION: 100, // ms\r\n            RANGE: 10, // px\r\n            SIZE: 2, // px^2 area at tip\r\n        },\r\n        PRIMARY: {\r\n            BUFFER: 250, // ms\r\n            BURST: {\r\n                AMOUNT: 1,\r\n                DELAY: 75 // ms\r\n            },\r\n            MAGAZINE: {\r\n                SIZE: 10,\r\n                STARTING_RESERVE: 20,\r\n                MAX_RESERVE: 50\r\n            },\r\n            OFFSET: 10, // px\r\n            PROJECTILE: {\r\n                AMOUNT: 1,\r\n                COLOR: '#fff5beff',\r\n                DAMAGE: 25,\r\n                LENGTH: 15,\r\n                RANGE: 5,\r\n                SIZE: 1,\r\n                SPEED: 35,\r\n                SPREAD: 10,\r\n                UNIQUE: []\r\n            },\r\n            RELOAD: {\r\n                TIME: 750 // ms\r\n            }\r\n        },\r\n        SPRINT: {\r\n            DRAIN: 5, // per ms\r\n            MULTIPLIER: 1.75\r\n        },\r\n    },\r\n    DATA: {\r\n        ID_LENGTH: 12\r\n    },\r\n    EQUIPMENT: [],\r\n    FLAGS: {\r\n        HIDDEN: false,\r\n        INVULNERABLE: false\r\n    },\r\n    PHYSICS: {\r\n        ACCELERATION: 0.55,\r\n        FRICTION: 0.85\r\n    },\r\n    RIG: {\r\n        BODY: 'DEFAULT',\r\n        HEAD: 'DEFAULT',\r\n        HEADWEAR: 'DEFAULT',\r\n        WEAPON: 'GLOCK'\r\n    },\r\n    STATS: {\r\n        DEFENSE: 0,\r\n        HEALTH: {\r\n            MAX: 100\r\n        },\r\n        LUCK: 1,\r\n        SIZE: 100, // px^2\r\n        SPEED: 6,\r\n        STAMINA: {\r\n            MAX: 100,\r\n            RECOVERY: {\r\n                DELAY: 1000,\r\n                RATE: 25\r\n            }\r\n        }\r\n    },\r\n    UNIQUE: [],\r\n    VISUAL: {\r\n        ID_DISPLAY_OFFSET: 25\r\n    }\r\n};\r\n\r\nexport const OBJECT_DEFAULTS = {\r\n    DATA: {\r\n        ID_LENGTH: 8\r\n    },\r\n};\r\n\r\nexport const DECALS = {\r\n    PROJECTILE: {\r\n        RADIUS: {\r\n            MIN: 4,\r\n            MAX: 8\r\n        },\r\n        DENSITY: {\r\n            MIN: 0.175,\r\n            MAX: 0.35\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.15,\r\n            MAX: 0.25\r\n        },\r\n        VARIATION: 0.215,\r\n        COLOR: \"#000000\"\r\n    },\r\n    BLOOD: {\r\n        RADIUS: {\r\n            MIN: 5,\r\n            MAX: 17.5\r\n        },\r\n        DENSITY: {\r\n            MIN: 0.1,\r\n            MAX: 0.175\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.275,\r\n            MAX: 0.315\r\n        },\r\n        VARIATION: 0.5,\r\n        COLOR: \"#781414\"\r\n    },\r\n    EXPLOSION: {\r\n        RADIUS: {\r\n            MIN: 25,\r\n            MAX: 40\r\n        },\r\n        DENSITY: {\r\n            MIN: 0.375,\r\n            MAX: 0.575\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.35,\r\n            MAX: 0.525\r\n        },\r\n        VARIATION: 0.2,\r\n        COLOR: \"#434343\"\r\n    }\r\n};\r\n\r\nexport const PARTICLES = {\r\n    BLOOD_DRIP: {\r\n        COUNT: {\r\n            MIN: 1,\r\n            MAX: 4\r\n        },\r\n        LIFETIME: {\r\n            MIN: 800,\r\n            MAX: 1000\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            },\r\n            SCALE: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.25,\r\n            MAX: 0.75\r\n        },\r\n        SPEED: {\r\n            MIN: 0.25,\r\n            MAX: 0.75\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        SIZE: {\r\n            MIN: 0.125,\r\n            MAX: 2.275\r\n        },\r\n        TORQUE: {\r\n            MIN: -720,\r\n            MAX: 720\r\n        },\r\n        COLLIDE: true,\r\n        FADE: true,\r\n        PAINT: false,\r\n        SPREAD: 0.25,\r\n        STAIN: true,\r\n        COLOR: \"#8b1a1a\"\r\n    },\r\n    BLOOD_SPRAY: {\r\n        COUNT: {\r\n            MIN: 4,\r\n            MAX: 12\r\n        },\r\n        LIFETIME: {\r\n            MIN: 150,\r\n            MAX: 1200\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            },\r\n            SCALE: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.425,\r\n            MAX: 0.775\r\n        },\r\n        SPEED: {\r\n            MIN: 1.5,\r\n            MAX: 4.75\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        SIZE: {\r\n            MIN: 0.75,\r\n            MAX: 3.5\r\n        },\r\n        TORQUE: {\r\n            MIN: -720,\r\n            MAX: 720\r\n        },\r\n        COLLIDE: true,\r\n        FADE: false,\r\n        PAINT: true,\r\n        SPREAD: 0.425,\r\n        STAIN: true,\r\n        COLOR: \"#8b1a1a\"\r\n    },\r\n    MUZZLE_FLASH: {\r\n        COUNT: {\r\n            MIN: 8,\r\n            MAX: 15\r\n        },\r\n        LIFETIME: {\r\n            MIN: 150,\r\n            MAX: 300\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            },\r\n            SCALE: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.4,\r\n            MAX: 0.8\r\n        },\r\n        SPEED: {\r\n            MIN: 4,\r\n            MAX: 10\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        SIZE: {\r\n            MIN: 1,\r\n            MAX: 3\r\n        },\r\n        TORQUE: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        COLLIDE: false,\r\n        FADE: true,\r\n        PAINT: false,\r\n        SPREAD: 0.6,\r\n        STAIN: false,\r\n        COLOR: \"#ffaa00\"\r\n    },\r\n    SHELL_CASING: {\r\n        COUNT: {\r\n            MIN: 1,\r\n            MAX: 1\r\n        },\r\n        LIFETIME: {\r\n            MIN: 250,\r\n            MAX: 550\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            },\r\n            SCALE: {\r\n                MIN: 0,\r\n                MAX: 0\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 1.0,\r\n            MAX: 1.0\r\n        },\r\n        SPEED: {\r\n            MIN: 5,\r\n            MAX: 8\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        SIZE: {\r\n            MIN: 2,\r\n            MAX: 2\r\n        },\r\n        TORQUE: {\r\n            MIN: -720,\r\n            MAX: 720\r\n        },\r\n        COLLIDE: true,\r\n        FADE: false,\r\n        PAINT: true,\r\n        SPREAD: 0.4,\r\n        STAIN: false,\r\n        COLOR: \"#d4af37\"\r\n    },\r\n    SMOKE: {\r\n        COUNT: {\r\n            MIN: 3,\r\n            MAX: 6\r\n        },\r\n        LIFETIME: {\r\n            MIN: 800,\r\n            MAX: 1400\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0.1,\r\n                MAX: 0.3\r\n            },\r\n            SCALE: {\r\n                MIN: 40,\r\n                MAX: 80\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.15,\r\n            MAX: 0.35\r\n        },\r\n        SPEED: {\r\n            MIN: 0.5,\r\n            MAX: 1.5\r\n        },\r\n        SIZE: {\r\n            MIN: 4,\r\n            MAX: 8\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 2,\r\n            MAX: 3\r\n        },\r\n        TORQUE: {\r\n            MIN: -180,\r\n            MAX: 180\r\n        },\r\n        COLLIDE: false,\r\n        FADE: true,\r\n        PAINT: false,\r\n        SPREAD: 0.4,\r\n        STAIN: false,\r\n        COLOR: \"#5a5a5a\"\r\n    },\r\n    SPARKS: {\r\n        COUNT: {\r\n            MIN: 8,\r\n            MAX: 16\r\n        },\r\n        LIFETIME: {\r\n            MIN: 150,\r\n            MAX: 300\r\n        },\r\n        NOISE: {\r\n            STRENGTH: {\r\n                MIN: 0.25,\r\n                MAX: 5\r\n            },\r\n            SCALE: {\r\n                MIN: 0.25,\r\n                MAX: 1.5\r\n            }\r\n        },\r\n        OPACITY: {\r\n            MIN: 0.4,\r\n            MAX: 0.8\r\n        },\r\n        SPEED: {\r\n            MIN: 4,\r\n            MAX: 10\r\n        },\r\n        SIZE: {\r\n            MIN: 1,\r\n            MAX: 3\r\n        },\r\n        SIZE_OVER_LIFETIME: {\r\n            MIN: 0,\r\n            MAX: 0\r\n        },\r\n        TORQUE: {\r\n            MIN: -720,\r\n            MAX: 720\r\n        },\r\n        COLLIDE: false,\r\n        FADE: true,\r\n        PAINT: false,\r\n        SPREAD: 0.6,\r\n        STAIN: false,\r\n        COLOR: \"#ffaa00\"\r\n    }\r\n};\r\n\r\nexport const SHRAPNEL = {\r\n    PIECE: [\r\n        '/assets/img/effects/shrapnel/shrapnel_00.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_01.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_02.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_03.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_04.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_05.png'\r\n    ]\r\n};\r\n\r\nexport const AMMO_BOX = {\r\n    BASE: '/assets/img/object/ammobox/base.png',\r\n    BULLETS: '/assets/img/object/ammobox/bullets.png',\r\n    LID: '/assets/img/object/ammobox/lid.png',\r\n}\r\n\r\nexport const CANVAS = {\r\n    WIDTH: 800,\r\n    HEIGHT: 600,\r\n    BORDER_COLOR: '#333',\r\n    BORDER_WIDTH: 2,\r\n    BORDER_MARGIN: 15,\r\n};\r\n\r\nexport const GAMEPAD_MAP = {\r\n    // Face buttons\r\n    A: 0,\r\n    B: 1,\r\n    X: 2,\r\n    Y: 3,\r\n\r\n    // Bumpers\r\n    LB: 4,\r\n    RB: 5,\r\n\r\n    // Triggers\r\n    LT: 6,\r\n    RT: 7,\r\n\r\n    // System buttons\r\n    SELECT: 8,\r\n    START: 9,\r\n\r\n    // Stick clicks\r\n    L_STICK: 10,\r\n    R_STICK: 11,\r\n\r\n    // D-Pad\r\n    DPAD_UP: 12,\r\n    DPAD_DOWN: 13,\r\n    DPAD_LEFT: 14,\r\n    DPAD_RIGHT: 15,\r\n\r\n    // Home/Guide button\r\n    HOME: 16,\r\n\r\n    // Axes\r\n    AXES: {\r\n        LEFT_STICK_X: 0,\r\n        LEFT_STICK_Y: 1,\r\n        RIGHT_STICK_X: 2,\r\n        RIGHT_STICK_Y: 3\r\n    }\r\n};\r\n\r\nexport const GAME = {\r\n    CHARACTER_SIZE: 650,\r\n    CONNECTION_TIMEOUT: 1000,\r\n    CONTROLS: {\r\n        KEYBINDS: {\r\n            MELEE: 'mouse2',\r\n            MOVE_UP: 'w',\r\n            MOVE_LEFT: 'a',\r\n            MOVE_DOWN: 's',\r\n            MOVE_RIGHT: 'd',\r\n            RELOAD: 'r',\r\n            SPRINT: 'shift',\r\n            ATTACK: 'mouse1',\r\n            DASH: ' '\r\n        },\r\n        GAMEPAD: {\r\n            MELEE: GAMEPAD_MAP.RB,\r\n            DASH: GAMEPAD_MAP.LB,\r\n            DEADZONE: 0.2,\r\n            RELOAD: GAMEPAD_MAP.A,\r\n            SPRINT: GAMEPAD_MAP.LT,\r\n            ATTACK: GAMEPAD_MAP.RT\r\n        }\r\n    },\r\n    GAME_END_DELAY: 5000,\r\n    GRAPHICS: {\r\n        PHYSICS: {\r\n            AMMORESERVES: true\r\n        },\r\n        STATIC_OVERLAY: true,\r\n        BACKGROUND_PARTICLES: true\r\n    },\r\n    MAX_PLAYERS: 4,\r\n    MAX_WINS: 5,\r\n    RECONNECT_DELAY: 3000,\r\n    ROUND_END_DELAY: 3000,\r\n    NEW_ROUND_DELAY: 500\r\n};\r\n\r\nexport const UI = {\r\n    PLAYER_ID_LENGTH: 6,\r\n    FONT: '12px Arial',\r\n    TEXT_COLOR: '#fff'\r\n};\r\n\r\nexport const ROOM = {\r\n    ID_PREFIX: 'room_',\r\n    ID_LENGTH: 10\r\n};\r\n\r\nexport const CHAT = {\r\n    MAX_MESSAGES: 100,\r\n    MAX_MESSAGE_LENGTH: 200\r\n};\r\n\r\nexport const NETWORK = {\r\n    MOVE_INTERVAL: 10, //ms\r\n    ROTATE_INTERVAL: 25 //ms\r\n}\r\n\r\nexport const AUDIO = {\r\n    MIXER: {\r\n        MASTER: 1.0,\r\n        INTERFACE: 0.85,\r\n        MUSIC: 0.75,\r\n        SFX: 0.9,\r\n        VOICE: 1.0\r\n    },\r\n    SETTINGS: {\r\n        MAX_CONCURRENT: 5, // Max simultaneous instances of same sound\r\n        POOL_SIZE: 10, // Number of Audio objects per sound\r\n        PRELOAD_SOUNDS: true\r\n    }\r\n};\r\n\r\nexport const SFX = {\r\n    IMPACT: {\r\n        FLESH: {\r\n            BULLET: [\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_00.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_01.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_02.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_03.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_04.ogg',\r\n                '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_05.ogg'\r\n            ]\r\n        },\r\n        METAL: {\r\n            BULLET: [\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_00.ogg',\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_01.ogg',\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_02.ogg',\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_03.ogg',\r\n                '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_04.ogg'\r\n            ]\r\n        }\r\n    },\r\n    PLAYER: {\r\n        MALE: {\r\n            GRUNT: [\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_00.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_01.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_02.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_03.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_04.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_05.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_06.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_07.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_08.ogg',\r\n                '/assets/audio/sfx/player/voice/male/player_male_hit_09.ogg'\r\n            ]\r\n        },\r\n        // FEMALE: {\r\n        //     GRUNT: [\r\n\r\n        //     ]\r\n        // }\r\n    },\r\n    WEAPON: {\r\n        GLOCK: {\r\n            ATTACK: [\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_00.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_01.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_02.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_03.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_04.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_attack_05.ogg'\r\n            ],\r\n            EMPTY: [\r\n                '/assets/audio/sfx/weapons/glock/glock_empty_00.ogg'\r\n            ],\r\n            RELOAD: {\r\n                END: [\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_end_00.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_end_01.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_end_02.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_end_03.ogg'\r\n                    \r\n                ],\r\n                START: [\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_start_00.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_start_01.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_start_02.ogg',\r\n                    '/assets/audio/sfx/weapons/glock/glock_reload_start_03.ogg'\r\n                ]\r\n            },\r\n            SHELL: [\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_00.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_01.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_02.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_03.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_04.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_05.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_06.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_07.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_08.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_09.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_10.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_11.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_12.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_13.ogg',\r\n                '/assets/audio/sfx/weapons/glock/glock_shell_14.ogg'\r\n            ],\r\n        }\r\n    }\r\n};","import { CacheManager } from \"./CacheManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nconst ADMIN_KEYS = {\r\n    KEYS: ['Control', 'Shift', 'Alt', '-', '+'],\r\n    REQUIRED_COUNT: 5\r\n} as const;\r\n\r\nconst CONSOLE_KEY = 'Control';\r\n\r\nexport class Admin {\r\n    private adminKeysHeld: Set<string> = new Set();\r\n\r\n    constructor(private cacheManager: CacheManager, private ui: UserInterface) {\r\n        this.initKeyListener();\r\n        this.initConsoleKeybinds();\r\n    }\r\n\r\n    // #region [ Admin (Locked) ]\r\n    //\r\n    /**\r\n     * Listens for admin key combo and shows modal when detected.\r\n     */\r\n    private initKeyListener(): void {\r\n        window.addEventListener('keydown', (e) => {\r\n            this.adminKeysHeld.add(e.key);\r\n            this.checkAdminCombo();\r\n        });\r\n\r\n        window.addEventListener('keyup', (e) => {\r\n            this.adminKeysHeld.delete(e.key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks held keys against the ADMIN_KEYS configuration.\r\n     */\r\n    private checkAdminCombo(): void {\r\n        const hasAllKeys = ADMIN_KEYS.KEYS.every(key => this.adminKeysHeld.has(key));\r\n\r\n        if (hasAllKeys && this.adminKeysHeld.size === ADMIN_KEYS.REQUIRED_COUNT) {\r\n            this.adminKeysHeld.clear(); // Prevent repeated triggers\r\n            this.showAdminModal();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows the admin modal using the general website modal.\r\n     */\r\n    private showAdminModal(): void {\r\n        if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalConfirmButton ||\r\n            !this.ui.modalCancelButton || !this.ui.modalErrorDiv || !this.ui.modalText) return;\r\n\r\n        this.ui.modal.classList.remove('hidden');\r\n        this.ui.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.ui.modalInput.value = '';\r\n        this.ui.modalInput.style.display = 'block';\r\n        this.ui.modalErrorDiv.textContent = '';\r\n        this.ui.modalText.textContent = 'Enter Admin Command.';\r\n        this.ui.modalConfirmButton.textContent = 'Execute';\r\n        this.ui.modalCancelButton.textContent = 'Cancel';\r\n\r\n        this.ui.modalInput.focus();\r\n\r\n        this.ui.modalConfirmButton.onclick = () => {\r\n            if (!this.ui.modalInput || !this.ui.modalErrorDiv) return;\r\n\r\n            const value = this.ui.modalInput.value.trim();\r\n            if (!value.includes(':')) {\r\n                this.ui.modalErrorDiv.textContent = 'Invalid format.';\r\n                return;\r\n            }\r\n\r\n            const [command, key] = value.split(':');\r\n            if (!command || !key) {\r\n                this.ui.modalErrorDiv.textContent = 'Invalid format.';\r\n                return;\r\n            }\r\n\r\n            this.executeAdminCommand(command.trim(), key.trim());\r\n            this.ui.closeModal();\r\n        };\r\n\r\n        this.ui.modalCancelButton.onclick = () => this.ui.closeModal();\r\n    }\r\n\r\n    /**\r\n     * Executes a command that is in the input field of the admin modal.\r\n     */\r\n    private executeAdminCommand(command: string, key: string): void {\r\n        // This will be called from your main game class with the WebSocket\r\n        console.log(`Admin command: ${command} with key: ${key}`);\r\n\r\n        // You'll expose this via a callback or event system\r\n        this.onAdminCommand?.(command, key);\r\n    }\r\n\r\n    // Public callback for Client.ts\r\n    public onAdminCommand?: (command: string, key: string) => void;\r\n\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Console ]\r\n    //\r\n    /**\r\n     * Clears cache with tilde key\r\n     */\r\n    private initConsoleKeybinds(): void {\r\n        document.addEventListener('keydown', (e) => {\r\n            if (!e.getModifierState(CONSOLE_KEY)) return;\r\n            if (e.key === '`') { e.preventDefault(); this.clearCacheCommand(); }\r\n        });\r\n    }\r\n\r\n    private clearCacheCommand(): void {\r\n        this.cacheManager.clear().then(() => {\r\n            console.log('Cache cleared! Reload the page.');\r\n            location.reload();\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { AnimationParams, CharacterAnimation, Vec2 } from \"./Types\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { NETWORK } from \"./Config\";\r\n\r\nexport class Animator {\r\n    private characterAnimations: CharacterAnimation = new Map();\r\n    public characterOffsets: Map<string, Vec2> = new Map();\r\n\r\n    constructor(private playerState: PlayerState, private roomManager: RoomManager, private userId: string) { }\r\n\r\n    // #region [ Animation ]\r\n    /**\r\n     * Animates a specific character part locally with generateCharacterAnimation and broadcasts for other clients to sync animations.\r\n     */\r\n    public animateCharacterPart(params: AnimationParams): void {\r\n        this.generateCharacterAnimation(params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'character-animation',\r\n            params: params\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Rotates a specific part of a player with the passed rotation.\r\n     */\r\n    public rotateCharacterPart(playerId: string, rotation: number): void {\r\n        if (playerId === this.userId) {\r\n            this.playerState.myPlayer.transform.rot = rotation;\r\n        } else {\r\n            const player = this.playerState.players.get(playerId);\r\n            if (!player) return;\r\n            player.transform.rot = rotation;\r\n        }\r\n\r\n        const now = Date.now();\r\n        const rotationDiff = Math.abs(rotation - this.playerState.lastSentRotation);\r\n        if (rotationDiff > 0.1 && now - this.playerState.lastSentRotationTime >= NETWORK.ROTATE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    rot: this.playerState.myPlayer.transform.rot\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentRotation = rotation;\r\n            this.playerState.lastSentRotationTime = now;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to a network request to process a character animation.\r\n     */\r\n    public animateCharacterPartNetwork(params: AnimationParams): void {\r\n        this.generateCharacterAnimation(params);\r\n    }\r\n\r\n    /**\r\n     * Assembles the character animation and adds it to the characterAnimations mapping for playback during update processing.\r\n     */\r\n    private generateCharacterAnimation(params: AnimationParams): void {\r\n        const { playerId, part, frames, duration, partIndex } = params;\r\n        const animationId = `${playerId}_${part}_${partIndex || 0}`;\r\n\r\n        this.characterAnimations.set(animationId, {\r\n            playerId: playerId,\r\n            part: part,\r\n            partIndex: partIndex,\r\n            frames: frames,\r\n            duration: duration,\r\n            startTime: Date.now(),\r\n            originalOffset: { x: 0, y: 0 }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Process visual character animations by updating part positions.\r\n     */\r\n    public updateCharacterAnimations(delta: number): void {\r\n        const animationsToRemove: string[] = [];\r\n        const currentTime = Date.now();\r\n\r\n        this.characterAnimations.forEach((animation, animationId) => {\r\n            const elapsed = currentTime - animation.startTime;\r\n            const progress = elapsed / animation.duration;\r\n\r\n            if (animation.duration !== 0 && progress >= 1) {\r\n                // Animation complete, remove it\r\n                animationsToRemove.push(animationId);\r\n                return;\r\n            }\r\n\r\n            // Find current keyframe\r\n            const frameKeys = Object.keys(animation.frames).map(Number).sort((a, b) => a - b);\r\n            let currentFrameIndex = 0;\r\n\r\n            for (let i = 0; i < frameKeys.length - 1; i++) {\r\n                const frameProgress = frameKeys[i];\r\n                const nextFrameProgress = frameKeys[i + 1];\r\n\r\n                if (progress >= frameProgress && progress < nextFrameProgress) {\r\n                    currentFrameIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let lerpedX, lerpedY;\r\n            if (progress >= 1) { // Hold at last keyframe for infinite animation\r\n                const lastFrame = animation.frames[frameKeys[frameKeys.length - 1]];\r\n                lerpedX = lastFrame.x;\r\n                lerpedY = lastFrame.y;\r\n            } else { // Normal animation with no lerp\r\n                const currentFrame = animation.frames[frameKeys[currentFrameIndex]];\r\n                const nextFrame = animation.frames[frameKeys[currentFrameIndex + 1]] || currentFrame;\r\n                const frameProgress = (progress - frameKeys[currentFrameIndex]) / (frameKeys[currentFrameIndex + 1] - frameKeys[currentFrameIndex]) || 0;\r\n                lerpedX = currentFrame.x + (nextFrame.x - currentFrame.x) * frameProgress;\r\n                lerpedY = currentFrame.y + (nextFrame.y - currentFrame.y) * frameProgress;\r\n            }\r\n\r\n            this.characterOffsets.set(animationId, { x: lerpedX, y: lerpedY });\r\n        });\r\n\r\n        // Remove completed animations\r\n        animationsToRemove.forEach(id => {\r\n            this.characterAnimations.delete(id);\r\n            if (this.characterOffsets) {\r\n                this.characterOffsets.delete(id);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears all active character animations and offsets.\r\n     */\r\n    public clearAllAnimations(): void {\r\n        this.characterAnimations.clear();\r\n        this.characterOffsets.clear();\r\n    }\r\n    //\r\n    // #endregion\r\n}","export class AudioPool {\r\n    private pools: Map<string, HTMLAudioElement[]> = new Map();\r\n    private activeAudio: Map<string, HTMLAudioElement[]> = new Map();\r\n\r\n    constructor(private poolSize: number = 10, private maxConcurrent: number = 5) { }\r\n\r\n    private createPool(src: string): HTMLAudioElement[] {\r\n        const pool: HTMLAudioElement[] = [];\r\n        for (let i = 0; i < this.poolSize; i++) {\r\n            const audio = new Audio(src);\r\n            audio.preload = 'auto';\r\n            audio.addEventListener('ended', () => this.returnToPool(src, audio));\r\n            audio.addEventListener('pause', () => this.returnToPool(src, audio));\r\n            pool.push(audio);\r\n        }\r\n        return pool;\r\n    }\r\n\r\n    private returnToPool(src: string, audio: HTMLAudioElement): void {\r\n        const active = this.activeAudio.get(src);\r\n        if (active) {\r\n            const index = active.indexOf(audio);\r\n            if (index > -1) {\r\n                active.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        const pool = this.pools.get(src);\r\n        if (pool && !pool.includes(audio)) {\r\n            pool.push(audio);\r\n        }\r\n    }\r\n\r\n    public getAudio(src: string): HTMLAudioElement | null {\r\n        // Check if we're at max concurrent instances\r\n        const active = this.activeAudio.get(src) || [];\r\n        if (active.length >= this.maxConcurrent) {\r\n            return null; // Skip playing if too many instances\r\n        }\r\n\r\n        // Get or create pool for this sound\r\n        let pool = this.pools.get(src);\r\n        if (!pool) {\r\n            pool = this.createPool(src);\r\n            this.pools.set(src, pool);\r\n            this.activeAudio.set(src, []);\r\n        }\r\n\r\n        // Get available audio from pool\r\n        const audio = pool.pop();\r\n        if (audio) {\r\n            // Reset audio properties\r\n            audio.currentTime = 0;\r\n            audio.volume = 1;\r\n            audio.playbackRate = 1;\r\n            audio.loop = false;\r\n\r\n            // Move to active list\r\n            active.push(audio);\r\n            return audio;\r\n        }\r\n\r\n        return null; // Pool exhausted\r\n    }\r\n\r\n    public preloadSound(src: string): void {\r\n        if (!this.pools.has(src)) {\r\n            const pool = this.createPool(src);\r\n            this.pools.set(src, pool);\r\n            this.activeAudio.set(src, []);\r\n        }\r\n    }\r\n}","import { AUDIO, CANVAS } from \"./Config\";\r\n\r\nimport { AudioPool } from \"./AudioPool\";\r\nimport { AudioParams } from \"./Types\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class AudioManager {\r\n    private audioPool: AudioPool;\r\n\r\n    constructor(\r\n        private roomManager: RoomManager,\r\n        private settingsManager: SettingsManager,\r\n        private utility: Utility\r\n    ) {\r\n        this.audioPool = new AudioPool(AUDIO.SETTINGS.POOL_SIZE, AUDIO.SETTINGS.MAX_CONCURRENT); //TODO: Abstract config reliance\r\n    }\r\n\r\n    // #region [ Playback ]\r\n    //\r\n    /**\r\n     * Plays an audio source using the predefined pool for the audio source.\r\n     */\r\n    public playAudio(params: AudioParams): void {\r\n        const audio = this.audioPool.getAudio(params.src);\r\n        if (!audio) {\r\n            console.warn(`Audio pool exhausted or max concurrent reached for: ${params.src}`);\r\n            return;\r\n        }\r\n\r\n        // [ Volume ]\r\n        let volume = 1.0;\r\n        if (params.volume) {\r\n            volume = params.volume.min + Math.random() * (params.volume.max - params.volume.min);\r\n        }\r\n\r\n        // [ 2D Spatial Audio ]\r\n        const blend = params.spatial?.blend ?? 0;\r\n        if (blend > 0 && params.spatial?.pos) {\r\n            const dx = params.spatial.pos.x - params.listener.x;\r\n            const dy = params.spatial.pos.y - params.listener.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            let distanceVolume: number;\r\n\r\n            if (params.spatial.rolloff) {\r\n                const rolloffType = params.spatial.rolloff.type || 'linear';\r\n                const factor = params.spatial.rolloff.factor;\r\n                const maxDistance = params.spatial.rolloff.distance;\r\n\r\n                if (rolloffType === 'logarithmic') {\r\n                    // Factor determines reference distance as % of max distance\r\n                    const referenceDistance = maxDistance * factor;\r\n\r\n                    if (distance < referenceDistance) {\r\n                        distanceVolume = 1.0;\r\n                    } else {\r\n                        const normalizedDistance = (distance - referenceDistance) / (maxDistance - referenceDistance);\r\n                        distanceVolume = Math.max(0, 1 - Math.pow(normalizedDistance, 0.5));\r\n                    }\r\n                } else {\r\n                    // Linear: factor is just multiplier on falloff curve\r\n                    distanceVolume = Math.max(0, 1 - (distance / maxDistance) * factor);\r\n                }\r\n            } else {\r\n                // Default: simple linear falloff using canvas dimensions as fallback\r\n                const maxDistance = Math.max(CANVAS.WIDTH, CANVAS.HEIGHT); //TODO: Remove reliance on config\r\n                distanceVolume = Math.max(0, 1 - (distance / maxDistance));\r\n            }\r\n\r\n            volume *= (1 - blend) + (distanceVolume * blend);\r\n        }\r\n\r\n        // [ Mixer ]\r\n        const outputGroup = params.output?.toLowerCase() || null;\r\n        const mixer = this.settingsManager.getSettings().audio.mixer;\r\n        if (outputGroup && mixer[outputGroup as keyof typeof mixer] !== undefined) {\r\n            volume *= mixer[outputGroup as keyof typeof mixer];\r\n        }\r\n\r\n        volume *= this.settingsManager.getSettings().audio.mixer.master;\r\n        audio.volume = Math.max(0, Math.min(1, volume));\r\n\r\n        // [ Pitch ]\r\n        if (params.pitch) {\r\n            const pitch = params.pitch.min + Math.random() * (params.pitch.max - params.pitch.min);\r\n            audio.playbackRate = Math.max(0.25, Math.min(4, pitch));\r\n        }\r\n\r\n        // [ Loop ]\r\n        if (params.loop !== undefined) {\r\n            audio.loop = params.loop;\r\n        }\r\n\r\n        // [ Trigger Delay ]\r\n        let delayMs = 0;\r\n        if (params.delay) {\r\n            delayMs = (params.delay.min + Math.random() * (params.delay.max - params.delay.min)) * 1000; // Convert to seconds\r\n        }\r\n\r\n        this.utility.safeTimeout(() => {\r\n            audio.play().catch((error: unknown) => {\r\n                console.warn('Audio play failed:', error);\r\n            });\r\n        }, delayMs);\r\n    }\r\n\r\n    /**\r\n     * Syncs an audio trigger over the network.\r\n     */\r\n    public playAudioNetwork(params: AudioParams): void {\r\n        this.playAudio(params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'play-audio',\r\n            params: params\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Preloading ]\r\n    /**\r\n     * Preloads all audio of a single filetype for the game.\r\n     */\r\n    public preloadAudioAssets(sfx: any, extension: string): void {\r\n        this.preloadSFX(sfx, extension);\r\n    }\r\n\r\n    /**\r\n     * Iterate through the passed audio object, and preload them for the session.\r\n     */\r\n    private preloadSFX(obj: any, extension: string): void {\r\n        for (const key in obj) {\r\n            const value = obj[key];\r\n\r\n            if (Array.isArray(value)) {\r\n                // If it's an array, assume it's an array of audio file paths\r\n                value.forEach(src => {\r\n                    if (typeof src === 'string' && (src.endsWith(extension))) { // All sound files should be .ogg\r\n                        this.audioPool.preloadSound(src);\r\n                    }\r\n                });\r\n            } else if (typeof value === 'object' && value !== null) {\r\n                // If it's an object, recurse into it\r\n                this.preloadSFX(value, extension);\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","export class CacheManager {\r\n    private dbName = 'SaltpeterCache';\r\n    private dbVersion = 1;\r\n    private db: IDBDatabase | null = null;\r\n\r\n    constructor() {\r\n        this.initDB();\r\n    }\r\n\r\n    /**\r\n     * Initializes the IndexedDB database\r\n     */\r\n    private async initDB(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = indexedDB.open(this.dbName, this.dbVersion);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => {\r\n                this.db = request.result;\r\n                resolve();\r\n            };\r\n\r\n            request.onupgradeneeded = (event) => {\r\n                const db = (event.target as IDBOpenDBRequest).result;\r\n                if (!db.objectStoreNames.contains('settings')) {\r\n                    db.createObjectStore('settings');\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Writes any value to the cache\r\n     */\r\n    public async write(key: string, value: any): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.put(value, key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reads a value from the cache\r\n     */\r\n    public async read(key: string): Promise<any> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readonly');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.get(key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve(request.result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes a value from the cache\r\n     */\r\n    public async delete(key: string): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.delete(key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears all cached data\r\n     */\r\n    public async clear(): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.clear();\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n}","export class CharacterConfig {\r\n    public WEAPON = {\r\n        GLOCK: [\r\n            '/assets/img/weapon/glock/body.png',\r\n            '/assets/img/weapon/glock/slide.png',\r\n        ],\r\n        KNIFE: [\r\n            '/assets/img/weapon/melee/knife_00.png'\r\n        ]\r\n    };\r\n\r\n    public BODY = {\r\n        DEFAULT: '/assets/img/char/default/body.png'\r\n    };\r\n\r\n    public HEAD = {\r\n        DEFAULT: '/assets/img/char/default/head.png'\r\n    };\r\n\r\n    public HEADWEAR = {\r\n        DEFAULT: '/assets/img/char/default/headwear.png'\r\n    };\r\n\r\n    public UPGRADES = {\r\n        KINETIC_BRAIN: '/assets/img/char/upgrades/kineticbrain.png'\r\n    };\r\n\r\n    public CHARACTER_DECALS = {\r\n        DEFAULT: {\r\n            BLOOD: [\r\n                '/assets/img/effects/blood/blood_00.png',\r\n                '/assets/img/effects/blood/blood_01.png',\r\n                '/assets/img/effects/blood/blood_02.png',\r\n                '/assets/img/effects/blood/blood_03.png',\r\n                '/assets/img/effects/blood/blood_04.png'\r\n            ],\r\n            GORE: [\r\n                '/assets/img/effects/gore/gore_00.png',\r\n                '/assets/img/effects/gore/gore_01.png',\r\n                '/assets/img/effects/gore/gore_02.png',\r\n                '/assets/img/effects/gore/gore_03.png',\r\n                '/assets/img/effects/gore/gore_04.png',\r\n                '/assets/img/effects/gore/gore_05.png',\r\n                '/assets/img/effects/gore/gore_06.png',\r\n                '/assets/img/effects/gore/gore_07.png',\r\n                '/assets/img/effects/gore/gore_08.png',\r\n                '/assets/img/effects/gore/gore_09.png',\r\n                '/assets/img/effects/gore/gore_10.png',\r\n                '/assets/img/effects/gore/gore_11.png',\r\n                '/assets/img/effects/gore/gore_12.png',\r\n                '/assets/img/effects/gore/gore_13.png'\r\n            ]\r\n        }\r\n    }\r\n\r\n    constructor() { }\r\n}","import { CharacterConfig } from \"./CharacterConfig\";\r\nimport { CharacterLayer } from \"./Types\";\r\n\r\nexport class CharacterManager {\r\n    constructor(private charConfig: CharacterConfig) { }\r\n\r\n    public getCharacterAsset(layer: CharacterLayer, variant: string): string | string[] {\r\n        switch (layer) {\r\n            case 'BODY':\r\n                return this.charConfig.BODY[variant as keyof typeof this.charConfig.BODY] || this.charConfig.BODY.DEFAULT;\r\n            case 'WEAPON':\r\n                return this.charConfig.WEAPON[variant as keyof typeof this.charConfig.WEAPON] || this.charConfig.WEAPON.GLOCK;\r\n            case 'HEAD':\r\n                return this.charConfig.HEAD[variant as keyof typeof this.charConfig.HEAD] || this.charConfig.HEAD.DEFAULT;\r\n            case 'HEADWEAR':\r\n                return this.charConfig.HEADWEAR[variant as keyof typeof this.charConfig.HEADWEAR] || this.charConfig.HEADWEAR.DEFAULT;\r\n            case 'UPGRADES':\r\n                return variant;\r\n            default:\r\n                throw new Error(`Unknown character layer: ${layer}`);\r\n        }\r\n    }\r\n\r\n    public getUpgradeVisual(upgradeName: string): string | null {\r\n        const upperName = upgradeName.toUpperCase();\r\n        return this.charConfig.UPGRADES[upperName as keyof typeof this.charConfig.UPGRADES] || null;\r\n    }\r\n}","import { CHAT } from \"./Config\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { ChatMessage } from \"./Types\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nexport class ChatManager {\r\n    constructor(private roomManager: RoomManager, private ui: UserInterface) { }\r\n\r\n    // #region [ Chat Management ]\r\n    //\r\n    /**\r\n     * Sends a message in the chat.\r\n     */\r\n    public sendChatMessage(userId: string): void {\r\n        if (!this.ui.chatInput || !this.ui.chatInput.value.trim()) return;\r\n\r\n        const message = this.ui.chatInput.value.trim();\r\n        if (message.length > CHAT.MAX_MESSAGE_LENGTH) { //TODO: Abstract reliance on config\r\n            alert(`Message too long! Max ${CHAT.MAX_MESSAGE_LENGTH} characters.`);\r\n            return;\r\n        }\r\n\r\n        // Send message to server\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'chat-message',\r\n            message: message,\r\n            timestamp: Date.now()\r\n        }));\r\n\r\n        // Display own message immediately\r\n        this.displayChatMessage({senderId: userId, message: message, isOwn: true});\r\n\r\n        // Clear input\r\n        this.ui.chatInput.value = '';\r\n    }\r\n\r\n    /**\r\n     * Displayes messages sent in the chat.\r\n     */\r\n    public displayChatMessage(params: ChatMessage): void {\r\n        if (!this.ui.chatMessages) return;\r\n        const { senderId, message, isOwn = false } = params;\r\n\r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.className = `chat_message ${isOwn ? 'own' : 'other'}`;\r\n\r\n        const senderSpan = document.createElement('span');\r\n        senderSpan.className = 'sender';\r\n        senderSpan.textContent = isOwn ? 'You:' : `${senderId}:`;\r\n\r\n        const contentSpan = document.createElement('span');\r\n        contentSpan.className = 'content';\r\n        contentSpan.textContent = message;\r\n\r\n        messageDiv.appendChild(senderSpan);\r\n        messageDiv.appendChild(contentSpan);\r\n\r\n        this.ui.chatMessages.appendChild(messageDiv);\r\n\r\n        // Scroll to bottom\r\n        this.ui.chatMessages.scrollTop = this.ui.chatMessages.scrollHeight;\r\n\r\n        // Limit message history\r\n        while (this.ui.chatMessages.children.length > CHAT.MAX_MESSAGES) {\r\n            this.ui.chatMessages.removeChild(this.ui.chatMessages.firstChild!);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the chat.\r\n     */\r\n    public clearChat(): void {\r\n        if (this.ui.chatMessages) {\r\n            this.ui.chatMessages.innerHTML = '';\r\n        }\r\n        if (this.ui.chatInput) {\r\n            this.ui.chatInput.value = '';\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { Vec2 } from \"./Types\";\r\n\r\nimport { SettingsManager } from \"./SettingsManager\";\r\n\r\nexport class ControlsManager {\r\n    private activeKeys: Set<string> = new Set();\r\n    private gamepadKeys: Set<string> = new Set();\r\n    private previousKeys: Set<string> = new Set();\r\n\r\n    private mousePos: Vec2 = { x: 0, y: 0 };;\r\n\r\n    private gamepadConnected: boolean = false;\r\n    public gamepadConnectionEnabled: boolean = true;\r\n\r\n    private gamepadRAxis: number | null = null;\r\n\r\n    constructor(private settingsManager: SettingsManager) {\r\n        this.initGamepad();\r\n    }\r\n\r\n    // #region [ Keys ]\r\n    //\r\n    /**\r\n     * Returns true if the key is currently being held down.\r\n     */\r\n    public held(key: string): boolean {\r\n        return this.activeKeys.has(key);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the key was pressed this frame.\r\n     */\r\n    public triggered(key: string): boolean {\r\n        return this.activeKeys.has(key) && !this.previousKeys.has(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a read-only copy of the currently active (pressed) keys.\r\n     */\r\n    public getActiveKeys(): ReadonlySet<string> {\r\n        return this.activeKeys;\r\n    }\r\n\r\n    /**\r\n     * Adds a key to the active key set.\r\n     */\r\n    public addKey(key: string): void {\r\n        this.activeKeys.add(key);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the active key set.\r\n     */\r\n    public removeKey(key: string): void {\r\n        this.activeKeys.delete(key);\r\n    }\r\n\r\n    /**\r\n     * Clears all currently active (pressed) keys.\r\n     */\r\n    public clearActiveKeys(): void {\r\n        this.activeKeys.clear();\r\n    }\r\n\r\n    /**\r\n     * Monitors the previous keys set, allowing for action triggers.\r\n     */\r\n    public updatePreviousKeys(): void {\r\n        this.previousKeys = new Set(this.activeKeys);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Mouse ]\r\n    //\r\n    /**\r\n     * Returns the current mouse position as a read-only Vec2.\r\n     */\r\n    public getMousePos(): Readonly<Vec2> {\r\n        return this.mousePos;\r\n    }\r\n\r\n    /**\r\n     * Updates the stored mouse position.\r\n     */\r\n    public setMousePos(pos: Vec2): void {\r\n        this.mousePos.x = pos.x;\r\n        this.mousePos.y = pos.y;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Gamepad ]\r\n    //\r\n    /**\r\n     * Initializes gamepad connection listeners.\r\n     */\r\n    private initGamepad(): void {\r\n        window.addEventListener(\"gamepadconnected\", () => {\r\n            console.log(\"Gamepad connected!\");\r\n            this.gamepadConnected = true;\r\n        });\r\n\r\n        window.addEventListener(\"gamepaddisconnected\", () => {\r\n            console.log(\"Gamepad disconnected!\");\r\n            this.gamepadConnected = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to poll for gamepad inputs when one is connected.\r\n     * \r\n     * Gamepad bindings map to the keyboard bindings to trigger actions.\r\n     */\r\n    public pollGamepad(): void {\r\n        if (!this.gamepadConnected) return;\r\n\r\n        const gamepads = navigator.getGamepads();\r\n        const gamepad = gamepads[0];\r\n        if (!gamepad) return;\r\n\r\n        const settings = this.settingsManager.getSettings();\r\n        const keybinds = settings.controls.keybinds;\r\n        const gamepadMap = settings.controls.gamepad;\r\n        const deadzone = gamepadMap.deadzone;\r\n\r\n        // Clear previous gamepad keys\r\n        this.gamepadKeys.forEach(key => this.activeKeys.delete(key));\r\n        this.gamepadKeys.clear();\r\n\r\n        const xAxis = gamepad.axes[0];\r\n        const yAxis = gamepad.axes[1];\r\n\r\n        if (xAxis > deadzone) {\r\n            this.activeKeys.add(keybinds.moveRight);\r\n            this.gamepadKeys.add(keybinds.moveRight);\r\n        }\r\n\r\n        if (xAxis < -deadzone) {\r\n            this.activeKeys.add(keybinds.moveLeft);\r\n            this.gamepadKeys.add(keybinds.moveLeft);\r\n        }\r\n\r\n        if (yAxis > deadzone) {\r\n            this.activeKeys.add(keybinds.moveDown);\r\n            this.gamepadKeys.add(keybinds.moveDown);\r\n        }\r\n\r\n        if (yAxis < -deadzone) {\r\n            this.activeKeys.add(keybinds.moveUp);\r\n            this.gamepadKeys.add(keybinds.moveUp);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.melee].pressed) {\r\n            this.activeKeys.add(keybinds.melee);\r\n            this.gamepadKeys.add(keybinds.melee);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.dash].pressed) {\r\n            this.activeKeys.add(keybinds.dash);\r\n            this.gamepadKeys.add(keybinds.dash);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.reload].pressed) {\r\n            this.activeKeys.add(keybinds.reload);\r\n            this.gamepadKeys.add(keybinds.reload);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.attack].pressed) {\r\n            this.activeKeys.add(keybinds.attack);\r\n            this.gamepadKeys.add(keybinds.attack);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.sprint].pressed) {\r\n            this.activeKeys.add(keybinds.sprint);\r\n            this.gamepadKeys.add(keybinds.sprint);\r\n        }\r\n\r\n        // Right stick aiming\r\n        const rightX = gamepad.axes[2];\r\n        const rightY = gamepad.axes[3];\r\n        const aimMagnitude = Math.sqrt(rightX * rightX + rightY * rightY);\r\n\r\n        if (aimMagnitude > deadzone) {\r\n            this.gamepadRAxis = Math.atan2(rightY, rightX) + Math.PI / 2;\r\n        } else {\r\n            this.gamepadRAxis = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current right axis input.\r\n     */\r\n    public getGamepadRAxis(): number | null {\r\n        return this.gamepadRAxis;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { CANVAS } from \"./Config\";\r\nimport { Player } from \"./Types\";\r\n\r\nimport { ObjectsManager } from \"./ObjectsManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\n\r\nimport { AmmoReservesUIController } from \"./player/AmmoReservesUIController\";\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\n\r\nexport class CollisionsManager {\r\n    constructor(\r\n        private ammoReservesUIController: AmmoReservesUIController,\r\n        private objectsManager: ObjectsManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private userId: string\r\n    ) {}\r\n\r\n    /**\r\n     * Responsible for handling all collisions in the game. Routes to other collision functions.\r\n     */\r\n    public checkCollisions(delta: number): void {\r\n        const minX = CANVAS.BORDER_MARGIN;\r\n        const maxX = CANVAS.WIDTH - CANVAS.BORDER_MARGIN;\r\n        const minY = CANVAS.BORDER_MARGIN;\r\n        const maxY = CANVAS.HEIGHT - CANVAS.BORDER_MARGIN;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = Math.max(minX, Math.min(maxX, this.playerState.myPlayer.transform.pos.x));\r\n        this.playerState.myPlayer.transform.pos.y = Math.max(minY, Math.min(maxY, this.playerState.myPlayer.transform.pos.y));\r\n\r\n        this.checkObjectCollisions(delta);\r\n        this.checkPlayersCollisions(delta);\r\n    }\r\n\r\n    /**\r\n     * Checks for my player colliding with objects in the game. \r\n     */\r\n    private checkObjectCollisions(delta: number): void {\r\n        if (!this.collisionsEnabled(this.playerState.myPlayer)) return;\r\n\r\n        const collisionRadius = this.getPlayerCollider(this.playerState.myPlayer, 5);\r\n\r\n        this.objectsManager.ammoBoxes.forEach((ammoBox, boxId) => {\r\n            if (ammoBox.isOpen) return;\r\n\r\n            const dx = this.playerState.myPlayer.transform.pos.x - ammoBox.transform.pos.x;\r\n            const dy = this.playerState.myPlayer.transform.pos.y - ammoBox.transform.pos.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (distance <= collisionRadius) {\r\n                // Calculate how much ammo can actually be picked up\r\n                const currentReserve = this.playerState.myPlayer.actions.primary.magazine.currentReserve;\r\n                const maxReserve = this.playerState.myPlayer.actions.primary.magazine.maxReserve;\r\n                const actualAmmoAdded = Math.min(ammoBox.ammoAmount, maxReserve - currentReserve);\r\n\r\n                // Only pick up if we can actually add ammo\r\n                if (actualAmmoAdded > 0) {\r\n                    this.playerState.myPlayer.actions.primary.magazine.currentReserve += actualAmmoAdded;\r\n\r\n                    // Spawn UI bullets based on ACTUAL ammo added, not ammo box amount\r\n                    this.ammoReservesUIController.spawnAmmoInReserveUI(actualAmmoAdded);\r\n\r\n                    console.log(`Picked up ammo box! +${actualAmmoAdded} bullets. Inventory: ${this.playerState.myPlayer.actions.primary.magazine.currentReserve}/${this.playerState.myPlayer.actions.primary.magazine.maxReserve}`);\r\n\r\n                    // Generate random lid physics\r\n                    const angle = Math.random() * Math.PI * 2;\r\n                    const speed = 2 + Math.random() * 3;\r\n\r\n                    ammoBox.isOpen = true;\r\n                    ammoBox.lid.velocity = {\r\n                        x: Math.cos(angle) * speed,\r\n                        y: Math.sin(angle) * speed\r\n                    };\r\n                    ammoBox.lid.torque = (Math.random() - 0.5) * 0.3;\r\n\r\n                    // Broadcast pickup with full box state\r\n                    this.roomManager.sendMessage(JSON.stringify({\r\n                        type: 'ammo-pickup',\r\n                        ammoBoxId: boxId,\r\n                        playerId: this.userId,\r\n                        boxState: {\r\n                            isOpen: true,\r\n                            lid: ammoBox.lid\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Checks for collisions with other players, blocking movement.\r\n     */\r\n    private checkPlayersCollisions(delta: number): void {\r\n        if (!this.collisionsEnabled(this.playerState.myPlayer)) return;\r\n\r\n        this.playerState.players.forEach((player: Player) => {\r\n            if (!this.collisionsEnabled(player)) return;\r\n\r\n            const dx = this.playerState.myPlayer.transform.pos.x - player.transform.pos.x;\r\n            const dy = this.playerState.myPlayer.transform.pos.y - player.transform.pos.y;\r\n            const dist = Math.sqrt(dx * dx + dy * dy);\r\n            const minDist = this.getPlayerCollider(this.playerState.myPlayer) + this.getPlayerCollider(player);\r\n\r\n            if (dist < minDist && dist > 0.01) { // Push myself away from the other player\r\n                const overlap = minDist - dist;\r\n                const pushX = (dx / dist) * overlap;\r\n                const pushY = (dy / dist) * overlap;\r\n\r\n                this.playerState.myPlayer.transform.pos.x += pushX;\r\n                this.playerState.myPlayer.transform.pos.y += pushY;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the player collider, with padding if needed.\r\n     */\r\n    public getPlayerCollider(player: Player, padding?: number): number {\r\n        let col = player.stats.size / 4\r\n\r\n        if (padding && padding > 0) {\r\n            col = (player.stats.size / 4) + padding\r\n        }\r\n\r\n        return col;\r\n    }\r\n    \r\n    /**\r\n     * Checks if the specific player's collisions are enabled.\r\n     */\r\n    public collisionsEnabled(player: Player): boolean {\r\n        if (player.stats.health.value <= 0) return false\r\n        if (player.flags.hidden && player.flags.invulnerable) return false\r\n        return true\r\n    }\r\n}","import { CANVAS, DECALS } from \"./Config\";\r\nimport { Decal } from \"./Types\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class DecalsManager {\r\n    public decals: Map<string, Decal> = new Map();\r\n\r\n    constructor(\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // #region [ Decals ]\r\n    //\r\n    /**\r\n     * Create a decal and broadcast over the network.\r\n     */\r\n    public createDecal(x: number, y: number, decalId: string, params: typeof DECALS[keyof typeof DECALS] = DECALS.PROJECTILE): void {\r\n        this.generateDecal(x, y, decalId, params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'add-decal',\r\n            decalId: decalId,\r\n            x: x,\r\n            y: y,\r\n            params: params\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Create a decal locally when receiving a decal network message.\r\n     */\r\n    public createDecalNetwork(x: number, y: number, decalId: string, params: typeof DECALS[keyof typeof DECALS]): void {\r\n        if (this.decals.has(decalId)) return; // Don't create duplicate decals\r\n\r\n        this.generateDecal(x, y, decalId, params);\r\n    }\r\n\r\n    /**\r\n     * Locally generate the decal and stamp it to the decal canvas.\r\n     */\r\n    public generateDecal(x: number, y: number, decalId: string, params: typeof DECALS[keyof typeof DECALS]): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        // Don't create decals outside canvas bounds\r\n        if (x < 0 || x > CANVAS.WIDTH || y < 0 || y > CANVAS.HEIGHT) return;\r\n\r\n        // Use random values within MIN/MAX ranges\r\n        const radius = params.RADIUS.MIN + Math.random() * (params.RADIUS.MAX - params.RADIUS.MIN);\r\n        const density = params.DENSITY.MIN + Math.random() * (params.DENSITY.MAX - params.DENSITY.MIN);\r\n        const opacity = params.OPACITY.MIN + Math.random() * (params.OPACITY.MAX - params.OPACITY.MIN);\r\n\r\n        const numPixels = Math.floor((radius * radius * Math.PI) * density);\r\n\r\n        const rgb = this.utility.hexToRgb(params.COLOR);\r\n        if (!rgb) {\r\n            console.error(`Invalid hex color: ${params.COLOR}`);\r\n            return;\r\n        }\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.globalCompositeOperation = 'source-over';\r\n\r\n        // Create scattered decal pixels around impact point\r\n        for (let i = 0; i < numPixels; i++) {\r\n            // Random position within decal radius\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const distance = Math.random() * radius;\r\n            const pixelX = x + Math.cos(angle) * distance;\r\n            const pixelY = y + Math.sin(angle) * distance;\r\n\r\n            // Skip if outside canvas\r\n            if (pixelX < 0 || pixelX >= CANVAS.WIDTH || pixelY < 0 || pixelY >= CANVAS.HEIGHT) continue;\r\n\r\n            // Random opacity with variation\r\n            const pixelOpacity = opacity + (Math.random() - 0.5) * params.VARIATION;\r\n            const clampedOpacity = Math.max(0.05, Math.min(0.6, pixelOpacity));\r\n\r\n            // Use custom color from params\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${clampedOpacity})`;\r\n            this.ui.decalCtx.fillRect(Math.floor(pixelX), Math.floor(pixelY), 1, 1);\r\n        }\r\n\r\n        this.ui.decalCtx.restore();\r\n\r\n        // Store decal with params\r\n        this.decals.set(decalId, { params, pos: { x, y } });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { GAMEPAD_MAP } from \"./Config\";\r\n\r\nimport { Animator } from \"./Animator\";\r\nimport { ChatManager } from \"./ChatManager\";\r\nimport { ControlsManager } from \"./ControlsManager\";\r\nimport { GameState } from \"./GameState\";\r\nimport { RoomController } from \"./RoomController\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class EventsManager {\r\n    constructor(\r\n        private animator: Animator,\r\n        private chatManager: ChatManager,\r\n        private controlsManager: ControlsManager,\r\n        private gameState: GameState,\r\n        private roomController: RoomController,\r\n        private playerState: PlayerState,\r\n        private settingsManager: SettingsManager,\r\n        private ui: UserInterface,\r\n        private userId: string\r\n    ) { }\r\n\r\n    // #region [ Events ]\r\n    //\r\n    /**\r\n     * Initializes all event listeners to the required DOM elements.\r\n     */\r\n    public initEventListeners(): void {\r\n        if (!this.ui.canvas || !this.ui.hostButton || !this.ui.joinButton || !this.ui.quickplayButton ||\r\n            !this.ui.lobbyLeaveButton || !this.ui.lobbyCodeButton || !this.ui.gameLeaveButton ||\r\n            !this.ui.gameCodeButton || !this.ui.startGameBtn || !this.ui.chatSendBtn || !this.ui.chatInput) return;\r\n\r\n        this.ui.hostButton.addEventListener(\"click\", () => this.roomController.hostRoom());\r\n        this.ui.joinButton.addEventListener(\"click\", () => this.roomController.joinRoom());\r\n        this.ui.quickplayButton.addEventListener(\"click\", () => this.roomController.quickPlay());\r\n        this.ui.lobbyLeaveButton.addEventListener(\"click\", () => this.roomController.leaveRoom());\r\n        this.ui.lobbyCodeButton.addEventListener(\"click\", () => this.roomController.copyRoomCode());\r\n        this.ui.gameLeaveButton.addEventListener(\"click\", () => this.roomController.leaveRoom());\r\n        this.ui.gameCodeButton.addEventListener(\"click\", () => this.roomController.copyRoomCode());\r\n        this.ui.startGameBtn.addEventListener(\"click\", () => this.onStartButtonClick());\r\n\r\n        // [ Chat ]\r\n        this.ui.chatSendBtn.addEventListener(\"click\", () => this.chatManager.sendChatMessage(this.userId));\r\n        this.ui.chatInput.addEventListener(\"keypress\", (e) => {\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault();\r\n                this.chatManager.sendChatMessage(this.userId);\r\n            }\r\n        });\r\n        this.ui.chatInput.addEventListener(\"focus\", () => {\r\n            this.controlsManager.clearActiveKeys();\r\n\r\n            this.playerState.canShoot = false;\r\n            this.playerState.isSprinting = false;\r\n            this.playerState.isDashing = false;\r\n            this.playerState.isBurstActive = false;\r\n            this.playerState.currentBurstShot = 0;\r\n        });\r\n\r\n        this.ui.chatInput.addEventListener(\"blur\", () => {\r\n            this.controlsManager.clearActiveKeys();\r\n\r\n            this.playerState.canShoot = true;\r\n            this.playerState.isSprinting = false;\r\n            this.playerState.isDashing = false;\r\n        });\r\n\r\n        this.ui.settingsButton?.addEventListener('click', () => {\r\n            this.ui.showSettingsPage();\r\n        });\r\n\r\n        this.ui.settingsCloseButton?.addEventListener('click', () => {\r\n            this.ui.hideSettingsPage();\r\n        })\r\n\r\n        // Prevent right-click context menu on the entire window\r\n        window.addEventListener('contextmenu', (e) => {\r\n            e.preventDefault();\r\n        });\r\n\r\n        // Listen on document for events, not canvas.\r\n        // If this presents issues, swap \"document.\" with \"this.interface.canvas\"\r\n        document.addEventListener('keydown', (e) => this.onKeyDown(e));\r\n        document.addEventListener('keyup', (e) => this.onKeyUp(e));\r\n\r\n        document.addEventListener('mouseup', (e) => this.onMouseUp(e));\r\n        document.addEventListener('mousemove', (e) => this.onMouseMove(e));\r\n\r\n        this.ui.canvas.addEventListener('mousedown', (e) => this.onMouseDown(e)); // Canvas only listening for mouse (shooting mainly)\r\n\r\n        this.ui.switchSettingsPage('sound'); // Init settings page to sound tab on dom load\r\n\r\n        this.ui.controlsTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('controls');\r\n        });\r\n\r\n        this.ui.graphicsTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('graphics');\r\n        });\r\n\r\n        this.ui.soundTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('sound');\r\n        });\r\n\r\n        // Settings page click to open when hidden\r\n        this.ui.controlsBody?.addEventListener('click', () => {\r\n            if (this.ui.controlsBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('controls');\r\n            }\r\n        });\r\n\r\n        this.ui.graphicsBody?.addEventListener('click', () => {\r\n            if (this.ui.graphicsBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('graphics');\r\n            }\r\n        });\r\n\r\n        this.ui.soundBody?.addEventListener('click', () => {\r\n            if (this.ui.soundBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('sound');\r\n            }\r\n        });\r\n\r\n        this.initSettingsAudioSliders();\r\n        this.initSettingsInputListeners();\r\n        this.initSettingsToggleListeners();\r\n    }\r\n\r\n    /**\r\n     * Handles all key press events.\r\n     */\r\n    private onKeyDown(e: KeyboardEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        const key = e.key.toLowerCase();\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        const isGameKey = Object.values(keybinds).includes(key);\r\n        if (!isGameKey) return;\r\n\r\n        e.preventDefault();\r\n        this.controlsManager.addKey(key);\r\n    }\r\n\r\n    /**\r\n     * Handles all key release events.\r\n     */\r\n    private onKeyUp(e: KeyboardEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        const key = e.key.toLowerCase();\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        if (!Object.values(keybinds).includes(key)) return;\r\n\r\n        e.preventDefault();\r\n        this.controlsManager.removeKey(key);\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse click events.\r\n     */\r\n    private onMouseDown(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused || !this.ui.canvas) return;\r\n\r\n        if (e.button === 0) {\r\n            this.updateMouse(e);\r\n            this.controlsManager.addKey('mouse1'); // Left Click\r\n        } else if (e.button === 1) {\r\n            this.controlsManager.addKey('mouse3'); // Middle Click\r\n        } else if (e.button === 2) {\r\n            this.updateMouse(e);\r\n            this.controlsManager.addKey('mouse2'); // Right Click\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse release events.\r\n     */\r\n    private onMouseUp(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        if (e.button === 0) {\r\n            this.controlsManager.removeKey('mouse1'); // Left Click\r\n        } else if (e.button === 1) {\r\n            this.controlsManager.addKey('mouse3'); // Middle Click\r\n        } else if (e.button === 2) {\r\n            this.controlsManager.removeKey('mouse2'); // Right Click\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse movement events.\r\n     */\r\n    private onMouseMove(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        this.updateMouse(e);\r\n        const mousePos = this.controlsManager.getMousePos();\r\n\r\n        // Calculate rotation based on mouse position\r\n        const dx = mousePos.x - this.playerState.myPlayer.transform.pos.x;\r\n        const dy = mousePos.y - this.playerState.myPlayer.transform.pos.y;\r\n        const rotation = Math.atan2(dy, dx) + Math.PI / 2;\r\n\r\n        // Rotate my character\r\n        this.animator.rotateCharacterPart(this.userId, rotation);\r\n    }\r\n\r\n    /**\r\n     * Processes mouse position and updates.\r\n     */\r\n    private updateMouse(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.ui.canvas) return;\r\n\r\n        const rect = this.ui.canvas.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n\r\n        this.controlsManager.setMousePos({ x, y });\r\n    }\r\n\r\n    /**\r\n     * Called when the Start Game button is pressed.\r\n     */\r\n    private onStartButtonClick(): void {\r\n        const event = new CustomEvent(\"customEvent_startGame\");\r\n        window.dispatchEvent(event);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Page ]\r\n    //\r\n    /**\r\n     * Initializes event listeners for audio sliders on audio settings page.\r\n     */\r\n    private initSettingsAudioSliders(): void {\r\n        const sliders = [\r\n            { slider: this.ui.masterSlider, fill: this.ui.masterFill, value: this.ui.masterValue, channel: 'master' },\r\n            { slider: this.ui.interfaceSlider, fill: this.ui.interfaceFill, value: this.ui.interfaceValue, channel: 'interface' },\r\n            { slider: this.ui.musicSlider, fill: this.ui.musicFill, value: this.ui.musicValue, channel: 'music' },\r\n            { slider: this.ui.sfxSlider, fill: this.ui.sfxFill, value: this.ui.sfxValue, channel: 'sfx' },\r\n            { slider: this.ui.voiceSlider, fill: this.ui.voiceFill, value: this.ui.voiceValue, channel: 'voice' }\r\n        ];\r\n\r\n        sliders.forEach(({ slider, fill, value, channel }) => {\r\n            if (!slider || !fill || !value) return;\r\n\r\n            slider.addEventListener('mousedown', (e) => {\r\n                const handleMove = (moveEvent: MouseEvent) => {\r\n                    const sliderValue = this.ui.calculateSliderValue(slider, moveEvent.clientX);\r\n                    this.ui.updateSettingsSlider(fill, value, sliderValue);\r\n\r\n                    this.settingsManager.updateSettings({\r\n                        audio: {\r\n                            mixer: {\r\n                                [channel]: sliderValue\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n\r\n                const handleUp = () => {\r\n                    document.removeEventListener('mousemove', handleMove);\r\n                    document.removeEventListener('mouseup', handleUp);\r\n                };\r\n\r\n                handleMove(e);\r\n                document.addEventListener('mousemove', handleMove);\r\n                document.addEventListener('mouseup', handleUp);\r\n                e.preventDefault();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners for input fields on all settings pages.\r\n     */\r\n    private initSettingsInputListeners(): void {\r\n        const inputs = [\r\n            { input: this.ui.deadzoneInput, settingPath: 'controls.gamepad.deadzone', parse: parseFloat }\r\n            // Future inputs go here: { input: this.ui.someInput, settingPath: 'path.to.setting', parse: parseFloat }\r\n        ];\r\n\r\n        inputs.forEach(({ input, settingPath, parse }) => {\r\n            if (!input) return;\r\n\r\n            input.addEventListener('change', () => {\r\n                const rawValue = input.value;\r\n                const parsedValue = parse(rawValue);\r\n\r\n                if (isNaN(parsedValue)) return; // Invalid input\r\n\r\n                // Build nested update object\r\n                const pathParts = settingPath.split('.');\r\n                const update: any = {};\r\n                let current = update;\r\n\r\n                for (let i = 0; i < pathParts.length - 1; i++) {\r\n                    current[pathParts[i]] = {};\r\n                    current = current[pathParts[i]];\r\n                }\r\n                current[pathParts[pathParts.length - 1]] = parsedValue;\r\n\r\n                this.settingsManager.updateSettings(update);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners for toggles on all settings pages.\r\n     */\r\n    private initSettingsToggleListeners(): void {\r\n        const toggles = [\r\n            { toggle: this.ui.particleJSToggle, settingPath: 'graphics.renderBackgroundParticles' },\r\n            { toggle: this.ui.staticVfxToggle, settingPath: 'graphics.showStaticOverlay' },\r\n            { toggle: this.ui.ammoReservesPhysicsToggle, settingPath: 'graphics.physics.ammoReserves' }\r\n        ];\r\n\r\n        toggles.forEach(({ toggle, settingPath }) => {\r\n            if (!toggle) return;\r\n\r\n            toggle.addEventListener('click', () => {\r\n                const currentValue = toggle.getAttribute('aria-checked') === 'true';\r\n                const newValue = !currentValue;\r\n\r\n                // Update toggle visually\r\n                if (newValue) {\r\n                    toggle.setAttribute('checked', 'true');\r\n                    toggle.setAttribute('aria-checked', 'true');\r\n                } else {\r\n                    toggle.removeAttribute('checked');\r\n                    toggle.setAttribute('aria-checked', 'false');\r\n                }\r\n\r\n                // Build nested update object\r\n                const pathParts = settingPath.split('.');\r\n                const update: any = {};\r\n                let current = update;\r\n\r\n                for (let i = 0; i < pathParts.length - 1; i++) {\r\n                    current[pathParts[i]] = {};\r\n                    current = current[pathParts[i]];\r\n                }\r\n                current[pathParts[pathParts.length - 1]] = newValue;\r\n\r\n                this.settingsManager.updateSettings(update);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the keybinds interface, with user prefs or defaults.\r\n     * \r\n     * Also sets up keybind change listeners.\r\n     */\r\n    public initKeybindListeners(): void {\r\n        const controlsSettings = this.settingsManager.getSettings().controls;\r\n        this.ui.initKeybindsInterface(\r\n            controlsSettings,\r\n            (action, type, newBinding) => this.onBindingChange(action, type, newBinding)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Event that fires on keybind or gamepad press when input change modal is visible.\r\n     */\r\n    public onBindingChange(action: string, type: 'keybind' | 'gamepad', newBinding: string | number): void {\r\n        if (type === 'keybind') {\r\n            this.settingsManager.updateSettings({\r\n                controls: {\r\n                    keybinds: {\r\n                        [action]: newBinding as string\r\n                    }\r\n                }\r\n            });\r\n\r\n            const element = document.getElementById(`${action}Keybind`);\r\n            if (element) {\r\n                element.textContent = newBinding === ' ' ? 'SPACE' : (newBinding as string).toUpperCase();\r\n            }\r\n        } else {\r\n            this.settingsManager.updateSettings({\r\n                controls: {\r\n                    gamepad: {\r\n                        [action]: newBinding as number\r\n                    }\r\n                }\r\n            });\r\n\r\n            const element = document.getElementById(`${action}Gamepad`);\r\n            if (element) {\r\n                const buttonName = Object.keys(GAMEPAD_MAP).find(\r\n                    key => typeof GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === 'number'\r\n                        && GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === newBinding\r\n                );\r\n                element.textContent = buttonName || newBinding.toString();\r\n            }\r\n        }\r\n    }\r\n}","import { GAME } from \"./Config\";\r\n\r\nexport class GameState {\r\n    /**\r\n     * Tracks paused state of the application.\r\n     */\r\n    public isPaused = false;\r\n\r\n    /**\r\n     * Becomes true when game loop starts.\r\n     * \r\n     * False when game loop is no longer ongoing (end game, websocket disconnect, leave room)\r\n     */\r\n    public gameInProgress = false;\r\n\r\n    /**\r\n     * Max wins needed for session to end.\r\n     */\r\n    public gameMaxWins = GAME.MAX_WINS;\r\n\r\n    /**\r\n     * Max players allowed in a game.\r\n     */\r\n    public gameMaxPlayers = GAME.MAX_PLAYERS;\r\n\r\n    constructor() {}\r\n}","import { LobbyControlsParams, LobbyOptionsParams, LobbyPlayer, SetInputParams, SetToggleParams } from \"./Types\";\r\n\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class LobbyManager {\r\n    public inLobby = false;\r\n    public lobbyPlayers: Map<string, LobbyPlayer> = new Map(); // Temporary partial player object used for lobby only information\r\n\r\n    constructor(private utility: Utility, private ui: UserInterface, private roomManager: RoomManager) { }\r\n\r\n    // #region [ Lobby Controls ]\r\n    //\r\n    /**\r\n     * Calls updateDisplay to show the lobby specific controls.\r\n     */\r\n    public showLobbyControls(params: LobbyControlsParams): void {\r\n        const { lobby, lobbyOptions, myPlayer, roomId, userId } = params;\r\n        const { isHost, maxWins, privateRoom, upgradesEnabled } = lobbyOptions;\r\n\r\n        this.ui.updateDisplay(lobby, \"lobby\", roomId);\r\n\r\n        // Add myself to lobby\r\n        this.lobbyPlayers.set(userId, {\r\n            id: userId,\r\n            color: myPlayer.color,\r\n            isHost: isHost\r\n        });\r\n\r\n        // Setup lobby inputs/toggles using nested options\r\n        this.setupLobbyOptions(lobbyOptions);\r\n\r\n        const winsInputParams: SetInputParams = {\r\n            inputId: \"winsInput\",\r\n            value: maxWins\r\n        };\r\n        const privateToggleParams: SetToggleParams = {\r\n            toggleId: \"privateToggle\",\r\n            value: privateRoom\r\n        };\r\n        const upgradesToggleParams: SetToggleParams = {\r\n            toggleId: \"upgradesToggle\",\r\n            value: upgradesEnabled\r\n        };\r\n\r\n        this.utility.setToggle(privateToggleParams);\r\n        this.utility.setToggle(upgradesToggleParams);\r\n        this.utility.setInput(winsInputParams);\r\n\r\n        this.ui.displayLobbyPlayers(isHost, lobby, userId);\r\n        this.ui.updateHostDisplay(isHost, lobby);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Lobby Options ]\r\n    //\r\n    /**\r\n     * Sets up lobby toggles and input for game settings.\r\n     */\r\n    public setupLobbyOptions(params: LobbyOptionsParams): void {\r\n        this.setupLobbyToggle('privateToggle', params.isHost, 'privateRoom', () => params.privateRoom, (val) => params.privateRoom = val);\r\n        this.setupLobbyToggle('upgradesToggle', params.isHost, 'upgradesEnabled', () => params.upgradesEnabled, (val) => params.upgradesEnabled = val);\r\n        this.setupLobbyInput('winsInput', params.isHost, 'maxWins', () => params.maxWins, (val) => params.maxWins = val);\r\n        this.setupLobbyInput('playersInput', params.isHost, 'maxPlayers', () => params.maxPlayers, (val) => params.maxPlayers = val);\r\n    }\r\n\r\n    /**\r\n     * Called by setupLobbyOptions - Responsible for toggles.\r\n     */\r\n    private setupLobbyToggle(elementProp: 'privateToggle' | 'upgradesToggle', isHost: boolean, messageKey: string, getter: () => boolean, setter: (val: boolean) => void): void {\r\n        const element = this.ui[elementProp];\r\n        if (!element) return;\r\n\r\n        // Store the handler so we can remove it later\r\n        const handlerKey = `${elementProp}Handler` as keyof this;\r\n\r\n        // Remove existing listener if it exists\r\n        if (this[handlerKey]) {\r\n            element.removeEventListener('click', this[handlerKey] as EventListener);\r\n        }\r\n\r\n        // Create and store the new handler\r\n        const handler = () => {\r\n            if (!isHost) return;\r\n\r\n            const newValue = !getter();\r\n            setter(newValue);\r\n\r\n            const toggleParams: SetToggleParams = {\r\n                toggleId: elementProp,\r\n                value: newValue\r\n            }\r\n            this.utility.setToggle(toggleParams);\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'lobby-options',\r\n                [messageKey]: newValue\r\n            }));\r\n\r\n            console.log(`${messageKey} changed to: ${newValue}`);\r\n        };\r\n\r\n        // Store handler for later removal & add listener\r\n        (this as any)[handlerKey] = handler;\r\n        element.addEventListener('click', handler);\r\n    }\r\n\r\n    /**\r\n     * Called by setupLobbyOptions - Responsible for input fields.\r\n     */\r\n    private setupLobbyInput(elementProp: 'winsInput' | 'playersInput', isHost: boolean, messageKey: string, getter: () => number, setter: (val: number) => void): void {\r\n        const element = this.ui[elementProp];\r\n        if (!element) return;\r\n\r\n        // Store the handler so we can remove it later\r\n        const handlerKey = `${elementProp}Handler` as keyof this;\r\n\r\n        // Remove existing listener if it exists\r\n        if (this[handlerKey]) {\r\n            element.removeEventListener('change', this[handlerKey] as EventListener);\r\n        }\r\n\r\n        // Create and store the new handler\r\n        const handler = () => {\r\n            if (!isHost) return;\r\n\r\n            const newValue = parseInt(element.value);\r\n            if (isNaN(newValue) || newValue < 1) {\r\n                element.value = getter().toString();\r\n                return;\r\n            }\r\n\r\n            setter(newValue);\r\n\r\n            const inputParams: SetInputParams = {\r\n                inputId: elementProp,\r\n                value: newValue\r\n            }\r\n            this.utility.setInput(inputParams);\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'lobby-options',\r\n                [messageKey]: newValue\r\n            }));\r\n\r\n            console.log(`${messageKey} changed to: ${newValue}`);\r\n        };\r\n\r\n        // Store handler for later removal & setup listener\r\n        (this as any)[handlerKey] = handler;\r\n        element.addEventListener('change', handler);\r\n    }\r\n\r\n    /**\r\n     * Syncs lobby options when state change messages are received over websocket.\r\n     */\r\n    public syncLobbyOptions(options: any): void {\r\n        this.syncOption(options, 'privateRoom', 'isPrivateRoom', 'privateToggle', this.utility.setToggle.bind(this.utility), 'Lobby privacy', (v) => v ? 'Private' : 'Public');\r\n        this.syncOption(options, 'maxWins', 'gameMaxWins', 'winsInput', this.utility.setInput.bind(this.utility), 'Game max wins');\r\n        this.syncOption(options, 'maxPlayers', 'gameMaxPlayers', 'playersInput', this.utility.setInput.bind(this.utility), 'Game max players');\r\n        this.syncOption(options, 'upgradesEnabled', 'isUpgradesEnabled', 'upgradesToggle', this.utility.setToggle.bind(this.utility), 'Game upgrades toggled');\r\n    }\r\n\r\n    /**\r\n     * [DO NOT CALL] Syncs a lobby option - called by syncLobbyOptions.\r\n     */\r\n    private syncOption<T extends SetInputParams | SetToggleParams>(options: any, key: string, prop: string, elementId: string, fn: (params: T) => void, label: string, format?: (v: any) => string): void {\r\n        if (options[key] === undefined) return;\r\n\r\n        (this as any)[prop] = options[key];\r\n\r\n        // Build params object based on element type\r\n        const params = elementId.includes('Input')\r\n            ? { inputId: elementId, value: options[key] } as T\r\n            : { toggleId: elementId, value: options[key] } as T;\r\n\r\n        fn(params);\r\n\r\n        const displayValue = format ? format(options[key]) : options[key];\r\n        console.log(`${label} synced to: ${displayValue}`);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Lobby Player Management ]\r\n    //\r\n    /**\r\n     * Promote specific player to host.\r\n     */\r\n    public promotePlayer(playerId: string): void {\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'promote-player',\r\n            targetPlayerId: playerId\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Kick specific  player from the current lobby.\r\n     */\r\n    public kickPlayer(playerId: string): void {\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'kick-player',\r\n            targetPlayerId: playerId\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { CANVAS, DECALS, OBJECT_DEFAULTS, PARTICLES } from \"./Config\";\r\n\r\nimport { CharacterConfig } from \"./CharacterConfig\";\r\nimport { DecalsManager } from \"./DecalsManager\";\r\nimport { DeathDecal, DeathStamp, Emitter, EmitterParams, Particle, PlayerHitParams, Shrapnel, ShrapnelPiece, Vec2 } from \"./Types\";\r\nimport { RenderingManager } from \"./RenderingManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { CollisionsManager } from \"./CollisionsManager\";\r\n\r\n\r\nexport class ParticlesManager {\r\n    public particles: Map<string, Particle> = new Map();\r\n    public emitters: Map<string, Emitter> = new Map();\r\n    public shrapnel: Map<string, ShrapnelPiece> = new Map();\r\n\r\n    constructor(\r\n        private charConfig: CharacterConfig,\r\n        private collisionsManager: CollisionsManager,\r\n        private decalsManager: DecalsManager,\r\n        private playerState: PlayerState,\r\n        private renderingManager: RenderingManager,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // #region [ Particles ]\r\n    //\r\n    // [ Basic Particles ]\r\n    //\r\n    /**\r\n     * Creates particles with params. Entrypoint for all particle creations.\r\n     */\r\n    public createParticles(x: number, y: number, particleId: string, params: typeof PARTICLES[keyof typeof PARTICLES], direction?: Vec2): void {\r\n        this.generateParticles(x, y, particleId, params, direction);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'add-particles',\r\n            particleId: particleId,\r\n            x: x,\r\n            y: y,\r\n            params: params,\r\n            direction: direction\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Responsible for actual generation of particles locally.\r\n     */\r\n    public generateParticles(x: number, y: number, particleId: string, params: typeof PARTICLES[keyof typeof PARTICLES], direction?: Vec2): void {\r\n        const count = Math.floor(params.COUNT.MIN + Math.random() * (params.COUNT.MAX - params.COUNT.MIN));\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const lifetime = params.LIFETIME.MIN + Math.random() * (params.LIFETIME.MAX - params.LIFETIME.MIN);\r\n            const speed = params.SPEED.MIN + Math.random() * (params.SPEED.MAX - params.SPEED.MIN);\r\n            const size = params.SIZE.MIN + Math.random() * (params.SIZE.MAX - params.SIZE.MIN);\r\n            const opacity = params.OPACITY.MIN + Math.random() * (params.OPACITY.MAX - params.OPACITY.MIN);\r\n            const torque = params.TORQUE.MIN + Math.random() * (params.TORQUE.MAX - params.TORQUE.MIN);\r\n            const noiseStrength = params.NOISE ? (params.NOISE.STRENGTH.MIN + Math.random() * (params.NOISE.STRENGTH.MAX - params.NOISE.STRENGTH.MIN)) : 0;\r\n            const noiseScale = params.NOISE ? (params.NOISE.SCALE.MIN + Math.random() * (params.NOISE.SCALE.MAX - params.NOISE.SCALE.MIN)) : 0;\r\n            const sizeOverLifetime = params.SIZE_OVER_LIFETIME ? (params.SIZE_OVER_LIFETIME.MIN + Math.random() * (params.SIZE_OVER_LIFETIME.MAX - params.SIZE_OVER_LIFETIME.MIN)) : 0;\r\n\r\n            let angle;\r\n            if (direction) {\r\n                angle = Math.atan2(direction.y, direction.x) + (Math.random() - 0.5) * params.SPREAD;\r\n            } else {\r\n                angle = Math.random() * Math.PI * 2;\r\n            }\r\n\r\n            const particle = {\r\n                age: 0,\r\n                collide: params.COLLIDE,\r\n                color: params.COLOR,\r\n                fade: params.FADE,\r\n                hasCollided: false,\r\n                id: `${particleId}_${i}`,\r\n                initialSize: size,\r\n                lifetime: lifetime,\r\n                maxOpacity: opacity,\r\n                noiseScale: noiseScale,\r\n                noiseStrength: noiseStrength,\r\n                opacity: opacity,\r\n                paint: params.PAINT,\r\n                pos: {\r\n                    x: x,\r\n                    y: y\r\n                },\r\n                size: size,\r\n                stain: params.STAIN,\r\n                torque: torque,\r\n                rotation: Math.random() * Math.PI * 2,\r\n                sizeOverLifetime: sizeOverLifetime,\r\n                velocity: {\r\n                    x: Math.cos(angle) * speed,\r\n                    y: Math.sin(angle) * speed\r\n                }\r\n            };\r\n\r\n            this.particles.set(particle.id, particle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles updating of all particles in the game during the update loop.\r\n     */\r\n    public updateParticles(delta: number): void {\r\n        const particlesToRemove: string[] = [];\r\n\r\n        this.particles.forEach((particle, id) => {\r\n            if (particle.noiseStrength > 0 && particle.noiseScale > 0) {\r\n                const time = Date.now() * 0.001; // Use time for animation\r\n                const noiseX = this.utility.simplexNoise2D(particle.pos.x / particle.noiseScale, time);\r\n                const noiseY = this.utility.simplexNoise2D(particle.pos.y / particle.noiseScale, time + 100);\r\n\r\n                particle.velocity.x += noiseX * particle.noiseStrength * delta;\r\n                particle.velocity.y += noiseY * particle.noiseStrength * delta;\r\n            }\r\n\r\n            if (particle.sizeOverLifetime > 0) {\r\n                const ageRatio = particle.age / particle.lifetime;\r\n                particle.size = particle.initialSize * (1 + ageRatio * particle.sizeOverLifetime);\r\n            }\r\n\r\n            particle.pos.x += particle.velocity.x * delta;\r\n            particle.pos.y += particle.velocity.y * delta;\r\n            particle.age += 16.67 * delta;\r\n\r\n            particle.rotation += (particle.torque * Math.PI / 180) * delta;\r\n\r\n            if (particle.fade) {\r\n                const ageRatio = particle.age / particle.lifetime;\r\n                particle.opacity = particle.maxOpacity * (1 - ageRatio);\r\n            }\r\n\r\n            // Handle staining during extended collision life\r\n            if (particle.hasCollided && particle.stain) {\r\n                // Paint every frame during extended life\r\n                this.stampParticle(particle);\r\n\r\n                // Calculate how far we are through the extended life\r\n                const extendedLifeRatio = (particle.age - (particle.lifetime - particle.lifetime * 0.5)) / (particle.lifetime * 0.5);\r\n\r\n                if (extendedLifeRatio > 0) {\r\n                    // Shrink particle during extended life\r\n                    particle.size = Math.max(0.5, particle.size * (1 - extendedLifeRatio * 0.1));\r\n\r\n                    // Fade opacity during extended life (from current opacity to 0)\r\n                    particle.opacity = particle.opacity * (1 - extendedLifeRatio);\r\n                }\r\n            }\r\n\r\n            const shouldRemove = particle.age >= particle.lifetime ||\r\n                particle.pos.x < -10 || particle.pos.x > CANVAS.WIDTH + 10 ||\r\n                particle.pos.y < -10 || particle.pos.y > CANVAS.HEIGHT + 10;\r\n\r\n            if (shouldRemove) {\r\n                // Handle collision for particles with COLLIDE property\r\n                if (particle.collide && particle.age >= particle.lifetime &&\r\n                    particle.pos.x >= 0 && particle.pos.x <= CANVAS.WIDTH &&\r\n                    particle.pos.y >= 0 && particle.pos.y <= CANVAS.HEIGHT &&\r\n                    !particle.hasCollided) {\r\n\r\n                    // Simulate collision with ground/surface\r\n                    particle.hasCollided = true;\r\n\r\n                    // Reduce speed\r\n                    const speedReduction = 0.875 + Math.random() * 0.1;\r\n                    particle.velocity.x *= (1 - speedReduction);\r\n                    particle.velocity.y *= (1 - speedReduction);\r\n\r\n                    // Extend lifetime\r\n                    const lifetimeExtension = particle.lifetime * 0.5;\r\n                    particle.lifetime += lifetimeExtension;\r\n\r\n                    // Don't remove this particle yet\r\n                    return;\r\n                }\r\n\r\n                // Handle painting before removal (only for non-staining particles)\r\n                if (particle.paint && !particle.stain && particle.age >= particle.lifetime &&\r\n                    particle.pos.x >= 0 && particle.pos.x <= CANVAS.WIDTH &&\r\n                    particle.pos.y >= 0 && particle.pos.y <= CANVAS.HEIGHT) {\r\n\r\n                    this.stampParticle(particle);\r\n                }\r\n\r\n                particlesToRemove.push(id);\r\n            }\r\n        });\r\n\r\n        particlesToRemove.forEach(id => this.particles.delete(id));\r\n    }\r\n\r\n    /**\r\n     * Responsible for the actual rendering of particles spawned via emitters and particle functions.\r\n     */\r\n    public drawParticles(): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        this.particles.forEach(particle => {\r\n            const rgb = this.utility.hexToRgb(particle.color);\r\n            if (!rgb) return;\r\n\r\n            if (!this.ui.ctx) return;\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.globalAlpha = particle.opacity;\r\n\r\n            // Apply rotation if torque exists\r\n            if (particle.torque !== 0) {\r\n                this.ui.ctx.translate(particle.pos.x + particle.size / 2, particle.pos.y + particle.size / 2);\r\n                this.ui.ctx.rotate(particle.rotation);\r\n                this.ui.ctx.fillStyle = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n                this.ui.ctx.fillRect(-particle.size / 2, -particle.size / 2, particle.size, particle.size);\r\n            } else {\r\n                this.ui.ctx.fillStyle = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n                this.ui.ctx.fillRect(Math.floor(particle.pos.x), Math.floor(particle.pos.y), particle.size, particle.size);\r\n            }\r\n\r\n            this.ui.ctx.restore();\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Persistence ]\r\n    //\r\n    /**\r\n     * Stamps local particles onto the decal canvas.\r\n     */\r\n    private stampParticle(particle: Particle): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        const rgb = this.utility.hexToRgb(particle.color);\r\n        if (!rgb) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.globalCompositeOperation = 'source-over';\r\n\r\n        // Paint with rotation if particle had torque\r\n        if (particle.torque !== 0) {\r\n            this.ui.decalCtx.translate(particle.pos.x + particle.size / 2, particle.pos.y + particle.size / 2);\r\n            this.ui.decalCtx.rotate(particle.rotation);\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${particle.opacity})`;\r\n            this.ui.decalCtx.fillRect(-particle.size / 2, -particle.size / 2, particle.size, particle.size);\r\n        } else {\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${particle.opacity})`;\r\n            this.ui.decalCtx.fillRect(Math.floor(particle.pos.x), Math.floor(particle.pos.y), particle.size, particle.size);\r\n        }\r\n\r\n        this.ui.decalCtx.restore();\r\n\r\n        const id = `stamp_${Date.now()}`;\r\n\r\n        this.decalsManager.decals.set(id, {\r\n            params: null,\r\n            pos: {\r\n                x: particle.pos.x,\r\n                y: particle.pos.y\r\n            }\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Emitters ]\r\n    //\r\n    /**\r\n     * Creates a particle emitter in the game, and syncs this action via websocket message \"particle-emitter\".\r\n     */\r\n    public createEmitter(params: EmitterParams): void {\r\n        // Create an emitter locally\r\n        this.generateEmitter(params);\r\n\r\n        // Broadcast to other clients\r\n        const message: EmitterParams = {\r\n            type: 'particle-emitter',\r\n            id: params.id,\r\n            interval: params.interval,\r\n            lifetime: params.lifetime,\r\n            offset: {\r\n                x: params.offset.x,\r\n                y: params.offset.y\r\n            },\r\n            pos: {\r\n                x: params.pos.x,\r\n                y: params.pos.y\r\n            },\r\n            particleType: params.particleType,\r\n            playerId: params.playerId\r\n        };\r\n        this.roomManager.sendMessage(JSON.stringify(message));\r\n\r\n        console.log(`Emitter created on ${params.playerId} for ${params.lifetime}ms`);\r\n    }\r\n\r\n    /**\r\n     * Actual generation of the emitter object into the emitter mapping.\r\n     */\r\n    public generateEmitter(params: EmitterParams): void {\r\n        // Calculate offset from center\r\n        const offsetX = params.pos.x - params.offset.x;\r\n        const offsetY = params.pos.y - params.offset.y;\r\n\r\n        // Calculate direction (away from center towards hit point)\r\n        const angle = Math.atan2(offsetY, offsetX);\r\n\r\n        this.emitters.set(params.id, {\r\n            age: 0,\r\n            direction: angle,\r\n            emissionInterval: params.interval,\r\n            lastEmission: 0,\r\n            lifetime: params.lifetime,\r\n            offset: {\r\n                x: offsetX,\r\n                y: offsetY\r\n            },\r\n            particleType: params.particleType,\r\n            playerId: params.playerId\r\n        });\r\n    }\r\n    /**\r\n     * Process all particle emitters in the game during the update loop.\r\n     */\r\n    public updateEmitters(delta: number): void {\r\n        const emittersToRemove: string[] = [];\r\n\r\n        this.emitters.forEach((emitter, emitterId) => {\r\n            emitter.age += 16.67 * delta;\r\n\r\n            const player = emitter.playerId === this.userId ? this.playerState.myPlayer : this.playerState.players.get(emitter.playerId);\r\n            if (!player || player.stats.health.value <= 0) {\r\n                emittersToRemove.push(emitterId);\r\n                return;\r\n            }\r\n\r\n            // Calculate current world position\r\n            const worldX = player.transform.pos.x + emitter.offset.x;\r\n            const worldY = player.transform.pos.y + emitter.offset.y;\r\n\r\n            if (emitter.age >= emitter.lastEmission + emitter.emissionInterval) {\r\n                // Create directional spray with cone spread\r\n                const coneSpread = Math.PI * 0.6; // 108 degree cone\r\n                const randomSpread = (Math.random() - 0.5) * coneSpread;\r\n                const angle = emitter.direction + randomSpread;\r\n\r\n                // Variable speed for more natural spray\r\n                const baseSpeed = 3;\r\n                const speedVariation = (Math.random() - 0.5) * 4; // -2 to +2\r\n                const finalSpeed = Math.max(0.5, baseSpeed + speedVariation);\r\n\r\n                this.generateParticles( // Create particles locally\r\n                    worldX + (Math.random() - 0.5) * 8,\r\n                    worldY + (Math.random() - 0.5) * 8,\r\n                    `emitter_particles_${emitterId}_${emitter.age}`,\r\n                    emitter.particleType,\r\n                    {\r\n                        x: Math.cos(angle) * finalSpeed,\r\n                        y: Math.sin(angle) * finalSpeed\r\n                    }\r\n                );\r\n\r\n                emitter.lastEmission = emitter.age;\r\n                emitter.emissionInterval = 120 + Math.random() * 180; // More consistent timing\r\n            }\r\n\r\n            // Remove expired emitters\r\n            if (emitter.age >= emitter.lifetime) {\r\n                this.decalsManager.generateDecal(worldX, worldY, `emitter_decal_${emitterId}`, DECALS.BLOOD);\r\n                emittersToRemove.push(emitterId);\r\n            }\r\n        });\r\n\r\n        emittersToRemove.forEach(id => this.emitters.delete(id));\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Gore ]\r\n    //\r\n    /**\r\n     * Generates gore particles using the decals for the character object.\r\n     */\r\n    public generateGore(params: DeathDecal): void {\r\n        const gorePool = [...this.charConfig.CHARACTER_DECALS.DEFAULT.GORE]; // TODO: Get current pool for gore\r\n        for (let i = 0; i < params.gore.amount && gorePool.length > 0; i++) {\r\n            const goreAsset = this.utility.getRandomInArray(gorePool);\r\n            gorePool.splice(gorePool.indexOf(goreAsset), 1);\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const distance = this.utility.getRandomNum(0, params.radius);\r\n\r\n            const goreDecal: DeathStamp = {\r\n                type: 'gore',\r\n                src: goreAsset,\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x + Math.cos(angle) * distance,\r\n                        y: params.pos.y + Math.sin(angle) * distance\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2),\r\n                },\r\n                scale: this.utility.getRandomNum(0.65, 1.05)\r\n            };\r\n\r\n            const decalId = `death_gore_${params.ownerId}_${Date.now()}_${i}`;\r\n            this.stampGore(goreDecal);\r\n            this.decalsManager.decals.set(decalId, {\r\n                params: null,\r\n                pos: {\r\n                    x: goreDecal.transform.pos.x,\r\n                    y: goreDecal.transform.pos.y\r\n                }\r\n            });\r\n        }\r\n\r\n        const bloodPool = [...this.charConfig.CHARACTER_DECALS.DEFAULT.BLOOD]; // TODO: Get current pool for blood\r\n        for (let i = 0; i < params.blood.amount && bloodPool.length > 0; i++) {\r\n            const bloodAsset = this.utility.getRandomInArray(bloodPool);\r\n            bloodPool.splice(bloodPool.indexOf(bloodAsset), 1);\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const distance = this.utility.getRandomNum(0, params.radius * 0.7);\r\n\r\n            const bloodDecal: DeathStamp = {\r\n                type: 'blood',\r\n                src: bloodAsset,\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x + Math.cos(angle) * distance,\r\n                        y: params.pos.y + Math.sin(angle) * distance\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2),\r\n                },\r\n                scale: this.utility.getRandomNum(1.25, 1.45)\r\n            };\r\n\r\n            const decalId = `death_blood_${params.ownerId}_${Date.now()}_${i}`;\r\n            this.stampGore(bloodDecal);\r\n            this.decalsManager.decals.set(decalId, {\r\n                params: null,\r\n                pos: {\r\n                    x: bloodDecal.transform.pos.x,\r\n                    y: bloodDecal.transform.pos.y\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Persists gore on the decal canvas.\r\n     */\r\n    private stampGore(params: DeathStamp): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        let image = this.renderingManager.characterImages.get(params.src);\r\n\r\n        if (!image) {\r\n            image = new Image();\r\n            image.src = params.src;\r\n            this.renderingManager.characterImages.set(params.src, image);\r\n\r\n            if (!image.complete) {\r\n                image.onload = () => {\r\n                    this.stampGore(params);\r\n                };\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.translate(params.transform.pos.x, params.transform.pos.y);\r\n        this.ui.decalCtx.rotate(params.transform.rot);\r\n\r\n        const drawSize = 32 * params.scale;\r\n        this.ui.decalCtx.drawImage(\r\n            image,\r\n            -drawSize / 2,\r\n            -drawSize / 2,\r\n            drawSize,\r\n            drawSize\r\n        );\r\n\r\n        this.ui.decalCtx.restore();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Shrapnel ]\r\n    //\r\n    /**\r\n     * Creates shrapnel pieces and sends network message with Shrapnel data.\r\n     */\r\n    public spawnShrapnel(params: Shrapnel): void {\r\n        const pieces: ShrapnelPiece[] = [];\r\n\r\n        // Generate all pieces locally\r\n        for (let i = 0; i < params.amount; i++) {\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const speed = this.utility.getRandomNum(params.speed.min, params.speed.max);\r\n            const lifetime = this.utility.getRandomNum(params.lifetime.min, params.lifetime.max);\r\n            const size = this.utility.getRandomNum(params.size.min, params.size.max);\r\n            const torque = this.utility.getRandomNum(params.torque.min, params.torque.max) * (Math.PI / 180); // Convert radians > deg\r\n\r\n            const piece: ShrapnelPiece = {\r\n                id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n                image: params.images[i], // Already randomly selected in triggerUnique\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x,\r\n                        y: params.pos.y\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2), // Random start rot\r\n                },\r\n                velocity: {\r\n                    x: Math.cos(angle) * speed,\r\n                    y: Math.sin(angle) * speed\r\n                },\r\n                rotationSpeed: torque, // Random spin\r\n                size: size,\r\n                age: 0,\r\n                lifetime: lifetime,\r\n                ownerId: this.userId,\r\n                damage: params.damage\r\n            };\r\n\r\n            pieces.push(piece);\r\n            this.shrapnel.set(piece.id, piece);\r\n        }\r\n\r\n        // Send ONE message with all pieces\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'shrapnel-spawn',\r\n            pieces: pieces\r\n        }));\r\n\r\n        console.log(`Spawned ${pieces.length} shrapnel pieces`);\r\n    }\r\n\r\n    /**\r\n     * Generates shrapnel baed on received network message 'shrapnel-spawn' data.\r\n     */\r\n    public generateShrapnel(params: ShrapnelPiece[]): void {\r\n        params.forEach(piece => {\r\n            this.shrapnel.set(piece.id, piece);\r\n        });\r\n\r\n        console.log(`Received ${params.length} shrapnel pieces from network`);\r\n    }\r\n\r\n    /**\r\n     * When shrapnel exists, handles updating of each piece via Client udpate loop.\r\n     */\r\n    public updateShrapnel(delta: number): void {\r\n        if (this.shrapnel.size === 0) return;\r\n\r\n        const shrapnelToRemove: string[] = [];\r\n\r\n        this.shrapnel.forEach((piece, id) => {\r\n            // Update physics\r\n            piece.transform.pos.x += piece.velocity.x * delta;\r\n            piece.transform.pos.y += piece.velocity.y * delta;\r\n            piece.transform.rot += piece.rotationSpeed * delta;\r\n            piece.age += 16.67 * delta;\r\n\r\n            // Apply friction\r\n            // TODO: Add world friction\r\n            piece.velocity.x *= 0.98;\r\n            piece.velocity.y *= 0.98;\r\n\r\n            // Only owner checks collisions and deals damage\r\n            if (piece.ownerId === this.userId) {\r\n                // Check collision with all players\r\n                this.playerState.players.forEach((player, playerId) => {\r\n                    if (player.stats.health.value > 0) {\r\n                        const dx = piece.transform.pos.x - player.transform.pos.x;\r\n                        const dy = piece.transform.pos.y - player.transform.pos.y;\r\n                        const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                        // Collision detection (using player collider + shrapnel size for padding)\r\n                        if (distance <= this.collisionsManager.getPlayerCollider(player, piece.size)) {\r\n                            const actualDamage = Math.max(0, piece.damage - player.stats.defense);\r\n                            const newHealth = Math.max(0, player.stats.health.value - actualDamage);\r\n                            player.stats.health.value = newHealth;\r\n\r\n                            // Remove this shrapnel piece after hit\r\n                            shrapnelToRemove.push(id);\r\n                            console.log(`Shrapnel hit ${playerId} for ${piece.damage} damage`);\r\n\r\n                            const params: PlayerHitParams = {\r\n                                target: player,\r\n                                shooterId: this.userId,\r\n                                damage: piece.damage,\r\n                                newHealth: newHealth,\r\n                                source: piece,\r\n                                wasKill: newHealth <= 0\r\n                            }\r\n                            window.dispatchEvent(new CustomEvent(\"customEvent_playerHitRelay\", { detail: { params }}));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Remove if lifetime expired or out of bounds\r\n            if (piece.age >= piece.lifetime ||\r\n                piece.transform.pos.x < 0 || piece.transform.pos.x > CANVAS.WIDTH ||\r\n                piece.transform.pos.y < 0 || piece.transform.pos.y > CANVAS.HEIGHT) {\r\n\r\n                // Stamp as decal if died in bounds\r\n                if (piece.transform.pos.x >= 0 && piece.transform.pos.x <= CANVAS.WIDTH &&\r\n                    piece.transform.pos.y >= 0 && piece.transform.pos.y <= CANVAS.HEIGHT) {\r\n                    this.stampShrapnel(piece);\r\n                }\r\n\r\n                shrapnelToRemove.push(id);\r\n            }\r\n        });\r\n\r\n        // Remove dead shrapnel\r\n        shrapnelToRemove.forEach(id => this.shrapnel.delete(id));\r\n    }\r\n\r\n    /**\r\n     * Draws the moving shrapnel to the canvas for rendering.\r\n     */\r\n    public drawShrapnel(): void {\r\n        if (!this.ui.ctx || this.shrapnel.size === 0) return;\r\n\r\n        this.shrapnel.forEach(piece => {\r\n            if (!this.ui.ctx) return;\r\n\r\n            let image = this.renderingManager.characterImages.get(piece.image);\r\n\r\n            if (!image) {\r\n                image = new Image();\r\n                image.src = piece.image;\r\n                this.renderingManager.characterImages.set(piece.image, image);\r\n\r\n                if (!image.complete) { return; }\r\n            }\r\n\r\n            if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.translate(piece.transform.pos.x, piece.transform.pos.y);\r\n            this.ui.ctx.rotate(piece.transform.rot);\r\n\r\n            this.ui.ctx.drawImage(\r\n                image,\r\n                -piece.size / 2,\r\n                -piece.size / 2,\r\n                piece.size,\r\n                piece.size\r\n            );\r\n\r\n            this.ui.ctx.restore();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stamps dead shrapnel to the decal canvas to persist visually.\r\n     */\r\n    private stampShrapnel(params: ShrapnelPiece): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        let image = this.renderingManager.characterImages.get(params.image);\r\n        if (!image || !image.complete || image.naturalWidth === 0) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.translate(params.transform.pos.x, params.transform.pos.y);\r\n        this.ui.decalCtx.rotate(params.transform.rot);\r\n\r\n        this.ui.decalCtx.drawImage(\r\n            image,\r\n            -params.size / 2,\r\n            -params.size / 2,\r\n            params.size,\r\n            params.size\r\n        );\r\n\r\n        this.ui.decalCtx.restore();\r\n\r\n        // Register decal\r\n        this.decalsManager.decals.set(`shrapnel_${params.id}`, {\r\n            params: null,\r\n            pos: {\r\n                x: params.transform.pos.x,\r\n                y: params.transform.pos.y\r\n            }\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { AMMO_BOX, CANVAS, GAME, PLAYER_DEFAULTS, UI } from \"./Config\";\r\nimport { CharacterLayer, Player, Projectile } from \"./Types\";\r\n\r\nimport { Animator } from \"./Animator\";\r\nimport { CharacterManager } from \"./CharacterManager\";\r\nimport { ObjectsManager } from \"./ObjectsManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nexport class RenderingManager {\r\n    public characterImages: Map<string, HTMLImageElement> = new Map();\r\n    public ammoBoxImages: { [layer: string]: HTMLImageElement } = {};\r\n\r\n    constructor(\r\n        private animator: Animator,\r\n        private charManager: CharacterManager,\r\n        private objectsManager: ObjectsManager,\r\n        private ui: UserInterface,\r\n    ) { }\r\n\r\n    /**\r\n     * Clear all canvas rendering context in the game.\r\n     * \r\n     * / OR /\r\n     * \r\n     * Pass the specific CanvasRenderingContext2D to clear.\r\n     */\r\n    public clearCtx(customCtx?: CanvasRenderingContext2D): void {\r\n        if (customCtx) {\r\n            customCtx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n            return;\r\n        }\r\n\r\n        if (!this.ui.decalCtx || !this.ui.ctx) return;\r\n\r\n        this.ui.ctx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n        this.ui.decalCtx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n    }\r\n\r\n    // [ Character ]\r\n    //\r\n    /**\r\n     * Draws the corresponding character layers defined in the rig to create the player character.\r\n     */\r\n    public drawCharacter(player: Player, isMe: boolean = false): void {\r\n        if (!this.ui.ctx) return;\r\n        if (player.stats.health.value <= 0) return;\r\n\r\n        // Static ghost memory (attached per instance)\r\n        const staticGhosts = (this as any)._spectralGhosts ??= {\r\n            lastHidden: new Map<string, boolean>(),\r\n            flashes: [] as {\r\n                x: number;\r\n                y: number;\r\n                t: number;\r\n                type: 'start' | 'end';\r\n                playerId: string;\r\n            }[]\r\n        };\r\n\r\n        const now = Date.now();\r\n        const wasHidden = staticGhosts.lastHidden.get(player.id) ?? false;\r\n        const isHidden = player.flags.hidden;\r\n        const isSpectral = player.unique.includes(\"spectral_image\");\r\n\r\n        // Detect start of dash (flash out)\r\n        if (!wasHidden && isHidden && isSpectral) {\r\n            staticGhosts.flashes.push({\r\n                x: player.transform.pos.x,\r\n                y: player.transform.pos.y,\r\n                t: now,\r\n                type: 'start',\r\n                playerId: player.id\r\n            });\r\n        }\r\n\r\n        // Detect end of dash (flash in)\r\n        if (wasHidden && !isHidden && isSpectral) {\r\n            staticGhosts.flashes.push({\r\n                x: player.transform.pos.x,\r\n                y: player.transform.pos.y,\r\n                t: now,\r\n                type: 'end',\r\n                playerId: player.id\r\n            });\r\n        }\r\n\r\n        staticGhosts.lastHidden.set(player.id, isHidden);\r\n\r\n        // Render ghost flashes\r\n        for (const ghost of staticGhosts.flashes) {\r\n            if (ghost.playerId !== player.id) continue;\r\n            const age = now - ghost.t;\r\n            if (age > player.actions.dash.time) continue;\r\n\r\n            const alpha = ghost.type === 'start'\r\n                ? 1 - (age / player.actions.dash.time)\r\n                : (age / player.actions.dash.time);\r\n\r\n            this.ui.ctx.save();\r\n\r\n            // Invert-style effect via difference + high saturation\r\n            this.ui.ctx.globalAlpha = alpha * 0.8;\r\n            this.ui.ctx.globalCompositeOperation = 'difference';\r\n            this.ui.ctx.filter = 'saturate(100) contrast(2)';\r\n\r\n            const ghostPlayer = {\r\n                ...player,\r\n                transform: {\r\n                    ...player.transform,\r\n                    pos: { x: ghost.x, y: ghost.y }\r\n                }\r\n            };\r\n\r\n            this.drawCharacterLayers(ghostPlayer);\r\n            this.ui.ctx.restore();\r\n        }\r\n\r\n        if (isHidden) return;\r\n\r\n        // Main player\r\n        this.drawCharacterLayers(player);\r\n\r\n        this.ui.ctx.fillStyle = UI.TEXT_COLOR;\r\n        this.ui.ctx.font = UI.FONT;\r\n        this.ui.ctx.textAlign = 'center';\r\n\r\n        const displayName = isMe ? 'You' : player.id.substring(0, 6);\r\n        this.ui.ctx.fillText(\r\n            displayName,\r\n            player.transform.pos.x,\r\n            player.transform.pos.y - PLAYER_DEFAULTS.VISUAL.ID_DISPLAY_OFFSET\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Entrypoint for rendering of all character layers.\r\n     */\r\n    private drawCharacterLayers(player: Player): void {\r\n        this.drawCharacterLayer(player, 'BODY', player.rig.body);\r\n        this.drawCharacterLayer(player, 'WEAPON', player.rig.weapon);\r\n        this.drawCharacterLayer(player, 'HEAD', player.rig.head);\r\n        this.drawCharacterLayer(player, 'HEADWEAR', player.rig.headwear);\r\n        this.drawUpgradeLayers(player);\r\n    }\r\n\r\n    /**\r\n     * Retrieves character assets and draws each layer using drawCharacterPart.\r\n     */\r\n    private drawCharacterLayer(player: Player, layer: CharacterLayer, variant: string): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        const assets = this.charManager.getCharacterAsset(layer, variant);\r\n\r\n        if (typeof assets === 'string') {\r\n            this.drawCharacterPart(player, assets, layer);\r\n        }\r\n        else if (Array.isArray(assets)) {\r\n            assets.forEach((assetPath, index) => {\r\n                this.drawCharacterPart(player, assetPath, layer, index);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the actual rendering for all player parts on each layer.\r\n     */\r\n    private drawCharacterPart(player: Player, assetPath: string, partType: CharacterLayer, partIndex?: number): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        let image = this.characterImages.get(assetPath);\r\n\r\n        if (!image) {\r\n            image = new Image();\r\n            image.src = assetPath;\r\n            this.characterImages.set(assetPath, image);\r\n            if (!image.complete) return;\r\n        }\r\n\r\n        if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n        const drawSize = GAME.CHARACTER_SIZE * (player.stats.size / GAME.CHARACTER_SIZE);\r\n\r\n        // Check for animation offset\r\n        const animationId = `${player.id}_${partType}_${partIndex || 0}`;\r\n        const animationOffset = this.animator.characterOffsets?.get(animationId) || { x: 0, y: 0 };\r\n\r\n        this.ui.ctx.save();\r\n\r\n        // Apply rotation if it exists\r\n        if (player.transform.rot !== undefined) {\r\n            this.ui.ctx.translate(player.transform.pos.x, player.transform.pos.y);\r\n            this.ui.ctx.rotate(player.transform.rot);\r\n\r\n            // Apply animation offset\r\n            this.ui.ctx.translate(animationOffset.x, animationOffset.y);\r\n\r\n            this.ui.ctx.drawImage(\r\n                image,\r\n                -drawSize / 2,\r\n                -drawSize / 2,\r\n                drawSize,\r\n                drawSize\r\n            );\r\n        } else {\r\n            this.ui.ctx.drawImage(\r\n                image,\r\n                player.transform.pos.x - drawSize / 2 + animationOffset.x,\r\n                player.transform.pos.y - drawSize / 2 + animationOffset.y,\r\n                drawSize,\r\n                drawSize\r\n            );\r\n        }\r\n\r\n        this.ui.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draws the equipment and unique upgrades that have a character layer visual component.\r\n     */\r\n    private drawUpgradeLayers(player: Player): void {\r\n        // Check unique upgrades\r\n        player.unique.forEach(uniqueName => {\r\n            const assetPath = this.charManager.getUpgradeVisual(uniqueName);\r\n            if (assetPath) {\r\n                this.drawCharacterPart(player, assetPath, 'UPGRADES');\r\n            }\r\n        });\r\n\r\n        // Check equipment upgrades\r\n        player.equipment.forEach(equipmentName => {\r\n            const assetPath = this.charManager.getUpgradeVisual(equipmentName);\r\n            if (assetPath) {\r\n                this.drawCharacterPart(player, assetPath, 'UPGRADES');\r\n            }\r\n        });\r\n    }\r\n    //\r\n\r\n    // [ Objects ]\r\n    //\r\n    /**\r\n     * Draws object entities on the canvas.\r\n     */\r\n    public drawObjects(): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        //TODO: Use this function to draw all 'objects' in the scene.\r\n\r\n        // Ammo Boxes\r\n        this.objectsManager.ammoBoxes.forEach(ammoBox => {\r\n            if (!this.ui.ctx) return;\r\n\r\n            // Load and cache images\r\n            if (!this.ammoBoxImages) this.ammoBoxImages = {};\r\n            const layers: (keyof typeof AMMO_BOX)[] = ['BASE', 'BULLETS', 'LID'];\r\n            layers.forEach(layer => {\r\n                if (!this.ammoBoxImages[layer]) {\r\n                    const img = new Image();\r\n                    img.src = AMMO_BOX[layer];\r\n                    this.ammoBoxImages[layer] = img;\r\n                }\r\n            });\r\n\r\n            if (!layers.every(layer => this.ammoBoxImages[layer]?.complete && this.ammoBoxImages[layer]?.naturalWidth > 0)) return;\r\n\r\n            const scale = 35;\r\n            const x = ammoBox.transform.pos.x;\r\n            const y = ammoBox.transform.pos.y;\r\n\r\n            // Update lid physics if open\r\n            if (ammoBox.isOpen) {\r\n                ammoBox.lid.velocity.x *= 0.85;\r\n                ammoBox.lid.velocity.y *= 0.85;\r\n                ammoBox.lid.torque *= 0.85;\r\n\r\n                ammoBox.lid.pos.x += ammoBox.lid.velocity.x;\r\n                ammoBox.lid.pos.y += ammoBox.lid.velocity.y;\r\n                ammoBox.lid.rot += ammoBox.lid.torque;\r\n            }\r\n\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.translate(x, y);\r\n            this.ui.ctx.rotate(ammoBox.transform.rot || 0);\r\n\r\n            // Draw body\r\n            this.ui.ctx.drawImage(this.ammoBoxImages['BASE'], -scale / 2, -scale / 2, scale, scale);\r\n\r\n            // Draw bullets only if NOT open\r\n            if (!ammoBox.isOpen) {\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['BULLETS'], -scale / 2, -scale / 2, scale, scale);\r\n                // Draw closed lid here\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['LID'], -scale / 2, -scale / 2, scale, scale);\r\n            }\r\n\r\n            this.ui.ctx.restore();\r\n\r\n            // Draw flying lid separately if open\r\n            if (ammoBox.isOpen) {\r\n                this.ui.ctx.save();\r\n                this.ui.ctx.translate(x + ammoBox.lid.pos.x, y + ammoBox.lid.pos.y);\r\n                this.ui.ctx.rotate((ammoBox.transform.rot || 0) + ammoBox.lid.rot);\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['LID'], -scale / 2, -scale / 2, scale, scale);\r\n                this.ui.ctx.restore();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draws the rect of the projectile and renders it on the main canvas.\r\n     */\r\n    public drawProjectile(projectile: Projectile): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        // Calculate projectile direction\r\n        const speed = Math.sqrt(projectile.velocity.x * projectile.velocity.x + projectile.velocity.y * projectile.velocity.y);\r\n        const dirX = projectile.velocity.x / speed;\r\n        const dirY = projectile.velocity.y / speed;\r\n\r\n        // Calculate front and back points\r\n        const frontX = projectile.transform.pos.x + dirX * (projectile.length / 2);\r\n        const frontY = projectile.transform.pos.y + dirY * (projectile.length / 2);\r\n        const backX = projectile.transform.pos.x - dirX * (projectile.length / 2);\r\n        const backY = projectile.transform.pos.y - dirY * (projectile.length / 2);\r\n\r\n        // Draw the capsule body (rectangle)\r\n        this.ui.ctx.fillStyle = projectile.color;\r\n        this.ui.ctx.strokeStyle = projectile.color;\r\n        this.ui.ctx.lineWidth = projectile.size;\r\n        this.ui.ctx.lineCap = 'round';\r\n\r\n        this.ui.ctx.beginPath();\r\n        this.ui.ctx.moveTo(backX, backY);\r\n        this.ui.ctx.lineTo(frontX, frontY);\r\n        this.ui.ctx.stroke();\r\n    }\r\n}","import { GAME } from \"./Config\";\r\n\r\nimport { GameState } from \"./GameState\";\r\nimport { LobbyManager } from \"./LobbyManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UpgradeManager } from \"./UpgradeManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\nimport { WebsocketManager } from \"./WebsocketManager\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class RoomController {\r\n    constructor(\r\n        private gameState: GameState,\r\n        private lobbyManager: LobbyManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private upgradeManager: UpgradeManager,\r\n        private userId: string,\r\n        private utility: Utility,\r\n        private wsManager: WebsocketManager\r\n    ) { }\r\n\r\n    /**\r\n     * Calls updateDisplay to show the room specific controls.\r\n     */\r\n    public showRoomControls(): void {\r\n        this.ui.updateDisplay(this.lobbyManager, \"room\");\r\n    }\r\n\r\n    /**\r\n     * Creates a websocket connection on the server, and a room with the roomManager.\r\n     */\r\n    public hostRoom(): void {\r\n        if (!this.wsManager.getWebSocket()) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                const roomId = this.roomManager.createRoom();\r\n                if (!roomId) return;\r\n\r\n                this.playerState.isHost = true;\r\n\r\n                this.lobbyManager.showLobbyControls({\r\n                    lobby: this.lobbyManager,\r\n                    lobbyOptions: {\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    },\r\n                    myPlayer: this.playerState.myPlayer,\r\n                    roomId: roomId,\r\n                    userId: this.userId\r\n                });\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        } else {\r\n            const roomId = this.roomManager.createRoom();\r\n            if (!roomId) return;\r\n\r\n            this.playerState.isHost = true;\r\n\r\n            this.lobbyManager.showLobbyControls({\r\n                lobby: this.lobbyManager,\r\n                lobbyOptions: {\r\n                    maxPlayers: this.gameState.gameMaxPlayers,\r\n                    maxWins: this.gameState.gameMaxWins,\r\n                    isHost: this.playerState.isHost,\r\n                    privateRoom: this.roomManager.isPrivateRoom,\r\n                    upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                },\r\n                myPlayer: this.playerState.myPlayer,\r\n                roomId: roomId,\r\n                userId: this.userId\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Displays the room joining modal, and allows pasting of room code.\r\n     */\r\n    public joinRoom(): void {\r\n        this.ui.showJoinRoomModal((roomId: string) => {\r\n            this.joinRoomById(roomId);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Directly connect to a game with it's room id.\r\n     * \r\n     * Called by the room join modal.\r\n     */\r\n    private joinRoomById(roomId: string): void {\r\n        if (!roomId) return;\r\n        if (!this.wsManager.getWebSocket()) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                this.roomManager.joinRoom(roomId!);\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        } else {\r\n            this.roomManager.joinRoom(roomId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls quickplay endpoint on server to find a random open public room.\r\n     */\r\n    public quickPlay(): void {\r\n        fetch('/quickplay')\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('No available rooms');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                if (!this.wsManager.getWebSocket()) {\r\n                    this.wsManager.connectWebSocket();\r\n                    this.utility.safeTimeout(() => {\r\n                        this.roomManager.joinRoom(data.roomId);\r\n                    }, GAME.CONNECTION_TIMEOUT);\r\n                } else {\r\n                    this.roomManager.joinRoom(data.roomId);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (!this.ui.modal || !this.ui.modalConfirmButton || !this.ui.modalCancelButton ||\r\n                    !this.ui.modalContent || !this.ui.modalText || !this.ui.modalInput ||\r\n                    !this.ui.modalErrorDiv || !this.ui.modalButtons) return;\r\n\r\n                this.ui.modal.classList.remove('hidden');\r\n                this.ui.modalInput.style.display = 'none';\r\n                this.ui.modalErrorDiv.textContent = ' ';\r\n                this.ui.modalButtons.style.display = 'flex';\r\n                this.ui.modalCancelButton.style.display = 'none';\r\n\r\n                this.ui.modalText.textContent = 'No available games found.';\r\n\r\n                this.ui.modalConfirmButton.textContent = 'Confirm';\r\n                this.ui.modalConfirmButton.onclick = () => {\r\n                    if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalCancelButton ||\r\n                        !this.ui.modalText || !this.ui.modalConfirmButton) return;\r\n\r\n                    this.ui.modal.classList.add('hidden');\r\n                    this.ui.modalInput.style.display = 'flex';\r\n                    this.ui.modalText.textContent = 'Join Room';\r\n                    this.ui.modalCancelButton.style.display = 'flex';\r\n                    this.ui.modalConfirmButton.onclick = null;\r\n                };\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Called when leaving the current room - resets game state.\r\n     */\r\n    public leaveRoom(): void {\r\n        this.roomManager.leaveRoom();\r\n\r\n        window.dispatchEvent(new CustomEvent(\"customEvent_resetGameState\", {\r\n            detail: { resetType: \"Room\" }\r\n        }));\r\n\r\n        this.showRoomControls();\r\n    }\r\n\r\n    /**\r\n     * Used to check for a room link in the URL when loading the page.\r\n     */\r\n    public checkForRoomInURL(): void {\r\n        const roomId = this.getRoomIdFromURL();\r\n        if (roomId) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                this.roomManager.joinRoom(roomId);\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * [DO NOT CALL - Call checkForRoomInURL] Directly parses the room ID from the URL if one is found. \r\n     */\r\n    private getRoomIdFromURL(): string | null {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        return urlParams.get('room');\r\n    }\r\n\r\n    /**\r\n     * Gets the room ID contextually, and copies it to clipboard.\r\n     */\r\n    public copyRoomCode(): void {\r\n        // Get room ID from either lobby or game container\r\n        const roomId = this.lobbyManager.inLobby\r\n            ? this.ui.roomIdDisplay?.textContent\r\n            : this.ui.gameRoomIdDisplay?.textContent;\r\n\r\n        if (!roomId) return;\r\n\r\n        navigator.clipboard.writeText(roomId).then(() => {\r\n            if (!this.ui.modal || !this.ui.modalConfirmButton || !this.ui.modalCancelButton ||\r\n                !this.ui.modalContent || !this.ui.modalText || !this.ui.modalInput ||\r\n                !this.ui.modalErrorDiv || !this.ui.modalButtons) return;\r\n\r\n            this.ui.modal.classList.remove('hidden');\r\n            this.ui.modalInput.style.display = 'none';\r\n            this.ui.modalErrorDiv.textContent = ' ';\r\n            this.ui.modalButtons.style.display = 'flex';\r\n            this.ui.modalCancelButton.style.display = 'none';\r\n\r\n            this.ui.modalText.textContent = 'Room code copied!';\r\n            this.ui.modalConfirmButton.textContent = 'Confirm';\r\n\r\n            // Define the close function\r\n            const closeModal = () => {\r\n                if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalCancelButton ||\r\n                    !this.ui.modalText || !this.ui.modalConfirmButton) return;\r\n\r\n                this.ui.modal.classList.add('hidden');\r\n                this.ui.modalInput.style.display = 'flex';\r\n                this.ui.modalText.textContent = 'Join Room';\r\n                this.ui.modalCancelButton.style.display = 'flex';\r\n                this.ui.modalConfirmButton.onclick = null;\r\n            };\r\n\r\n            this.ui.modalConfirmButton.onclick = closeModal;\r\n\r\n            // Auto-close after 3 seconds\r\n            this.utility.safeTimeout(() => {\r\n                if (this.ui.modal && !this.ui.modal.classList.contains('hidden')) {\r\n                    closeModal();\r\n                }\r\n            }, 3000);\r\n        }).catch(() => {\r\n            alert(\"Could not copy. Please copy manually.\");\r\n        });\r\n    }\r\n}","import { ROOM } from './Config';\r\nimport { RoomMessage } from './Types';\r\n\r\nimport { Utility } from './Utility';\r\n\r\nexport class RoomManager {\r\n  private currentRoom: string | null = null;\r\n  private ws: WebSocket | null = null;\r\n  private messageHandlers: ((message: RoomMessage) => void)[] = [];\r\n\r\n  public isPrivateRoom = false;\r\n\r\n  constructor(private userId: string, private utility: Utility) { }\r\n\r\n  /**\r\n   * Assigns the active WebSocket connection and sets up message handling.\r\n   */\r\n  public setWebSocket(ws: WebSocket): void {\r\n    this.ws = ws;\r\n    this.setupMessageHandler();\r\n  }\r\n\r\n  /**\r\n   * Creates a new room and automatically joins it as the host.\r\n   */\r\n  public createRoom(): string | null {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot create room: Not connected to server. Please refresh the page.');\r\n      return null;\r\n    }\r\n\r\n    const roomId = this.utility.generateUID(ROOM.ID_LENGTH, ROOM.ID_PREFIX);\r\n    this.joinRoom(roomId, true);\r\n    return roomId;\r\n  }\r\n\r\n  /**\r\n   * Joins an existing room or creates one if isHost is true.\r\n   */\r\n  public joinRoom(roomId: string, isHost: boolean = false): void {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot join room: Not connected to server. Please refresh the page.');\r\n      return;\r\n    }\r\n\r\n    const message: RoomMessage = {\r\n      type: isHost ? 'create-room' : 'join-room',\r\n      roomId,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n    this.currentRoom = roomId;\r\n    this.utility.generateLink(roomId, 'room');\r\n  }\r\n\r\n  /**\r\n   * Leaves the current room and resets the client state.\r\n   */\r\n  public leaveRoom(): void {\r\n    if (!this.currentRoom || !this.ws) return;\r\n\r\n    const message: RoomMessage = {\r\n      type: 'leave-room',\r\n      roomId: this.currentRoom,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n    this.currentRoom = null;\r\n    window.history.pushState({}, '', window.location.origin);\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of the current active room.\r\n   */\r\n  public sendMessage(text: string): void {\r\n    if (!this.currentRoom || !this.ws) return;\r\n\r\n    if (this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot send message: Not connected to server. Please refresh the page.');\r\n      return;\r\n    }\r\n\r\n    const message: RoomMessage = {\r\n      type: 'room-message',\r\n      roomId: this.currentRoom,\r\n      userId: this.userId,\r\n      message: text\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n  }\r\n\r\n  /**\r\n   * Sends an admin command from the frontend to backend.\r\n   */\r\n  public sendAdminCommand(command: string, key: string): void {\r\n    if (!this.ws) return;\r\n\r\n    const message = {\r\n      type: 'admin-command',\r\n      id: command,\r\n      key: key,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of the current active room.\r\n   */\r\n  public getCurrentRoom(): string | null {\r\n    return this.currentRoom;\r\n  }\r\n\r\n  /**\r\n   * Generates a shareable link for the current room.\r\n   */\r\n  public getRoomLink(param?: string): string | null {\r\n    return this.currentRoom ? this.utility.generateLink(this.currentRoom, param) : null;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to handle incoming room messages.\r\n   */\r\n  public onMessage(handler: (message: RoomMessage) => void): void {\r\n    this.messageHandlers.push(handler);\r\n  }\r\n\r\n  /**\r\n   * Processes incoming WebSocket messages and dispatches them to all handlers.\r\n   */\r\n  private setupMessageHandler(): void {\r\n    if (!this.ws) return;\r\n\r\n    this.ws.onmessage = (event) => {\r\n      try {\r\n        const message: RoomMessage = JSON.parse(event.data);\r\n        this.messageHandlers.forEach(handler => handler(message));\r\n      } catch (error) {\r\n        // Handle plain text messages (backwards compatibility)\r\n        const plainMessage: RoomMessage = {\r\n          type: 'room-message',\r\n          userId: 'server',\r\n          message: event.data\r\n        };\r\n        this.messageHandlers.forEach(handler => handler(plainMessage));\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { AUDIO, GAME } from \"./Config\";\r\nimport { GameSettings } from \"./Types\";\r\n\r\nimport { CacheManager } from \"./CacheManager\";\r\n\r\nexport class SettingsManager {\r\n    private gameSettings: GameSettings\r\n\r\n    constructor(private cacheManager: CacheManager) {\r\n        this.gameSettings = this.initSettings();\r\n    }\r\n\r\n    /**\r\n     * Initializes default options when the game starts.\r\n     */\r\n    public initSettings(): GameSettings {\r\n        return { // [ IMPORTANT ] Keep track of the default game options here\r\n            audio: {\r\n                mixer: {\r\n                    master: AUDIO.MIXER.MASTER,\r\n                    interface: AUDIO.MIXER.INTERFACE,\r\n                    music: AUDIO.MIXER.MUSIC,\r\n                    sfx: AUDIO.MIXER.SFX,\r\n                    voice: AUDIO.MIXER.VOICE\r\n                }\r\n            },\r\n            controls: {\r\n                keybinds: {\r\n                    attack: GAME.CONTROLS.KEYBINDS.ATTACK,\r\n                    dash: GAME.CONTROLS.KEYBINDS.DASH,\r\n                    melee: GAME.CONTROLS.KEYBINDS.MELEE,\r\n                    moveDown: GAME.CONTROLS.KEYBINDS.MOVE_DOWN,\r\n                    moveLeft: GAME.CONTROLS.KEYBINDS.MOVE_LEFT,\r\n                    moveRight: GAME.CONTROLS.KEYBINDS.MOVE_RIGHT,\r\n                    moveUp: GAME.CONTROLS.KEYBINDS.MOVE_UP,\r\n                    reload: GAME.CONTROLS.KEYBINDS.RELOAD,\r\n                    sprint: GAME.CONTROLS.KEYBINDS.SPRINT,\r\n                },\r\n                gamepad: {\r\n                    attack: GAME.CONTROLS.GAMEPAD.ATTACK,\r\n                    dash: GAME.CONTROLS.GAMEPAD.DASH,\r\n                    deadzone: GAME.CONTROLS.GAMEPAD.DEADZONE,\r\n                    melee: GAME.CONTROLS.GAMEPAD.MELEE,\r\n                    reload: GAME.CONTROLS.GAMEPAD.RELOAD,\r\n                    sprint: GAME.CONTROLS.GAMEPAD.SPRINT\r\n                }\r\n            },\r\n            graphics: {\r\n                physics: {\r\n                    ammoReserves: GAME.GRAPHICS.PHYSICS.AMMORESERVES\r\n                },\r\n                renderBackgroundParticles: GAME.GRAPHICS.BACKGROUND_PARTICLES,\r\n                showStaticOverlay: GAME.GRAPHICS.STATIC_OVERLAY,\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the currently stored gameSettings.\r\n     */\r\n    public getSettings(): GameSettings { return this.gameSettings }\r\n\r\n    /**\r\n     * Recursively updates any setting(s) passed within the stored gameSettings.\r\n     */\r\n    public updateSettings(settings: any): void {\r\n        const merge = (target: any, source: any): void => {\r\n            for (const key in source) {\r\n                if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\r\n                    if (!target[key]) target[key] = {};\r\n                    merge(target[key], source[key]);\r\n                } else {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        };\r\n\r\n        merge(this.gameSettings, settings);\r\n        this.cacheManager.write('gameSettings', this.gameSettings);\r\n    }\r\n\r\n    /**\r\n     * Loads the currently cached gameSettings from the cacheManager.\r\n     */\r\n    public async loadSettings(): Promise<void> {\r\n        const cached = await this.cacheManager.read('gameSettings');\r\n        if (cached) {\r\n            this.gameSettings = cached;\r\n        }\r\n    }\r\n}","import { DECALS, PARTICLES } from \"./Config\";\r\n\r\nimport { LobbyManager } from \"./LobbyManager\";\r\n\r\n// #region [ Core ]\r\n//\r\n/**\r\n * Represents a 2D vector with x and y coordinates.\r\n */\r\nexport type Vec2 = { x: number, y: number }\r\n\r\n/**\r\n * Represents an object's position and rotation in 2D space.\r\n */\r\nexport type Transform = {\r\n  pos: Vec2;\r\n  rot: number;\r\n}\r\n\r\n/**\r\n * Represents a directional relationship between two points in 2D space.\r\n */\r\nexport type Direction = { rootPos: Vec2; targetPos: Vec2; };\r\n//\r\n// #endregion\r\n\r\n// #region [ Game Object ]\r\n/**\r\n * Base interface for all game world entities.\r\n * Includes a unique ID, transform data, and a timestamp for synchronization.\r\n */\r\nexport interface GameObject {\r\n  id: string;\r\n  transform: Transform;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * All gameobject types.\r\n */\r\nexport type ObjectType = 'AmmoBox' | 'Player' | 'Projectile';\r\n\r\n/**\r\n * Mapping definition for stored player objects.\r\n */\r\nexport type Players = Map<string, Player>;\r\n\r\n/**\r\n * Full representation of the player object. Extends GameObject.\r\n */\r\nexport interface Player extends GameObject {\r\n  actions: {\r\n    dash: {\r\n      drain: number;\r\n      cooldown: number;\r\n      multiplier: number;\r\n      time: number;\r\n    }\r\n    melee: {\r\n      cooldown: number;\r\n      damage: number;\r\n      duration: number;\r\n      range: number;\r\n      size: number;\r\n    }\r\n    primary: {\r\n      buffer: number;\r\n      burst: {\r\n        amount: number;\r\n        delay: number;\r\n      }\r\n      magazine: {\r\n        currentAmmo: number;\r\n        currentReserve: number;\r\n        maxReserve: number;\r\n        size: number;\r\n      }\r\n      offset: number;\r\n      projectile: {\r\n        amount: number;\r\n        color: string;\r\n        damage: number;\r\n        length: number;\r\n        range: number;\r\n        size: number;\r\n        speed: number;\r\n        spread: number;\r\n      }\r\n      reload: { time: number; }\r\n    }\r\n    sprint: {\r\n      drain: number;\r\n      multiplier: number;\r\n    }\r\n  }\r\n  color: string;\r\n  equipment: string[],\r\n  flags: {\r\n    hidden: boolean;\r\n    invulnerable: boolean;\r\n  }\r\n  physics: {\r\n    acceleration: number;\r\n    friction: number;\r\n  }\r\n  rig: {\r\n    body: string;\r\n    head: string;\r\n    headwear: string;\r\n    weapon: string;\r\n  }\r\n  stats: {\r\n    defense: number;\r\n    health: {\r\n      max: number;\r\n      value: number;\r\n    }\r\n    luck: number;\r\n    size: number;\r\n    speed: number;\r\n    stamina: {\r\n      max: number;\r\n      recovery: {\r\n        delay: number;\r\n        rate: number;\r\n      }\r\n      value: number;\r\n    }\r\n  }\r\n  unique: string[];\r\n}\r\n\r\nexport interface Projectile extends GameObject {\r\n  color: string;\r\n  damage: number;\r\n  distanceTraveled: number;\r\n  length: number;\r\n  ownerId: string;\r\n  range: number;\r\n  size: number;\r\n  velocity: Vec2;\r\n}\r\n\r\nexport type ProjectileOverrides = {\r\n  canTriggerUnique?: boolean;\r\n  bypassDefault?: boolean;\r\n  color?: string;\r\n  damage?: number;\r\n  length?: number;\r\n  range?: number;\r\n  size?: number;\r\n  speed?: number;\r\n  spread?: number;\r\n  amount?: number;\r\n};\r\n\r\nexport interface AmmoBox extends GameObject {\r\n  ammoAmount: number;\r\n  isOpen: boolean;\r\n  lid: {\r\n    pos: Vec2;\r\n    rot: number;\r\n    velocity: Vec2;\r\n    torque: number;\r\n  };\r\n}\r\n\r\nexport interface SpawnObjectParams {\r\n  transform: Transform;\r\n  type: ObjectType;\r\n  data?: any;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Animation ]\r\n//\r\nexport interface AnimationParams {\r\n  playerId: string;\r\n  part: string;\r\n  frames: { [key: number]: { x: number, y: number } };\r\n  duration: number;\r\n  partIndex?: number;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Audio ]\r\n//\r\nexport interface AudioParams {\r\n  delay?: {\r\n    min: number;\r\n    max: number;\r\n  }\r\n  listener: Vec2;\r\n  loop?: boolean;\r\n  output?: string;\r\n  priority?: number;\r\n  pitch?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  spatial?: {\r\n    blend?: number;\r\n    pos?: Vec2;\r\n    rolloff?: {\r\n      distance: number;\r\n      factor: number;\r\n      type?: 'linear' | 'logarithmic';\r\n    }\r\n  }\r\n  src: string;\r\n  volume?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Lobby & Room ]\r\n//\r\nexport type ResetType = 'Room' | 'Lobby'\r\n\r\nexport interface RoomMessage {\r\n  type: 'join-room' | 'create-room' | 'leave-room' | 'room-message' | 'room-created' | 'room-joined' | 'room-joined-game' | 'room-error' | 'user-joined' | 'user-left';\r\n  roomId?: string;\r\n  userId: string;\r\n  message?: string;\r\n  data?: any;\r\n  gameActive?: boolean;\r\n}\r\n\r\nexport interface LobbyPlayer {\r\n  id: string;\r\n  color: string;\r\n  isHost: boolean;\r\n}\r\n\r\nexport type LobbyControlsParams = {\r\n  lobby: LobbyManager;\r\n  lobbyOptions: LobbyOptionsParams;\r\n  myPlayer: Player;\r\n  roomId: string;\r\n  userId: string;\r\n}\r\n\r\nexport type LobbyOptionsParams = {\r\n  maxPlayers: number;\r\n  maxWins: number;\r\n  isHost: boolean;\r\n  privateRoom: boolean;\r\n  upgradesEnabled: boolean;\r\n}\r\n\r\nexport type ChatMessage = {\r\n    senderId: string;\r\n    message: string;\r\n    isOwn?: boolean;\r\n};\r\n//\r\n// #endregion\r\n\r\n// #region [ Settings ]\r\n//\r\nexport interface GameSettings {\r\n  audio: {\r\n    mixer: {\r\n      master: number;\r\n      interface: number;\r\n      music: number;\r\n      sfx: number;\r\n      voice: number;\r\n    }\r\n  }\r\n  controls: {\r\n    keybinds: {\r\n      attack: string;\r\n      dash: string;\r\n      melee: string;\r\n      moveDown: string;\r\n      moveLeft: string;\r\n      moveRight: string;\r\n      moveUp: string;\r\n      reload: string;\r\n      sprint: string;\r\n    },\r\n    gamepad: {\r\n      attack: number;\r\n      dash: number;\r\n      deadzone: number;\r\n      melee: number;\r\n      reload: number;\r\n      sprint: number;\r\n    }\r\n  }\r\n  graphics: {\r\n    physics: {\r\n      ammoReserves: boolean;\r\n    }\r\n    renderBackgroundParticles: boolean;\r\n    showStaticOverlay: boolean;\r\n  }\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Params ]\r\n//\r\nexport type RandomColorParams = {\r\n  format: 'hex' | 'rgb';\r\n  mode: 'any' | 'primary' | 'pastel' | 'vibrant' | 'dark' | 'light' | 'grayscale';\r\n\r\n}\r\n\r\nexport type SetInputParams = {\r\n  inputId: string;\r\n  value: number;\r\n}\r\n\r\nexport type SetSliderParams = {\r\n  sliderId: string;\r\n  targetValue: number;\r\n  maxValue: number;\r\n  lerpTime?: number;\r\n}\r\n\r\nexport type SetSpanParams = {\r\n  spanId: string;\r\n  value: string | number;\r\n}\r\n\r\nexport type SetToggleParams = {\r\n  toggleId: string;\r\n  value: boolean;\r\n}\r\n\r\nexport type PlayerHitParams = {\r\n    target: Player;\r\n    shooterId: string;\r\n    damage: number;\r\n    newHealth: number;\r\n    source: Projectile | ShrapnelPiece;\r\n    wasKill: boolean;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Leaderboard ]\r\n//\r\nexport interface LeaderboardEntry {\r\n  playerId: string;\r\n  kills: number;\r\n  deaths: number;\r\n  wins: number;\r\n}\r\n\r\nexport type Leaderboard = Map<string, LeaderboardEntry>;\r\n//\r\n// #endregion\r\n\r\n// #region [ Combat ]\r\n//\r\nexport type AttackType = 'melee' | 'ranged';\r\n//\r\n// #endregion\r\n\r\n// #region [ Visual ]\r\n//\r\nexport type CharacterAnimation = Map<string, {\r\n  playerId: string;\r\n  part: string;\r\n  partIndex?: number;\r\n  frames: { [key: number]: { x: number, y: number } };\r\n  duration: number;\r\n  startTime: number;\r\n  originalOffset: { x: number, y: number };\r\n}>\r\n\r\nexport type Particle = {\r\n  age: number;\r\n  collide: boolean;\r\n  color: string;\r\n  fade: boolean;\r\n  hasCollided: boolean;\r\n  id: string;\r\n  initialSize: number;\r\n  lifetime: number;\r\n  maxOpacity: number;\r\n  noiseStrength: number;\r\n  noiseScale: number;\r\n  opacity: number;\r\n  paint: boolean;\r\n  pos: Vec2;\r\n  rotation: number;\r\n  size: number;\r\n  sizeOverLifetime: number;\r\n  stain: boolean;\r\n  torque: number;\r\n  velocity: Vec2\r\n}\r\n\r\nexport type EmitterParams = {\r\n  type?: string;\r\n  id: string;\r\n  interval: number;\r\n  lifetime: number;\r\n  offset: Vec2;\r\n  playerId: string;\r\n  pos: Vec2;\r\n  particleType: typeof PARTICLES[keyof typeof PARTICLES];\r\n}\r\n\r\nexport type Emitter = {\r\n  age: number;\r\n  direction: number;\r\n  emissionInterval: number;\r\n  lastEmission: number;\r\n  lifetime: number;\r\n  offset: Vec2;\r\n  playerId: string;\r\n  particleType: typeof PARTICLES[keyof typeof PARTICLES];\r\n}\r\n\r\nexport type Decal = {\r\n  params: typeof DECALS[keyof typeof DECALS] | null;\r\n  pos: Vec2;\r\n}\r\n\r\nexport type Shrapnel = {\r\n  amount: number;\r\n  damage: number;\r\n  images: string[];\r\n  lifetime: { min: number, max: number };\r\n  pos: Vec2;\r\n  size: { min: number, max: number };\r\n  speed: { min: number, max: number };\r\n  torque: { min: number, max: number };\r\n}\r\n\r\nexport type ShrapnelPiece = {\r\n  id: string;\r\n  image: string;\r\n  transform: Transform;\r\n  velocity: Vec2;\r\n  rotationSpeed: number;\r\n  size: number;\r\n  age: number;\r\n  lifetime: number;\r\n  ownerId: string;\r\n  damage: number;\r\n}\r\n\r\nexport type DeathDecal = { // TODO: Somehow pass the pool based on current charConfig\r\n  gore: {\r\n    amount: number;\r\n    // pool: string;\r\n  }\r\n  blood: {\r\n    amount: number;\r\n    // pool: string;\r\n  }\r\n  ownerId: string;\r\n  pos: Vec2;\r\n  radius: number;\r\n}\r\n\r\nexport type DeathStamp = {\r\n  transform: Transform;\r\n  type: string;\r\n  scale: number;\r\n  src: string;\r\n}\r\n\r\nexport type ReserveBulletParticle = {\r\n  transform: Transform;\r\n  velocity: Vec2;\r\n  torque: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport type CharacterLayer = 'BODY' | 'WEAPON' | 'HEAD' | 'HEADWEAR' | 'UPGRADES';\r\n//\r\n// #endregion\r\n\r\n// #region [ Upgrades ]\r\n//\r\nexport enum UpgradeRarity {\r\n  COMMON = 0,\r\n  UNCOMMON = 1,\r\n  SPECIAL = 2,\r\n  SUPERIOR = 3,\r\n  RARE = 4,\r\n  EXCEPTIONAL = 5,\r\n  LEGENDARY = 6,\r\n  MYTHICAL = 7,\r\n  ENLIGHTENED = 8,\r\n  HOLY = 9\r\n}\r\n\r\nexport enum UpgradeType {\r\n  EQUIPMENT = 'equipment',\r\n  RESOURCE = 'resource',\r\n  STAT = 'stat',\r\n  UNIQUE = 'unique',\r\n}\r\n\r\nexport interface Upgrade {\r\n  id: string;\r\n  icon: string;\r\n  name: string;\r\n  rarity: UpgradeRarity;\r\n  subtitle: string;\r\n  type: UpgradeType;\r\n  unique: boolean;\r\n  func: (player: Player) => void;\r\n}\r\n//\r\n// #endregion","import { PLAYER_DEFAULTS } from './Config';\r\nimport { Player, Upgrade, UpgradeRarity, UpgradeType } from './Types';\r\n\r\nimport { Utility } from './Utility';\r\n\r\nimport { AmmoReservesUIController } from './player/AmmoReservesUIController';\r\nimport { PlayerState } from './player/PlayerState';\r\n\r\n/**\r\n Upgrade Ideas:\r\n ionic compound\r\n randomly chance to combine all nProjeciles into one\r\n explosion on dash\r\n while sprinting, luck doubled\r\n bullet trails\r\n projectile with padding on sides = projectiles that are detonated on reload\r\n on death respawn as 1hp ghost who can melee with .25s invuln\r\n > [ Stats ]\r\n  - Size -- / Speed ++\r\n  - Damage ++ / Buffer ++\r\n  - \r\n > [ Persistent ]\r\n  - Projectile burst into more projectiles on non-player hit.\r\n  - Dash becomes teleport but uses twice as much stamina.\r\n  - Switch, unlocking further firing modes \r\n > [ Luck Based ]\r\n  - Explosive\r\n    > explode on hit\r\n    > stick, then explode after timer\r\n    > only explode on player hit\r\n  - Fire\r\n    > leave behind a flame on ground hit that persists and does damage for some time\r\n    > burn player on hit for timer\r\n  - Oil\r\n    > leave oil puddles on hit, flammable, oil on fire persists much longer\r\n  - Poison\r\n    > decrease player health gradually for timer on player hit\r\n    > leave pool of poison on ground for timer\r\n    > spray poison out on ground hit\r\n  - Bounce\r\n    > chance for projectile to bounce\r\n  - Orbital Laser\r\n    > chance to spawn cluster of lasers on non-boundary hit\r\n*/\r\n\r\nexport class UpgradeManager {\r\n    public takenUniques = new Set<string>(); // Pool of uniques already taken by players during this session\r\n    public upgradesCompleted = new Set<string>(); // Tracks round end upgrade progress\r\n\r\n    public isUpgradesEnabled = true;\r\n\r\n    private rarityConfig = {\r\n        [UpgradeRarity.COMMON]: {\r\n            weight: 35,\r\n            color: '#7e7e7e'\r\n        },\r\n        [UpgradeRarity.UNCOMMON]: {\r\n            weight: 20,\r\n            color: '#61b6d5'\r\n        },\r\n        [UpgradeRarity.SPECIAL]: {\r\n            weight: 15,\r\n            color: '#58d688'\r\n        },\r\n        [UpgradeRarity.SUPERIOR]: {\r\n            weight: 12,\r\n            color: '#ffc233'\r\n        },\r\n        [UpgradeRarity.RARE]: {\r\n            weight: 8,\r\n            color: '#0077ff'\r\n        },\r\n        [UpgradeRarity.EXCEPTIONAL]: {\r\n            weight: 5,\r\n            color: '#00ff62'\r\n        },\r\n        [UpgradeRarity.LEGENDARY]: {\r\n            weight: 2.5,\r\n            color: '#f6ff00'\r\n        },\r\n        [UpgradeRarity.MYTHICAL]: {\r\n            weight: 1.5,\r\n            color: '#ff0000'\r\n        },\r\n        [UpgradeRarity.ENLIGHTENED]: {\r\n            weight: 0.9,\r\n            color: '#9500ff'\r\n        },\r\n        [UpgradeRarity.HOLY]: {\r\n            weight: 0.1,\r\n            color: '#ff00f7'\r\n        }\r\n    };\r\n\r\n    public upgrades: Upgrade[] = [\r\n        // #region [ EQUIPMENT ]\r\n        //\r\n        {\r\n            // During dash cooldown, player will be able to hold shoot to auto-fire.\r\n            id: \"switch\",\r\n            name: \"Switch\",\r\n            subtitle: \"Completely legal and completely functional.\",\r\n            icon: \"/assets/img/icon/upgrades/switch.png\",\r\n            type: UpgradeType.EQUIPMENT,\r\n            rarity: UpgradeRarity.RARE,\r\n            unique: false,\r\n            func: (player: Player) => {\r\n                if (!player.equipment.includes('switch')) {\r\n                    player.equipment.push('switch');\r\n                    this.playerState.updateStat('actions.primary.projectile.spread', player.actions.primary.projectile.spread *= 1.15);\r\n                }\r\n            }\r\n        },\r\n        //\r\n        // #endregion\r\n        //\r\n        // #region [ RESOURCE ]\r\n        //\r\n        {\r\n            // Gives the player some ammo in their reserves.\r\n            id: \"care_package\",\r\n            name: \"Care Package\",\r\n            subtitle: \"These are hard to come by.\",\r\n            icon: \"/assets/img/icon/upgrades/carepackage.png\",\r\n            type: UpgradeType.RESOURCE,\r\n            rarity: UpgradeRarity.COMMON,\r\n            unique: false,\r\n            func: (player: Player) => {\r\n                const ammo = 20;\r\n\r\n                player.actions.primary.magazine.currentReserve += ammo;\r\n                this.ammoReservesUI.spawnAmmoInReserveUI(ammo);\r\n            }\r\n        },\r\n        //\r\n        // #endregion\r\n        //\r\n        // #region [ STATS ]\r\n        //\r\n        {\r\n            // Increases stamina, and stamina recovery, but increases regen delay after using.\r\n            id: \"bioregulator\",\r\n            name: \"Bioregulator\",\r\n            subtitle: \"Increases energy regulation efficiency, with a small boot overhead.\",\r\n            icon: \"/assets/img/icon/upgrades/bioregulator.png\",\r\n            type: UpgradeType.STAT,\r\n            rarity: UpgradeRarity.COMMON,\r\n            unique: false,\r\n            func: (player: Player) => {\r\n                this.playerState.updateStat('stats.stamina.max', player.stats.stamina.max * 1.1);\r\n                this.playerState.updateStat('stats.stamina.recovery.rate', player.stats.stamina.recovery.rate + 1);\r\n                this.playerState.updateStat('stats.stamina.recovery.delay', player.stats.stamina.recovery.delay * 1.25);\r\n            }\r\n        },\r\n        {\r\n            // Increases damage and shot buffer by 10%.\r\n            // Bullets hit harder, but can be shot less often each time this is taken. \r\n            id: \"damage_buffer\",\r\n            name: \"Damage Buffer\",\r\n            subtitle: \"Type D125 buffer, which improves damage at a small cost. \",\r\n            icon: \"/assets/img/icon/upgrades/damagebuffer.png\",\r\n            type: UpgradeType.STAT,\r\n            rarity: UpgradeRarity.UNCOMMON,\r\n            unique: false,\r\n            func: (player: Player) => {\r\n                this.playerState.updateStat('actions.primary.projectile.damage', player.actions.primary.projectile.damage * 1.1);\r\n                this.playerState.updateStat('actions.primary.buffer', player.actions.primary.buffer * 1.1);\r\n            }\r\n        },\r\n        {\r\n            // Increases the player's max health.\r\n            id: \"hemoglobin_saturator\",\r\n            name: \"Hemoglobin Saturator\",\r\n            subtitle: \"Increases red blood cell density for extended durability.\",\r\n            icon: \"/assets/img/icon/upgrades/hemoglobinsaturator.png\",\r\n            type: UpgradeType.RESOURCE,\r\n            rarity: UpgradeRarity.UNCOMMON,\r\n            unique: false,\r\n            func: (player: Player) => {\r\n                this.playerState.updateStat('stats.health.max', player.stats.health.max + 10);\r\n                this.playerState.updateStat('stats.health.value', player.stats.health.max); // Heal to new max\r\n            }\r\n        },\r\n        {\r\n            // Increases speed but also increases dash cooldown.\r\n            id: \"locomotion_module\",\r\n            name: \"Locomotion Module\",\r\n            subtitle: \"Primitave locomotion module installed on the user's footwear.\",\r\n            icon: \"/assets/img/icon/upgrades/locomotionmodule.png\",\r\n            type: UpgradeType.STAT,\r\n            rarity: UpgradeRarity.COMMON,\r\n            unique: false,\r\n            func: (player: Player) => {\r\n                this.playerState.updateStat('stats.speed', player.stats.speed + 1);\r\n                this.playerState.updateStat('actions.dash.cooldown', player.actions.dash.cooldown * 1.5);\r\n            }\r\n        },\r\n        //\r\n        // #endregion\r\n        //\r\n        // #region [ UNIQUE ]\r\n        //\r\n        {\r\n            // Luck based, causes projectiles to sometimes break into shrapnel on impact.\r\n            // Varying amounts of pieces can spawn, and shrapnel does 1 damage to any enemy hit.\r\n            id: \"cluster_module\",\r\n            name: \"Cluster Module\",\r\n            subtitle: \"Cluster enhancement module for primary attacks.\",\r\n            icon: \"/assets/img/icon/upgrades/clustermodule.png\",\r\n            type: UpgradeType.UNIQUE,\r\n            rarity: UpgradeRarity.RARE,\r\n            unique: true,\r\n            func: (player: Player) => {\r\n                if (!player.unique.includes('cluster_module')) {\r\n                    player.unique.push('cluster_module');\r\n                }\r\n            }\r\n        },\r\n        {\r\n            // Luck based, creates visible aura around player.\r\n            // Enemy projectiles in radius have a chance to be deflected.\r\n            id: \"kinetic_brain\",\r\n            name: \"Kinetic Brain\",\r\n            subtitle: \"Cerebral kinetic stem implant, unable to function at maximum capacity.\",\r\n            icon: \"/assets/img/icon/upgrades/kineticbrain.png\",\r\n            type: UpgradeType.UNIQUE,\r\n            rarity: UpgradeRarity.EXCEPTIONAL,\r\n            unique: true,\r\n            func: (player: Player) => {\r\n                if (!player.unique.includes('kinetic_brain')) {\r\n                    player.unique.push('kinetic_brain');\r\n                }\r\n            }\r\n        },\r\n        {\r\n            // Luck based, can replace standard shot with split shot.\r\n            id: \"muzzle_spliter\",\r\n            name: \"Muzzle Spliiter\",\r\n            subtitle: \"Muzzle modification for primary attacks, requires certain skillset.\",\r\n            icon: \"/assets/img/icon/upgrades/kineticbrain.png\",\r\n            type: UpgradeType.UNIQUE,\r\n            rarity: UpgradeRarity.SPECIAL,\r\n            unique: true,\r\n            func: (player: Player) => {\r\n                if (!player.unique.includes('muzzle_spliter')) {\r\n                    player.unique.push('muzzle_spliter');\r\n                }\r\n            }\r\n        },\r\n        {\r\n            // Luck based * 1.5, on death chance to trigger.\r\n            // One-time use, double damage received permanently on trigger.\r\n            id: \"phoenix_module\",\r\n            name: \"Phoenix Module\",\r\n            subtitle: \"Return from the flames with vengeance.\",\r\n            icon: \"/assets/img/icon/upgrades/phoenixmodule.png\",\r\n            type: UpgradeType.UNIQUE,\r\n            rarity: UpgradeRarity.LEGENDARY,\r\n            unique: true,\r\n            func: (player: Player) => {\r\n                if (!player.unique.includes('phoenix_module')) {\r\n                    player.unique.push('phoenix_module');\r\n                }\r\n            }\r\n        },\r\n        {\r\n            // Luck based, chance to add extra projectiles on shot in random direction.\r\n            // Extra shots have more spread, less distance and do half damage.\r\n            id: \"projectile_array\",\r\n            name: \"Projectile Array\",\r\n            subtitle: \"Chance to fire an array of extra projectiles.\",\r\n            icon: \"/assets/img/icon/upgrades/projectilearray.png\",\r\n            type: UpgradeType.UNIQUE,\r\n            rarity: UpgradeRarity.RARE,\r\n            unique: true,\r\n            func: (player: Player) => {\r\n                if (!player.unique.includes('projectile_array')) {\r\n                    player.unique.push('projectile_array');\r\n                }\r\n            }\r\n        },\r\n        {\r\n            // Allows player's rotation to slightly influence projectile direction.\r\n            id: \"spatial_targeting\",\r\n            name: \"Spatial Targeting\",\r\n            subtitle: \"Projectile upgrade that syncs its spatial awareness with the user.\",\r\n            icon: \"/assets/img/icon/upgrades/spatialtargeting.png\",\r\n            type: UpgradeType.UNIQUE,\r\n            rarity: UpgradeRarity.SUPERIOR,\r\n            unique: true,\r\n            func: (player: Player) => {\r\n                if (!player.unique.includes('spatial_targeting')) {\r\n                    player.unique.push('spatial_targeting');\r\n                }\r\n            }\r\n        },\r\n        {\r\n            // Dash replaced with spectral teleport, and increased range. No collisions when dashing.\r\n            id: \"spectral_image\",\r\n            name: \"Spectral Image\",\r\n            subtitle: \"Forward imaging coordinate transponder.\",\r\n            icon: \"/assets/img/icon/upgrades/spectralimage.png\",\r\n            type: UpgradeType.UNIQUE,\r\n            rarity: UpgradeRarity.EXCEPTIONAL,\r\n            unique: true,\r\n            func: (player: Player) => {\r\n                if (!player.unique.includes('spectral_image')) {\r\n                    player.unique.push('spectral_image');\r\n                    this.playerState.updateStat('actions.dash.time', player.actions.dash.time + 50);\r\n                }\r\n            }\r\n        }\r\n        //\r\n        // #endregion\r\n        //\r\n    ]\r\n\r\n    constructor(private ammoReservesUI: AmmoReservesUIController, private playerState: PlayerState, private utility: Utility) { }\r\n\r\n    /**\r\n     * Returns a selected amount of upgrades for a specific player in the game.\r\n     * \r\n     * Used to display upgrades for all round losers after brief roud-end pause.\r\n     */\r\n    public getUpgrades(count: number, player: Player): Upgrade[] {\r\n        // Filter available upgrades based on type restrictions\r\n        const availableUpgrades = this.upgrades.filter(upgrade => {\r\n            // Check if unique upgrade has already been taken globally\r\n            if (upgrade.unique && this.takenUniques.has(upgrade.id)) {\r\n                return false;\r\n            }\r\n\r\n            // Check if equipment is already owned by this player\r\n            if (upgrade.type === UpgradeType.EQUIPMENT && player.equipment.includes(upgrade.id)) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        // Weighted random selection using rarity config\r\n        const selected: Upgrade[] = [];\r\n\r\n        for (let i = 0; i < Math.min(count, availableUpgrades.length); i++) {\r\n            if (availableUpgrades.length === 0) break;\r\n\r\n            // Calculate weighted random selection using this.rarityConfig\r\n            const totalWeight = availableUpgrades.reduce((sum, upgrade) => {\r\n                return sum + this.getRarityWeight(upgrade.rarity);\r\n            }, 0);\r\n\r\n            let random = Math.random() * totalWeight;\r\n            let selectedUpgrade: Upgrade | null = null;\r\n\r\n            for (const upgrade of availableUpgrades) {\r\n                random -= this.getRarityWeight(upgrade.rarity);\r\n                if (random <= 0) {\r\n                    selectedUpgrade = upgrade;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (selectedUpgrade) {\r\n                selected.push(selectedUpgrade);\r\n                // Remove from available pool to prevent duplicates in this selection\r\n                const index = availableUpgrades.indexOf(selectedUpgrade);\r\n                availableUpgrades.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        return selected;\r\n    }\r\n\r\n    /**\r\n     * Applies a specific upgrade to a specific player by mutating their myPlayer object.\r\n     */\r\n    public applyUpgrade(upgradeId: string, player: Player): boolean {\r\n        const upgrade = this.upgrades.find(u => u.id === upgradeId);\r\n        if (!upgrade) return false;\r\n\r\n        // Double-check restrictions\r\n        if (upgrade.unique && this.takenUniques.has(upgradeId)) {\r\n            console.warn(`Unique upgrade ${upgradeId} already taken globally`);\r\n            return false;\r\n        }\r\n\r\n        if (upgrade.type === UpgradeType.EQUIPMENT && this.hasEquipment(player, upgradeId)) {\r\n            console.warn(`Equipment ${upgradeId} already owned by player`);\r\n            return false;\r\n        }\r\n\r\n        // Track unique upgrades globally\r\n        if (upgrade.unique) {\r\n            this.takenUniques.add(upgradeId);\r\n        }\r\n\r\n        // Apply the upgrade to the player object\r\n        upgrade.func(player);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes a unique upgrade from the global pool.\r\n     * \r\n     * This process involved adding the unique item to the client's takenUniques array.\r\n     * \r\n     * Network message 'upgrade-taken' broadcasts this to all players.\r\n     */\r\n    public removeUpgradeFromPool(upgradeId: string): void {\r\n        this.takenUniques.add(upgradeId);\r\n    }\r\n\r\n    /**\r\n     * Resets the global uniques pool to a clean slate.\r\n     */\r\n    public resetUpgrades(player: Player): void {\r\n        this.takenUniques.clear();\r\n\r\n        player.equipment = PLAYER_DEFAULTS.EQUIPMENT;\r\n        player.unique = PLAYER_DEFAULTS.UNIQUE;\r\n    }\r\n\r\n    // #region [ Helpers ]\r\n    //\r\n    /**\r\n     * Returns boolean based on if the selected player has a specific equipment piece or not.\r\n     */\r\n    public hasEquipment(player: Player, equipmentId: string): boolean {\r\n        return player.equipment.includes(equipmentId);\r\n    }\r\n\r\n    /**\r\n     * Returns boolean based on if the selected player has a specific unique item or not.\r\n     */\r\n    private hasUnique(player: Player, uniqueId: string): boolean {\r\n        return player.unique.includes(uniqueId);\r\n    }\r\n\r\n    /**\r\n     * Gets the color associated with a specific rarity.\r\n     */\r\n    private getRarityColor(rarity: UpgradeRarity): string {\r\n        return this.rarityConfig[rarity].color;\r\n    }\r\n\r\n    /**\r\n     * Gets the weight of a specific rarity.\r\n     */\r\n    private getRarityWeight(rarity: UpgradeRarity): number {\r\n        return this.rarityConfig[rarity].weight;\r\n    }\r\n}","import { CANVAS, GAMEPAD_MAP } from \"./Config\";\r\nimport { GameSettings, Leaderboard, Players } from \"./Types\";\r\n\r\nimport { LobbyManager } from \"./LobbyManager\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class UserInterface {\r\n    // [ Canvas ]\r\n    //\r\n    public ammoReservesCanvas: HTMLCanvasElement | null = null;\r\n    public ammoReservesCtx: CanvasRenderingContext2D | null = null;\r\n    public canvas: HTMLCanvasElement | null = null;\r\n    public ctx: CanvasRenderingContext2D | null = null;\r\n    public decalCanvas: HTMLCanvasElement | null = null;\r\n    public decalCtx: CanvasRenderingContext2D | null = null;\r\n    //\r\n    //\r\n    // [ Containers ]\r\n    //\r\n    public gameContainer: HTMLDivElement | null = null;\r\n    public gameOptionsContainer: HTMLDivElement | null = null;\r\n    public lobbyContainer: HTMLDivElement | null = null;\r\n    public roomControls: HTMLDivElement | null = null;\r\n    public upgradeContainer: HTMLElement | null = null;\r\n    //\r\n    //\r\n    // [ Displays ]\r\n    //\r\n    public gameRoomIdDisplay: HTMLSpanElement | null = null;\r\n    public lobbyPlayersList: HTMLDivElement | null = null;\r\n    public roomIdDisplay: HTMLSpanElement | null = null;\r\n    public userIdDisplay: HTMLSpanElement | null = null;\r\n    //\r\n    //\r\n    // [ Buttons ]\r\n    //\r\n    public gameCodeButton: HTMLButtonElement | null = null;\r\n    public gameLeaveButton: HTMLButtonElement | null = null;\r\n    public hostButton: HTMLButtonElement | null = null;\r\n    public joinButton: HTMLButtonElement | null = null;\r\n    public lobbyCodeButton: HTMLButtonElement | null = null;\r\n    public lobbyLeaveButton: HTMLButtonElement | null = null;\r\n    public quickplayButton: HTMLButtonElement | null = null;\r\n    public startGameBtn: HTMLButtonElement | null = null;\r\n    //\r\n    //\r\n    // [ Inputs / Toggles ]\r\n    //\r\n    public playersInput: HTMLInputElement | null = null;\r\n    public privateToggle: HTMLElement | null = null;\r\n    public upgradesToggle: HTMLElement | null = null;\r\n    public winsInput: HTMLInputElement | null = null;\r\n    //\r\n    //\r\n    // [ Chat ]\r\n    //\r\n    public chatContainer: HTMLDivElement | null = null;\r\n    public chatInput: HTMLInputElement | null = null;\r\n    public chatMessages: HTMLDivElement | null = null;\r\n    public chatSendBtn: HTMLButtonElement | null = null;\r\n    //\r\n    //\r\n    // [ Modal ]\r\n    //\r\n    public modal: HTMLElement | null = null;\r\n    public modalButtons: HTMLDivElement | null = null;\r\n    public modalCancelButton: HTMLButtonElement | null = null;\r\n    public modalConfirmButton: HTMLButtonElement | null = null;\r\n    public modalContent: HTMLElement | null = null;\r\n    public modalErrorDiv: HTMLElement | null = null;\r\n    public modalInput: HTMLInputElement | null = null;\r\n    public modalText: HTMLSpanElement | null = null;\r\n    //\r\n    //\r\n    // [ Leaderboard ]\r\n    //\r\n    public leaderboard: Leaderboard = new Map();\r\n    public leaderboardBody: HTMLTableSectionElement | null = null;\r\n    public leaderboardContainer: HTMLDivElement | null = null;\r\n    //\r\n    //\r\n    // [ Settings ]\r\n    public settingsContainer: HTMLDivElement | null = null;\r\n    public settingsButton: HTMLButtonElement | null = null;\r\n    public settingsCloseButton: HTMLButtonElement | null = null;\r\n    public controlsTab: HTMLDivElement | null = null;\r\n    public graphicsTab: HTMLDivElement | null = null;\r\n    public soundTab: HTMLDivElement | null = null;\r\n    public controlsBody: HTMLDivElement | null = null;\r\n    public graphicsBody: HTMLDivElement | null = null;\r\n    public soundBody: HTMLDivElement | null = null;\r\n\r\n    public masterSlider: HTMLDivElement | null = null;\r\n    public masterFill: HTMLDivElement | null = null;\r\n    public masterValue: HTMLDivElement | null = null;\r\n    public interfaceSlider: HTMLDivElement | null = null;\r\n    public interfaceFill: HTMLDivElement | null = null;\r\n    public interfaceValue: HTMLDivElement | null = null;\r\n    public musicSlider: HTMLDivElement | null = null;\r\n    public musicFill: HTMLDivElement | null = null;\r\n    public musicValue: HTMLDivElement | null = null;\r\n    public sfxSlider: HTMLDivElement | null = null;\r\n    public sfxFill: HTMLDivElement | null = null;\r\n    public sfxValue: HTMLDivElement | null = null;\r\n    public voiceSlider: HTMLDivElement | null = null;\r\n    public voiceFill: HTMLDivElement | null = null;\r\n    public voiceValue: HTMLDivElement | null = null;\r\n\r\n    public deadzoneInput: HTMLInputElement | null = null;\r\n\r\n    public particleJSToggle: HTMLElement | null = null;\r\n    public staticVfxToggle: HTMLElement | null = null;\r\n    public ammoReservesPhysicsToggle: HTMLElement | null = null;\r\n    //\r\n    //\r\n    // [ Stats ]\r\n    public accuracyStat: HTMLSpanElement | null = null;\r\n    public damageStat: HTMLSpanElement | null = null;\r\n    public luckStat: HTMLSpanElement | null = null;\r\n    public rangeStat: HTMLSpanElement | null = null;\r\n    public shotSpeedStat: HTMLSpanElement | null = null;\r\n    public speedStat: HTMLSpanElement | null = null;\r\n\r\n    constructor(\r\n        private playerState: PlayerState,\r\n        private settingsManager: SettingsManager,\r\n        private utility: Utility\r\n    ) {\r\n        this.initInterfaceListeners();\r\n    }\r\n\r\n    // #region [ Init ]\r\n    //\r\n    /**\r\n     * Responsible for initializing all elements defined in the class structure.\r\n     * \r\n     * Do not use \"getElement\" type lookups on runtime. Cache them all on start.\r\n     */\r\n    public initInterface() {\r\n        this.canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\r\n        this.decalCanvas = document.createElement('canvas') as HTMLCanvasElement;\r\n        this.ammoReservesCanvas = document.getElementById('ammoReservesCanvas') as HTMLCanvasElement;\r\n\r\n        this.roomControls = document.getElementById('roomControls') as HTMLDivElement;\r\n        this.gameContainer = document.getElementById('gameContainer') as HTMLDivElement;\r\n        this.lobbyContainer = document.getElementById('lobbyContainer') as HTMLDivElement;\r\n        this.lobbyPlayersList = document.getElementById('lobbyPlayersList') as HTMLDivElement;\r\n        this.startGameBtn = document.getElementById('startGameBtn') as HTMLButtonElement;\r\n        this.gameOptionsContainer = document.getElementById('gameOptionsContainer') as HTMLDivElement;\r\n\r\n        this.userIdDisplay = document.getElementById('userId') as HTMLSpanElement;\r\n        this.roomIdDisplay = document.getElementById('roomId') as HTMLSpanElement;\r\n        this.gameRoomIdDisplay = document.getElementById('gameRoomId') as HTMLSpanElement;\r\n\r\n        this.chatContainer = document.getElementById('chatContainer') as HTMLDivElement;\r\n        this.chatMessages = document.getElementById('chatMessages') as HTMLDivElement;\r\n        this.chatInput = document.getElementById('chatInput') as HTMLInputElement;\r\n        this.chatSendBtn = document.getElementById('chatSendBtn') as HTMLButtonElement;\r\n\r\n        this.privateToggle = document.getElementById('privateToggle') as HTMLElement;\r\n        this.upgradesToggle = document.getElementById('upgradesToggle') as HTMLElement;\r\n        this.winsInput = document.getElementById('winsInput') as HTMLInputElement;\r\n        this.playersInput = document.getElementById('playersInput') as HTMLInputElement;\r\n\r\n        this.upgradeContainer = document.getElementById('upgradeContainer') as HTMLElement;\r\n\r\n        this.leaderboardContainer = document.getElementById('leaderboardContainer') as HTMLDivElement;\r\n        this.leaderboardBody = document.getElementById('leaderboardBody') as HTMLTableSectionElement;\r\n\r\n        this.hostButton = document.getElementById('atomHost') as HTMLButtonElement;\r\n        this.joinButton = document.getElementById('atomJoin') as HTMLButtonElement;\r\n        this.quickplayButton = document.getElementById('atomQuickplay') as HTMLButtonElement;\r\n\r\n        this.lobbyLeaveButton = document.getElementById('lobbyLeaveBtn') as HTMLButtonElement;\r\n        this.lobbyCodeButton = document.getElementById('lobbyCodeBtn') as HTMLButtonElement;\r\n\r\n        this.gameLeaveButton = document.getElementById('gameLeaveBtn') as HTMLButtonElement;\r\n        this.gameCodeButton = document.getElementById('gameCodeBtn') as HTMLButtonElement;\r\n\r\n        this.modal = document.getElementById('modal') as HTMLDivElement;\r\n        this.modalInput = document.getElementById('joinRoomInput') as HTMLInputElement;\r\n        this.modalButtons = document.getElementById('modalButtons') as HTMLDivElement;\r\n        this.modalConfirmButton = document.getElementById('joinRoomConfirmBtn') as HTMLButtonElement;\r\n        this.modalCancelButton = document.getElementById('joinRoomCancelBtn') as HTMLButtonElement;\r\n        this.modalErrorDiv = document.getElementById('joinRoomError') as HTMLDivElement;\r\n        this.modalContent = document.getElementById('modalContent') as HTMLDivElement;\r\n        this.modalText = document.getElementById('modalText') as HTMLSpanElement;\r\n\r\n        this.settingsContainer = document.getElementById('settingsContainer') as HTMLDivElement;\r\n        this.settingsButton = document.getElementById('atomSettings') as HTMLButtonElement;\r\n        this.settingsCloseButton = document.getElementById('settingsCloseButton') as HTMLButtonElement;\r\n        this.controlsTab = document.getElementById('controlsTab') as HTMLDivElement;\r\n        this.graphicsTab = document.getElementById('graphicsTab') as HTMLDivElement;\r\n        this.soundTab = document.getElementById('soundTab') as HTMLDivElement;\r\n        this.controlsBody = document.getElementById('controlsBody') as HTMLDivElement;\r\n        this.graphicsBody = document.getElementById('graphicsBody') as HTMLDivElement;\r\n        this.soundBody = document.getElementById('soundBody') as HTMLDivElement;\r\n\r\n        this.masterSlider = document.getElementById('masterSlider') as HTMLDivElement;\r\n        this.masterFill = document.getElementById('masterFill') as HTMLDivElement;\r\n        this.masterValue = document.getElementById('masterValue') as HTMLDivElement;\r\n        this.interfaceSlider = document.getElementById('interfaceSlider') as HTMLDivElement;\r\n        this.interfaceFill = document.getElementById('interfaceFill') as HTMLDivElement;\r\n        this.interfaceValue = document.getElementById('interfaceValue') as HTMLDivElement;\r\n        this.musicSlider = document.getElementById('musicSlider') as HTMLDivElement;\r\n        this.musicFill = document.getElementById('musicFill') as HTMLDivElement;\r\n        this.musicValue = document.getElementById('musicValue') as HTMLDivElement;\r\n        this.sfxSlider = document.getElementById('sfxSlider') as HTMLDivElement;\r\n        this.sfxFill = document.getElementById('sfxFill') as HTMLDivElement;\r\n        this.sfxValue = document.getElementById('sfxValue') as HTMLDivElement;\r\n        this.voiceSlider = document.getElementById('voiceSlider') as HTMLDivElement;\r\n        this.voiceFill = document.getElementById('voiceFill') as HTMLDivElement;\r\n        this.voiceValue = document.getElementById('voiceValue') as HTMLDivElement;\r\n\r\n        this.deadzoneInput = document.getElementById('deadzoneInput') as HTMLInputElement;\r\n\r\n        this.particleJSToggle = document.getElementById('particleJSToggle') as HTMLElement;\r\n        this.staticVfxToggle = document.getElementById('staticToggle') as HTMLElement;\r\n        this.ammoReservesPhysicsToggle = document.getElementById('ammoReservesPhysicsToggle') as HTMLElement;\r\n\r\n        this.accuracyStat = document.getElementById('accuracyValue') as HTMLSpanElement;\r\n        this.damageStat = document.getElementById('damageValue') as HTMLSpanElement;\r\n        this.luckStat = document.getElementById('luckValue') as HTMLSpanElement;\r\n        this.rangeStat = document.getElementById('rangeValue') as HTMLSpanElement;\r\n        this.shotSpeedStat = document.getElementById('shotSpeedValue') as HTMLSpanElement;\r\n        this.speedStat = document.getElementById('speedValue') as HTMLSpanElement;\r\n\r\n        if (!this.canvas || !this.decalCanvas || !this.ammoReservesCanvas || !this.roomControls || !this.gameContainer ||\r\n            !this.lobbyContainer || !this.userIdDisplay || !this.roomIdDisplay || !this.gameRoomIdDisplay ||\r\n            !this.lobbyPlayersList || !this.startGameBtn || !this.gameOptionsContainer ||\r\n            !this.chatContainer || !this.chatMessages || !this.chatInput || !this.chatSendBtn ||\r\n            !this.privateToggle || !this.upgradesToggle || !this.winsInput || !this.playersInput ||\r\n            !this.upgradeContainer || !this.leaderboardContainer || !this.leaderboardBody || !this.hostButton ||\r\n            !this.joinButton || !this.quickplayButton || !this.lobbyLeaveButton || !this.lobbyCodeButton ||\r\n            !this.gameLeaveButton || !this.gameCodeButton || !this.settingsButton || !this.settingsCloseButton ||\r\n            !this.settingsContainer || !this.controlsTab || !this.graphicsTab || !this.soundTab || !this.controlsBody ||\r\n            !this.graphicsBody || !this.soundBody || !this.masterSlider || !this.masterFill || !this.interfaceSlider ||\r\n            !this.interfaceFill || !this.musicSlider || !this.musicFill || !this.sfxSlider || !this.sfxFill ||\r\n            !this.voiceSlider || !this.voiceFill || !this.masterValue || !this.interfaceValue ||\r\n            !this.musicValue || !this.sfxValue || !this.voiceValue || !this.accuracyStat || !this.damageStat ||\r\n            !this.luckStat || !this.rangeStat || !this.shotSpeedStat || !this.speedStat || !this.deadzoneInput ||\r\n            !this.particleJSToggle || !this.staticVfxToggle || !this.ammoReservesPhysicsToggle\r\n        ) {\r\n            alert('Failed to load game. Please refresh the page.');\r\n            throw new Error('Critical error: Required DOM elements are missing.');\r\n        }\r\n\r\n        this.canvas.width = CANVAS.WIDTH;\r\n        this.canvas.height = CANVAS.HEIGHT;\r\n        this.decalCanvas.width = CANVAS.WIDTH;\r\n        this.decalCanvas.height = CANVAS.HEIGHT;\r\n        this.ammoReservesCanvas.width = 100;\r\n        this.ammoReservesCanvas.height = 64;\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.decalCtx = this.decalCanvas.getContext('2d');\r\n        this.ammoReservesCtx = this.ammoReservesCanvas.getContext('2d');\r\n\r\n        if (!this.ctx || !this.decalCtx || !this.ammoReservesCtx) {\r\n            alert('Failed to load game. Please refresh the page.');\r\n            throw new Error('Could not get canvas context');\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Display ]\r\n    //\r\n    /**\r\n     * Updates the display based on the current state.\r\n     */\r\n    public updateDisplay(lobby: LobbyManager, target: \"lobby\" | \"room\" | \"game\", roomId?: string): void {\r\n        if (!this.roomControls || !this.lobbyContainer || !this.gameContainer ||\r\n            !this.chatContainer || !this.leaderboardContainer) return;\r\n\r\n        this.clearDisplay();\r\n\r\n        switch (target) {\r\n            case \"lobby\":\r\n                this.lobbyContainer.style.display = \"flex\";\r\n                this.chatContainer.style.display = \"flex\";\r\n                if (roomId && this.roomIdDisplay) {\r\n                    this.roomIdDisplay.textContent = roomId;\r\n                }\r\n                lobby.inLobby = true;\r\n                break;\r\n\r\n            case \"room\":\r\n                this.roomControls.style.display = \"flex\";\r\n                break;\r\n\r\n            case \"game\":\r\n                this.gameContainer.style.display = \"flex\";\r\n                this.chatContainer.style.display = \"flex\";\r\n                this.leaderboardContainer.style.display = \"flex\";\r\n                if (roomId) {\r\n                    const gameRoomId = this.gameRoomIdDisplay;\r\n                    if (gameRoomId) gameRoomId.textContent = roomId;\r\n                }\r\n                lobby.inLobby = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows host controls when called.\r\n     */\r\n    public updateHostDisplay(isHost: boolean, lobby: LobbyManager): void {\r\n        if (!this.startGameBtn || !this.gameOptionsContainer) return;\r\n\r\n        this.startGameBtn.style.display = isHost ? 'block' : 'none';\r\n        this.startGameBtn.disabled = lobby.lobbyPlayers.size < 1;\r\n\r\n        this.gameOptionsContainer.style.display = isHost ? 'flex' : 'none';\r\n    }\r\n\r\n    /**\r\n     * Displays connected players in the lobby interface.\r\n     */\r\n    public displayLobbyPlayers(isHost: boolean, lobby: LobbyManager, userId: string): void {\r\n        if (!this.lobbyPlayersList) return;\r\n\r\n        this.lobbyPlayersList.innerHTML = '';\r\n\r\n        // Sort players: host first, then others\r\n        const sortedPlayers = Array.from(lobby.lobbyPlayers.values()).sort((a, b) => {\r\n            if (a.isHost && !b.isHost) return -1;\r\n            if (!a.isHost && b.isHost) return 1;\r\n            return 0;\r\n        });\r\n\r\n        sortedPlayers.forEach(player => {\r\n            const playerDiv = document.createElement('div');\r\n            playerDiv.className = 'lobby_player';\r\n\r\n            const colorDiv = document.createElement('div');\r\n            colorDiv.className = 'player_color';\r\n            colorDiv.style.backgroundColor = player.color;\r\n\r\n            const nameDiv = document.createElement('div');\r\n            nameDiv.className = 'player_name';\r\n            nameDiv.textContent = `${player.id}${player.isHost ? ' (Host)' : ''}`;\r\n\r\n            const controlsDiv = document.createElement('div');\r\n            controlsDiv.className = 'player_controls';\r\n\r\n            // Only show controls if I'm the host and this isn't me\r\n            if (isHost && player.id !== userId) {\r\n                const promoteBtn = document.createElement('button');\r\n                promoteBtn.textContent = 'Promote';\r\n                promoteBtn.onclick = () => lobby.promotePlayer(player.id);\r\n\r\n                const kickBtn = document.createElement('button');\r\n                kickBtn.textContent = 'Kick';\r\n                kickBtn.className = 'danger';\r\n                kickBtn.onclick = () => lobby.kickPlayer(player.id);\r\n\r\n                controlsDiv.appendChild(promoteBtn);\r\n                controlsDiv.appendChild(kickBtn);\r\n            }\r\n\r\n            playerDiv.appendChild(colorDiv);\r\n            playerDiv.appendChild(nameDiv);\r\n            playerDiv.appendChild(controlsDiv);\r\n\r\n            if (this.lobbyPlayersList) {\r\n                this.lobbyPlayersList.appendChild(playerDiv);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refreshes the display to a blank slate.\r\n     */\r\n    private clearDisplay(): void {\r\n        if (!this.roomControls || !this.lobbyContainer || !this.gameContainer ||\r\n            !this.chatContainer || !this.leaderboardContainer || !this.upgradeContainer) return;\r\n\r\n        this.roomControls.style.display = \"none\";\r\n        this.lobbyContainer.style.display = \"none\";\r\n        this.gameContainer.style.display = \"none\";\r\n        this.chatContainer.style.display = \"none\";\r\n        this.leaderboardContainer.style.display = \"none\";\r\n        this.upgradeContainer.style.display = \"none\";\r\n    }\r\n\r\n    /**\r\n     * Unified modal closure function used to close and refresh the modal.\r\n     */\r\n    public closeModal(): void {\r\n        if (!this.modal || !this.modalInput || !this.modalConfirmButton ||\r\n            !this.modalCancelButton || !this.modalText) return;\r\n\r\n        this.modal.classList.add('hidden');\r\n        this.modalInput.style.display = 'flex';\r\n        this.modalText.textContent = 'Join Room';\r\n        this.modalConfirmButton.onclick = null;\r\n        this.modalCancelButton.onclick = null;\r\n        this.modalInput.onkeydown = null;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Room Modal ]\r\n    //\r\n    /**\r\n     * Shows the join room modal for pasting room codes.\r\n     */\r\n    public showJoinRoomModal(onConfirm: (roomId: string) => void): void {\r\n        if (!this.modal || !this.modalInput || !this.modalConfirmButton ||\r\n            !this.modalCancelButton || !this.modalErrorDiv) return;\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.modalInput.value = '';\r\n        this.modalErrorDiv.textContent = '';\r\n\r\n        this.modalConfirmButton.textContent = 'Join'\r\n\r\n        this.modalInput.focus();\r\n\r\n        this.modalConfirmButton.onclick = () => {\r\n            if (!this.modalInput || !this.modalErrorDiv) return;\r\n\r\n            const value = this.modalInput.value.trim();\r\n            if (!value) {\r\n                this.modalErrorDiv.textContent = 'Invalid code...';\r\n                return;\r\n            }\r\n\r\n            let roomId: string | null = null;\r\n            try {\r\n                const url = new URL(value, window.location.origin);\r\n                if (url.pathname.startsWith(\"/room_\")) {\r\n                    roomId = url.pathname.replace(\"/\", \"\");\r\n                } else {\r\n                    roomId = new URLSearchParams(url.search).get(\"room\");\r\n                }\r\n            } catch {\r\n                if (value.startsWith(\"room_\")) {\r\n                    roomId = value;\r\n                }\r\n            }\r\n\r\n            if (!roomId) {\r\n                this.modalErrorDiv.textContent = 'Invalid code...';\r\n                return;\r\n            }\r\n\r\n            this.closeModal();\r\n            onConfirm(roomId); // pass back the parsed roomId\r\n        };\r\n\r\n        this.modalCancelButton.onclick = () => this.closeModal();\r\n    }\r\n\r\n    /**\r\n     * Displays a wanring modal if the player starts a game alone.\r\n     */\r\n    public soloGameWarning(onConfirm: () => void): void {\r\n        if (!this.modal || !this.modalConfirmButton || !this.modalCancelButton ||\r\n            !this.modalContent || !this.modalText || !this.modalInput ||\r\n            !this.modalErrorDiv || !this.modalButtons) return;\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.modalInput.style.display = 'none';\r\n        this.modalErrorDiv.textContent = ' ';\r\n        this.modalButtons.style.display = 'flex';\r\n        this.modalCancelButton.style.display = 'flex';\r\n\r\n        this.modalText.textContent = 'Start game as only player? Other players will be unable to join until you return to the lobby.';\r\n        this.modalConfirmButton.textContent = 'Start Game';\r\n        this.modalCancelButton.textContent = 'Cancel';\r\n\r\n        this.modalConfirmButton.onclick = () => {\r\n            this.closeModal();\r\n            onConfirm(); // Proceed with starting the game\r\n        };\r\n\r\n        this.modalCancelButton.onclick = () => this.closeModal();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Modal ]\r\n    /**\r\n     * Shows the settings modal.\r\n     */\r\n    public showSettingsPage(): void {\r\n        if (!this.settingsContainer) return;\r\n        this.settingsContainer.classList.remove('hidden');\r\n    }\r\n\r\n    /**\r\n     * Hides the settings modal.\r\n     */\r\n    public hideSettingsPage(): void {\r\n        if (!this.settingsContainer) return;\r\n        this.settingsContainer.classList.add('hidden');\r\n    }\r\n\r\n    /**\r\n     * Switches active settings page.\r\n     */\r\n    public switchSettingsPage(page: 'controls' | 'graphics' | 'sound'): void {\r\n        if (!this.controlsBody || !this.graphicsBody || !this.soundBody ||\r\n            !this.controlsTab || !this.graphicsTab || !this.soundTab) return;\r\n\r\n        // Remove active class from all tabs\r\n        this.controlsTab.classList.remove('settings_tab_active');\r\n        this.graphicsTab.classList.remove('settings_tab_active');\r\n        this.soundTab.classList.remove('settings_tab_active');\r\n\r\n        // Remove hidden class from all pages\r\n        this.controlsBody.classList.remove('settings_page_hidden');\r\n        this.graphicsBody.classList.remove('settings_page_hidden');\r\n        this.soundBody.classList.remove('settings_page_hidden');\r\n\r\n        // Hide all pages and activate the selected tab\r\n        switch (page) {\r\n            case 'controls':\r\n                this.controlsTab.classList.add('settings_tab_active');\r\n                this.graphicsBody.classList.add('settings_page_hidden');\r\n                this.soundBody.classList.add('settings_page_hidden');\r\n                break;\r\n            case 'graphics':\r\n                this.graphicsTab.classList.add('settings_tab_active');\r\n                this.controlsBody.classList.add('settings_page_hidden');\r\n                this.soundBody.classList.add('settings_page_hidden');\r\n                break;\r\n            case 'sound':\r\n                this.soundTab.classList.add('settings_tab_active');\r\n                this.controlsBody.classList.add('settings_page_hidden');\r\n                this.graphicsBody.classList.add('settings_page_hidden');\r\n                break;\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Sliders ]\r\n    //\r\n    /**\r\n     * Updates settings specific sliders that also have value elements associated.\r\n     */\r\n    public updateSettingsSlider(fillElement: HTMLDivElement, valueElement: HTMLDivElement, value: number): void {\r\n        const percentage = Math.max(0, Math.min(100, value * 100));\r\n        fillElement.style.width = `${percentage}%`;\r\n        valueElement.textContent = `${Math.round(percentage)}%`;\r\n    }\r\n\r\n    /**\r\n     * Calculates the value of the slider based on the hovered mouse position.\r\n     */\r\n    public calculateSliderValue(sliderElement: HTMLDivElement, mouseX: number): number {\r\n        const rect = sliderElement.getBoundingClientRect();\r\n        const position = mouseX - rect.left;\r\n        const width = rect.width;\r\n        return Math.max(0, Math.min(1, position / width));\r\n    }\r\n\r\n    /**\r\n     * Initializes the sound sliders in the sound settings page with user prefs or defaults.\r\n     */\r\n    public initSoundSliders(settings: GameSettings): void {\r\n        const audioSettings = settings.audio.mixer;\r\n        if (this.masterFill && this.masterValue) this.updateSettingsSlider(this.masterFill, this.masterValue, audioSettings.master);\r\n        if (this.interfaceFill && this.interfaceValue) this.updateSettingsSlider(this.interfaceFill, this.interfaceValue, audioSettings.interface);\r\n        if (this.musicFill && this.musicValue) this.updateSettingsSlider(this.musicFill, this.musicValue, audioSettings.music);\r\n        if (this.sfxFill && this.sfxValue) this.updateSettingsSlider(this.sfxFill, this.sfxValue, audioSettings.sfx);\r\n        if (this.voiceFill && this.voiceValue) this.updateSettingsSlider(this.voiceFill, this.voiceValue, audioSettings.voice);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Inputs ]\r\n    //\r\n    /**\r\n     * Initializes all inputs in settings pages with user prefs or defaults.\r\n     */\r\n    public initSettingsInputs(settings: GameSettings): void {\r\n        if (this.deadzoneInput) {\r\n            this.deadzoneInput.value = settings.controls.gamepad.deadzone.toString();\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Toggles ]\r\n    //\r\n    /**\r\n     * Initializes all toggles in settings pages with user prefs or defaults.\r\n     */\r\n    public initSettingsToggles(settings: GameSettings): void {\r\n        if (this.particleJSToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'particleJSToggle',\r\n                value: settings.graphics.renderBackgroundParticles\r\n            });\r\n        }\r\n\r\n        if (this.staticVfxToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'staticToggle',\r\n                value: settings.graphics.showStaticOverlay\r\n            });\r\n        }\r\n\r\n        if (this.ammoReservesPhysicsToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'ammoReservesPhysicsToggle',\r\n                value: settings.graphics.physics.ammoReserves\r\n            });\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Interfaces ]\r\n    //\r\n    /**\r\n     * Initializes the keybinds settings page interface.\r\n     */\r\n    public initKeybindsInterface(controlsSettings: { keybinds: Record<string, string>, gamepad: Record<string, number> }, onBindingChange: (action: string, type: 'keybind' | 'gamepad', newBinding: string | number) => void): void {\r\n        // [ Keys ]\r\n        Object.keys(controlsSettings.keybinds).forEach(action => {\r\n            const elementId = `${action}Keybind`;\r\n            const element = document.getElementById(elementId);\r\n            if (element) {\r\n                const key = controlsSettings.keybinds[action];\r\n                element.textContent = key === ' ' ? 'SPACE' : key.toUpperCase();\r\n\r\n                element.addEventListener('click', () => {\r\n                    this.showRebindModal(action, 'keybind', (newBinding) => {\r\n                        onBindingChange(action, 'keybind', newBinding as string);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        // [ Gamepad ]\r\n        Object.keys(controlsSettings.gamepad).forEach(action => {\r\n            const elementId = `${action}Gamepad`;\r\n            const element = document.getElementById(elementId);\r\n\r\n            if (element && controlsSettings.gamepad[action] !== undefined) {\r\n                const buttonValue = controlsSettings.gamepad[action];\r\n                const buttonName = Object.keys(GAMEPAD_MAP).find(\r\n                    key => typeof GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === 'number'\r\n                        && GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === buttonValue\r\n                );\r\n                element.textContent = buttonName || buttonValue.toString();\r\n\r\n                element.addEventListener('click', () => {\r\n                    this.showRebindModal(action, 'gamepad', (newBinding) => {\r\n                        onBindingChange(action, 'gamepad', newBinding as number);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Shows the controls rebinding modal when called.\r\n     * \r\n     * Can be used for rebinding keyboard or gamepad.\r\n     */\r\n    public showRebindModal(action: string, type: 'keybind' | 'gamepad', onRebind: (newBinding: string | number) => void): void {\r\n        if (!this.modal || !this.modalText || !this.modalInput || !this.modalConfirmButton || !this.modalCancelButton || !this.modalErrorDiv) return;\r\n\r\n        const duplicateWarnings = [\r\n            \"Binding already assigned!\",\r\n            \"Binding already in use!\",\r\n            \"That binding is assigned already!\",\r\n            \"Binding already being used!\",\r\n            \"Already bound to another action!\"\r\n        ];\r\n        let warningIndex = 0;\r\n\r\n        // Check for gamepad if type is gamepad\r\n        if (type === 'gamepad') {\r\n            const gamepads = navigator.getGamepads();\r\n            const hasGamepad = Array.from(gamepads).some(gp => gp !== null);\r\n\r\n            if (!hasGamepad) {\r\n                this.modal.classList.remove('hidden');\r\n                this.modalErrorDiv.textContent = '';\r\n                this.modalText.textContent = 'No gamepad detected';\r\n                this.modalInput.style.display = 'none';\r\n                this.modalConfirmButton.classList.add('hidden');\r\n                this.modalCancelButton.textContent = 'Close';\r\n\r\n                this.modalCancelButton.onclick = () => this.closeModal();\r\n\r\n                this.utility.safeTimeout(() => {\r\n                    this.closeModal();\r\n                }, 3000);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalErrorDiv.textContent = '';\r\n        this.modalInput.style.display = 'none';\r\n        this.modalText.textContent = `Press any ${type === 'keybind' ? 'key' : 'button'} for ${action.toUpperCase()}`;\r\n        this.modalConfirmButton.classList.add('hidden');\r\n        this.modalCancelButton.textContent = 'Cancel';\r\n\r\n        const checkDuplicate = (binding: string | number): boolean => {\r\n            if (type === 'keybind') {\r\n                const allKeybinds = Object.entries(this.settingsManager?.getSettings().controls.keybinds || {});\r\n                return allKeybinds.some(([key, value]) => key !== action && value === binding);\r\n            } else {\r\n                const allGamepad = Object.entries(this.settingsManager?.getSettings().controls.gamepad || {});\r\n                return allGamepad.some(([key, value]) => key !== action && value === binding);\r\n            }\r\n        };\r\n\r\n        const handleKeyPress = (e: KeyboardEvent) => {\r\n            e.preventDefault();\r\n            if (e.key === 'Escape') {\r\n                cleanup();\r\n                this.closeModal();\r\n                return;\r\n            }\r\n\r\n            const newKey = e.key.toLowerCase();\r\n\r\n            if (checkDuplicate(newKey)) {\r\n                if (!this.modalErrorDiv) return;\r\n                this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                warningIndex++;\r\n                return;\r\n            }\r\n\r\n            cleanup();\r\n            onRebind(newKey);\r\n            this.closeModal();\r\n        };\r\n\r\n        const handleMouseDown = (e: MouseEvent) => {\r\n            // Check if click is on cancel button\r\n            if (e.target === this.modalCancelButton || this.modalCancelButton?.contains(e.target as Node)) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            let mouseKey = '';\r\n            if (e.button === 0) mouseKey = 'mouse1';\r\n            else if (e.button === 1) mouseKey = 'mouse3';\r\n            else if (e.button === 2) mouseKey = 'mouse2';\r\n\r\n            if (mouseKey) {\r\n                if (checkDuplicate(mouseKey)) {\r\n                    if (!this.modalErrorDiv) return;\r\n                    this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                    warningIndex++;\r\n                    return;\r\n                }\r\n\r\n                cleanup();\r\n                onRebind(mouseKey);\r\n                this.closeModal();\r\n            }\r\n        };\r\n\r\n        const handleGamepadPress = () => {\r\n            const gamepads = navigator.getGamepads();\r\n            for (const gamepad of gamepads) {\r\n                if (!gamepad) continue;\r\n\r\n                for (let i = 0; i < gamepad.buttons.length; i++) {\r\n                    if (gamepad.buttons[i].pressed) {\r\n                        if (checkDuplicate(i)) {\r\n                            if (!this.modalErrorDiv) return;\r\n                            this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                            warningIndex++;\r\n                            requestAnimationFrame(handleGamepadPress);\r\n                            return;\r\n                        }\r\n\r\n                        cleanup();\r\n                        onRebind(i);\r\n                        this.closeModal();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            requestAnimationFrame(handleGamepadPress);\r\n        };\r\n\r\n        const cleanup = () => {\r\n            if (type === 'keybind') {\r\n                document.removeEventListener('keydown', handleKeyPress);\r\n                document.removeEventListener('mousedown', handleMouseDown);\r\n            }\r\n            this.modalCancelButton!.onclick = null;\r\n        };\r\n\r\n        if (type === 'keybind') {\r\n            document.addEventListener('keydown', handleKeyPress);\r\n            document.addEventListener('mousedown', handleMouseDown);\r\n        } else {\r\n            requestAnimationFrame(handleGamepadPress);\r\n        }\r\n\r\n        this.modalCancelButton.onclick = () => {\r\n            cleanup();\r\n            this.closeModal();\r\n        };\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Leaderboard ]\r\n    //\r\n    /**\r\n     * Locally initialize the leaderboard, or update it if it already exists.\r\n     */\r\n    public createLeaderboard(lobby: LobbyManager, players: Players, userId: string): void {\r\n        // Create a set of all players\r\n        const allPlayers = new Set<string>();\r\n        allPlayers.add(userId);\r\n        players.forEach((_, playerId) => {\r\n            allPlayers.add(playerId);\r\n        });\r\n        lobby.lobbyPlayers.forEach((_, playerId) => {\r\n            allPlayers.add(playerId);\r\n        });\r\n\r\n        // Create/update leaderboard entries for all players\r\n        allPlayers.forEach(playerId => {\r\n            if (!this.leaderboard.has(playerId)) {\r\n                this.leaderboard.set(playerId, { // Create new entry with 0 stats\r\n                    playerId: playerId,\r\n                    wins: 0,\r\n                    kills: 0,\r\n                    deaths: 0\r\n                });\r\n                console.log(`Created leaderboard entry for ${playerId}`);\r\n            }\r\n            // If entry already exists, leave it alone (preserves existing stats)\r\n        });\r\n\r\n        this.updateLeaderboardDisplay(userId);\r\n        console.log('Leaderboard created/updated:', Array.from(this.leaderboard.entries()));\r\n    }\r\n\r\n    /**\r\n     * Update the table for the leaderboard to display the current game status.\r\n     */\r\n    public updateLeaderboardDisplay(localPlayer: string): void {\r\n        if (!this.leaderboardBody) return;\r\n\r\n        // Clear existing rows\r\n        this.leaderboardBody.innerHTML = '';\r\n\r\n        // Sort by wins (highest first), then by kills\r\n        const sortedEntries = Array.from(this.leaderboard.entries()).sort((a, b) => {\r\n            const [, entryA] = a;\r\n            const [, entryB] = b;\r\n\r\n            // First sort by wins (descending)\r\n            if (entryB.wins !== entryA.wins) {\r\n                return entryB.wins - entryA.wins;\r\n            }\r\n            // Then by kills (descending)\r\n            return entryB.kills - entryA.kills;\r\n        });\r\n\r\n        // Create table rows\r\n        sortedEntries.forEach(([playerId, entry]) => {\r\n            const row = document.createElement('tr');\r\n            row.className = 'leaderboard_row';\r\n\r\n            // Highlight current player\r\n            if (playerId === localPlayer) {\r\n                row.classList.add('current-player');\r\n            }\r\n\r\n            // Player name\r\n            const nameCell = document.createElement('td');\r\n            nameCell.textContent = playerId === localPlayer ? 'You' : playerId.substring(0, 8);\r\n            nameCell.className = 'player_name';\r\n            row.appendChild(nameCell);\r\n\r\n            // Wins\r\n            const winsCell = document.createElement('td');\r\n            winsCell.textContent = entry.wins.toString();\r\n            winsCell.className = 'wins';\r\n            row.appendChild(winsCell);\r\n\r\n            // Kills\r\n            const killsCell = document.createElement('td');\r\n            killsCell.textContent = entry.kills.toString();\r\n            killsCell.className = 'kills';\r\n            row.appendChild(killsCell);\r\n\r\n            // Deaths\r\n            const deathsCell = document.createElement('td');\r\n            deathsCell.textContent = entry.deaths.toString();\r\n            deathsCell.className = 'deaths';\r\n            row.appendChild(deathsCell);\r\n\r\n            if (this.leaderboardBody) {\r\n                this.leaderboardBody.appendChild(row);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reset the leaderboard to default state.\r\n     */\r\n    public clearLeaderboard(): void {\r\n        this.leaderboard.clear();\r\n        if (this.leaderboardBody) {\r\n            this.leaderboardBody.innerHTML = '';\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Events ]\r\n    //\r\n    /**\r\n     * Initializes listeners to interface elements.\r\n     */\r\n    private initInterfaceListeners(): void {\r\n        const uiDecimals = 2;\r\n        \r\n        // Accuracy (spread - inverted)\r\n        this.playerState.onStatChange('actions.primary.projectile.spread', (value) => {\r\n            if (this.accuracyStat) this.accuracyStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n\r\n        // Damage\r\n        this.playerState.onStatChange('actions.primary.projectile.damage', (value) => {\r\n            if (this.damageStat) this.damageStat.textContent = Math.round(value).toFixed(uiDecimals);\r\n        });\r\n\r\n        // Speed\r\n        this.playerState.onStatChange('stats.speed', (value) => {\r\n            if (this.speedStat) this.speedStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n\r\n        // Range\r\n        this.playerState.onStatChange('actions.primary.projectile.range', (value) => {\r\n            if (this.rangeStat) this.rangeStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n\r\n        // Shot Speed\r\n        this.playerState.onStatChange('actions.primary.projectile.speed', (value) => {\r\n            if (this.shotSpeedStat) this.shotSpeedStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n\r\n        // Luck\r\n        this.playerState.onStatChange('stats.luck', (value) => {\r\n            if (this.luckStat) this.luckStat.textContent = value.toFixed(uiDecimals);\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { Direction, RandomColorParams, SetInputParams, SetSliderParams, SetSpanParams, SetToggleParams, Vec2 } from './Types';\r\n\r\nexport class Utility {\r\n    private lastFrameTime: number;\r\n    private simplexTable: Uint8Array;\r\n    private activeTimeouts: Set<number>;\r\n\r\n    constructor() {\r\n        this.lastFrameTime = performance.now();\r\n        this.simplexTable = this.generateSimplexTable();\r\n        this.activeTimeouts = new Set();\r\n    }\r\n\r\n    // #region [ General ]\r\n    //\r\n    public deepMerge(target: any, source: any): void {\r\n        for (const key in source) {\r\n            if (\r\n                source[key] !== null &&\r\n                typeof source[key] === 'object' &&\r\n                !Array.isArray(source[key])\r\n            ) {\r\n                if (!target[key]) target[key] = {};\r\n                this.deepMerge(target[key], source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Time ]\r\n    //\r\n    /**\r\n     * Calculates and returns delta time.\r\n     * \r\n     * https://en.wikipedia.org/wiki/Delta_timing\r\n     */\r\n    public deltaTime(): number {\r\n        const now = performance.now();\r\n        const delta = now - this.lastFrameTime;\r\n        this.lastFrameTime = now;\r\n\r\n        // Normalize to 60fps (16.67ms per frame)\r\n        // Cap at 100ms to prevent huge jumps during lag spikes\r\n        return Math.min(delta, 100) / 16.67;\r\n    }\r\n\r\n    /**\r\n     * Overrides 'setTimeout' with safe processing.\r\n     * \r\n     * Timeouts are stored in the 'activeTimeouts' set - allowing stale timeouts to be cleared.\r\n     */\r\n    public safeTimeout(callback: () => void, delay: number): number {\r\n        const id = window.setTimeout(() => {\r\n            this.activeTimeouts.delete(id);\r\n            callback();\r\n        }, delay);\r\n        this.activeTimeouts.add(id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Clears all active timeouts from the activeTimeouts cache.\r\n     */\r\n    public clearTimeoutCache(): void {\r\n        this.activeTimeouts.forEach(id => window.clearTimeout(id));\r\n        this.activeTimeouts.clear();\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Math ]\r\n    public getRandomNum(min: number, max: number): number {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n    /**\r\n     * Returns a random int between the passed min/max values.\r\n     */\r\n    public getRandomInt(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    /**\r\n     * Returns a random position in an array.\r\n     */\r\n    public getRandomInArray<T>(array: T[]): T {\r\n        return array[Math.floor(Math.random() * array.length)];\r\n    }\r\n\r\n    /**\r\n     * Returns a shuffled copy of an array.\r\n     */\r\n    public getShuffledArray<T>(array: T[]): T[] {\r\n        return array.slice().sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    /**\r\n     * Returns the dot product of two 2D vectors.\r\n     */\r\n    public getDotProduct(v1: Vec2, v2: Vec2): number {\r\n        return v1.x * v2.x + v1.y * v2.y;\r\n    }\r\n\r\n    /**\r\n     * Reflects a velocity vector off a surface normal.\r\n     * Formula: V' = V - 2(V·N)N\r\n     */\r\n    public getReflection(velocity: Vec2, normal: Vec2): Vec2 {\r\n        const dot = this.getDotProduct(velocity, normal);\r\n        return {\r\n            x: velocity.x - 2 * dot * normal.x,\r\n            y: velocity.y - 2 * dot * normal.y\r\n        };\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Direction ]\r\n    //\r\n    /**\r\n     * Returns the forward facing direction of the passed rotation.\r\n     */\r\n    public forward(rot: number): Vec2 {\r\n        return { x: Math.cos(rot), y: Math.sin(rot) };\r\n    }\r\n\r\n    /**\r\n     * Gets the current aim direction of the local player.\r\n     */\r\n    public getDirection(params: Direction): Vec2 {\r\n        const dx = params.targetPos.x - params.rootPos.x;\r\n        const dy = params.targetPos.y - params.rootPos.y;\r\n\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        if (distance === 0) return { x: 0, y: 0 }; // avoid NaN\r\n\r\n        return { x: dx / distance, y: dy / distance };\r\n    }\r\n\r\n    /**\r\n     * Returns a random based on the degree radius.\r\n     */\r\n    public getRandomDirection(degrees: number): Vec2 {\r\n        const randomAngle = Math.random() * (degrees * Math.PI / 180);\r\n        const direction = { x: Math.cos(randomAngle), y: Math.sin(randomAngle) }\r\n        return direction;\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Visual ]\r\n    /**\r\n     * Returns a random color. With no params passed, color will be completely random hex.\r\n     * \r\n     * Params can be used to return color templates in either hex or RGB.\r\n     */\r\n    public getRandomColor(params?: RandomColorParams): string {\r\n        const format = params?.format ?? 'hex';\r\n        const mode = params?.mode ?? 'any';\r\n\r\n        let hexColor: string;\r\n\r\n        switch (mode) {\r\n            case 'primary':\r\n                const primaries = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#00FFFF', '#FF00FF'];\r\n                hexColor = this.getRandomInArray(primaries);\r\n                break;\r\n\r\n            case 'pastel':\r\n                const r = this.getRandomInt(127, 254);\r\n                const g = this.getRandomInt(127, 254);\r\n                const b = this.getRandomInt(127, 254);\r\n                hexColor = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'vibrant':\r\n                const channels = [255, this.getRandomInt(0, 255), this.getRandomInt(0, 255)];\r\n                channels.sort(() => Math.random() - 0.5);\r\n                hexColor = `#${channels[0].toString(16).padStart(2, '0')}${channels[1].toString(16).padStart(2, '0')}${channels[2].toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'dark':\r\n                const dr = this.getRandomInt(0, 127);\r\n                const dg = this.getRandomInt(0, 127);\r\n                const db = this.getRandomInt(0, 127);\r\n                hexColor = `#${dr.toString(16).padStart(2, '0')}${dg.toString(16).padStart(2, '0')}${db.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'light':\r\n                const lr = this.getRandomInt(128, 255);\r\n                const lg = this.getRandomInt(128, 255);\r\n                const lb = this.getRandomInt(128, 255);\r\n                hexColor = `#${lr.toString(16).padStart(2, '0')}${lg.toString(16).padStart(2, '0')}${lb.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'grayscale':\r\n                const gray = this.getRandomInt(0, 255);\r\n                hexColor = `#${gray.toString(16).padStart(2, '0')}${gray.toString(16).padStart(2, '0')}${gray.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'any':\r\n            default:\r\n                hexColor = \"#\" + this.getRandomInt(0, 0xFFFFFF).toString(16).padStart(6, \"0\");\r\n                break;\r\n        }\r\n\r\n        // Convert to requested format\r\n        if (format === 'rgb') {\r\n            const rgb = this.hexToRgb(hexColor);\r\n            if (!rgb) return hexColor; // Fallback to hex if conversion fails\r\n            return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n        }\r\n\r\n        return hexColor;\r\n    }\r\n\r\n    /**\r\n     * Converts hex color code to RGB.\r\n     */\r\n    public hexToRgb(hex: string): { r: number, g: number, b: number } | null {\r\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    /**\r\n     * Generates the permutation table for simplex noise.\r\n     */\r\n    private generateSimplexTable(): Uint8Array {\r\n        const table = new Uint8Array(512);\r\n        for (let k = 0; k < 256; k++) table[k] = k;\r\n        for (let k = 0; k < 256; k++) {\r\n            const r = k + this.getRandomInt(0, 255 - k);\r\n            [table[k], table[r]] = [table[r], table[k]];\r\n        }\r\n        for (let k = 0; k < 256; k++) table[256 + k] = table[k];\r\n        return table;\r\n    }\r\n\r\n    /**\r\n     * 2D noise function using Simplex.\r\n     * \r\n     * https://en.wikipedia.org/wiki/Simplex_noise\r\n     */\r\n    public simplexNoise2D(x: number, y: number, override: boolean = false): number {\r\n        if (override) { this.simplexTable = this.generateSimplexTable(); }\r\n\r\n        const perm = this.simplexTable;\r\n\r\n        const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\r\n        const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\r\n\r\n        const s = (x + y) * F2;\r\n        const i = Math.floor(x + s);\r\n        const j = Math.floor(y + s);\r\n\r\n        const t = (i + j) * G2;\r\n        const X0 = i - t;\r\n        const Y0 = j - t;\r\n        const x0 = x - X0;\r\n        const y0 = y - Y0;\r\n\r\n        const i1 = x0 > y0 ? 1 : 0;\r\n        const j1 = x0 > y0 ? 0 : 1;\r\n\r\n        const x1 = x0 - i1 + G2;\r\n        const y1 = y0 - j1 + G2;\r\n        const x2 = x0 - 1.0 + 2.0 * G2;\r\n        const y2 = y0 - 1.0 + 2.0 * G2;\r\n\r\n        const ii = i & 255;\r\n        const jj = j & 255;\r\n\r\n        const gi0 = perm[ii + perm[jj]] % 12;\r\n        const gi1 = perm[ii + i1 + perm[jj + j1]] % 12;\r\n        const gi2 = perm[ii + 1 + perm[jj + 1]] % 12;\r\n\r\n        const grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\r\n        [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\r\n        [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\r\n\r\n        const dot = (g: number[], x: number, y: number) => g[0] * x + g[1] * y;\r\n\r\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\r\n        let n0 = t0 < 0 ? 0 : Math.pow(t0, 4) * dot(grad3[gi0], x0, y0);\r\n\r\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\r\n        let n1 = t1 < 0 ? 0 : Math.pow(t1, 4) * dot(grad3[gi1], x1, y1);\r\n\r\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\r\n        let n2 = t2 < 0 ? 0 : Math.pow(t2, 4) * dot(grad3[gi2], x2, y2);\r\n\r\n        return 70.0 * (n0 + n1 + n2);\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Generation ]\r\n    //\r\n    /**\r\n     * Returns a UID using pure random math. With 36 characters defined - 8 character long UID has ~2.8 trillion outcomes.\r\n     */\r\n    public generateUID(length: number, prefix?: string): string {\r\n        const chars = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n        let result = prefix ?? '';\r\n        for (let i = 0; i < length; i++) {\r\n            result += chars[this.getRandomInt(0, chars.length - 1)];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Generate a custom link using the url from the window object.\r\n     * \r\n     * Example: generateLink(abc123, 'room'); Result: https://www.link.com/?room=abc123\r\n     */\r\n    public generateLink(value: string, param?: string): string {\r\n        const base = window.location.origin;\r\n        if (param) {\r\n            return `${base}?${param}=${value}`;\r\n        }\r\n        return `${base}?${value}`;\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ DOM ]\r\n    //\r\n    /**\r\n     * Sets the value of the chosen HTMLInputElement in the DOM.\r\n     */\r\n    public setInput(params: SetInputParams): void {\r\n        const inputElement = document.getElementById(params.inputId) as HTMLInputElement | null;\r\n        if (inputElement) {\r\n            inputElement.value = params.value.toString();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sets a specific slider to a specific value.\r\n     * \r\n     * Slider must have a base element and a fill element. Optionally lerp the value between the target and the current, using the max.\r\n     */\r\n    public setSlider(params: SetSliderParams): void {\r\n        const { sliderId, targetValue, maxValue, lerpTime = 0 } = params;\r\n\r\n        const sliderContainer = document.getElementById(sliderId);\r\n        const sliderFill = sliderContainer?.querySelector('div') as HTMLElement;\r\n\r\n        if (!sliderContainer || !sliderFill) {\r\n            console.warn(`Slider not found: ${sliderId}...`);\r\n            return;\r\n        }\r\n\r\n        if (maxValue === 0) {\r\n            console.warn(\"maxValue cannot be 0...\");\r\n            return;\r\n        }\r\n\r\n        // Clamp target value between 0 and maxValue\r\n        const clampedTarget = Math.max(0, Math.min(maxValue, targetValue));\r\n        const targetPercentage = (clampedTarget / maxValue) * 100;\r\n\r\n        // Get current width percentage\r\n        const currentWidthStr = sliderFill.style.width || '100%';\r\n        const currentPercentage = parseFloat(currentWidthStr.replace('%', ''));\r\n\r\n        // If already at target, no animation needed\r\n        if (Math.abs(currentPercentage - targetPercentage) < 0.1) return;\r\n\r\n        // If lerpTime is <= 0, directly set the slider to the targetValue\r\n        if (lerpTime <= 0) {\r\n            sliderFill.style.transition = 'none';\r\n            sliderFill.style.width = `${targetPercentage}%`;\r\n            return;\r\n        }\r\n\r\n        // Animate using CSS transition\r\n        sliderFill.style.transition = `width ${lerpTime}ms ease-out`;\r\n        sliderFill.style.width = `${targetPercentage}%`;\r\n\r\n        // Clear transition after animation completes to avoid interfering with future updates\r\n        setTimeout(() => {\r\n            if (sliderFill) {\r\n                sliderFill.style.transition = '';\r\n            }\r\n        }, lerpTime);\r\n    }\r\n\r\n    /**\r\n     * Update a span element with a specific number or string.\r\n     */\r\n    public setSpan(params: SetSpanParams): void {\r\n        const spanElement = document.getElementById(params.spanId);\r\n\r\n        if (!spanElement) {\r\n            console.warn(`Span not found: ${params.spanId}`);\r\n            return;\r\n        }\r\n\r\n        spanElement.textContent = params.value.toString();\r\n    }\r\n\r\n    /**\r\n     * Updates the attributes of a toggle element for reference.\r\n     */\r\n    public setToggle(params: SetToggleParams): void {\r\n        const toggle = document.getElementById(params.toggleId);\r\n        if (toggle) {\r\n            if (params.value) {\r\n                toggle.setAttribute('checked', 'true');\r\n                toggle.setAttribute('aria-checked', 'true');\r\n            } else {\r\n                toggle.removeAttribute('checked');\r\n                toggle.setAttribute('aria-checked', 'false');\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { GAME } from \"./Config\";\r\n\r\nimport { GameState } from \"./GameState\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class WebsocketManager {\r\n    private ws: WebSocket | null = null;\r\n\r\n    constructor(\r\n        private gameState: GameState,\r\n        private roomManager: RoomManager,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    /**\r\n     * Used for creating the websocket connection between clients.\r\n     * \r\n     * Called when joining or creating a room.\r\n     */\r\n    public connectWebSocket(): void {\r\n        const wsProtocol = location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\r\n        let wsHost: string;\r\n\r\n        if (location.port === '8888') { // Electron testing → connect to localhost:8080\r\n            wsHost = 'localhost:8080';\r\n            this.ws = new WebSocket(`ws://${wsHost}`);\r\n        } else if (location.port === '9999') { // Electron production → connect to saltpeter.xyz\r\n            wsHost = 'saltpeter.xyz';\r\n            this.ws = new WebSocket(`wss://${wsHost}`);\r\n        } else { // Browser (not Electron)\r\n            wsHost = location.hostname === 'localhost' ? 'localhost:8080' : location.host;\r\n            this.ws = new WebSocket(`${wsProtocol}//${wsHost}`);\r\n        }\r\n\r\n        this.ws.onopen = () => {\r\n            console.log(\"Connected to WebSocket\");\r\n            this.roomManager.setWebSocket(this.ws!);\r\n        };\r\n\r\n        this.ws.onclose = () => {\r\n            console.log(\"Disconnected from WebSocket\");\r\n            this.gameState.gameInProgress = false;\r\n            this.utility.safeTimeout(() => this.connectWebSocket(), GAME.RECONNECT_DELAY);\r\n        };\r\n\r\n        this.ws.onerror = (error) => {\r\n            console.error(\"WebSocket error:\", error);\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the current WebSocket connection.\r\n     */\r\n    public getWebSocket(): WebSocket | null {\r\n        return this.ws;\r\n    }\r\n}","import { ReserveBulletParticle } from \"../Types\";\r\n\r\nimport { SettingsManager } from \"../SettingsManager\";\r\nimport { UserInterface } from \"../UserInterface\";\r\nimport { Utility } from \"../Utility\";\r\n\r\nexport class AmmoReservesUIController {\r\n    private ammoReserveIcon: HTMLImageElement | null = null;\r\n    private projectileIcon: HTMLImageElement | null = null;\r\n\r\n    public reserveBulletParticles: ReserveBulletParticle[] = [];\r\n\r\n    constructor(\r\n        private settings: SettingsManager,\r\n        private ui: UserInterface,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // [ Ammo Reserve Canvas ]\r\n    //\r\n    /**\r\n     * Initializes the ammo reserve canvas in the HUD.\r\n     */\r\n    public initAmmoReserveCanvas(): void { // TODO: Unify where UI element references are stored\r\n        this.ammoReserveIcon = new Image();\r\n        this.ammoReserveIcon.src = '/assets/img/icon/inventory/ammobox.png';\r\n        this.ammoReserveIcon.onload = () => {\r\n            this.renderAmmoReserves();\r\n        };\r\n\r\n        this.projectileIcon = new Image();\r\n        this.projectileIcon.src = '/assets/img/icon/inventory/9mm.png';\r\n\r\n        // Start physics loop if it is enabled in the user's prefs\r\n        if (this.settings.getSettings().graphics.physics.ammoReserves) {\r\n            requestAnimationFrame(() => this.updateAmmoReservePhysics());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When picking up ammo, this function spawns the casings in the player's ammo reserve UI.\r\n     */\r\n    public spawnAmmoInReserveUI(amount: number = 1): void {\r\n        if (!this.ui.ammoReservesCtx || !this.projectileIcon) return;\r\n\r\n        const physicsEnabled = this.settings.getSettings().graphics.physics.ammoReserves;\r\n\r\n        const spawnDelay = 100;\r\n        const { collisionHeight, collisionWidth, collisionX, collisionY } = this.getAmmoReserveCollisionZone();\r\n\r\n        const scale = 0.25;\r\n        const bulletWidth = 11 * scale;\r\n        const bulletHeight = 28 * scale;\r\n\r\n        for (let i = 0; i < amount; i++) {\r\n            this.utility.safeTimeout(() => {\r\n                if (physicsEnabled) {\r\n                    // Physics mode: spawn with velocity from right side\r\n                    const x = collisionX + collisionWidth;\r\n                    const y = collisionY + collisionHeight / 2;\r\n                    const speed = 2 + Math.random() * 8;\r\n                    const angle = (Math.random() - 0.5) * (Math.PI / 3);\r\n                    const vx = Math.cos(angle) * speed;\r\n                    const vy = Math.sin(angle) * speed;\r\n                    const rotation = Math.random() * Math.PI * 2;\r\n                    const torque = (Math.random() - 0.5) * 0.1;\r\n\r\n                    this.reserveBulletParticles.push({\r\n                        transform: {\r\n                            pos: { x, y },\r\n                            rot: rotation,\r\n                        },\r\n                        velocity: { x: vx, y: vy },\r\n                        torque,\r\n                        width: bulletWidth,\r\n                        height: bulletHeight\r\n                    });\r\n                } else {\r\n                    // Static mode: spawn at random position, no velocity\r\n                    const x = collisionX + Math.random() * collisionWidth;\r\n                    const y = collisionY + Math.random() * collisionHeight;\r\n                    const rotation = Math.random() * Math.PI * 2;\r\n\r\n                    this.reserveBulletParticles.push({\r\n                        transform: {\r\n                            pos: { x, y },\r\n                            rot: rotation,\r\n                        },\r\n                        velocity: { x: 0, y: 0 },\r\n                        torque: 0,\r\n                        width: bulletWidth,\r\n                        height: bulletHeight\r\n                    });\r\n                    this.renderAmmoReserves(); // Render static bullet immediately\r\n                }\r\n            }, i * spawnDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes ammo from the reserves UI when ammo is taken from the player's reserves.\r\n     */\r\n    public removeAmmoFromReserveUI(amount: number = 1): void {\r\n        const removeDelay = 100; // ms, match spawnBullet\r\n        for (let i = 0; i < amount; i++) {\r\n            this.utility.safeTimeout(() => {\r\n                if (this.reserveBulletParticles.length > 0) {\r\n                    this.reserveBulletParticles.shift();\r\n                }\r\n                if (!this.settings.getSettings().graphics.physics.ammoReserves) {\r\n                    this.renderAmmoReserves();\r\n                }\r\n            }, i * removeDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes ammo reserve physics for the projectiles in the ammo reserve UI.\r\n     */\r\n    private updateAmmoReservePhysics(): void {\r\n        if (!this.settings.getSettings().graphics.physics.ammoReserves) return;\r\n        if (!this.ui.ammoReservesCtx || !this.ammoReserveIcon) return;\r\n\r\n        // TODO: Add sleeping when they come to a stop and end simulation\r\n\r\n        // Physics constants\r\n        const friction = 0.9;\r\n        const bounce = 0.5;\r\n\r\n        const { collisionHeight, collisionWidth, collisionX, collisionY } = this.getAmmoReserveCollisionZone();\r\n\r\n        // Clear\r\n        this.ui.ammoReservesCtx.clearRect(0, 0, this.ui.ammoReservesCanvas!.width, this.ui.ammoReservesCanvas!.height);\r\n\r\n        // Draw background box\r\n        this.ui.ammoReservesCtx.drawImage(\r\n            this.ammoReserveIcon,\r\n            0, 0,\r\n            this.ui.ammoReservesCanvas!.width,\r\n            this.ui.ammoReservesCanvas!.height\r\n        );\r\n\r\n        // Update and draw bullets\r\n        for (let bullet of this.reserveBulletParticles) {\r\n            // Physics\r\n            bullet.transform.pos.x += bullet.velocity.x;\r\n            bullet.transform.pos.y += bullet.velocity.y;\r\n            bullet.transform.rot += bullet.torque;\r\n\r\n            bullet.velocity.x *= friction;\r\n            bullet.velocity.y *= friction;\r\n            bullet.torque *= friction;\r\n\r\n            // Wall collisions\r\n            // Left\r\n            if (bullet.transform.pos.x - bullet.width / 2 < collisionX) {\r\n                bullet.transform.pos.x = collisionX + bullet.width / 2;\r\n                bullet.velocity.x *= -bounce;\r\n            }\r\n            // Right\r\n            if (bullet.transform.pos.x + bullet.width / 2 > collisionX + collisionWidth) {\r\n                bullet.transform.pos.x = collisionX + collisionWidth - bullet.width / 2;\r\n                bullet.velocity.x *= -bounce;\r\n            }\r\n            // Top\r\n            if (bullet.transform.pos.y - bullet.height / 2 < collisionY) {\r\n                bullet.transform.pos.y = collisionY + bullet.height / 2;\r\n                bullet.velocity.y *= -bounce;\r\n            }\r\n            // Bottom\r\n            if (bullet.transform.pos.y + bullet.height / 2 > collisionY + collisionHeight) {\r\n                bullet.transform.pos.y = collisionY + collisionHeight - bullet.height / 2;\r\n                bullet.velocity.y *= -bounce;\r\n            }\r\n        }\r\n\r\n        // Optional: bullet-bullet collisions (efficient, skip if <2 bullets)\r\n        for (let i = 0; i < this.reserveBulletParticles.length; i++) {\r\n            for (let j = i + 1; j < this.reserveBulletParticles.length; j++) {\r\n                const a = this.reserveBulletParticles[i];\r\n                const b = this.reserveBulletParticles[j];\r\n                const dx = a.transform.pos.x - b.transform.pos.x;\r\n                const dy = a.transform.pos.y - b.transform.pos.y;\r\n                const dist = Math.sqrt(dx * dx + dy * dy);\r\n                const minDist = (a.width + b.width) / 2;\r\n                if (dist < minDist) {\r\n                    // Simple elastic collision\r\n                    const angle = Math.atan2(dy, dx);\r\n                    const overlap = minDist - dist;\r\n                    const ax = Math.cos(angle) * overlap / 2;\r\n                    const ay = Math.sin(angle) * overlap / 2;\r\n\r\n                    a.transform.pos.x += ax;\r\n                    a.transform.pos.y += ay;\r\n                    b.transform.pos.x -= ax;\r\n                    b.transform.pos.y -= ay;\r\n\r\n                    // Swap velocities (1D along collision axis)\r\n                    const va = a.velocity.x * Math.cos(angle) + a.velocity.y * Math.sin(angle);\r\n                    const vb = b.velocity.x * Math.cos(angle) + b.velocity.y * Math.sin(angle);\r\n                    const avg = (va + vb) / 2;\r\n                    a.velocity.x += (avg - va) * bounce;\r\n                    b.velocity.x += (avg - vb) * bounce;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Draw bullets\r\n        for (let bullet of this.reserveBulletParticles) {\r\n            this.ui.ammoReservesCtx.save();\r\n            this.ui.ammoReservesCtx.translate(bullet.transform.pos.x, bullet.transform.pos.y);\r\n            this.ui.ammoReservesCtx.rotate(bullet.transform.rot);\r\n            this.ui.ammoReservesCtx.drawImage(\r\n                this.projectileIcon!,\r\n                -bullet.width / 2,\r\n                -bullet.height / 2,\r\n                bullet.width,\r\n                bullet.height\r\n            );\r\n            this.ui.ammoReservesCtx.restore();\r\n        }\r\n\r\n        requestAnimationFrame(() => this.updateAmmoReservePhysics());\r\n    }\r\n\r\n    /**\r\n     * Renders the ammo reserves canvas.\r\n     */\r\n    private renderAmmoReserves(): void {\r\n        if (!this.ui.ammoReservesCtx || !this.ammoReserveIcon || !this.ammoReserveIcon.complete) return;\r\n\r\n        // Clear the canvas\r\n        this.ui.ammoReservesCtx.clearRect(0, 0, this.ui.ammoReservesCanvas!.width, this.ui.ammoReservesCanvas!.height);\r\n\r\n        // Draw the ammobox icon to fill the entire canvas\r\n        this.ui.ammoReservesCtx.drawImage(\r\n            this.ammoReserveIcon,\r\n            0, 0,\r\n            this.ui.ammoReservesCanvas!.width,\r\n            this.ui.ammoReservesCanvas!.height\r\n        );\r\n\r\n        if (!this.settings.getSettings().graphics.physics.ammoReserves) {\r\n            for (let bullet of this.reserveBulletParticles) {\r\n                this.ui.ammoReservesCtx.save();\r\n                this.ui.ammoReservesCtx.translate(bullet.transform.pos.x, bullet.transform.pos.y);\r\n                this.ui.ammoReservesCtx.rotate(bullet.transform.rot);\r\n                this.ui.ammoReservesCtx.drawImage(\r\n                    this.projectileIcon!,\r\n                    -bullet.width / 2,\r\n                    -bullet.height / 2,\r\n                    bullet.width,\r\n                    bullet.height\r\n                );\r\n                this.ui.ammoReservesCtx.restore();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the ammo reserves collision zone to help with physics calculations for rendered projectiles.\r\n     */\r\n    private getAmmoReserveCollisionZone(): { collisionHeight: number; collisionWidth: number; collisionX: number; collisionY: number } {\r\n        const collisionWidth = 63;\r\n        const collisionHeight = 27;\r\n        const collisionX = (this.ui.ammoReservesCanvas!.width - collisionWidth) / 2 - 3;\r\n        const collisionY = (this.ui.ammoReservesCanvas!.height - collisionHeight) / 2 - 1;\r\n\r\n        const params = { collisionHeight, collisionWidth, collisionX, collisionY };\r\n\r\n        return params;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { CANVAS, DECALS, OBJECT_DEFAULTS, PARTICLES, SFX, SHRAPNEL } from \"../Config\";\r\nimport { AttackType, PlayerHitParams, Projectile, ProjectileOverrides, Shrapnel, Vec2 } from \"../Types\";\r\n\r\nimport { AmmoReservesUIController } from \"./AmmoReservesUIController\";\r\nimport { Animator } from \"../Animator\";\r\nimport { AudioManager } from \"../AudioManager\";\r\nimport { CollisionsManager } from \"../CollisionsManager\";\r\nimport { DecalsManager } from \"../DecalsManager\";\r\nimport { GameState } from \"../GameState\";\r\nimport { LuckController } from \"./LuckController\";\r\nimport { ParticlesManager } from \"../ParticlesManager\";\r\nimport { PlayerState } from \"./PlayerState\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { Utility } from \"../Utility\";\r\nimport { PlayerController,  } from \"./PlayerController\";\r\n\r\nexport class CombatController {\r\n    public projectiles: Map<string, Projectile> = new Map();\r\n\r\n    constructor(\r\n        private ammoReservesUIController: AmmoReservesUIController,\r\n        private animator: Animator,\r\n        private audioManager: AudioManager,\r\n        private collisionsManager: CollisionsManager,\r\n        private decalsManager: DecalsManager,\r\n        private gameState: GameState,\r\n        private luckController: LuckController,\r\n        private particlesManager: ParticlesManager,\r\n        private playerController: PlayerController,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // #region [ Attack ]\r\n    /**\r\n     * Entrypoint for triggering attacks based on type needed.\r\n     */\r\n    public triggerAttack(type: AttackType): void {\r\n        switch (type) {\r\n            case 'melee':\r\n                this.startMelee();\r\n                break;\r\n            case 'ranged':\r\n                this.startBurst();\r\n                break;\r\n            default:\r\n                console.warn(`Unknown attack type: ${type}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responsible for what happens during attack actions.\r\n     */\r\n    public updateAttack(delta: number): void {\r\n        if (!this.gameState.gameInProgress || this.playerState.myPlayer.stats.health.value <= 0) return;\r\n\r\n        const currentTime = Date.now();\r\n\r\n        // Handle reload\r\n        if (this.playerState.isReloading) {\r\n            if (currentTime >= this.playerState.reloadStartTime + this.playerState.myPlayer.actions.primary.reload.time) { // Reload complete\r\n                this.finishReload();\r\n            }\r\n            return; // Can't shoot while reloading\r\n        }\r\n\r\n        // Handle ongoing burst\r\n        if (this.playerState.isBurstActive && currentTime >= this.playerState.nextBurstShotTime) {\r\n            // Check if we still have ammo and haven't finished the intended burst amount\r\n            const ammoNeeded = this.playerState.myPlayer.actions.primary.burst.amount;\r\n            if (this.playerState.myPlayer.actions.primary.magazine.currentAmmo > 0 && this.playerState.currentBurstShot < ammoNeeded) {\r\n                const angle = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                const targetDir = { x: Math.cos(angle), y: Math.sin(angle) };\r\n\r\n                const triggeredUniques = this.triggerBurstUniques();\r\n                if (triggeredUniques.length === 0) {\r\n                    this.launchProjectile(targetDir);\r\n                }\r\n\r\n                this.playerState.currentBurstShot++;\r\n                this.playerState.myPlayer.actions.primary.magazine.currentAmmo--; // Use 1 ammo per shot in burst\r\n\r\n                console.log(`Burst shot ${this.playerState.currentBurstShot}! Magazine: ${this.playerState.myPlayer.actions.primary.magazine.currentAmmo}/${this.playerState.myPlayer.actions.primary.magazine.size}, Inventory: ${this.playerState.myPlayer.actions.primary.magazine.currentReserve}/${this.playerState.myPlayer.actions.primary.magazine.maxReserve}`);\r\n\r\n                if (this.playerState.currentBurstShot >= ammoNeeded || this.playerState.myPlayer.actions.primary.magazine.currentAmmo === 0) { // Burst complete (reached burst amount or out of ammo)\r\n                    this.playerState.isBurstActive = false;\r\n                    this.playerState.currentBurstShot = 0;\r\n                } else { // Schedule next shot in burst\r\n                    this.playerState.nextBurstShotTime = currentTime + this.playerState.myPlayer.actions.primary.burst.delay;\r\n                }\r\n            } else { // Out of ammo or reached burst limit\r\n                this.playerState.isBurstActive = false;\r\n                this.playerState.currentBurstShot = 0;\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Melee ]\r\n    //\r\n    /**\r\n     * Checks if the player can melee or not.\r\n     */\r\n    public canMelee(): boolean {\r\n        const now = Date.now(); 1\r\n        return (\r\n            !this.playerState.isMelee &&\r\n            now >= this.playerState.lastMeleeTime + this.playerState.myPlayer.actions.melee.cooldown &&\r\n            this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) &&\r\n            !this.playerState.isBurstActive &&\r\n            !this.playerState.isReloading\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Triggers a melee attack, using standard projectiles with special params.\r\n     */\r\n    private startMelee(): void {\r\n        this.playerState.isMelee = true;\r\n        this.playerState.lastMeleeTime = Date.now();\r\n\r\n        this.playerState.myPlayer.rig.weapon = 'KNIFE'; //TODO: Use whatever currently unlocked melee weapon is equipped\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'weapon-change',\r\n            playerId: this.userId,\r\n            weapon: 'KNIFE' //TODO: Use whatever currently unlocked melee weapon is equipped\r\n        }));\r\n\r\n        // Calculate melee direction (use current rotation)\r\n        const angle = this.playerState.myPlayer.transform.rot;\r\n        const range = this.playerState.myPlayer.actions.melee.range;\r\n        const size = this.playerState.myPlayer.actions.melee.size;\r\n\r\n        // Use the same spawn offset as normal projectiles\r\n        const spawnOffset = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer) +\r\n            this.playerState.myPlayer.actions.primary.projectile.size +\r\n            this.playerState.myPlayer.actions.primary.offset;\r\n\r\n        // Calculate spawn position at the tip of the weapon\r\n        const spawnX = this.playerState.myPlayer.transform.pos.x + Math.cos(angle - Math.PI / 2) * spawnOffset;\r\n        const spawnY = this.playerState.myPlayer.transform.pos.y + Math.sin(angle - Math.PI / 2) * spawnOffset;\r\n\r\n        const velocity = {\r\n            x: Math.cos(angle - Math.PI / 2) * range,\r\n            y: Math.sin(angle - Math.PI / 2) * range\r\n        };\r\n\r\n        const meleeProjectile = {\r\n            id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n            transform: {\r\n                pos: { x: spawnX, y: spawnY },\r\n                rot: angle\r\n            },\r\n            timestamp: Date.now(),\r\n            color: 'rgba(255, 255, 255, 0)',\r\n            damage: this.playerState.myPlayer.actions.melee.damage,\r\n            distanceTraveled: 0,\r\n            length: size,\r\n            ownerId: this.userId,\r\n            range: range,\r\n            size: size,\r\n            velocity: velocity\r\n        };\r\n\r\n        this.projectiles.set(meleeProjectile.id, meleeProjectile);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'projectile-launch',\r\n            projectile: meleeProjectile\r\n        }));\r\n\r\n        // Remove melee projectile after it has traveled its duration\r\n        this.utility.safeTimeout(() => {\r\n            this.projectiles.delete(meleeProjectile.id);\r\n            this.playerState.isMelee = false;\r\n\r\n            this.playerState.myPlayer.rig.weapon = 'GLOCK'; //TODO: Use whatever currently unlocked ranged primary is equipped\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'weapon-change',\r\n                playerId: this.userId,\r\n                weapon: 'GLOCK' //TODO: Use whatever currently unlocked ranged primary is equipped\r\n            }));\r\n        }, this.playerState.myPlayer.actions.melee.duration);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Ranged ]\r\n    //\r\n    /**\r\n     * Entrypoint for ranged attacks. When this is called, it starts the primary attack flow.\r\n     */\r\n    private startBurst(): void {\r\n        if (this.playerState.isBurstActive || !this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) || this.playerState.isReloading) return;\r\n\r\n        const now = Date.now();\r\n        if (now < this.playerState.lastShotTime + this.playerState.myPlayer.actions.primary.buffer) return;\r\n        this.playerState.lastShotTime = now;\r\n\r\n        // Check if we have enough ammo for the burst\r\n        const ammoNeeded = this.playerState.myPlayer.actions.primary.burst.amount;\r\n        const ammoToUse = Math.min(ammoNeeded, this.playerState.myPlayer.actions.primary.magazine.currentAmmo);\r\n\r\n        if (ammoToUse === 0) {\r\n            console.log('Out of ammo! Magazine empty.');\r\n\r\n            this.animator.animateCharacterPart({\r\n                playerId: this.userId,\r\n                part: 'WEAPON',\r\n                frames: {\r\n                    0: { x: 0, y: 8 } // Slide held back\r\n                },\r\n                duration: 0,\r\n                partIndex: 1\r\n            }); // duration=0 means infinite/held\r\n\r\n            this.audioManager.playAudioNetwork({\r\n                src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.EMPTY), // TODO: Use current weapon\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.975, max: 1.05 },\r\n                spatial: {\r\n                    blend: 1.0,\r\n                    pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n                },\r\n                volume: { min: 0.985, max: 1 }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.playerState.isBurstActive = true;\r\n        this.playerState.currentBurstShot = 0;\r\n\r\n        // Calculate direction from player's current rotation instead of mouse\r\n        const angle = this.playerState.myPlayer.transform.rot - Math.PI / 2; // Subtract PI/2 to convert from visual rotation to direction\r\n        const targetDir = { x: Math.cos(angle), y: Math.sin(angle) };\r\n\r\n        const triggeredUniques = this.triggerBurstUniques();\r\n        if (triggeredUniques.length === 0) {\r\n            this.launchProjectile(targetDir);\r\n        }\r\n\r\n        this.playerState.currentBurstShot++;\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo--; // Use 1 ammo per shot in burst\r\n\r\n        // Blend in empty sound as magazine gets low\r\n        // This is a local sound only, to help the player manage their ammo\r\n        const ammoRatio = this.playerState.myPlayer.actions.primary.magazine.currentAmmo / this.playerState.myPlayer.actions.primary.magazine.size;\r\n        const emptyBlend = 1 - ammoRatio; // 0 when full, 1 when empty\r\n\r\n        if (emptyBlend > 0.5) { // Only play when below 50% ammo (half mag empty)\r\n            const blendVolume = (emptyBlend - 0.5) * 2 * 0.5; // Remap 0.5-1.0 to 0-0.5 volume\r\n            this.audioManager.playAudio({ // Play sound locally\r\n                src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.EMPTY), // TODO: Use current weapon\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.975, max: 1.05 },\r\n                volume: { min: blendVolume, max: blendVolume }\r\n            });\r\n        }\r\n\r\n        // If burst has more shots and we have ammo, schedule the next one\r\n        if (this.playerState.myPlayer.actions.primary.burst.amount > 1 && this.playerState.myPlayer.actions.primary.magazine.currentAmmo > 0 && this.playerState.currentBurstShot < ammoToUse) {\r\n            this.playerState.nextBurstShotTime = Date.now() + this.playerState.myPlayer.actions.primary.burst.delay;\r\n        } else { // Burst complete\r\n            this.playerState.isBurstActive = false;\r\n            this.playerState.currentBurstShot = 0;\r\n\r\n            if (this.playerState.myPlayer.actions.primary.magazine.currentAmmo === 0) {\r\n                this.animator.animateCharacterPart({\r\n                    playerId: this.userId,\r\n                    part: 'WEAPON',\r\n                    frames: {\r\n                        0: { x: 0, y: 8 } // Slide held back\r\n                    },\r\n                    duration: 0,\r\n                    partIndex: 1\r\n                }); // duration=0 means infinite/held\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates physics for projectile and adds them to mapping.\r\n     */\r\n    private launchProjectile(dir: Vec2, overrides?: ProjectileOverrides): void {\r\n        console.log(`Fired shot!`);\r\n\r\n        // Use the passed direction and normalize it\r\n        const distance = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\r\n        if (distance === 0) return;\r\n\r\n        const dirX = dir.x / distance;\r\n        const dirY = dir.y / distance;\r\n\r\n        // Animate weapon slide (glock_slide.png is index 1 in the WEAPON.GLOCK array)\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 0 },    // Start position\r\n                0.5: { x: 0, y: 20 }, // Pull back slide\r\n                1: { x: 0, y: 0 }     // Return to start\r\n            },\r\n            duration: 175,\r\n            partIndex: 1\r\n        });\r\n\r\n        const canTriggerUnique = overrides?.canTriggerUnique ?? true;\r\n        const projectileAmount = overrides?.amount ?? this.playerState.myPlayer.actions.primary.projectile.amount;\r\n        const projectileColor = overrides?.color ?? this.playerState.myPlayer.actions.primary.projectile.color;\r\n        const projectileDamage = overrides?.damage ?? this.playerState.myPlayer.actions.primary.projectile.damage;\r\n        const projectileLength = overrides?.length ?? this.playerState.myPlayer.actions.primary.projectile.length;\r\n        const projectileRange = overrides?.range ?? this.playerState.myPlayer.actions.primary.projectile.range;\r\n        const projectileSize = overrides?.size ?? this.playerState.myPlayer.actions.primary.projectile.size;\r\n        const projectileSpeed = overrides?.speed ?? this.playerState.myPlayer.actions.primary.projectile.speed;\r\n        const projectileSpread = overrides?.spread ?? this.playerState.myPlayer.actions.primary.projectile.spread;\r\n\r\n        // Calculate spawn offset\r\n        const spawnOffset = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer) + projectileSize + this.playerState.myPlayer.actions.primary.offset;\r\n        const bulletSpawnX = this.playerState.myPlayer.transform.pos.x + dirX * spawnOffset;\r\n        const bulletSpawnY = this.playerState.myPlayer.transform.pos.y + dirY * spawnOffset;\r\n        const rightX = -dirY;\r\n        const rightY = dirX;\r\n\r\n        // TODO: Wrap all of these particles in some sort of defined type that contains this in one message\r\n\r\n        this.particlesManager.createParticles( // Muzzle flash\r\n            bulletSpawnX,\r\n            bulletSpawnY,\r\n            `muzzle_${Date.now()}`,\r\n            PARTICLES.MUZZLE_FLASH,\r\n            { x: dirX, y: dirY }\r\n        );\r\n\r\n        this.particlesManager.createParticles( // Muzzle smoke\r\n            bulletSpawnX,\r\n            bulletSpawnY,\r\n            `smoke_${Date.now()}`,\r\n            PARTICLES.SMOKE,\r\n            { x: dirX * 0.3, y: dirY * 0.3 }\r\n        );\r\n\r\n        this.particlesManager.createParticles( // Shell casing\r\n            bulletSpawnX - 5,\r\n            bulletSpawnY - 5,\r\n            `shell_${Date.now()}`,\r\n            PARTICLES.SHELL_CASING,\r\n            { x: rightX * 0.8 + dirX * -0.2, y: rightY * 0.8 + dirY * -0.2 } // Right + slightly back\r\n        );\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.ATTACK), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.95, max: 1.125 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y },\r\n                rolloff: {\r\n                    distance: Math.max(CANVAS.WIDTH, CANVAS.HEIGHT) * 2,\r\n                    factor: 0.5,\r\n                    type: 'logarithmic'\r\n                }\r\n            },\r\n            volume: { min: 0.965, max: 1 }\r\n        });\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.SHELL), // TODO: Use current weapon\r\n            delay: { min: 0.25, max: 0.5 }, // Play with a short delay trigger to simulate the shell hitting the ground\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.95, max: 1.125 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.375, max: 0.85 }\r\n        });\r\n\r\n        // Create projectiles\r\n        for (let i = 0; i < projectileAmount; i++) {\r\n            if (this.playerState.myPlayer.unique.length > 0 && canTriggerUnique) {\r\n                const shuffledUniques = this.utility.getShuffledArray(this.playerState.myPlayer.unique);\r\n\r\n                for (const unique of shuffledUniques) {\r\n                    if (this.luckController.luckRoll()) {\r\n                        this.triggerUnique(unique);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const spread = (Math.random() - 0.5) * (projectileSpread / 100);\r\n            const angle = Math.atan2(dirY, dirX) + spread;\r\n            const dir = this.utility.forward(angle);\r\n\r\n            const projectile: Projectile = {\r\n                id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n                transform: {\r\n                    pos: {\r\n                        x: this.playerState.myPlayer.transform.pos.x + Math.cos(angle) * spawnOffset,\r\n                        y: this.playerState.myPlayer.transform.pos.y + Math.sin(angle) * spawnOffset,\r\n                    },\r\n                    rot: angle\r\n                },\r\n                timestamp: Date.now(),\r\n                color: projectileColor,\r\n                damage: projectileDamage,\r\n                distanceTraveled: 0,\r\n                length: projectileLength,\r\n                ownerId: this.userId,\r\n                range: projectileRange * 100, // Convert to px\r\n                size: projectileSize,\r\n                velocity: {\r\n                    x: dir.x * projectileSpeed,\r\n                    y: dir.y * projectileSpeed,\r\n                },\r\n            };\r\n\r\n            this.projectiles.set(projectile.id, projectile);\r\n\r\n            // Send projectile to other players\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'projectile-launch',\r\n                projectile: projectile\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates all projectiles in the game locally.\r\n     */\r\n    public updateProjectiles(delta: number): void {\r\n        const projectilesToRemove: string[] = [];\r\n\r\n        this.projectiles.forEach((projectile, id) => {\r\n            // Update movement (with optional spatial targeting nudge)\r\n            if (projectile.ownerId === this.userId) {\r\n                if (this.playerState.myPlayer.unique.includes('spatial_targeting')) {\r\n                    const aim = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                    const dx = Math.cos(aim), dy = Math.sin(aim);\r\n                    const speed = Math.sqrt(projectile.velocity.x ** 2 + projectile.velocity.y ** 2);\r\n                    const vx = projectile.velocity.x / speed, vy = projectile.velocity.y / speed;\r\n                    const lerpFactor = 0.05;\r\n                    const lx = vx + (dx - vx) * lerpFactor;\r\n                    const ly = vy + (dy - vy) * lerpFactor;\r\n                    const norm = Math.sqrt(lx ** 2 + ly ** 2);\r\n\r\n                    projectile.velocity.x = (lx / norm) * speed;\r\n                    projectile.velocity.y = (ly / norm) * speed;\r\n                    projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n                }\r\n            }\r\n            projectile.transform.pos.x += projectile.velocity.x * delta;\r\n            projectile.transform.pos.y += projectile.velocity.y * delta;\r\n\r\n            // Update distance traveled\r\n            const frameDistance = Math.sqrt(\r\n                projectile.velocity.x * projectile.velocity.x +\r\n                projectile.velocity.y * projectile.velocity.y\r\n            ) * delta;\r\n            projectile.distanceTraveled += frameDistance;\r\n\r\n            // Check collision with my player (only if I'm alive)\r\n            if (this.collisionsManager.collisionsEnabled(this.playerState.myPlayer)) {\r\n                const dx = projectile.transform.pos.x - this.playerState.myPlayer.transform.pos.x;\r\n                const dy = projectile.transform.pos.y - this.playerState.myPlayer.transform.pos.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                const playerCollider = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer);\r\n                const canDeflect = this.playerState.myPlayer.unique.includes('kinetic_brain') &&\r\n                    distance <= playerCollider * 4 &&\r\n                    distance > playerCollider + projectile.size &&\r\n                    projectile.ownerId !== this.userId;\r\n\r\n                if (canDeflect) {\r\n                    if (this.luckController.luckRoll()) {\r\n                        console.log('Kinetic Brain activated! Deflecting projectile.');\r\n\r\n                        // Calculate normal from player center to projectile\r\n                        const normal = {\r\n                            x: (projectile.transform.pos.x - this.playerState.myPlayer.transform.pos.x) / distance,\r\n                            y: (projectile.transform.pos.y - this.playerState.myPlayer.transform.pos.y) / distance\r\n                        };\r\n\r\n                        const speedReduction = this.utility.getRandomNum(0.85, 0.95);\r\n\r\n                        // Reflect velocity off the normal\r\n                        const reflected = this.utility.getReflection(projectile.velocity, normal);\r\n                        projectile.velocity.x = reflected.x * speedReduction; // Slow down\r\n                        projectile.velocity.y = reflected.y * 0.85;\r\n\r\n                        // Change ownership\r\n                        projectile.ownerId = this.userId;\r\n                        projectile.color = this.playerState.myPlayer.actions.primary.projectile.color;\r\n\r\n                        // Update rotation\r\n                        projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n\r\n                        // Broadcast deflection\r\n                        this.roomManager.sendMessage(JSON.stringify({\r\n                            type: 'projectile-deflect',\r\n                            projectileId: projectile.id,\r\n                            newOwnerId: this.userId,\r\n                            velocity: projectile.velocity,\r\n                            color: projectile.color\r\n                        }));\r\n\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (distance <= playerCollider + projectile.size) { // Projectile collided with my player\r\n                    projectilesToRemove.push(id);\r\n\r\n                    const actualDamage = Math.max(0, projectile.damage - this.playerState.myPlayer.stats.defense);\r\n                    this.playerState.myPlayer.stats.health.value = Math.max(0, this.playerState.myPlayer.stats.health.value - actualDamage);\r\n\r\n                    const params: PlayerHitParams = {\r\n                        target: this.playerState.myPlayer,\r\n                        shooterId: projectile.ownerId,\r\n                        damage: projectile.damage,\r\n                        newHealth: this.playerState.myPlayer.stats.health.value,\r\n                        source: projectile,\r\n                        wasKill: this.playerState.myPlayer.stats.health.value <= 0\r\n                    }\r\n                    this.playerController.playerHit(params);\r\n                }\r\n            }\r\n\r\n            // Check collision with other players (for my projectiles only)\r\n            if (projectile.ownerId === this.userId) {\r\n                this.playerState.players.forEach((player, playerId) => {\r\n                    if (this.collisionsManager.collisionsEnabled(player)) { // Only check collision if the player has collisions enabled\r\n                        const dx2 = projectile.transform.pos.x - player.transform.pos.x;\r\n                        const dy2 = projectile.transform.pos.y - player.transform.pos.y;\r\n                        const distance2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\r\n\r\n                        if (distance2 <= this.collisionsManager.getPlayerCollider(player) + projectile.size) { // My projectile hit another player!\r\n                            projectilesToRemove.push(id);\r\n\r\n                            const actualDamage = Math.max(0, projectile.damage - player.stats.defense);\r\n                            const newHealth = Math.max(0, player.stats.health.value - actualDamage);\r\n                            player.stats.health.value = newHealth;\r\n\r\n                            const params: PlayerHitParams = {\r\n                                target: player,\r\n                                shooterId: this.userId,\r\n                                damage: projectile.damage,\r\n                                newHealth: newHealth,\r\n                                source: projectile,\r\n                                wasKill: newHealth <= 0\r\n                            }\r\n                            this.playerController.playerHit(params);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Check if projectile should be removed (range/bounds)\r\n            if (projectile.distanceTraveled >= projectile.range ||\r\n                projectile.transform.pos.x < 0 || projectile.transform.pos.x > CANVAS.WIDTH ||\r\n                projectile.transform.pos.y < 0 || projectile.transform.pos.y > CANVAS.HEIGHT) {\r\n\r\n                projectilesToRemove.push(id);\r\n\r\n                // Create burn mark where projectile expired (only for my projectiles)\r\n                if (projectile.ownerId === this.userId) {\r\n                    const triggeredUniques = this.triggerCollisionUniques(projectile.transform.pos);\r\n\r\n                    // TODO: Catch the triggered uniques, and use that string array, might be a bouncing bullet or something that makes it not get destroyed yet\r\n\r\n                    if (projectile.distanceTraveled >= projectile.range) {\r\n                        this.decalsManager.createDecal(projectile.transform.pos.x, projectile.transform.pos.y, `impact_${id}`, DECALS.PROJECTILE);\r\n                    }\r\n\r\n                    this.particlesManager.createParticles(projectile.transform.pos.x, projectile.transform.pos.y, `sparks_${id}`, PARTICLES.SPARKS);\r\n\r\n\r\n                    this.audioManager.playAudioNetwork({\r\n                        src: this.utility.getRandomInArray(SFX.IMPACT.METAL.BULLET), // TODO: Use current projectile type\r\n                        listener: {\r\n                            x: this.playerState.myPlayer.transform.pos.x,\r\n                            y: this.playerState.myPlayer.transform.pos.y\r\n                        },\r\n                        output: 'sfx',\r\n                        pitch: { min: 0.95, max: 1.125 },\r\n                        spatial: {\r\n                            blend: 1.0,\r\n                            pos: { x: projectile.transform.pos.x, y: projectile.transform.pos.y }\r\n                        },\r\n                        volume: { min: 0.965, max: 1 }\r\n                    });\r\n\r\n                    // Notify others to remove projectile\r\n                    this.roomManager.sendMessage(JSON.stringify({\r\n                        type: 'projectile-remove',\r\n                        projectileId: id\r\n                    }));\r\n                }\r\n            }\r\n        });\r\n\r\n        // Remove projectiles locally\r\n        projectilesToRemove.forEach(id => {\r\n            this.projectiles.delete(id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to toggle auto fire\r\n     */\r\n    public toggleAutoFire(timestamp: number): void {\r\n        this.playerState.canAutoFire = true;\r\n\r\n        const cachedBuffer = this.playerState.myPlayer.actions.primary.buffer\r\n\r\n        this.playerState.myPlayer.actions.primary.buffer *= 0.5; // TODO: Pass the buffer change\r\n\r\n        console.log(`Auto-fire enabled until ${timestamp}`);\r\n\r\n        this.utility.safeTimeout(() => {\r\n            this.playerState.canAutoFire = false;\r\n            this.playerState.myPlayer.actions.primary.buffer = cachedBuffer;\r\n            console.log('Auto-fire disabled.');\r\n        }, timestamp - Date.now()); // Duration of override\r\n    } // TODO: Timestamp duration should be optional, if not passed toggle is permanent on/off\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Uniques ]\r\n    //\r\n    /**\r\n     * Manually triggers a specific unique effect when called.\r\n     */\r\n    private triggerUnique(unique: string, pos?: Vec2): void {\r\n        if (unique === \"cluster_module\") {\r\n            if (pos) {\r\n                const amount = this.utility.getRandomInt(3, 6);\r\n                const images: string[] = [];\r\n                for (let i = 0; i < amount; i++) {\r\n                    images.push(this.utility.getRandomInArray(SHRAPNEL.PIECE));\r\n                }\r\n                const shrapnel: Shrapnel = {\r\n                    amount: amount,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage * 0.1,\r\n                    images: images,\r\n                    lifetime: { // ms\r\n                        min: 100,\r\n                        max: 500\r\n                    },\r\n                    pos: {\r\n                        x: pos.x,\r\n                        y: pos.y\r\n                    },\r\n                    size: { // px^2\r\n                        min: 8,\r\n                        max: 14\r\n                    },\r\n                    speed: { // px/frame*(dt)\r\n                        min: 10,\r\n                        max: 15\r\n                    },\r\n                    torque: { // deg/frame*dt\r\n                        min: -360,\r\n                        max: 360\r\n                    }\r\n                }\r\n                this.particlesManager.spawnShrapnel(shrapnel);\r\n            }\r\n        }\r\n\r\n        if (unique === \"projectile_array\") {\r\n            const amount = this.utility.getRandomInt(1, 3);\r\n            for (let i = 0; i < amount; i++) {\r\n                const dir = this.utility.getRandomDirection(360);\r\n\r\n                const params: ProjectileOverrides = {\r\n                    canTriggerUnique: false,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage / 2,\r\n                    range: this.utility.getRandomNum((this.playerState.myPlayer.actions.primary.projectile.range / 2), this.playerState.myPlayer.actions.primary.projectile.range),\r\n                    spread: this.utility.getRandomNum(this.playerState.myPlayer.actions.primary.projectile.spread, (this.playerState.myPlayer.actions.primary.projectile.spread * 2))\r\n                }\r\n\r\n\r\n                this.launchProjectile(dir, params);\r\n            }\r\n        }\r\n\r\n        console.log(`Triggered Unique: ${unique}`)\r\n    }\r\n\r\n    /**\r\n     * Responsible for processing possible unique triggers on burst. (Before launchProjectile is called...)\r\n     */\r\n    private triggerBurstUniques(): string[] {\r\n        const triggered: string[] = [];\r\n\r\n        if (this.playerState.myPlayer.unique.includes('muzzle_spliter')) {\r\n            if (this.luckController.luckRoll()) {\r\n                const baseAngle = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                const angleOffset = 10 * (Math.PI / 180); // 10 degrees\r\n\r\n                const dirA = { x: Math.cos(baseAngle - angleOffset), y: Math.sin(baseAngle - angleOffset) };\r\n                const dirB = { x: Math.cos(baseAngle + angleOffset), y: Math.sin(baseAngle + angleOffset) };\r\n\r\n                const baseParams: ProjectileOverrides = {\r\n                    canTriggerUnique: false,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                    range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                    size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                    speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                    color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                    length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                    spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                };\r\n\r\n                this.launchProjectile(dirA, baseParams);\r\n                this.launchProjectile(dirB, baseParams);\r\n\r\n                console.log(`Triggered burst unique: muzzle_spliter`);\r\n                triggered.push('muzzle_spliter');\r\n            }\r\n        }\r\n\r\n        return triggered;\r\n    }\r\n\r\n    /**\r\n     * Responsible for checking specific uniques on collision.\r\n     */\r\n    private triggerCollisionUniques(pos?: Vec2): string[] {\r\n        if (this.playerState.myPlayer.unique.length === 0) return [];\r\n\r\n        const succeededUniques: string[] = [];\r\n\r\n        for (const unique of this.playerState.myPlayer.unique) {\r\n            if (unique === 'cluster_module') {\r\n                const succeeded = this.luckController.luckRoll();\r\n\r\n                if (succeeded) {\r\n                    this.triggerUnique(unique, pos);\r\n                    succeededUniques.push('cluster_module');\r\n                }\r\n            }\r\n        }\r\n        return succeededUniques;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Reload ]\r\n    //\r\n    /**\r\n     * Checks if the player can reload or not.\r\n     */\r\n    private canReload(): boolean {\r\n        return (\r\n            !this.playerState.isReloading &&\r\n            this.playerState.myPlayer.actions.primary.magazine.currentAmmo < this.playerState.myPlayer.actions.primary.magazine.size &&\r\n            this.playerState.myPlayer.actions.primary.magazine.currentReserve > 0 && !this.playerState.isMelee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Manual trigger for reload. Called when pressing the assigned keybind.\r\n     */\r\n    public startReload(): void {\r\n        if (!this.canReload()) return;\r\n        console.log(`Reloading...`);\r\n\r\n        this.playerState.isReloading = true;\r\n        this.playerState.reloadStartTime = Date.now();\r\n\r\n        // Cancel any ongoing burst\r\n        this.playerState.isBurstActive = false;\r\n        this.playerState.currentBurstShot = 0;\r\n\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 8 } // Slide held back\r\n            },\r\n            duration: 0,\r\n            partIndex: 1\r\n        }); // duration=0 means infinite/held\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.RELOAD.START), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.975, max: 1.05 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.985, max: 1 }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ends the reload loop, and updates visual state.\r\n     */\r\n    private finishReload(): void {\r\n        const magazineSpace = this.playerState.myPlayer.actions.primary.magazine.size - this.playerState.myPlayer.actions.primary.magazine.currentAmmo;\r\n        const ammoToReload = Math.min(magazineSpace, this.playerState.myPlayer.actions.primary.magazine.currentReserve);\r\n\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo += ammoToReload;\r\n        this.playerState.myPlayer.actions.primary.magazine.currentReserve -= ammoToReload;\r\n        this.playerState.isReloading = false;\r\n\r\n        this.ammoReservesUIController.removeAmmoFromReserveUI(ammoToReload);\r\n\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 20 }, // Start with slide back\r\n                1: { x: 0, y: 0 } // Return to start\r\n            },\r\n            duration: 175,\r\n            partIndex: 1\r\n        });\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(SFX.WEAPON.GLOCK.RELOAD.END), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.975, max: 1.05 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.985, max: 1 }\r\n        });\r\n\r\n        console.log(`Reload complete...`);\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { NETWORK } from \"../Config\";\r\n\r\nimport { PlayerState } from \"./PlayerState\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { MoveController } from \"./MoveController\";\r\nimport { StaminaController } from \"./StaminaController\";\r\nimport { CombatController } from \"./CombatController\";\r\nimport { CollisionsManager } from \"../CollisionsManager\";\r\n\r\nexport class DashController {\r\n    constructor(\r\n        private collisionsManager: CollisionsManager,\r\n        private combatController: CombatController,\r\n        private moveController: MoveController,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private staminaController: StaminaController,\r\n        private userId: string\r\n    ) { }\r\n\r\n    // #region [ Dash ]\r\n    //\r\n    /**\r\n     * Start a dash when the assigned keybind is pressed.\r\n     */\r\n    public startDash(): void {\r\n        if (this.playerState.isDashing || !this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) || !this.moveController.isMoving()) return;\r\n\r\n        const currentTime = Date.now(); // Cooldown check first\r\n        if (currentTime < this.playerState.lastDashTime + this.playerState.myPlayer.actions.dash.cooldown) {\r\n            console.log('Dash on cooldown');\r\n            return;\r\n        }\r\n\r\n        // Input check\r\n        let { inputX, inputY, inputLength } = this.moveController.getMoveInput();\r\n\r\n        // Normalize input\r\n        if (!this.moveController.isMoving()) {\r\n            console.log('No movement input for dash');\r\n            return;\r\n        }\r\n\r\n        inputX = inputX / inputLength;\r\n        inputY = inputY / inputLength;\r\n\r\n        if (!this.staminaController.requestStamina(this.playerState.myPlayer.actions.dash.drain)) {\r\n            console.log('Not enough stamina to dash');\r\n            return;\r\n        }\r\n\r\n        if (this.playerState.myPlayer.unique.includes('spectral_image')) {\r\n            // Set local state\r\n            this.playerState.myPlayer.flags.hidden = true;\r\n            this.playerState.myPlayer.flags.invulnerable = true;\r\n\r\n            // Broadcast partial update\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'partial-state',\r\n                userId: this.userId,\r\n                flags: {\r\n                    hidden: true,\r\n                    invulnerable: true\r\n                }\r\n            }));\r\n        }\r\n\r\n        // Start dash\r\n        this.playerState.isDashing = true;\r\n        this.playerState.dashStartTime = currentTime;\r\n        this.playerState.lastDashTime = currentTime;\r\n\r\n        // Set dash velocity\r\n        const dashSpeed = this.playerState.myPlayer.stats.speed * this.playerState.myPlayer.actions.dash.multiplier;\r\n        this.playerState.playerVelocityX = inputX * dashSpeed;\r\n        this.playerState.playerVelocityY = inputY * dashSpeed;\r\n\r\n        console.log(`Dashing! Speed: ${dashSpeed}`);\r\n    }\r\n\r\n    /**\r\n     * Process dash update loop when isDashing.\r\n     */\r\n    public updateDash(delta: number): void {\r\n        if (!this.playerState.isDashing) return;\r\n\r\n        const currentTime = Date.now();\r\n\r\n        let newX = this.playerState.myPlayer.transform.pos.x + this.playerState.playerVelocityX * delta;\r\n        let newY = this.playerState.myPlayer.transform.pos.y + this.playerState.playerVelocityY * delta;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = newX;\r\n        this.playerState.myPlayer.transform.pos.y = newY;\r\n\r\n        let moved = (this.playerState.playerVelocityX !== 0 || this.playerState.playerVelocityY !== 0);\r\n\r\n        // Send position update if moved\r\n        const distanceFromLastSent = Math.sqrt(\r\n            (this.playerState.myPlayer.transform.pos.x - this.playerState.lastSentX) ** 2 +\r\n            (this.playerState.myPlayer.transform.pos.y - this.playerState.lastSentY) ** 2\r\n        );\r\n\r\n        if (moved && distanceFromLastSent > 2 && currentTime - this.playerState.lastSentMoveTime >= NETWORK.MOVE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    pos: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    }\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentX = this.playerState.myPlayer.transform.pos.x;\r\n            this.playerState.lastSentY = this.playerState.myPlayer.transform.pos.y;\r\n            this.playerState.lastSentMoveTime = currentTime;\r\n        }\r\n\r\n        // Check if dash time is over\r\n        if (currentTime >= this.playerState.dashStartTime + this.playerState.myPlayer.actions.dash.time) {\r\n            if (this.playerState.myPlayer.unique.includes('spectral_image')) {\r\n                // Revert local state\r\n                this.playerState.myPlayer.flags.hidden = false;\r\n                this.playerState.myPlayer.flags.invulnerable = false;\r\n\r\n                // Broadcast partial update\r\n                this.roomManager.sendMessage(JSON.stringify({\r\n                    type: 'partial-state',\r\n                    userId: this.userId,\r\n                    flags: {\r\n                        hidden: false,\r\n                        invulnerable: false\r\n                    }\r\n                }));\r\n            }\r\n\r\n            this.playerState.isDashing = false;\r\n\r\n            if (this.playerState.myPlayer.equipment.includes('switch')) {\r\n                this.combatController.toggleAutoFire(Date.now() + this.playerState.myPlayer.actions.dash.cooldown);\r\n            }\r\n\r\n            console.log('Dash ended');\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { PlayerState } from \"./PlayerState\";\r\n\r\nexport class LuckController {\r\n    constructor(private playerState: PlayerState) { }\r\n\r\n    /**\r\n     * Perform a luck roll using the player's luck stat.\r\n     *\r\n     * Luck is a signed value centered around 0.\r\n     * - Uses tanh() to map luck smoothly into [-1, 1], which gives soft limits.\r\n     * - The resulting chance is 5%–95%, with heavy diminishing returns past ±10.\r\n     *\r\n     * Approximate success odds:\r\n     *   luck -20 → ~2%\r\n     *   luck -10 → ~4%\r\n     *   luck  -5 → ~6%\r\n     *   luck   0 → 10%\r\n     *   luck  +5 → 17%\r\n     *   luck +10 → 30%\r\n     *   luck +20 → 45%\r\n     * \r\n     * Optionally pass a multiplier to scale luck.\r\n     */\r\n    public luckRoll(multiplier: number = 1): boolean {\r\n        const effectiveLuck = this.playerState.myPlayer.stats.luck * multiplier;\r\n        const scaledLuck = Math.tanh(effectiveLuck / 10);\r\n\r\n        const baseChance = 0.1; // 10%\r\n        const softCap = 0.35; // 35%\r\n\r\n        const chance = baseChance + scaledLuck * softCap;\r\n        return Math.random() < chance;\r\n    }\r\n}","import { ControlsManager } from \"../ControlsManager\";\r\nimport { SettingsManager } from \"../SettingsManager\";\r\n\r\nexport class MoveController {\r\n    constructor(private controlsManager: ControlsManager, private settingsManager: SettingsManager) {}\r\n\r\n    /**\r\n     * Detects and returns the Vec2 movement input from the assigned keybinds.\r\n     */\r\n    public getMoveInput(): { inputX: number; inputY: number; inputLength: number } {\r\n        let inputX = 0;\r\n        let inputY = 0;\r\n\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveUp)) inputY -= 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveDown)) inputY += 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveLeft)) inputX -= 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveRight)) inputX += 1;\r\n\r\n        const inputLength = Math.sqrt(inputX * inputX + inputY * inputY);\r\n\r\n        if (inputLength > 0) {\r\n            inputX = inputX / inputLength;\r\n            inputY = inputY / inputLength;\r\n        }\r\n\r\n        return { inputX, inputY, inputLength };\r\n    }\r\n\r\n    /**\r\n     * Returns state based on if the player is currently moving or not.\r\n     */\r\n    public isMoving(): boolean {\r\n        return this.getMoveInput().inputLength > 0;\r\n    }\r\n}","import { OBJECT_DEFAULTS } from \"./Config\";\r\nimport { AmmoBox, GameObject, SpawnObjectParams } from \"./Types\";\r\n\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class ObjectsManager {\r\n    public ammoBoxes: Map<string, AmmoBox> = new Map();\r\n\r\n    constructor(private playerState: PlayerState, private utility: Utility) {}\r\n\r\n    // #region [ Objects ]\r\n    //\r\n    /**\r\n     * Spawns a GameObject in the scene, returning it's properties for the construction.\r\n     */\r\n    private spawnObject(params: SpawnObjectParams): GameObject {\r\n        const baseObject: GameObject = {\r\n            id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n            transform: params.transform,\r\n            timestamp: Date.now()\r\n        };\r\n\r\n        switch (params.type) { //TODO: Spawn the player, projectiles and any other GameObject types here\r\n            case 'AmmoBox':\r\n                return {\r\n                    id: baseObject.id,\r\n                    transform: baseObject.transform,\r\n                    timestamp: baseObject.timestamp,\r\n                    ammoAmount: params.data?.amount || 10,\r\n                    isOpen: false,\r\n                    lid: {\r\n                        pos: { x: 0, y: 0 },\r\n                        rot: 0,\r\n                        velocity: { x: 0, y: 0 },\r\n                        torque: 0\r\n                    }\r\n                } as AmmoBox;\r\n\r\n            default:\r\n                throw new Error(`Unknown object type: ${params.type}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructs an ammo box and returns the spawned object instantiated through spawnObject.\r\n     */\r\n    public spawnAmmoBox(amount: number): AmmoBox {\r\n        return this.spawnObject({\r\n            type: 'AmmoBox',\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            data: { amount }\r\n        }) as AmmoBox;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { DECALS, NETWORK, PARTICLES, SFX } from \"../Config\";\r\nimport { DeathDecal, EmitterParams, PlayerHitParams, SetSliderParams } from \"../Types\";\r\n\r\nimport { AudioManager } from \"../AudioManager\";\r\nimport { GameState } from \"../GameState\";\r\nimport { LuckController } from \"./LuckController\";\r\nimport { MoveController } from \"./MoveController\";\r\nimport { ObjectsManager } from \"../ObjectsManager\";\r\nimport { ParticlesManager } from \"../ParticlesManager\";\r\nimport { PlayerState } from \"./PlayerState\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { Utility } from \"../Utility\";\r\nimport { DecalsManager } from \"../DecalsManager\";\r\nimport { UserInterface } from \"../UserInterface\";\r\n\r\n\r\nexport class PlayerController {\r\n    constructor(\r\n        private audioManager: AudioManager,\r\n        private decalsManager: DecalsManager,\r\n        private gameState: GameState,\r\n        private luckController: LuckController,\r\n        private moveController: MoveController,\r\n        private objectsManager: ObjectsManager,\r\n        private particlesManager: ParticlesManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) {\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        window.addEventListener('customEvent_playerHitRelay', ((event: CustomEvent) => {\r\n            console.log('Player hit event received:', event.detail.params);\r\n            this.playerHit(event.detail.params);\r\n        }) as EventListener);\r\n    }\r\n\r\n    /**\r\n     * Updates the local player's position and movement state.\r\n     * \r\n     * Applies acceleration, friction, sprint multipliers, and stamina drain\r\n     * based on current movement input. Sends position updates to the server\r\n     * when movement exceeds the defined threshold or interval.\r\n     * \r\n     * Does not process updates when game is not active, player is dead, or dashing.\r\n     */\r\n    public updatePlayerPosition(delta: number): void {\r\n        if (!this.gameState.gameInProgress || this.playerState.myPlayer.stats.health.value <= 0 || this.playerState.isDashing) return;\r\n\r\n        const now = Date.now();\r\n        const { inputX, inputY } = this.moveController.getMoveInput();\r\n\r\n        // [ Sprinting ]\r\n        const canSprint = this.playerState.isSprinting && this.playerState.myPlayer.stats.stamina.value > 0 && this.moveController.isMoving();\r\n        const currentSpeed = canSprint ? this.playerState.myPlayer.stats.speed * this.playerState.myPlayer.actions.sprint.multiplier : this.playerState.myPlayer.stats.speed;\r\n        if (this.playerState.isSprinting && this.playerState.myPlayer.stats.stamina.value <= 0) { // Stop sprinting if out of stamina\r\n            this.playerState.isSprinting = false;\r\n            console.log('Out of stamina, stopped sprinting');\r\n        }\r\n        //\r\n\r\n        const targetVelocityX = inputX * currentSpeed;\r\n        const targetVelocityY = inputY * currentSpeed;\r\n\r\n        this.playerState.playerVelocityX += (targetVelocityX - this.playerState.playerVelocityX) * this.playerState.myPlayer.physics.acceleration * delta;\r\n        this.playerState.playerVelocityY += (targetVelocityY - this.playerState.playerVelocityY) * this.playerState.myPlayer.physics.acceleration * delta;\r\n\r\n        if (!this.moveController.isMoving()) {\r\n            this.playerState.playerVelocityX *= Math.pow(this.playerState.myPlayer.physics.friction, delta);\r\n            this.playerState.playerVelocityY *= Math.pow(this.playerState.myPlayer.physics.friction, delta);\r\n        }\r\n\r\n        let newX = this.playerState.myPlayer.transform.pos.x + this.playerState.playerVelocityX * delta;\r\n        let newY = this.playerState.myPlayer.transform.pos.y + this.playerState.playerVelocityY * delta;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = newX;\r\n        this.playerState.myPlayer.transform.pos.y = newY;\r\n\r\n        let moved = (this.playerState.playerVelocityX !== 0 || this.playerState.playerVelocityY !== 0);\r\n\r\n        const distanceFromLastSent = Math.sqrt(\r\n            (this.playerState.myPlayer.transform.pos.x - this.playerState.lastSentX) ** 2 +\r\n            (this.playerState.myPlayer.transform.pos.y - this.playerState.lastSentY) ** 2\r\n        );\r\n\r\n        if (moved && distanceFromLastSent > 2 && now - this.playerState.lastSentMoveTime >= NETWORK.MOVE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    pos: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    }\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentX = this.playerState.myPlayer.transform.pos.x;\r\n            this.playerState.lastSentY = this.playerState.myPlayer.transform.pos.y;\r\n            this.playerState.lastSentMoveTime = now;\r\n        }\r\n\r\n        if (Math.abs(this.playerState.playerVelocityX) < 0.01) this.playerState.playerVelocityX = 0;\r\n        if (Math.abs(this.playerState.playerVelocityY) < 0.01) this.playerState.playerVelocityY = 0;\r\n    }\r\n\r\n    /**\r\n     * Processes local hits to players. Sends network message for syncing.\r\n     */\r\n    public playerHit(params: PlayerHitParams): void {\r\n        // Update health slider\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const healthSliderParams: SetSliderParams = {\r\n            sliderId: 'healthBar',\r\n            targetValue: this.playerState.myPlayer.stats.health.value,\r\n            maxValue: this.playerState.myPlayer.stats.health.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n        this.utility.setSlider(healthSliderParams);\r\n\r\n        if (params.target.id === this.userId) { // Random chance to play grunt when I'm hit\r\n            if (this.utility.getRandomNum(0, 1) < 0.2) { // 20%\r\n                this.audioManager.playAudioNetwork({\r\n                    src: this.utility.getRandomInArray(SFX.PLAYER.MALE.GRUNT), // TODO: Allow player to define gender\r\n                    listener: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    },\r\n                    output: 'sfx',\r\n                    pitch: { min: 0.95, max: 1.075 },\r\n                    spatial: {\r\n                        blend: 1.0,\r\n                        pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n                    },\r\n                    volume: { min: 0.9, max: 1 }\r\n                });\r\n            }\r\n        } else { // The player hit was not me\r\n            this.audioManager.playAudioNetwork({ // Play hit sound\r\n                src: this.utility.getRandomInArray(SFX.IMPACT.FLESH.BULLET), // TODO: User current body material\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.925, max: 1.15 },\r\n                spatial: {\r\n                    blend: 1.0,\r\n                    pos: { x: params.source.transform.pos.x, y: params.source.transform.pos.y }\r\n                },\r\n                volume: { min: 0.95, max: 1 }\r\n            });\r\n\r\n            const bloodDirection = {\r\n                x: -params.source.velocity.x / Math.sqrt(params.source.velocity.x ** 2 + params.source.velocity.y ** 2),\r\n                y: -params.source.velocity.y / Math.sqrt(params.source.velocity.x ** 2 + params.source.velocity.y ** 2)\r\n            };\r\n\r\n            this.decalsManager.createDecal(params.source.transform.pos.x, params.source.transform.pos.y, `blood_${params.source.id}`, DECALS.BLOOD);\r\n            this.particlesManager.createParticles(params.source.transform.pos.x, params.source.transform.pos.y, `blood_${params.source.id}`, PARTICLES.BLOOD_SPRAY, bloodDirection);\r\n\r\n            const emission: EmitterParams = {\r\n                id: `particle_emitter_${params.target.id}_${Date.now()}`,\r\n                interval: this.utility.getRandomNum(200, 400), // ms\r\n                lifetime: this.utility.getRandomNum(1000, 3000), // ms\r\n                offset: {\r\n                    x: params.target.transform.pos.x,\r\n                    y: params.target.transform.pos.y\r\n                },\r\n                particleType: PARTICLES.BLOOD_DRIP,\r\n                playerId: params.target.id,\r\n                pos: {\r\n                    x: params.source.transform.pos.x,\r\n                    y: params.source.transform.pos.y\r\n                }\r\n            };\r\n            this.particlesManager.createEmitter(emission);\r\n\r\n            if (params.newHealth <= 0) { // If they died, I get a kill\r\n                console.log(`I killed ${params.target.id}!`);\r\n\r\n                const me = this.ui.leaderboard.get(this.userId);\r\n                if (me) { me.kills++; }\r\n\r\n                const other = this.ui.leaderboard.get(params.target.id);\r\n                if (other) { other.deaths++; }\r\n\r\n                this.ui.updateLeaderboardDisplay(this.userId);\r\n            }\r\n        }\r\n\r\n        const message = {\r\n            type: 'player-hit',\r\n            targetId: params.target.id,\r\n            shooterId: params.shooterId,\r\n            damage: params.damage,\r\n            newHealth: params.newHealth,\r\n            projectileId: params.source.id,\r\n            wasKill: params.wasKill\r\n        }\r\n\r\n        this.roomManager.sendMessage(JSON.stringify(message));\r\n    }\r\n\r\n    /**\r\n     * Record the player's own death when they are the targetId of a player-hit message and their health reaches 0.\r\n     */\r\n    public playerDeath(): void {\r\n        const triggeredUniques = this.triggerUniques();\r\n\r\n        console.log('I died! Waiting for round to end...');\r\n\r\n        this.playerState.resetPlayerState();\r\n\r\n        const ammoBox = this.objectsManager.spawnAmmoBox(10);\r\n        this.objectsManager.ammoBoxes.set(ammoBox.id, ammoBox);\r\n\r\n        const gore: DeathDecal = {\r\n            gore: {\r\n                amount: this.utility.getRandomInt(2, 5)\r\n            },\r\n            blood: {\r\n                amount: this.utility.getRandomInt(1, 3)\r\n            },\r\n            ownerId: this.userId,\r\n            pos: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            radius: this.playerState.myPlayer.stats.size\r\n        }\r\n        this.particlesManager.generateGore(gore);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-death',\r\n            playerId: this.userId,\r\n            x: this.playerState.myPlayer.transform.pos.x,\r\n            y: this.playerState.myPlayer.transform.pos.y,\r\n            size: this.playerState.myPlayer.stats.size,\r\n            ammoBox: ammoBox\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Used to trigger player related uniques during specific states like death, etc.\r\n     * \r\n     * Returns each unique that succeeds.\r\n     */\r\n    private triggerUniques(): string[] {\r\n        if (this.playerState.myPlayer.unique.length === 0) return [];\r\n\r\n        const succeededUniques: string[] = [];\r\n\r\n        for (const unique of this.playerState.myPlayer.unique) {\r\n            if (unique === 'phoenix_module') {\r\n                const succeeded = this.luckController.luckRoll(1.5);\r\n\r\n                if (succeeded) {\r\n                    console.log('Phoenix Module activated!');\r\n\r\n                    // Double damage permanently\r\n                    this.playerState.myPlayer.actions.primary.projectile.damage *= 2;\r\n\r\n                    // Remove phoenix module so it can't trigger again\r\n                    const index = this.playerState.myPlayer.unique.indexOf('phoenix_module');\r\n                    if (index > -1) {\r\n                        this.playerState.myPlayer.unique.splice(index, 1);\r\n                    }\r\n\r\n                    succeededUniques.push('phoenix_module');\r\n                }\r\n            }\r\n        }\r\n        return succeededUniques;\r\n    }\r\n}","import { CANVAS, PLAYER_DEFAULTS } from \"../Config\";\r\n\r\nimport { Player, Players } from \"../Types\";\r\nimport { Utility } from \"../Utility\";\r\n\r\nexport class PlayerState {\r\n    public myPlayer: Player; // My player object\r\n    public players: Players = new Map(); // Other players in game\r\n\r\n    public isHost = false;\r\n\r\n    public canShoot = true;\r\n    public canAutoFire = false;\r\n    public isBurstActive = false;\r\n    public isReloading = false;\r\n    public isMelee = false;\r\n    public isSprinting = false;\r\n    public isDashing = false;\r\n    public isStaminaRecoveryBlocked = false;\r\n\r\n    public lastSentX = 0;\r\n    public lastSentY = 0;\r\n    public lastSentRotation = 0;\r\n    public lastSentRotationTime = 0;\r\n    public lastSentMoveTime = 0;\r\n\r\n    public playerVelocityX = 0;\r\n    public playerVelocityY = 0;\r\n\r\n    public dashStartTime = 0;\r\n    public lastDashTime = 0;\r\n    public reloadStartTime = 0;\r\n    public lastShotTime = 0;\r\n    public lastMeleeTime = 0;\r\n    public nextBurstShotTime = 0;\r\n    public currentBurstShot = 0;\r\n    public lastStaminaDrainTime = 0;\r\n    public staminaRecoveryBlockedUntil = 0;\r\n\r\n    private statListeners: Map<string, (value: any) => void> = new Map();\r\n\r\n    constructor(userId: string, private utility: Utility) {\r\n        this.myPlayer = this.initPlayer(userId);\r\n    }\r\n\r\n    // #region [ State ]\r\n    //\r\n    // [ IMPORTANT ] Keep full track of Player object here\r\n    /**\r\n     * Initializes the default player object using the PLAYER_DEFAULTS defined in the config.\r\n     */\r\n    public initPlayer(userId: string): Player {\r\n        return this.myPlayer = {\r\n            id: userId,\r\n            transform: {\r\n                pos: {\r\n                    x: Math.random() * (CANVAS.WIDTH - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN,\r\n                    y: Math.random() * (CANVAS.HEIGHT - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN\r\n                },\r\n                rot: 0\r\n            },\r\n            timestamp: Date.now(),\r\n            color: this.utility.getRandomColor(), // TODO: Replace with char customization\r\n            actions: {\r\n                dash: {\r\n                    cooldown: PLAYER_DEFAULTS.ACTIONS.DASH.COOLDOWN,\r\n                    drain: PLAYER_DEFAULTS.ACTIONS.DASH.DRAIN,\r\n                    multiplier: PLAYER_DEFAULTS.ACTIONS.DASH.MULTIPLIER,\r\n                    time: PLAYER_DEFAULTS.ACTIONS.DASH.TIME\r\n                },\r\n                melee: {\r\n                    cooldown: PLAYER_DEFAULTS.ACTIONS.MELEE.COOLDOWN,\r\n                    damage: PLAYER_DEFAULTS.ACTIONS.MELEE.DAMAGE,\r\n                    duration: PLAYER_DEFAULTS.ACTIONS.MELEE.DURATION,\r\n                    range: PLAYER_DEFAULTS.ACTIONS.MELEE.RANGE,\r\n                    size: PLAYER_DEFAULTS.ACTIONS.MELEE.SIZE\r\n                },\r\n                primary: {\r\n                    buffer: PLAYER_DEFAULTS.ACTIONS.PRIMARY.BUFFER,\r\n                    burst: {\r\n                        amount: PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.AMOUNT,\r\n                        delay: PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.DELAY\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE,\r\n                        currentReserve: PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE,\r\n                        maxReserve: PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE,\r\n                        size: PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE\r\n                    },\r\n                    offset: PLAYER_DEFAULTS.ACTIONS.PRIMARY.OFFSET,\r\n                    projectile: {\r\n                        amount: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,\r\n                        color: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.COLOR,\r\n                        damage: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,\r\n                        length: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.LENGTH,\r\n                        range: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.RANGE,\r\n                        size: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SIZE,\r\n                        speed: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPEED,\r\n                        spread: PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPREAD\r\n                    },\r\n                    reload: {\r\n                        time: PLAYER_DEFAULTS.ACTIONS.PRIMARY.RELOAD.TIME\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: PLAYER_DEFAULTS.ACTIONS.SPRINT.DRAIN,\r\n                    multiplier: PLAYER_DEFAULTS.ACTIONS.SPRINT.MULTIPLIER\r\n                }\r\n            },\r\n            equipment: PLAYER_DEFAULTS.EQUIPMENT,\r\n            flags: {\r\n                hidden: PLAYER_DEFAULTS.FLAGS.HIDDEN,\r\n                invulnerable: PLAYER_DEFAULTS.FLAGS.INVULNERABLE\r\n            },\r\n            physics: {\r\n                acceleration: PLAYER_DEFAULTS.PHYSICS.ACCELERATION,\r\n                friction: PLAYER_DEFAULTS.PHYSICS.FRICTION\r\n            },\r\n            rig: {\r\n                body: PLAYER_DEFAULTS.RIG.BODY,\r\n                head: PLAYER_DEFAULTS.RIG.HEAD,\r\n                headwear: PLAYER_DEFAULTS.RIG.HEADWEAR,\r\n                weapon: PLAYER_DEFAULTS.RIG.WEAPON\r\n            },\r\n            stats: {\r\n                defense: PLAYER_DEFAULTS.STATS.DEFENSE,\r\n                health: {\r\n                    max: PLAYER_DEFAULTS.STATS.HEALTH.MAX,\r\n                    value: PLAYER_DEFAULTS.STATS.HEALTH.MAX,\r\n                },\r\n                luck: PLAYER_DEFAULTS.STATS.LUCK,\r\n                size: PLAYER_DEFAULTS.STATS.SIZE,\r\n                speed: PLAYER_DEFAULTS.STATS.SPEED,\r\n                stamina: {\r\n                    max: PLAYER_DEFAULTS.STATS.STAMINA.MAX,\r\n                    recovery: {\r\n                        delay: PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.DELAY,\r\n                        rate: PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.RATE\r\n                    },\r\n                    value: PLAYER_DEFAULTS.STATS.STAMINA.MAX,\r\n                },\r\n            },\r\n            unique: PLAYER_DEFAULTS.UNIQUE\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Resets the current player state stored in memory to default.\r\n     */\r\n    public resetPlayerState(): void {\r\n        this.canShoot = true;\r\n        this.isBurstActive = false;\r\n        this.isReloading = false;\r\n        this.isMelee = false;\r\n        this.isSprinting = false;\r\n        this.isDashing = false;\r\n        this.isStaminaRecoveryBlocked = false;\r\n\r\n        this.playerVelocityX = 0;\r\n        this.playerVelocityY = 0;\r\n\r\n        this.dashStartTime = 0;\r\n        this.lastDashTime = 0;\r\n        this.reloadStartTime = 0;\r\n        this.lastMeleeTime = 0;\r\n        this.lastShotTime = 0;\r\n        this.nextBurstShotTime = 0;\r\n        this.currentBurstShot = 0;\r\n        this.lastStaminaDrainTime = 0;\r\n        this.staminaRecoveryBlockedUntil = 0;\r\n\r\n        this.lastSentX = 0;\r\n        this.lastSentY = 0;\r\n        this.lastSentRotation = 0;\r\n        this.lastSentRotationTime = 0;\r\n        this.lastSentMoveTime = 0;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Events ]\r\n    //\r\n    \r\n    public onStatChange(statPath: string, callback: (value: any) => void): void {\r\n        this.statListeners.set(statPath, callback);\r\n    }\r\n\r\n    private notifyChange(statPath: string, value: any): void {\r\n        const listener = this.statListeners.get(statPath);\r\n        if (listener) {\r\n            listener(value);\r\n        }\r\n    }\r\n\r\n    public updateStat(statPath: string, value: any): void {\r\n        // Navigate to the property and set it\r\n        const pathParts = statPath.split('.');\r\n        let obj: any = this.myPlayer;\r\n\r\n        for (let i = 0; i < pathParts.length - 1; i++) {\r\n            obj = obj[pathParts[i]];\r\n        }\r\n\r\n        const lastProp = pathParts[pathParts.length - 1];\r\n        obj[lastProp] = value;\r\n\r\n        console.log(`${lastProp}: ${value}`);\r\n\r\n        // Notify listeners\r\n        this.notifyChange(statPath, value);\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { PlayerState } from \"./PlayerState\";\r\n\r\nexport class StaminaController {\r\n    constructor(private playerState: PlayerState) { }\r\n\r\n    // #region [ Stamina ]\r\n    //\r\n    /**\r\n     * Requests stamina from my pool for actions that require it.\r\n     * \r\n     * If there is enough, drain the needed stamina and return true.\r\n     */\r\n    public requestStamina(amount: number): boolean {\r\n        if (this.playerState.myPlayer.stats.stamina.value < amount) {\r\n            console.log(`Insufficient stamina! Need: ${amount}, Have: ${this.playerState.myPlayer.stats.stamina}`);\r\n            return false;\r\n        }\r\n\r\n        this.playerState.myPlayer.stats.stamina.value -= amount;\r\n\r\n        // Block stamina recovery for the delay period\r\n        this.playerState.isStaminaRecoveryBlocked = true;\r\n        this.playerState.staminaRecoveryBlockedUntil = Date.now() + this.playerState.myPlayer.stats.stamina.recovery.delay;\r\n\r\n        console.log(`Stamina drained: -${amount}, Remaining: ${this.playerState.myPlayer.stats.stamina}`);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Process stamina requests and recovery.\r\n     */\r\n    public updateStamina(delta: number): void {\r\n        const currentTime = Date.now();\r\n\r\n        // Handle sprint stamina drain (every second while sprinting)\r\n        if (this.playerState.isSprinting && currentTime >= this.playerState.lastStaminaDrainTime + 100) {\r\n            if (!this.requestStamina(this.playerState.myPlayer.actions.sprint.drain)) {\r\n                // Out of stamina, stop sprinting\r\n                this.playerState.isSprinting = false;\r\n                console.log('Out of stamina, stopped sprinting');\r\n            }\r\n            this.playerState.lastStaminaDrainTime = currentTime;\r\n        }\r\n\r\n        // Handle stamina recovery\r\n        if (!this.playerState.isStaminaRecoveryBlocked || currentTime >= this.playerState.staminaRecoveryBlockedUntil) {\r\n            this.playerState.isStaminaRecoveryBlocked = false;\r\n\r\n            // Recover stamina if not at max and not sprinting\r\n            if (this.playerState.myPlayer.stats.stamina.value < this.playerState.myPlayer.stats.stamina.max && !this.playerState.isSprinting) {\r\n                const staminaRecoveryPerFrame = (this.playerState.myPlayer.stats.stamina.recovery.rate / 1000) * 16.67 * delta;\r\n                this.playerState.myPlayer.stats.stamina.value = Math.min(this.playerState.myPlayer.stats.stamina.max, this.playerState.myPlayer.stats.stamina.value + staminaRecoveryPerFrame);\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","\r\nimport { PLAYER_DEFAULTS, CANVAS, GAME, SFX, AUDIO } from './Config';\r\n\r\nimport { Player, RoomMessage, LobbyPlayer, LeaderboardEntry, ResetType, SetSliderParams, SetSpanParams, DeathDecal, EmitterParams, GameSettings } from './Types';\r\n\r\nimport { Admin } from './Admin';\r\nimport { Animator } from './Animator';\r\nimport { AudioManager } from './AudioManager';\r\nimport { CacheManager } from './CacheManager';\r\nimport { CharacterConfig } from './CharacterConfig';\r\nimport { CharacterManager } from './CharacterManager';\r\nimport { ChatManager } from './ChatManager';\r\nimport { ControlsManager } from './ControlsManager';\r\nimport { CollisionsManager } from './CollisionsManager';\r\nimport { DecalsManager } from './DecalsManager';\r\nimport { EventsManager } from './EventsManager';\r\nimport { GameState } from './GameState';\r\nimport { LobbyManager } from './LobbyManager';\r\nimport { ParticlesManager } from './ParticlesManager';\r\nimport { RenderingManager } from './RenderingManager';\r\nimport { RoomController } from './RoomController';\r\nimport { RoomManager } from './RoomManager';\r\nimport { SettingsManager } from './SettingsManager';\r\nimport { UpgradeManager } from './UpgradeManager';\r\nimport { UserInterface } from './UserInterface';\r\nimport { Utility } from './Utility';\r\nimport { WebsocketManager } from './WebsocketManager';\r\n\r\nimport { AmmoReservesUIController } from './player/AmmoReservesUIController';\r\nimport { CombatController } from './player/CombatController';\r\nimport { DashController } from './player/DashController';\r\nimport { LuckController } from './player/LuckController';\r\nimport { MoveController } from './player/MoveController';\r\nimport { ObjectsManager } from './ObjectsManager';\r\nimport { PlayerController } from './player/PlayerController';\r\nimport { PlayerState } from './player/PlayerState';\r\nimport { StaminaController } from './player/StaminaController';\r\n\r\nclass Client {\r\n    private userId: string;\r\n\r\n    private isRoundInProgress = false;\r\n\r\n    private roundWinner: string | null = null;\r\n    private gameWinner: string | null = null; // TODO: Use the game winner to display lobby historical wins\r\n\r\n    private admin: Admin;\r\n    private ammoReservesUIController: AmmoReservesUIController;\r\n    private animator: Animator;\r\n    private audioManager: AudioManager;\r\n    private cacheManager: CacheManager;\r\n    private charConfig: CharacterConfig;\r\n    private charManager: CharacterManager;\r\n    private chatManager: ChatManager;\r\n    private collisionsManager: CollisionsManager;\r\n    private combatController: CombatController;\r\n    private controlsManager: ControlsManager;\r\n    private dashController: DashController;\r\n    private decalsManager: DecalsManager;\r\n    private eventsManager: EventsManager;\r\n    private gameState: GameState;\r\n    private lobbyManager: LobbyManager;\r\n    private luckController: LuckController;\r\n    private moveController: MoveController;\r\n    private objectsManager: ObjectsManager;\r\n    private particlesManager: ParticlesManager;\r\n    private playerController: PlayerController;\r\n    private playerState: PlayerState;\r\n    private renderingManager: RenderingManager;\r\n    private roomController: RoomController;\r\n    private roomManager: RoomManager;\r\n    private settingsManager: SettingsManager;\r\n    private staminaController: StaminaController;\r\n    private upgradeManager: UpgradeManager;\r\n    private ui: UserInterface;\r\n    private utility: Utility;\r\n    private wsManager: WebsocketManager;\r\n\r\n    // #region [ Initialization ]\r\n    //\r\n    constructor() {\r\n        this.cacheManager = new CacheManager();\r\n        this.utility = new Utility();\r\n        this.gameState = new GameState();\r\n\r\n        this.settingsManager = new SettingsManager(this.cacheManager);\r\n        this.controlsManager = new ControlsManager(this.settingsManager);\r\n\r\n        this.charConfig = new CharacterConfig();\r\n        this.charManager = new CharacterManager(this.charConfig);\r\n\r\n        this.userId = this.utility.generateUID(PLAYER_DEFAULTS.DATA.ID_LENGTH);\r\n        this.playerState = new PlayerState(this.userId, this.utility);\r\n\r\n        this.ui = new UserInterface(this.playerState, this.settingsManager, this.utility);\r\n        this.ammoReservesUIController = new AmmoReservesUIController(\r\n            this.settingsManager,\r\n            this.ui,\r\n            this.utility\r\n        );\r\n\r\n        this.admin = new Admin(this.cacheManager, this.ui);\r\n\r\n        this.upgradeManager = new UpgradeManager(\r\n            this.ammoReservesUIController,\r\n            this.playerState,\r\n            this.utility\r\n        );\r\n\r\n        this.objectsManager = new ObjectsManager(\r\n            this.playerState,\r\n            this.utility\r\n        );\r\n\r\n        this.roomManager = new RoomManager(this.userId, this.utility);\r\n        this.lobbyManager = new LobbyManager(this.utility, this.ui, this.roomManager);\r\n        this.wsManager = new WebsocketManager(this.gameState, this.roomManager, this.utility);\r\n        this.chatManager = new ChatManager(this.roomManager, this.ui);\r\n\r\n        this.roomController = new RoomController(\r\n            this.gameState,\r\n            this.lobbyManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.upgradeManager,\r\n            this.userId,\r\n            this.utility,\r\n            this.wsManager\r\n        );\r\n\r\n        this.collisionsManager = new CollisionsManager(\r\n            this.ammoReservesUIController,\r\n            this.objectsManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.userId\r\n        );\r\n\r\n        this.moveController = new MoveController(this.controlsManager, this.settingsManager);\r\n        this.staminaController = new StaminaController(this.playerState);\r\n        this.luckController = new LuckController(this.playerState);\r\n\r\n        this.audioManager = new AudioManager(this.roomManager, this.settingsManager, this.utility);\r\n        this.animator = new Animator(this.playerState, this.roomManager, this.userId);\r\n\r\n        this.renderingManager = new RenderingManager(\r\n            this.animator,\r\n            this.charManager,\r\n            this.objectsManager,\r\n            this.ui\r\n        );\r\n\r\n        this.decalsManager = new DecalsManager(\r\n            this.roomManager,\r\n            this.ui,\r\n            this.utility\r\n        );\r\n\r\n        this.particlesManager = new ParticlesManager(\r\n            this.charConfig,\r\n            this.collisionsManager,\r\n            this.decalsManager,\r\n            this.playerState,\r\n            this.renderingManager,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.playerController = new PlayerController(\r\n            this.audioManager,\r\n            this.decalsManager,\r\n            this.gameState,\r\n            this.luckController,\r\n            this.moveController,\r\n            this.objectsManager,\r\n            this.particlesManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.combatController = new CombatController(\r\n            this.ammoReservesUIController,\r\n            this.animator,\r\n            this.audioManager,\r\n            this.collisionsManager,\r\n            this.decalsManager,\r\n            this.gameState,\r\n            this.luckController,\r\n            this.particlesManager,\r\n            this.playerController,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.dashController = new DashController(\r\n            this.collisionsManager,\r\n            this.combatController,\r\n            this.moveController,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.staminaController,\r\n            this.userId\r\n        );\r\n\r\n        this.eventsManager = new EventsManager(\r\n            this.animator,\r\n            this.chatManager,\r\n            this.controlsManager,\r\n            this.gameState,\r\n            this.roomController,\r\n            this.playerState,\r\n            this.settingsManager,\r\n            this.ui,\r\n            this.userId\r\n        );\r\n\r\n        if (document.readyState === 'loading') {\r\n            document.addEventListener('DOMContentLoaded', () => { this.initClient(); });\r\n        } else {\r\n            this.initClient();\r\n        }\r\n\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape' && this.gameState.gameInProgress && !this.lobbyManager.inLobby) {\r\n                e.preventDefault();\r\n                // TODO: Test stuff here!\r\n\r\n                const ammo = 20;\r\n\r\n                this.playerState.myPlayer.actions.primary.magazine.currentReserve += ammo;\r\n                this.ammoReservesUIController.spawnAmmoInReserveUI(ammo);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Main initializer for the game client.\r\n     */\r\n    private async initClient(): Promise<void> {\r\n        this.ui.initInterface();\r\n        this.eventsManager.initEventListeners();\r\n        this.initGlobalEvents();\r\n\r\n        this.roomController.checkForRoomInURL();\r\n        this.roomController.showRoomControls();\r\n\r\n        const spanParams: SetSpanParams = {\r\n            spanId: 'userId',\r\n            value: this.userId\r\n        }\r\n        this.utility.setSpan(spanParams);\r\n\r\n        await this.settingsManager.loadSettings();\r\n        const settings: GameSettings = this.settingsManager.getSettings();\r\n\r\n        this.ui.initSoundSliders(settings);\r\n        this.ui.initSettingsInputs(settings);\r\n        this.ui.initSettingsToggles(settings)\r\n\r\n        this.ammoReservesUIController.initAmmoReserveCanvas();\r\n\r\n        this.eventsManager.initKeybindListeners();\r\n\r\n        if (AUDIO.SETTINGS.PRELOAD_SOUNDS) {\r\n            this.audioManager.preloadAudioAssets(SFX, '.ogg');\r\n        }\r\n\r\n        this.watchForInputs();\r\n\r\n        this.admin.onAdminCommand = (command, key) => {\r\n            this.roomManager.sendAdminCommand(command, key);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners.\r\n     */\r\n    private initGlobalEvents(): void {\r\n        window.addEventListener(\"customEvent_startGame\", () => this.startGame());\r\n        window.addEventListener(\"customEvent_resetGameState\", (e: Event) => {\r\n            const event = e as CustomEvent<{ resetType: ResetType }>;\r\n            this.resetGameState(event.detail.resetType);\r\n        });\r\n\r\n        // Room manager message handler\r\n        this.roomManager.onMessage((message) => this.handleRoomMessage(message));\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Client <> Server ]\r\n    //\r\n    private handleRoomMessage(message: RoomMessage): void {\r\n        switch (message.type) {\r\n            case 'room-created':\r\n                console.log('Room created');\r\n                break;\r\n            case 'room-joined':\r\n                console.log('Joined room - lobby');\r\n                this.playerState.isHost = false;\r\n                this.lobbyManager.showLobbyControls({\r\n                    lobby: this.lobbyManager,\r\n                    lobbyOptions: {\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    },\r\n                    myPlayer: this.playerState.myPlayer,\r\n                    roomId: this.roomManager.getCurrentRoom() || \"\",\r\n                    userId: this.userId\r\n                });\r\n\r\n                // Send my lobby info\r\n                this.roomManager.sendMessage(JSON.stringify({\r\n                    type: 'lobby-join',\r\n                    color: this.playerState.myPlayer.color\r\n                }));\r\n\r\n                // Add myself to lobby\r\n                this.lobbyManager.lobbyPlayers.set(this.userId, {\r\n                    id: this.userId,\r\n                    color: this.playerState.myPlayer.color,\r\n                    isHost: this.playerState.isHost\r\n                });\r\n                this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n\r\n                if (this.lobbyManager.lobbyPlayers.size === 0) { // No other players added to lobby list\r\n                    this.playerState.isHost = true;\r\n                    this.lobbyManager.lobbyPlayers.get(this.userId)!.isHost = true;\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n                    console.log('I am the only player in the room...');\r\n                }\r\n                break;\r\n            case 'user-left':\r\n                console.log(`User ${message.userId} left`);\r\n                this.lobbyManager.lobbyPlayers.delete(message.userId);\r\n                this.playerState.players.delete(message.userId);\r\n\r\n                // Remove from leaderboard when player leaves\r\n                this.ui.leaderboard.delete(message.userId);\r\n                this.ui.updateLeaderboardDisplay(this.userId);\r\n                console.log(`Removed ${message.userId} from leaderboard`);\r\n\r\n                // Remove projectiles from disconnected player\r\n                this.combatController.projectiles.forEach((projectile, id) => {\r\n                    if (projectile.ownerId === message.userId) {\r\n                        this.combatController.projectiles.delete(id);\r\n                    }\r\n                });\r\n                this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                break;\r\n            case 'room-message':\r\n                this.handleGameMessage(message);\r\n                break;\r\n            case 'room-error':\r\n                alert(`Error: ${message.message}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private handleGameMessage(message: RoomMessage): void {\r\n        if (!message.message) return;\r\n\r\n        try {\r\n            const gameData = JSON.parse(message.message);\r\n\r\n            switch (gameData.type) {\r\n                //\r\n                // #region [ Lobby ]\r\n                //\r\n                case 'lobby-join':\r\n                    this.lobbyManager.lobbyPlayers.set(message.userId, {\r\n                        id: message.userId,\r\n                        color: gameData.color,\r\n                        isHost: false\r\n                    });\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n\r\n                    // If I'm host, send current lobby state to new player\r\n                    if (this.playerState.isHost) {\r\n                        this.roomManager.sendMessage(JSON.stringify({\r\n                            type: 'lobby-state',\r\n                            players: Array.from(this.lobbyManager.lobbyPlayers.values()),\r\n                            options: {\r\n                                privateRoom: this.roomManager.isPrivateRoom,\r\n                                maxPlayers: this.gameState.gameMaxPlayers,\r\n                                maxWins: this.gameState.gameMaxWins,\r\n                                upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                                // TODO: Add more room options here as enabled\r\n                            }\r\n                        }));\r\n                    }\r\n                    break;\r\n                case 'lobby-state':\r\n                    this.lobbyManager.lobbyPlayers.clear();\r\n\r\n                    gameData.players.forEach((player: LobbyPlayer) => {\r\n                        this.lobbyManager.lobbyPlayers.set(player.id, player);\r\n                    });\r\n\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n\r\n                    if (gameData.options) {\r\n                        this.lobbyManager.syncLobbyOptions(gameData.options);\r\n                    }\r\n                    break;\r\n                case 'lobby-options':\r\n                    this.lobbyManager.syncLobbyOptions(gameData);\r\n                    break;\r\n                case 'promote-player':\r\n                    this.lobbyManager.lobbyPlayers.forEach((player, id) => { // Update host status for all players\r\n                        player.isHost = id === gameData.targetPlayerId;\r\n                    });\r\n\r\n                    // Update my own host status\r\n                    this.playerState.isHost = gameData.targetPlayerId === this.userId;\r\n\r\n                    // If I just became host due to migration, log it\r\n                    if (this.playerState.isHost && gameData.reason === 'host-migration') {\r\n                        console.log('I am now the host due to host migration');\r\n                    }\r\n\r\n                    this.lobbyManager.setupLobbyOptions({\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    });\r\n\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n                    break;\r\n                case 'return-to-lobby': // New message type\r\n                    console.log('Returning to lobby - last player or game ended');\r\n\r\n                    // Update host status if I'm the new host\r\n                    if (gameData.newHostId === this.userId) {\r\n                        this.playerState.isHost = true;\r\n                        console.log('I am now the host as the last remaining player');\r\n                    }\r\n\r\n                    this.resetGameState('Lobby');\r\n\r\n                    // Show lobby\r\n                    this.lobbyManager.showLobbyControls({\r\n                        lobby: this.lobbyManager,\r\n                        lobbyOptions: {\r\n                            maxPlayers: this.gameState.gameMaxPlayers,\r\n                            maxWins: this.gameState.gameMaxWins,\r\n                            isHost: this.playerState.isHost,\r\n                            privateRoom: this.roomManager.isPrivateRoom,\r\n                            upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                        },\r\n                        myPlayer: this.playerState.myPlayer,\r\n                        roomId: this.roomManager.getCurrentRoom() || \"\",\r\n                        userId: this.userId\r\n                    });\r\n                    break;\r\n                case 'kick-player':\r\n                    if (gameData.targetPlayerId === this.userId) {\r\n                        alert('You have been kicked from the lobby');\r\n                        this.roomController.leaveRoom();\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Chat ]\r\n                //\r\n                case 'chat-message':\r\n                    if (message.userId !== this.userId) {\r\n                        this.chatManager.displayChatMessage({\r\n                            senderId: message.userId,\r\n                            message: gameData.message,\r\n                            isOwn: false\r\n                        });\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Player ]\r\n                //\r\n                // [ IMPORTANT ] Keep full track of Player object here\r\n                case 'player-state':\r\n                    console.log('Player State for player', gameData.id, ':', gameData);\r\n\r\n                    if (!this.lobbyManager.inLobby) {\r\n                        this.playerState.players.set(message.userId, {\r\n                            id: message.userId,\r\n                            transform: {\r\n                                pos: {\r\n                                    x: gameData.transform?.pos.x,\r\n                                    y: gameData.transform?.pos.y\r\n                                },\r\n                                rot: gameData.transform?.rot\r\n                            },\r\n                            timestamp: gameData.timestamp,\r\n                            color: gameData.color,\r\n                            actions: {\r\n                                dash: {\r\n                                    cooldown: gameData.actions?.dash.cooldown || PLAYER_DEFAULTS.ACTIONS.DASH.COOLDOWN,\r\n                                    drain: gameData.actions?.dash.drain || PLAYER_DEFAULTS.ACTIONS.DASH.DRAIN,\r\n                                    multiplier: gameData.actions?.dash.multiplier || PLAYER_DEFAULTS.ACTIONS.DASH.MULTIPLIER,\r\n                                    time: gameData.actions?.dash.time || PLAYER_DEFAULTS.ACTIONS.DASH.TIME\r\n                                },\r\n                                melee: {\r\n                                    cooldown: gameData.actions?.melee.cooldown || PLAYER_DEFAULTS.ACTIONS.MELEE.COOLDOWN,\r\n                                    damage: gameData.actions?.melee.damage || PLAYER_DEFAULTS.ACTIONS.MELEE.DAMAGE,\r\n                                    duration: gameData.actions?.melee.duration || PLAYER_DEFAULTS.ACTIONS.MELEE.DURATION,\r\n                                    range: gameData.actions?.melee.range || PLAYER_DEFAULTS.ACTIONS.MELEE.RANGE,\r\n                                    size: gameData.actions?.melee.size || PLAYER_DEFAULTS.ACTIONS.MELEE.SIZE\r\n                                },\r\n                                primary: {\r\n                                    buffer: gameData.actions?.primary.buffer || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BUFFER,\r\n                                    burst: {\r\n                                        amount: gameData.actions?.primary.burst.amount || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.AMOUNT,\r\n                                        delay: gameData.actions?.primary.burst.delay || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.DELAY\r\n                                    },\r\n                                    magazine: {\r\n                                        currentAmmo: gameData.actions?.primary.magazine.currentAmmo,\r\n                                        currentReserve: gameData.actions?.primary.magazine.currentReserve,\r\n                                        maxReserve: gameData.actions?.primary.magazine.maxReserve,\r\n                                        size: gameData.actions?.primary.magazine.size || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE\r\n                                    },\r\n                                    offset: gameData.actions?.primary.offset || PLAYER_DEFAULTS.ACTIONS.PRIMARY.OFFSET,\r\n                                    projectile: {\r\n                                        amount: gameData.actions?.primary.projectile.amount || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,\r\n                                        color: gameData.actions?.primary.projectile.color || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.COLOR,\r\n                                        damage: gameData.actions?.primary.projectile.damage || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,\r\n                                        length: gameData.actions?.primary.projectile.length || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.LENGTH,\r\n                                        range: gameData.actions?.primary.projectile.range || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.RANGE,\r\n                                        size: gameData.actions?.primary.projectile.size || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SIZE,\r\n                                        speed: gameData.actions?.primary.projectile.speed || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPEED,\r\n                                        spread: gameData.actions?.primary.projectile.spread || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPREAD\r\n                                    },\r\n                                    reload: {\r\n                                        time: gameData.actions?.primary.reload.time || PLAYER_DEFAULTS.ACTIONS.PRIMARY.RELOAD.TIME\r\n                                    }\r\n                                },\r\n                                sprint: {\r\n                                    drain: gameData.actions?.sprint.drain || PLAYER_DEFAULTS.ACTIONS.SPRINT.DRAIN,\r\n                                    multiplier: gameData.actions?.sprint.multiplier || PLAYER_DEFAULTS.ACTIONS.SPRINT.MULTIPLIER\r\n                                }\r\n                            },\r\n                            equipment: gameData.equipment || PLAYER_DEFAULTS.EQUIPMENT,\r\n                            flags: {\r\n                                hidden: gameData.flags.hidden || PLAYER_DEFAULTS.FLAGS.HIDDEN,\r\n                                invulnerable: gameData.flags.invulnerable || PLAYER_DEFAULTS.FLAGS.INVULNERABLE\r\n                            },\r\n                            physics: {\r\n                                acceleration: gameData.physics?.acceleration || PLAYER_DEFAULTS.PHYSICS.ACCELERATION,\r\n                                friction: gameData.physics?.friction || PLAYER_DEFAULTS.PHYSICS.FRICTION\r\n                            },\r\n                            rig: {\r\n                                body: gameData.rig?.body || PLAYER_DEFAULTS.RIG.BODY,\r\n                                head: gameData.rig?.head || PLAYER_DEFAULTS.RIG.HEAD,\r\n                                headwear: gameData.rig?.headwear || PLAYER_DEFAULTS.RIG.HEADWEAR,\r\n                                weapon: gameData.rig?.weapon || PLAYER_DEFAULTS.RIG.WEAPON\r\n                            },\r\n                            stats: {\r\n                                defense: gameData.stats?.defense || PLAYER_DEFAULTS.STATS.DEFENSE,\r\n                                health: {\r\n                                    max: gameData.stats?.health.max || PLAYER_DEFAULTS.STATS.HEALTH.MAX,\r\n                                    value: gameData.stats?.health.value || PLAYER_DEFAULTS.STATS.HEALTH.MAX\r\n                                },\r\n                                luck: gameData.stats?.luck || PLAYER_DEFAULTS.STATS.LUCK,\r\n                                size: gameData.stats?.size || PLAYER_DEFAULTS.STATS.SIZE,\r\n                                speed: gameData.stats?.speed || PLAYER_DEFAULTS.STATS.SPEED,\r\n                                stamina: {\r\n                                    max: gameData.stats?.stamina.max || PLAYER_DEFAULTS.STATS.STAMINA.MAX,\r\n                                    recovery: {\r\n                                        delay: gameData.stats?.stamina.recovery.delay || PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.DELAY,\r\n                                        rate: gameData.stats?.stamina.recovery.rate || PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.RATE\r\n                                    },\r\n                                    value: gameData.stats?.stamina.value || PLAYER_DEFAULTS.STATS.STAMINA.MAX,\r\n                                },\r\n                            },\r\n                            unique: gameData.unique || PLAYER_DEFAULTS.UNIQUE\r\n                        });\r\n                    }\r\n\r\n                    if (gameData.leaderboard) {\r\n                        gameData.leaderboard.forEach(([playerId, entry]: [string, LeaderboardEntry]) => {\r\n                            this.ui.leaderboard.set(playerId, entry);\r\n                        });\r\n                    }\r\n\r\n                    this.ui.createLeaderboard(this.lobbyManager, this.playerState.players, this.userId);\r\n                    break;\r\n                case 'partial-state': {\r\n                    if (message.userId === this.userId) return;\r\n\r\n                    const player = this.playerState.players.get(message.userId);\r\n                    if (!player) break;\r\n\r\n                    console.log('Partial State update for player', message.userId, ':', gameData);\r\n\r\n                    this.utility.deepMerge(player, gameData);\r\n                    break;\r\n                }\r\n                case 'player-move':\r\n                    if (!this.lobbyManager.inLobby && this.playerState.players.has(message.userId)) {\r\n                        const player = this.playerState.players.get(message.userId);\r\n                        if (!player) break;\r\n\r\n                        if (gameData.transform.pos) {\r\n                            player.transform.pos.x = gameData.transform.pos.x;\r\n                            player.transform.pos.y = gameData.transform.pos.y;\r\n                        }\r\n\r\n                        if (gameData.transform.rot !== undefined) {\r\n                            player.transform.rot = gameData.transform.rot;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'player-hit':\r\n                    if (gameData.projectileId) { // Remove the projectile for everyone\r\n                        this.combatController.projectiles.delete(gameData.projectileId);\r\n                    }\r\n\r\n                    if (gameData.targetId === this.userId) { // I got hit\r\n                        this.playerState.myPlayer.stats.health.value = gameData.newHealth;\r\n\r\n                        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n                        const healthSliderParams: SetSliderParams = {\r\n                            sliderId: 'healthBar',\r\n                            targetValue: this.playerState.myPlayer.stats.health.value,\r\n                            maxValue: this.playerState.myPlayer.stats.health.max,\r\n                            lerpTime: sliderLerpTime\r\n                        }\r\n                        this.utility.setSlider(healthSliderParams);\r\n\r\n                        if (this.playerState.myPlayer.stats.health.value <= 0) {\r\n                            this.playerController.playerDeath();\r\n                        }\r\n                    } else if (this.playerState.players.has(gameData.targetId)) { // Another player got hit\r\n                        const hitPlayer = this.playerState.players.get(gameData.targetId);\r\n                        if (!hitPlayer) break;\r\n\r\n                        hitPlayer.stats.health.value = gameData.newHealth;\r\n\r\n                        if (hitPlayer.stats.health.value <= 0) {\r\n                            console.log(`Player ${hitPlayer.id} died`);\r\n                        }\r\n                    }\r\n\r\n                    if (gameData.wasKill) {\r\n                        const shooter = this.ui.leaderboard.get(gameData.shooterId);\r\n                        if (shooter) {\r\n                            shooter.kills++;\r\n                        }\r\n\r\n                        const target = this.ui.leaderboard.get(gameData.targetId);\r\n                        if (target) {\r\n                            target.deaths++;\r\n                        }\r\n\r\n                        this.ui.updateLeaderboardDisplay(this.userId);\r\n                    }\r\n                    break;\r\n                case 'player-death':\r\n                    if (message.userId !== this.userId && gameData.ammoBox) { // Spawn ammo\r\n                        this.objectsManager.ammoBoxes.set(gameData.ammoBox.id, gameData.ammoBox);\r\n                        console.log(`Ammo box spawned at death of ${message.userId}`);\r\n                    }\r\n\r\n                    const gore: DeathDecal = {\r\n                        gore: {\r\n                            amount: this.utility.getRandomInt(2, 5)\r\n                        },\r\n                        blood: {\r\n                            amount: this.utility.getRandomInt(1, 3)\r\n                        },\r\n                        ownerId: message.userId,\r\n                        pos: {\r\n                            x: gameData.x,\r\n                            y: gameData.y\r\n                        },\r\n                        radius: gameData.size\r\n                    }\r\n                    this.particlesManager.generateGore(gore); // Spawn gore\r\n\r\n                    console.log(`Generated gore for ${message.userId}`);\r\n                    break;\r\n                case 'ammo-pickup':\r\n                    if (gameData.playerId === this.userId) break;\r\n\r\n                    if (this.objectsManager.ammoBoxes.has(gameData.ammoBoxId)) {\r\n                        const box = this.objectsManager.ammoBoxes.get(gameData.ammoBoxId);\r\n                        if (!box) break;\r\n\r\n                        // Update box state\r\n                        box.isOpen = gameData.boxState.isOpen;\r\n                        box.lid = gameData.boxState.lid;\r\n\r\n                        console.log(`Ammo box opened by ${gameData.playerId}`);\r\n                    }\r\n                    break;\r\n                case 'weapon-change':\r\n                    if (message.userId !== this.userId && this.playerState.players.has(message.userId)) {\r\n                        const player = this.playerState.players.get(message.userId);\r\n                        if (!player) break;\r\n\r\n                        player.rig.weapon = gameData.weapon;\r\n                        console.log(`${message.userId} switched to ${gameData.weapon}`);\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Projectile ]\r\n                //\r\n                case 'projectile-launch':\r\n                    if (!this.lobbyManager.inLobby && message.userId !== this.userId) {\r\n                        this.combatController.projectiles.set(gameData.projectile.id, gameData.projectile);\r\n                    }\r\n                    break;\r\n\r\n                case 'projectile-remove':\r\n                    if (!this.lobbyManager.inLobby) {\r\n                        this.combatController.projectiles.delete(gameData.projectileId);\r\n                    }\r\n                    break;\r\n                case 'projectile-deflect':\r\n                    if (!this.lobbyManager.inLobby && this.combatController.projectiles.has(gameData.projectileId)) {\r\n                        const projectile = this.combatController.projectiles.get(gameData.projectileId);\r\n                        if (!projectile) break;\r\n\r\n                        // Update projectile properties\r\n                        projectile.ownerId = gameData.newOwnerId;\r\n                        projectile.velocity = gameData.velocity;\r\n                        projectile.color = gameData.color;\r\n                        projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n\r\n                        console.log(`Projectile ${gameData.projectileId} deflected by ${gameData.newOwnerId}`);\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Game ]\r\n                //\r\n                case 'start-game':\r\n                    if (gameData.spawnMap && gameData.spawnMap[this.userId]) {\r\n                        this.playerState.myPlayer.transform.pos.x = gameData.spawnMap[this.userId].x;\r\n                        this.playerState.myPlayer.transform.pos.y = gameData.spawnMap[this.userId].y;\r\n                        console.log(\"My Player Spawn:\", gameData.spawnMap[this.userId].x, gameData.spawnMap[this.userId].y)\r\n                    }\r\n                    // For other players\r\n                    if (gameData.spawnMap) {\r\n                        this.playerState.players.forEach((player: Player, id: string) => {\r\n                            if (gameData.spawnMap[id]) {\r\n                                player.transform.pos.x = gameData.spawnMap[id].x;\r\n                                player.transform.pos.y = gameData.spawnMap[id].y;\r\n                                console.log(`Player ${id} spawn:`, gameData.spawnMap[id].x, gameData.spawnMap[id].y)\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    this.showGameControls(this.roomManager.getCurrentRoom() || '');\r\n                    this.startGameLoop();\r\n                    break;\r\n                case 'game-end':\r\n                    console.log(`Game ended! Winner: ${gameData.winnerId}`);\r\n                    this.gameWinner = gameData.winnerId;\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Round ]\r\n                //\r\n                case 'round-end':\r\n                    console.log(`Round ended! Winner: ${gameData.winnerId || 'No one'}`);\r\n                    this.endRound(gameData.winnerId);\r\n                    break;\r\n                case 'new-round':\r\n                    if (!gameData.spawnMap) return;\r\n                    console.log(gameData.spawnMap);\r\n\r\n                    // Hide upgrade UI\r\n                    if (this.ui.upgradeContainer) {\r\n                        this.ui.upgradeContainer.style.display = 'none';\r\n                    }\r\n\r\n                    console.log('New round started! Everyone respawning...');\r\n                    this.isRoundInProgress = true;\r\n                    this.roundWinner = null;\r\n\r\n                    this.playerState.myPlayer.stats.health.value = this.playerState.myPlayer.stats.health.max;\r\n\r\n                    const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n                    const healthSliderParams: SetSliderParams = {\r\n                        sliderId: 'healthBar',\r\n                        targetValue: this.playerState.myPlayer.stats.health.value,\r\n                        maxValue: this.playerState.myPlayer.stats.health.max,\r\n                        lerpTime: sliderLerpTime\r\n                    }\r\n\r\n                    const staminaSliderParams: SetSliderParams = {\r\n                        sliderId: 'staminaBar',\r\n                        targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n                        maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n                        lerpTime: sliderLerpTime\r\n                    }\r\n\r\n                    this.utility.setSlider(healthSliderParams);\r\n                    this.utility.setSlider(staminaSliderParams);\r\n\r\n                    this.playerState.myPlayer.transform.pos.x = gameData.spawnMap[this.userId].x;\r\n                    this.playerState.myPlayer.transform.pos.y = gameData.spawnMap[this.userId].y;\r\n\r\n                    this.resumeGame(); // Unpause locally\r\n\r\n                    // Receive all player's spawn locations and reset their health\r\n                    this.playerState.players.forEach((player: Player, playerId: string) => { // Respawn other players\r\n                        if (gameData.spawnMap[playerId]) {\r\n                            player.transform.pos.x = gameData.spawnMap[player.id].x;\r\n                            player.transform.pos.y = gameData.spawnMap[player.id].y;\r\n                            player.transform.rot = 0;\r\n\r\n                            // Reset vitals for good measure lol\r\n                            player.stats.health.value = player.stats.health.max;\r\n                            player.stats.stamina.value = player.stats.stamina.max;\r\n                        }\r\n                    });\r\n                    break;\r\n                case 'upgrade-taken': // Someone else took an upgrade\r\n                    if (gameData.upgradeId && gameData.isUnique) { // That upgrade is unique - remove it from my local uniques pool\r\n                        this.upgradeManager.removeUpgradeFromPool(gameData.upgradeId);\r\n                        console.log(`Unique upgrade ${gameData.upgradeId} taken by ${message.userId}`);\r\n                    }\r\n\r\n                    if (this.roundWinner === this.userId) { // I am the round winner - how many players have taken upgrades?\r\n                        this.upgradeManager.upgradesCompleted.add(message.userId);\r\n                        console.log(`${message.userId} completed upgrade. ${this.upgradeManager.upgradesCompleted.size}/${this.playerState.players.size} done`);\r\n\r\n                        // Check if all losers are done\r\n                        if (this.upgradeManager.upgradesCompleted.size >= this.playerState.players.size) {\r\n                            this.showWinnerContinueButton();\r\n                        }\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Audio ]\r\n                //\r\n                case 'play-audio':\r\n                    if (message.userId !== this.userId) {\r\n                        this.audioManager.playAudio(gameData.params);\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n                // #region [ Visual ]\r\n                //\r\n                case 'add-decal':\r\n                    if (message.userId !== this.userId) {\r\n                        this.decalsManager.createDecalNetwork(gameData.x, gameData.y, gameData.decalId, gameData.params);\r\n                    }\r\n                    break;\r\n                case 'add-particles':\r\n                    if (message.userId !== this.userId) {\r\n                        this.particlesManager.generateParticles(\r\n                            gameData.x,\r\n                            gameData.y,\r\n                            gameData.particleId,\r\n                            gameData.params,\r\n                            gameData.direction\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'particle-emitter':\r\n                    if (message.userId !== this.userId) {\r\n                        const emission: EmitterParams = {\r\n                            id: gameData.id,\r\n                            interval: gameData.interval,\r\n                            lifetime: gameData.lifetime,\r\n                            offset: {\r\n                                x: gameData.offset.x,\r\n                                y: gameData.offset.y\r\n                            },\r\n                            particleType: gameData.particleType,\r\n                            playerId: gameData.playerId,\r\n                            pos: {\r\n                                x: gameData.pos.x,\r\n                                y: gameData.pos.y\r\n                            }\r\n                        }\r\n                        this.particlesManager.generateEmitter(emission);\r\n                    }\r\n                    break;\r\n                case 'character-animation':\r\n                    if (gameData.params.playerId !== this.userId) {\r\n                        this.animator.animateCharacterPartNetwork(gameData.params);\r\n                    }\r\n                    break;\r\n                case 'shrapnel-spawn':\r\n                    if (message.userId !== this.userId) {\r\n                        this.particlesManager.generateShrapnel(gameData.pieces);\r\n                    }\r\n                    break;\r\n                //\r\n                // #endregion\r\n                //\r\n            }\r\n        } catch (error) {\r\n            console.error('Error parsing game message:', error);\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Lobby ]\r\n    //\r\n    /**\r\n     * Return to the lobby for this room from the game.\r\n     * \r\n     * Called when game ends, or when you are the last player left in the game.\r\n     */\r\n    private returnToLobby(): void {\r\n        this.resetGameState('Lobby');\r\n\r\n        // Notify others and return to lobby\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'return-to-lobby',\r\n            reason: 'game-ended'\r\n        }));\r\n\r\n        this.lobbyManager.showLobbyControls({\r\n            lobby: this.lobbyManager,\r\n            lobbyOptions: {\r\n                maxPlayers: this.gameState.gameMaxPlayers,\r\n                maxWins: this.gameState.gameMaxWins,\r\n                isHost: this.playerState.isHost,\r\n                privateRoom: this.roomManager.isPrivateRoom,\r\n                upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n            },\r\n            myPlayer: this.playerState.myPlayer,\r\n            roomId: this.roomManager.getCurrentRoom() || \"\",\r\n            userId: this.userId\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Round ]\r\n    //\r\n    /**\r\n     * Processes end of round logic.\r\n     */\r\n    private endRound(winnerId: string | null): void {\r\n        if (!this.isRoundInProgress) {\r\n            console.log('Ignoring endRound - round already ended');\r\n            return;\r\n        }\r\n\r\n        console.log(`Server confirmed round end. Winner: ${winnerId || 'No one'}`);\r\n\r\n        this.isRoundInProgress = false;\r\n        this.roundWinner = winnerId;\r\n\r\n        if (!winnerId) { // Everyone died somehow\r\n            console.log('Round ended with no survivors!');\r\n            if (this.playerState.isHost) {\r\n                this.utility.safeTimeout(() => {\r\n                    this.startNewRound();\r\n                }, GAME.ROUND_END_DELAY);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Increment win for the winner\r\n        if (winnerId && this.ui.leaderboard.has(winnerId)) {\r\n            const winnerEntry = this.ui.leaderboard.get(winnerId);\r\n            if (!winnerEntry) return;\r\n\r\n            winnerEntry.wins++;\r\n            console.log(`${winnerId} won the round! Total wins: ${winnerEntry.wins}`);\r\n\r\n            // Check if they've won the game - use dynamic max wins\r\n            if (winnerEntry.wins >= this.gameState.gameMaxWins) {\r\n                this.endGame(winnerId); // TODO: Maybe don't rely on leaderboard data to end the game but actual player data stored for the round\r\n                return; // Don't start a new round\r\n            }\r\n\r\n            // Update display to show new win count\r\n            this.ui.updateLeaderboardDisplay(this.userId);\r\n        }\r\n\r\n        this.utility.safeTimeout(() => {\r\n            this.pauseGame(); // Everybody pause locally\r\n        }, GAME.ROUND_END_DELAY / 6);\r\n\r\n        // We have a winner, start the upgrade phase after a delay\r\n        this.utility.safeTimeout(() => {\r\n            this.startUpgradePhase(winnerId);\r\n        }, GAME.ROUND_END_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Processes end of game logic.\r\n     */\r\n    private endGame(winnerId: string): void {\r\n        this.gameWinner = winnerId;\r\n        console.log(`${winnerId} won the game with ${this.gameState.gameMaxWins} wins!`);\r\n\r\n        // Send game end message\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'game-end',\r\n            winnerId: winnerId\r\n        }));\r\n\r\n        // Return to lobby after delay\r\n        this.utility.safeTimeout(() => {\r\n            this.returnToLobby();\r\n        }, GAME.GAME_END_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Starts a new round, keeping track of full player states.\r\n     */\r\n    private startNewRound(): void {\r\n        console.log('Starting new round...');\r\n\r\n        // Locally update all other players for the winner, their state should already be updated after taking upgrades\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        // TODO: Probably won't need this eventually due to player-state messages being sent when upgrades are taken, but need more testing to be sure\r\n        this.playerState.players.forEach((player: Player) => {\r\n            player.transform.rot = 0;\r\n            player.timestamp = player.timestamp || Date.now();\r\n            player.actions.dash.cooldown = player.actions.dash.cooldown || PLAYER_DEFAULTS.ACTIONS.DASH.COOLDOWN;\r\n            player.actions.dash.drain = player.actions.dash.drain || PLAYER_DEFAULTS.ACTIONS.DASH.DRAIN;\r\n            player.actions.dash.multiplier = player.actions.dash.multiplier || PLAYER_DEFAULTS.ACTIONS.DASH.MULTIPLIER;\r\n            player.actions.dash.time = player.actions.dash.time || PLAYER_DEFAULTS.ACTIONS.DASH.TIME;\r\n            player.actions.melee.cooldown = player.actions.melee.cooldown || PLAYER_DEFAULTS.ACTIONS.MELEE.COOLDOWN;\r\n            player.actions.melee.damage = player.actions.melee.damage || PLAYER_DEFAULTS.ACTIONS.MELEE.DAMAGE;\r\n            player.actions.melee.duration = player.actions.melee.duration || PLAYER_DEFAULTS.ACTIONS.MELEE.DURATION;\r\n            player.actions.melee.range = player.actions.melee.range || PLAYER_DEFAULTS.ACTIONS.MELEE.RANGE;\r\n            player.actions.melee.size = player.actions.melee.size || PLAYER_DEFAULTS.ACTIONS.MELEE.SIZE;\r\n            player.actions.primary.buffer = player.actions.primary.buffer || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BUFFER;\r\n            player.actions.primary.burst.amount = player.actions.primary.burst.amount || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.AMOUNT;\r\n            player.actions.primary.burst.delay = player.actions.primary.burst.delay || PLAYER_DEFAULTS.ACTIONS.PRIMARY.BURST.DELAY;\r\n            player.actions.primary.magazine.currentAmmo = player.actions.primary.magazine.currentAmmo || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE;\r\n            player.actions.primary.magazine.currentReserve = player.actions.primary.magazine.currentReserve || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE;\r\n            player.actions.primary.magazine.maxReserve = player.actions.primary.magazine.maxReserve || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE;\r\n            player.actions.primary.magazine.size = player.actions.primary.magazine.size || PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.SIZE;\r\n            player.actions.primary.offset = player.actions.primary.offset || PLAYER_DEFAULTS.ACTIONS.PRIMARY.OFFSET;\r\n            player.actions.primary.projectile.amount = player.actions.primary.projectile.amount || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.AMOUNT;\r\n            player.actions.primary.projectile.color = player.actions.primary.projectile.color || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.COLOR;\r\n            player.actions.primary.projectile.damage = player.actions.primary.projectile.damage || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.DAMAGE;\r\n            player.actions.primary.projectile.length = player.actions.primary.projectile.length || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.LENGTH;\r\n            player.actions.primary.projectile.range = player.actions.primary.projectile.range || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.RANGE;\r\n            player.actions.primary.projectile.size = player.actions.primary.projectile.size || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SIZE;\r\n            player.actions.primary.projectile.speed = player.actions.primary.projectile.speed || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPEED;\r\n            player.actions.primary.projectile.spread = player.actions.primary.projectile.spread || PLAYER_DEFAULTS.ACTIONS.PRIMARY.PROJECTILE.SPREAD;\r\n            player.actions.primary.reload.time = player.actions.primary.reload.time || PLAYER_DEFAULTS.ACTIONS.PRIMARY.RELOAD.TIME;\r\n            player.actions.sprint.drain = player.actions.sprint.drain || PLAYER_DEFAULTS.ACTIONS.SPRINT.DRAIN;\r\n            player.actions.sprint.multiplier = player.actions.sprint.multiplier || PLAYER_DEFAULTS.ACTIONS.SPRINT.MULTIPLIER;\r\n            player.equipment = player.equipment || PLAYER_DEFAULTS.EQUIPMENT;\r\n            player.flags.hidden = player.flags.hidden || PLAYER_DEFAULTS.FLAGS.HIDDEN;\r\n            player.flags.invulnerable = player.flags.invulnerable || PLAYER_DEFAULTS.FLAGS.INVULNERABLE;\r\n            player.physics.acceleration = player.physics.acceleration || PLAYER_DEFAULTS.PHYSICS.ACCELERATION;\r\n            player.physics.friction = player.physics.friction || PLAYER_DEFAULTS.PHYSICS.FRICTION;\r\n            player.rig.body = player.rig.body || PLAYER_DEFAULTS.RIG.BODY;\r\n            player.rig.head = player.rig.head || PLAYER_DEFAULTS.RIG.HEAD;\r\n            player.rig.headwear = player.rig.headwear || PLAYER_DEFAULTS.RIG.HEADWEAR;\r\n            player.rig.weapon = player.rig.weapon || PLAYER_DEFAULTS.RIG.WEAPON;\r\n            player.stats.defense = player.stats.defense || PLAYER_DEFAULTS.STATS.DEFENSE;\r\n            player.stats.health.max = player.stats.health.max || PLAYER_DEFAULTS.STATS.HEALTH.MAX;\r\n            player.stats.health.value = player.stats.health.max || PLAYER_DEFAULTS.STATS.HEALTH.MAX;\r\n            player.stats.luck = player.stats.luck || PLAYER_DEFAULTS.STATS.LUCK;\r\n            player.stats.size = player.stats.size || PLAYER_DEFAULTS.STATS.SIZE;\r\n            player.stats.speed = player.stats.speed || PLAYER_DEFAULTS.STATS.SPEED;\r\n            player.stats.stamina.max = player.stats.stamina.max || PLAYER_DEFAULTS.STATS.STAMINA.MAX;\r\n            player.stats.stamina.recovery.delay = player.stats.stamina.recovery.delay || PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.DELAY;\r\n            player.stats.stamina.recovery.rate = player.stats.stamina.recovery.rate || PLAYER_DEFAULTS.STATS.STAMINA.RECOVERY.RATE;\r\n            player.stats.stamina.value = player.stats.stamina.value || PLAYER_DEFAULTS.STATS.STAMINA.MAX;\r\n            player.unique = player.unique || PLAYER_DEFAULTS.UNIQUE\r\n        });\r\n\r\n        // Send the spawn map to all other players\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'new-round',\r\n            reservedSpawn: {\r\n                x: Math.random() * (CANVAS.WIDTH - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN,\r\n                y: Math.random() * (CANVAS.HEIGHT - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN\r\n            }\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Game ]\r\n    //\r\n    /**\r\n     * Update the display with the game canvas via updateDisplay.\r\n     */\r\n    private showGameControls(roomId: string): void {\r\n        this.ui.updateDisplay(this.lobbyManager, \"game\", roomId);\r\n    }\r\n\r\n    /**\r\n     * Called by the host when the start button is pressed in the lobby.\r\n     * \r\n     * Starts game loop via executeStartGame or displays a warning before continuing if solo.\r\n     */\r\n    private startGame(): void {\r\n        if (!this.playerState.isHost) return;\r\n\r\n        // Check if solo and show warning if needed\r\n        if (this.lobbyManager.lobbyPlayers.size === 1) {\r\n            this.ui.soloGameWarning(() => this.executeStartGame());\r\n            return; // Don't continue, let the modal handle it\r\n        }\r\n\r\n        // If not solo, proceed normally\r\n        this.executeStartGame();\r\n    }\r\n\r\n    /**\r\n     * Executes the beginning of a game and broadcasts the start to all lobbyplayers.\r\n     */\r\n    private executeStartGame(): void {\r\n        // Send start game message to other players\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'start-game',\r\n            reservedSpawn: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            }\r\n        }));\r\n\r\n        // Also start the game for myself as the host\r\n        this.showGameControls(this.roomManager.getCurrentRoom() || '');\r\n        this.startGameLoop();\r\n    }\r\n\r\n    /**\r\n     * Kicks of the game loop and initializes values to clean slate.\r\n     */\r\n    private startGameLoop(): void {\r\n        this.gameState.gameInProgress = true;\r\n        this.isRoundInProgress = true;\r\n\r\n        this.playerState.myPlayer.actions.primary.magazine.currentReserve = Math.floor(PLAYER_DEFAULTS.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE / 2);\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo = this.playerState.myPlayer.actions.primary.magazine.size;\r\n        this.ammoReservesUIController.spawnAmmoInReserveUI(this.playerState.myPlayer.actions.primary.magazine.currentReserve);\r\n        this.playerState.isReloading = false;\r\n\r\n        this.ui.createLeaderboard(this.lobbyManager, this.playerState.players, this.userId);\r\n\r\n        this.upgradeManager.resetUpgrades(this.playerState.myPlayer);\r\n\r\n        // Send my player data\r\n        // TODO: You can maybe just call this.initializePlayer and use the returned player object, unsure yet.\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-state',\r\n            id: this.playerState.myPlayer.id,\r\n            timestamp: this.playerState.myPlayer.timestamp,\r\n            color: this.playerState.myPlayer.color,\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y,\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            actions: {\r\n                dash: {\r\n                    cooldown: this.playerState.myPlayer.actions.dash.cooldown,\r\n                    drain: this.playerState.myPlayer.actions.dash.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.dash.multiplier,\r\n                    time: this.playerState.myPlayer.actions.dash.time\r\n                },\r\n                melee: {\r\n                    cooldown: this.playerState.myPlayer.actions.melee.cooldown,\r\n                    damage: this.playerState.myPlayer.actions.melee.damage,\r\n                    duration: this.playerState.myPlayer.actions.melee.duration,\r\n                    range: this.playerState.myPlayer.actions.melee.range,\r\n                    size: this.playerState.myPlayer.actions.melee.size\r\n                },\r\n                primary: {\r\n                    buffer: this.playerState.myPlayer.actions.primary.buffer,\r\n                    burst: {\r\n                        amount: this.playerState.myPlayer.actions.primary.burst.amount,\r\n                        delay: this.playerState.myPlayer.actions.primary.burst.delay\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: this.playerState.myPlayer.actions.primary.magazine.currentAmmo,\r\n                        currentReserve: this.playerState.myPlayer.actions.primary.magazine.currentReserve,\r\n                        maxReserve: this.playerState.myPlayer.actions.primary.magazine.maxReserve,\r\n                        size: this.playerState.myPlayer.actions.primary.magazine.size\r\n                    },\r\n                    offset: this.playerState.myPlayer.actions.primary.offset,\r\n                    projectile: {\r\n                        amount: this.playerState.myPlayer.actions.primary.projectile.amount,\r\n                        color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                        damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                        length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                        range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                        size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                        speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                        spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                    },\r\n                    reload: {\r\n                        time: this.playerState.myPlayer.actions.primary.reload.time\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: this.playerState.myPlayer.actions.sprint.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.sprint.multiplier\r\n                }\r\n            },\r\n            equipment: this.playerState.myPlayer.equipment,\r\n            flags: {\r\n                hidden: this.playerState.myPlayer.flags.hidden,\r\n                invulnerable: this.playerState.myPlayer.flags.invulnerable\r\n            },\r\n            physics: {\r\n                acceleration: this.playerState.myPlayer.physics.acceleration,\r\n                friction: this.playerState.myPlayer.physics.friction\r\n            },\r\n            rig: {\r\n                body: this.playerState.myPlayer.rig.body,\r\n                head: this.playerState.myPlayer.rig.head,\r\n                headwear: this.playerState.myPlayer.rig.headwear,\r\n                weapon: this.playerState.myPlayer.rig.weapon\r\n            },\r\n            stats: {\r\n                defense: this.playerState.myPlayer.stats.defense,\r\n                health: {\r\n                    max: this.playerState.myPlayer.stats.health.max,\r\n                    value: this.playerState.myPlayer.stats.health.value\r\n                },\r\n                luck: this.playerState.myPlayer.stats.luck,\r\n                size: this.playerState.myPlayer.stats.size,\r\n                speed: this.playerState.myPlayer.stats.speed,\r\n                stamina: {\r\n                    max: this.playerState.myPlayer.stats.stamina.max,\r\n                    recovery: {\r\n                        delay: this.playerState.myPlayer.stats.stamina.recovery.delay,\r\n                        rate: this.playerState.myPlayer.stats.stamina.recovery.rate\r\n                    },\r\n                    value: this.playerState.myPlayer.stats.stamina.value,\r\n                },\r\n            },\r\n            unique: this.playerState.myPlayer.unique\r\n        }));\r\n\r\n        this.gameLoop();\r\n\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const healthSliderParams: SetSliderParams = {\r\n            sliderId: 'healthBar',\r\n            targetValue: this.playerState.myPlayer.stats.health.value,\r\n            maxValue: this.playerState.myPlayer.stats.health.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n\r\n        const staminaSliderParams: SetSliderParams = {\r\n            sliderId: 'staminaBar',\r\n            targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n            maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n\r\n        this.utility.setSlider(healthSliderParams);\r\n        this.utility.setSlider(staminaSliderParams);\r\n    }\r\n\r\n    /**\r\n     * Core game processing function.\r\n     * \r\n     * Handles animation frame requests, update loops for all systems, and drawing functions.\r\n     */\r\n    private gameLoop(): void {\r\n        if (!this.gameState.gameInProgress || !this.ui.ctx || !this.ui.canvas || !this.ui.decalCtx || !this.ui.decalCanvas) return;\r\n\r\n        if (this.gameState.isPaused) { // Continue the loop but skip all updates\r\n            requestAnimationFrame(() => this.gameLoop());\r\n            return;\r\n        }\r\n\r\n        const dt = this.utility.deltaTime();\r\n\r\n        // Update\r\n        this.playerController.updatePlayerPosition(dt);\r\n        this.combatController.updateAttack(dt);\r\n        this.combatController.updateProjectiles(dt);\r\n        this.particlesManager.updateParticles(dt);\r\n        this.particlesManager.updateEmitters(dt);\r\n        this.particlesManager.updateShrapnel(dt);\r\n        this.animator.updateCharacterAnimations(dt);\r\n        this.staminaController.updateStamina(dt);\r\n        this.dashController.updateDash(dt);\r\n\r\n        this.collisionsManager.checkCollisions(dt);\r\n\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const staminaSliderParams: SetSliderParams = {\r\n            sliderId: 'staminaBar',\r\n            targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n            maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n        this.utility.setSlider(staminaSliderParams);\r\n\r\n        this.renderingManager.clearCtx(this.ui.ctx);\r\n\r\n        this.ui.ctx.drawImage(this.ui.decalCanvas, 0, 0)\r\n\r\n        this.renderingManager.drawObjects();\r\n\r\n        // Draw projectiles\r\n        this.combatController.projectiles.forEach(projectile => {\r\n            this.renderingManager.drawProjectile(projectile);\r\n        });\r\n\r\n        // Draw other players\r\n        this.playerState.players.forEach((player: Player) => {\r\n            this.renderingManager.drawCharacter(player);\r\n        });\r\n\r\n        this.renderingManager.drawCharacter(this.playerState.myPlayer, true);\r\n        this.particlesManager.drawParticles();\r\n        this.particlesManager.drawShrapnel();\r\n\r\n        // Continue game loop\r\n        requestAnimationFrame(() => this.gameLoop());\r\n    }\r\n\r\n    /**\r\n     * Pauses the game when called.\r\n     */\r\n    public pauseGame(): void {\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        this.gameState.isPaused = true;\r\n        console.log('Game paused');\r\n\r\n        this.controlsManager.clearActiveKeys();\r\n        this.playerState.isSprinting = false;\r\n        this.playerState.isDashing = false;\r\n        this.playerState.isBurstActive = false;\r\n        this.playerState.currentBurstShot = 0;\r\n    }\r\n\r\n    /**\r\n     * Resumes the game when called.\r\n     */\r\n    public resumeGame(): void {\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        this.gameState.isPaused = false;\r\n        console.log('Game resumed');\r\n    }\r\n\r\n    /**\r\n     * Resets the game state to default.\r\n     */\r\n    private resetGameState(resetType: ResetType): void {\r\n        // Clear game flags\r\n        this.gameState.gameInProgress = false;\r\n        this.gameState.isPaused = false;\r\n        this.isRoundInProgress = false;\r\n        this.gameWinner = null;\r\n        this.roundWinner = null;\r\n\r\n        this.gameState.gameMaxWins = GAME.MAX_WINS;\r\n        this.gameState.gameMaxPlayers = GAME.MAX_PLAYERS;\r\n\r\n        if (resetType === 'Room') {\r\n            this.lobbyManager.inLobby = false;\r\n            this.playerState.isHost = false;\r\n        }\r\n\r\n        // Clear all collections\r\n        this.playerState.players.clear();\r\n        this.combatController.projectiles.clear();\r\n        this.objectsManager.ammoBoxes.clear();\r\n        this.decalsManager.decals.clear();\r\n        this.particlesManager.particles.clear();\r\n        this.particlesManager.emitters.clear();\r\n        this.particlesManager.shrapnel.clear();\r\n        this.upgradeManager.upgradesCompleted.clear();\r\n\r\n        this.ammoReservesUIController.reserveBulletParticles = [];\r\n\r\n        if (resetType === 'Room') {\r\n            this.lobbyManager.lobbyPlayers.clear();\r\n        }\r\n\r\n        // Reset UI and player\r\n        this.renderingManager.clearCtx();\r\n        this.chatManager.clearChat();\r\n        this.ui.clearLeaderboard();\r\n        this.playerState.resetPlayerState();\r\n        this.playerState.initPlayer(this.userId);\r\n        this.controlsManager.clearActiveKeys();\r\n        this.animator.clearAllAnimations();\r\n\r\n        this.utility.clearTimeoutCache();\r\n\r\n        // Reset upgrades and equipment\r\n        this.upgradeManager.resetUpgrades(this.playerState.myPlayer);\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Actions / Inputs ]\r\n    //\r\n    /**\r\n     * Provides polling for inputs and keybinds - checking for any actions assigned.\r\n     */\r\n    private watchForInputs(): void {\r\n        const poll = () => {\r\n            if (this.controlsManager.gamepadConnectionEnabled) {\r\n                this.controlsManager.pollGamepad();\r\n            }\r\n            this.checkActions();\r\n            requestAnimationFrame(poll);\r\n        };\r\n        poll();\r\n    }\r\n\r\n    /**\r\n     * Checks for keybinds and input actions during polling.\r\n     */\r\n    public checkActions(): void {\r\n        // TODO: MAYBE add menu navigation with keyboard/gamepad here\r\n\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        if (this.controlsManager.triggered(keybinds.dash)) {\r\n            this.dashController.startDash();\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.melee)) {\r\n            if (this.combatController.canMelee()) {\r\n                this.combatController.triggerAttack('melee');\r\n            }\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.reload)) {\r\n            this.combatController.startReload();\r\n        }\r\n\r\n        if (this.controlsManager.held(keybinds.sprint)) {\r\n            if (this.moveController.isMoving()) {\r\n                this.playerState.isSprinting = true;\r\n            }\r\n        } else {\r\n            this.playerState.isSprinting = false;\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.attack)) {\r\n            if (this.playerState.canShoot && !this.playerState.isBurstActive && !this.playerState.isMelee) {\r\n                this.combatController.triggerAttack('ranged');\r\n            }\r\n        }\r\n\r\n        if (this.controlsManager.held(keybinds.attack) && this.playerState.canAutoFire) {\r\n            this.combatController.triggerAttack('ranged');\r\n        }\r\n\r\n        const gamepadRAxis = this.controlsManager.getGamepadRAxis();\r\n        if (gamepadRAxis !== null) {\r\n            this.animator.rotateCharacterPart(this.userId, gamepadRAxis);\r\n        }\r\n\r\n        this.controlsManager.updatePreviousKeys();\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Upgrades ]\r\n    //\r\n    /**\r\n     * Start the upgrade phase by showing the relative UI for winners/losers.\r\n     */\r\n    private startUpgradePhase(winnerId: string | null): void {\r\n        console.log('Starting upgrade phase...');\r\n\r\n        this.upgradeManager.upgradesCompleted.clear(); // Reset upgrade tracking\r\n\r\n        const numUpgrades = 2; // TODO: This could change based on upgrades or other factors\r\n\r\n        // Show upgrade UI based on if I won or lost\r\n        if (winnerId === this.userId) {\r\n            this.showWinnerWaitScreen();\r\n        } else {\r\n            this.showUpgradeSelection(numUpgrades);\r\n        }\r\n    }\r\n\r\n    // [ Winner ]\r\n    //\r\n    /**\r\n     * Show the winner waiting screen.\r\n     * \r\n     * This screen will persist until all losers in the game finish picking upgrades.\r\n     */\r\n    private showWinnerWaitScreen(): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        const waitingDiv = document.createElement('div');\r\n        waitingDiv.className = 'upgrade_waiting';\r\n        waitingDiv.textContent = 'Waiting for other players...';\r\n\r\n        this.ui.upgradeContainer.appendChild(waitingDiv);\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    /**\r\n     * Update winner waiting screen to show the continue button, which will conclude the round-end upgrade process.\r\n     */\r\n    private showWinnerContinueButton(): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        const waitingDiv = document.createElement('div');\r\n        waitingDiv.className = 'upgrade_waiting';\r\n        waitingDiv.textContent = 'Upgrade phase complete.';\r\n\r\n        const continueBtn = document.createElement('button');\r\n        continueBtn.textContent = 'Continue';\r\n        continueBtn.onclick = () => {\r\n            if (!this.ui.upgradeContainer) return;\r\n            console.log(\"Winner pressed continue...\");\r\n\r\n            this.ui.upgradeContainer.style.display = 'none';\r\n\r\n            this.utility.safeTimeout(() => {\r\n                this.startNewRound();\r\n            }, GAME.NEW_ROUND_DELAY);\r\n        };\r\n\r\n        this.ui.upgradeContainer.appendChild(waitingDiv);\r\n        this.ui.upgradeContainer.appendChild(continueBtn);\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    // [ Losers ]\r\n    //\r\n    /**\r\n     * Displays the upgrade selection screen for losers during the upgrade phase.\r\n     */\r\n    private showUpgradeSelection(amount: number): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        // Get 3 random upgrades\r\n        const availableUpgrades = this.upgradeManager.getUpgrades(amount, this.playerState.myPlayer);\r\n\r\n        availableUpgrades.forEach(upgrade => {\r\n            const upgradeDiv = document.createElement('div');\r\n            upgradeDiv.className = 'upgrade_card container';\r\n            upgradeDiv.setAttribute('data-rarity', upgrade.rarity.toString());\r\n\r\n            // Create image element\r\n            const imageDiv = document.createElement('div');\r\n            imageDiv.className = 'upgrade_image';\r\n\r\n            const img = document.createElement('img');\r\n            img.src = upgrade.icon;\r\n            img.alt = upgrade.name;\r\n            img.className = 'upgrade_icon';\r\n\r\n            // Handle image load errors\r\n            img.onerror = () => {\r\n                console.warn(`Failed to load upgrade image: ${upgrade.icon}`);\r\n                img.style.display = 'none';\r\n            };\r\n\r\n            imageDiv.appendChild(img);\r\n\r\n            const nameDiv = document.createElement('div');\r\n            nameDiv.className = 'upgrade_name';\r\n            nameDiv.textContent = upgrade.name;\r\n\r\n            const subtitleDiv = document.createElement('div');\r\n            subtitleDiv.className = 'upgrade_subtitle';\r\n            subtitleDiv.textContent = upgrade.subtitle;\r\n\r\n            upgradeDiv.appendChild(imageDiv);\r\n            upgradeDiv.appendChild(nameDiv);\r\n            upgradeDiv.appendChild(subtitleDiv);\r\n\r\n            upgradeDiv.addEventListener('click', () => {\r\n                console.log(\"Selected upgrade: \", upgrade.name);\r\n                this.selectUpgrade(upgrade.id);\r\n            });\r\n\r\n            if (!this.ui.upgradeContainer) return;\r\n            this.ui.upgradeContainer.appendChild(upgradeDiv);\r\n        });\r\n\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    /**\r\n     * Triggers on click when a loser selects an upgrade from their displayed options.\r\n     * \r\n     * Processes selection upgrade and sends a network message to inform others of the action.\r\n     */\r\n    private selectUpgrade(upgradeId: string): void {\r\n        const success = this.upgradeManager.applyUpgrade(upgradeId, this.playerState.myPlayer);\r\n        if (!success) {\r\n            console.error('Failed to apply upgrade'); // Maybe two people picked same one, (apply upgrade checks uniques)\r\n            return;\r\n        }\r\n\r\n        this.finishUpgrade(upgradeId);\r\n    }\r\n\r\n    /**\r\n     * Closes upgrade loop for loser once they have selected an upgrade.\r\n     */\r\n    private finishUpgrade(selectedUpgradeId: string): void {\r\n        if (this.ui.upgradeContainer) { // Hide upgrade UI\r\n            this.ui.upgradeContainer.style.display = 'none';\r\n        }\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'upgrade-taken',\r\n            upgradeId: selectedUpgradeId,\r\n            userId: this.userId,\r\n            isUnique: this.upgradeManager.upgrades.find(u => u.id === selectedUpgradeId)?.unique || false\r\n        }));\r\n\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-state',\r\n            id: this.playerState.myPlayer.id,\r\n            timestamp: this.playerState.myPlayer.timestamp,\r\n            color: this.playerState.myPlayer.color,\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y,\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            actions: {\r\n                dash: {\r\n                    cooldown: this.playerState.myPlayer.actions.dash.cooldown,\r\n                    drain: this.playerState.myPlayer.actions.dash.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.dash.multiplier,\r\n                    time: this.playerState.myPlayer.actions.dash.time\r\n                },\r\n                melee: {\r\n                    cooldown: this.playerState.myPlayer.actions.melee.cooldown,\r\n                    damage: this.playerState.myPlayer.actions.melee.damage,\r\n                    duration: this.playerState.myPlayer.actions.melee.duration,\r\n                    range: this.playerState.myPlayer.actions.melee.range,\r\n                    size: this.playerState.myPlayer.actions.melee.size\r\n                },\r\n                primary: {\r\n                    buffer: this.playerState.myPlayer.actions.primary.buffer,\r\n                    burst: {\r\n                        amount: this.playerState.myPlayer.actions.primary.burst.amount,\r\n                        delay: this.playerState.myPlayer.actions.primary.burst.delay\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: this.playerState.myPlayer.actions.primary.magazine.currentAmmo,\r\n                        currentReserve: this.playerState.myPlayer.actions.primary.magazine.currentReserve,\r\n                        maxReserve: this.playerState.myPlayer.actions.primary.magazine.maxReserve,\r\n                        size: this.playerState.myPlayer.actions.primary.magazine.size\r\n                    },\r\n                    offset: this.playerState.myPlayer.actions.primary.offset,\r\n                    projectile: {\r\n                        amount: this.playerState.myPlayer.actions.primary.projectile.amount,\r\n                        color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                        damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                        length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                        range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                        size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                        speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                        spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                    },\r\n                    reload: {\r\n                        time: this.playerState.myPlayer.actions.primary.reload.time\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: this.playerState.myPlayer.actions.sprint.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.sprint.multiplier\r\n                }\r\n            },\r\n            equipment: this.playerState.myPlayer.equipment,\r\n            flags: {\r\n                hidden: this.playerState.myPlayer.flags.hidden,\r\n                invulnerable: this.playerState.myPlayer.flags.invulnerable\r\n            },\r\n            physics: {\r\n                acceleration: this.playerState.myPlayer.physics.acceleration,\r\n                friction: this.playerState.myPlayer.physics.friction\r\n            },\r\n            rig: {\r\n                body: this.playerState.myPlayer.rig.body,\r\n                head: this.playerState.myPlayer.rig.head,\r\n                headwear: this.playerState.myPlayer.rig.headwear,\r\n                weapon: this.playerState.myPlayer.rig.weapon\r\n            },\r\n            stats: {\r\n                defense: this.playerState.myPlayer.stats.defense,\r\n                health: {\r\n                    max: this.playerState.myPlayer.stats.health.max,\r\n                    value: this.playerState.myPlayer.stats.health.max\r\n                },\r\n                luck: this.playerState.myPlayer.stats.luck,\r\n                size: this.playerState.myPlayer.stats.size,\r\n                speed: this.playerState.myPlayer.stats.speed,\r\n                stamina: {\r\n                    max: this.playerState.myPlayer.stats.stamina.max,\r\n                    recovery: {\r\n                        delay: this.playerState.myPlayer.stats.stamina.recovery.delay,\r\n                        rate: this.playerState.myPlayer.stats.stamina.recovery.rate\r\n                    },\r\n                    value: this.playerState.myPlayer.stats.stamina.max\r\n                }\r\n            },\r\n            unique: this.playerState.myPlayer.unique\r\n        }));\r\n\r\n        console.log('Upgrade selected, waiting for others...');\r\n    }\r\n    //\r\n    // #endregion\r\n}\r\n\r\n// Initialize the game client\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        new Client();\r\n    });\r\n} else {\r\n    new Client();\r\n}\r\n"],"names":["PLAYER_DEFAULTS","ACTIONS","DASH","COOLDOWN","DRAIN","MULTIPLIER","TIME","MELEE","DAMAGE","DURATION","RANGE","SIZE","PRIMARY","BUFFER","BURST","AMOUNT","DELAY","MAGAZINE","STARTING_RESERVE","MAX_RESERVE","OFFSET","PROJECTILE","COLOR","LENGTH","SPEED","SPREAD","UNIQUE","RELOAD","SPRINT","DATA","ID_LENGTH","EQUIPMENT","FLAGS","HIDDEN","INVULNERABLE","PHYSICS","ACCELERATION","FRICTION","RIG","BODY","HEAD","HEADWEAR","WEAPON","STATS","DEFENSE","HEALTH","MAX","LUCK","STAMINA","RECOVERY","RATE","VISUAL","ID_DISPLAY_OFFSET","OBJECT_DEFAULTS","DECALS","RADIUS","MIN","DENSITY","OPACITY","VARIATION","PARTICLES","BLOOD_DRIP","COUNT","LIFETIME","NOISE","STRENGTH","SCALE","SIZE_OVER_LIFETIME","TORQUE","COLLIDE","FADE","PAINT","STAIN","BLOOD_SPRAY","MUZZLE_FLASH","SHELL_CASING","SMOKE","SPARKS","SHRAPNEL","AMMO_BOX","BASE","BULLETS","LID","CANVAS","GAMEPAD_MAP","A","B","X","Y","LB","RB","LT","RT","SELECT","START","L_STICK","R_STICK","DPAD_UP","DPAD_DOWN","DPAD_LEFT","DPAD_RIGHT","HOME","AXES","LEFT_STICK_X","LEFT_STICK_Y","RIGHT_STICK_X","RIGHT_STICK_Y","GAME","CHARACTER_SIZE","CONNECTION_TIMEOUT","CONTROLS","KEYBINDS","MOVE_UP","MOVE_LEFT","MOVE_DOWN","MOVE_RIGHT","ATTACK","GAMEPAD","DEADZONE","GAME_END_DELAY","GRAPHICS","AMMORESERVES","STATIC_OVERLAY","BACKGROUND_PARTICLES","MAX_PLAYERS","MAX_WINS","RECONNECT_DELAY","ROUND_END_DELAY","NEW_ROUND_DELAY","AUDIO","SFX","IMPACT","FLESH","BULLET","METAL","PLAYER","MALE","GRUNT","GLOCK","EMPTY","END","SHELL","ADMIN_KEYS","KEYS","REQUIRED_COUNT","Admin","constructor","cacheManager","ui","adminKeysHeld","Set","this","initKeyListener","initConsoleKeybinds","window","addEventListener","e","add","key","checkAdminCombo","delete","every","has","size","clear","showAdminModal","modal","modalInput","modalConfirmButton","modalCancelButton","modalErrorDiv","modalText","classList","remove","value","style","display","textContent","focus","onclick","trim","includes","command","split","executeAdminCommand","closeModal","console","log","onAdminCommand","document","getModifierState","preventDefault","clearCacheCommand","then","location","reload","Animator","playerState","roomManager","userId","characterAnimations","Map","characterOffsets","animateCharacterPart","params","generateCharacterAnimation","sendMessage","JSON","stringify","type","rotateCharacterPart","playerId","rotation","myPlayer","transform","rot","player","players","get","now","Date","Math","abs","lastSentRotation","lastSentRotationTime","animateCharacterPartNetwork","part","frames","duration","partIndex","animationId","set","startTime","originalOffset","x","y","updateCharacterAnimations","delta","animationsToRemove","currentTime","forEach","animation","progress","push","frameKeys","Object","keys","map","Number","sort","a","b","lerpedX","lerpedY","currentFrameIndex","i","length","frameProgress","nextFrameProgress","lastFrame","currentFrame","nextFrame","id","clearAllAnimations","AudioPool","poolSize","maxConcurrent","pools","activeAudio","createPool","src","pool","audio","Audio","preload","returnToPool","active","index","indexOf","splice","getAudio","pop","volume","playbackRate","loop","preloadSound","AudioManager","settingsManager","utility","audioPool","playAudio","warn","min","random","max","blend","spatial","pos","dx","listener","dy","distance","sqrt","distanceVolume","rolloff","rolloffType","factor","maxDistance","referenceDistance","normalizedDistance","pow","outputGroup","output","toLowerCase","mixer","getSettings","undefined","master","pitch","delayMs","delay","safeTimeout","play","catch","error","playAudioNetwork","preloadAudioAssets","sfx","extension","preloadSFX","obj","Array","isArray","endsWith","CacheManager","dbName","dbVersion","db","initDB","Promise","resolve","reject","request","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","event","target","objectStoreNames","contains","createObjectStore","write","transaction","objectStore","put","read","CharacterConfig","KNIFE","DEFAULT","UPGRADES","KINETIC_BRAIN","CHARACTER_DECALS","BLOOD","GORE","CharacterManager","charConfig","getCharacterAsset","layer","variant","Error","getUpgradeVisual","upgradeName","upperName","toUpperCase","ChatManager","sendChatMessage","chatInput","message","alert","timestamp","displayChatMessage","senderId","isOwn","chatMessages","messageDiv","createElement","className","senderSpan","contentSpan","appendChild","scrollTop","scrollHeight","children","removeChild","firstChild","clearChat","innerHTML","ControlsManager","activeKeys","gamepadKeys","previousKeys","mousePos","gamepadConnected","gamepadConnectionEnabled","gamepadRAxis","initGamepad","held","triggered","getActiveKeys","addKey","removeKey","clearActiveKeys","updatePreviousKeys","getMousePos","setMousePos","pollGamepad","gamepad","navigator","getGamepads","settings","keybinds","controls","gamepadMap","deadzone","xAxis","axes","yAxis","moveRight","moveLeft","moveDown","moveUp","buttons","melee","pressed","dash","attack","sprint","rightX","rightY","aimMagnitude","atan2","PI","getGamepadRAxis","CollisionsManager","ammoReservesUIController","objectsManager","checkCollisions","checkObjectCollisions","checkPlayersCollisions","collisionsEnabled","collisionRadius","getPlayerCollider","ammoBoxes","ammoBox","boxId","isOpen","currentReserve","actions","primary","magazine","maxReserve","actualAmmoAdded","ammoAmount","spawnAmmoInReserveUI","angle","speed","lid","velocity","cos","sin","torque","ammoBoxId","boxState","dist","minDist","overlap","pushX","pushY","padding","col","stats","health","flags","hidden","invulnerable","DecalsManager","decals","createDecal","decalId","generateDecal","createDecalNetwork","decalCtx","radius","density","opacity","numPixels","floor","rgb","hexToRgb","save","globalCompositeOperation","pixelX","pixelY","pixelOpacity","clampedOpacity","fillStyle","r","g","fillRect","restore","EventsManager","animator","chatManager","controlsManager","gameState","roomController","initEventListeners","canvas","hostButton","joinButton","quickplayButton","lobbyLeaveButton","lobbyCodeButton","gameLeaveButton","gameCodeButton","startGameBtn","chatSendBtn","hostRoom","joinRoom","quickPlay","leaveRoom","copyRoomCode","onStartButtonClick","shiftKey","canShoot","isSprinting","isDashing","isBurstActive","currentBurstShot","settingsButton","showSettingsPage","settingsCloseButton","hideSettingsPage","onKeyDown","onKeyUp","onMouseUp","onMouseMove","onMouseDown","switchSettingsPage","controlsTab","graphicsTab","soundTab","controlsBody","graphicsBody","soundBody","initSettingsAudioSliders","initSettingsInputListeners","initSettingsToggleListeners","activeElement","gameInProgress","isPaused","values","button","updateMouse","rect","getBoundingClientRect","clientX","left","clientY","top","CustomEvent","dispatchEvent","slider","masterSlider","fill","masterFill","masterValue","channel","interfaceSlider","interfaceFill","interfaceValue","musicSlider","musicFill","musicValue","sfxSlider","sfxFill","sfxValue","voiceSlider","voiceFill","voiceValue","handleMove","moveEvent","sliderValue","calculateSliderValue","updateSettingsSlider","updateSettings","handleUp","removeEventListener","input","deadzoneInput","settingPath","parse","parseFloat","rawValue","parsedValue","isNaN","pathParts","update","current","toggle","particleJSToggle","staticVfxToggle","ammoReservesPhysicsToggle","newValue","getAttribute","setAttribute","removeAttribute","initKeybindListeners","controlsSettings","initKeybindsInterface","action","newBinding","onBindingChange","element","getElementById","buttonName","find","toString","GameState","gameMaxWins","gameMaxPlayers","LobbyManager","inLobby","lobbyPlayers","showLobbyControls","lobby","lobbyOptions","roomId","isHost","maxWins","privateRoom","upgradesEnabled","updateDisplay","color","setupLobbyOptions","winsInputParams","inputId","privateToggleParams","toggleId","upgradesToggleParams","setToggle","setInput","displayLobbyPlayers","updateHostDisplay","setupLobbyToggle","val","setupLobbyInput","maxPlayers","elementProp","messageKey","getter","setter","handlerKey","handler","toggleParams","parseInt","inputParams","syncLobbyOptions","options","syncOption","bind","v","prop","elementId","fn","label","format","displayValue","promotePlayer","targetPlayerId","kickPlayer","ParticlesManager","collisionsManager","decalsManager","renderingManager","particles","emitters","shrapnel","createParticles","particleId","direction","generateParticles","count","lifetime","noiseStrength","noiseScale","sizeOverLifetime","particle","age","collide","fade","hasCollided","initialSize","maxOpacity","paint","stain","updateParticles","particlesToRemove","time","noiseX","simplexNoise2D","noiseY","ageRatio","stampParticle","extendedLifeRatio","speedReduction","lifetimeExtension","drawParticles","ctx","globalAlpha","translate","rotate","createEmitter","generateEmitter","interval","offset","particleType","offsetX","offsetY","emissionInterval","lastEmission","updateEmitters","emittersToRemove","emitter","emitterId","worldX","worldY","coneSpread","randomSpread","baseSpeed","speedVariation","finalSpeed","generateGore","gorePool","gore","amount","goreAsset","getRandomInArray","getRandomNum","goreDecal","scale","ownerId","stampGore","bloodPool","blood","bloodAsset","bloodDecal","image","characterImages","Image","complete","onload","naturalWidth","drawSize","drawImage","spawnShrapnel","pieces","piece","generateUID","images","rotationSpeed","damage","generateShrapnel","updateShrapnel","shrapnelToRemove","actualDamage","defense","newHealth","shooterId","source","wasKill","detail","stampShrapnel","drawShrapnel","RenderingManager","charManager","ammoBoxImages","clearCtx","customCtx","clearRect","drawCharacter","isMe","staticGhosts","_spectralGhosts","lastHidden","flashes","wasHidden","isHidden","isSpectral","unique","t","ghost","alpha","filter","ghostPlayer","drawCharacterLayers","font","textAlign","displayName","substring","fillText","drawCharacterLayer","rig","body","weapon","head","headwear","drawUpgradeLayers","assets","drawCharacterPart","assetPath","partType","animationOffset","uniqueName","equipment","equipmentName","drawObjects","layers","img","drawProjectile","projectile","dirX","dirY","frontX","frontY","backX","backY","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","RoomController","lobbyManager","upgradeManager","wsManager","showRoomControls","getWebSocket","createRoom","isPrivateRoom","isUpgradesEnabled","connectWebSocket","showJoinRoomModal","joinRoomById","fetch","response","ok","json","data","modalContent","modalButtons","resetType","checkForRoomInURL","getRoomIdFromURL","URLSearchParams","search","roomIdDisplay","gameRoomIdDisplay","clipboard","writeText","RoomManager","currentRoom","ws","messageHandlers","setWebSocket","setupMessageHandler","readyState","WebSocket","OPEN","send","generateLink","history","pushState","origin","text","sendAdminCommand","getCurrentRoom","getRoomLink","param","onMessage","onmessage","plainMessage","SettingsManager","gameSettings","initSettings","interface","music","voice","graphics","physics","ammoReserves","renderBackgroundParticles","showStaticOverlay","merge","loadSettings","cached","UpgradeRarity","UpgradeType","UpgradeManager","ammoReservesUI","takenUniques","upgradesCompleted","rarityConfig","COMMON","weight","UNCOMMON","SPECIAL","SUPERIOR","RARE","EXCEPTIONAL","LEGENDARY","MYTHICAL","ENLIGHTENED","HOLY","upgrades","name","subtitle","icon","rarity","func","updateStat","spread","RESOURCE","STAT","stamina","recovery","rate","buffer","cooldown","getUpgrades","availableUpgrades","upgrade","selected","totalWeight","reduce","sum","getRarityWeight","selectedUpgrade","applyUpgrade","upgradeId","u","hasEquipment","removeUpgradeFromPool","resetUpgrades","equipmentId","hasUnique","uniqueId","getRarityColor","UserInterface","ammoReservesCanvas","ammoReservesCtx","decalCanvas","gameContainer","gameOptionsContainer","lobbyContainer","roomControls","upgradeContainer","lobbyPlayersList","userIdDisplay","playersInput","privateToggle","upgradesToggle","winsInput","chatContainer","leaderboard","leaderboardBody","leaderboardContainer","settingsContainer","accuracyStat","damageStat","luckStat","rangeStat","shotSpeedStat","speedStat","initInterfaceListeners","initInterface","width","height","getContext","clearDisplay","gameRoomId","disabled","from","playerDiv","colorDiv","backgroundColor","nameDiv","controlsDiv","promoteBtn","kickBtn","onkeydown","onConfirm","url","URL","pathname","startsWith","replace","soloGameWarning","page","fillElement","valueElement","percentage","round","sliderElement","mouseX","position","initSoundSliders","audioSettings","initSettingsInputs","initSettingsToggles","showRebindModal","buttonValue","onRebind","duplicateWarnings","warningIndex","gamepads","some","gp","checkDuplicate","binding","entries","handleKeyPress","cleanup","newKey","handleMouseDown","stopPropagation","mouseKey","handleGamepadPress","requestAnimationFrame","createLeaderboard","allPlayers","_","wins","kills","deaths","updateLeaderboardDisplay","localPlayer","entryA","entryB","entry","row","nameCell","winsCell","killsCell","deathsCell","clearLeaderboard","onStatChange","toFixed","Utility","lastFrameTime","performance","simplexTable","generateSimplexTable","activeTimeouts","deepMerge","deltaTime","callback","setTimeout","clearTimeoutCache","clearTimeout","getRandomInt","array","getShuffledArray","slice","getDotProduct","v1","v2","getReflection","normal","dot","forward","getDirection","targetPos","rootPos","getRandomDirection","degrees","randomAngle","getRandomColor","hexColor","mode","primaries","padStart","channels","dr","dg","lr","lg","lb","gray","hex","exec","table","Uint8Array","k","override","perm","F2","G2","s","j","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","grad3","t0","t1","t2","prefix","chars","base","inputElement","setSlider","sliderId","targetValue","maxValue","lerpTime","sliderContainer","sliderFill","querySelector","targetPercentage","currentWidthStr","currentPercentage","transition","setSpan","spanElement","spanId","WebsocketManager","wsProtocol","protocol","wsHost","port","hostname","host","onopen","onclose","AmmoReservesUIController","ammoReserveIcon","projectileIcon","reserveBulletParticles","initAmmoReserveCanvas","renderAmmoReserves","updateAmmoReservePhysics","physicsEnabled","collisionHeight","collisionWidth","collisionX","collisionY","getAmmoReserveCollisionZone","vx","vy","removeAmmoFromReserveUI","shift","bullet","ax","ay","va","vb","avg","CombatController","audioManager","luckController","particlesManager","playerController","projectiles","triggerAttack","startMelee","startBurst","updateAttack","isReloading","reloadStartTime","finishReload","nextBurstShotTime","ammoNeeded","burst","currentAmmo","targetDir","triggerBurstUniques","launchProjectile","canMelee","isMelee","lastMeleeTime","range","spawnOffset","spawnX","spawnY","meleeProjectile","distanceTraveled","lastShotTime","ammoToUse","emptyBlend","blendVolume","dir","overrides","canTriggerUnique","projectileAmount","projectileColor","projectileDamage","projectileLength","projectileRange","projectileSize","projectileSpeed","projectileSpread","bulletSpawnX","bulletSpawnY","shuffledUniques","luckRoll","triggerUnique","updateProjectiles","projectilesToRemove","aim","lerpFactor","lx","ly","norm","frameDistance","playerCollider","reflected","projectileId","newOwnerId","playerHit","dx2","dy2","triggerCollisionUniques","toggleAutoFire","canAutoFire","cachedBuffer","baseAngle","angleOffset","dirA","dirB","baseParams","succeededUniques","canReload","startReload","magazineSpace","ammoToReload","DashController","combatController","moveController","staminaController","startDash","isMoving","lastDashTime","inputX","inputY","inputLength","getMoveInput","requestStamina","drain","dashStartTime","dashSpeed","multiplier","playerVelocityX","playerVelocityY","updateDash","newX","newY","moved","distanceFromLastSent","lastSentX","lastSentY","lastSentMoveTime","LuckController","effectiveLuck","luck","chance","tanh","MoveController","ObjectsManager","spawnObject","baseObject","spawnAmmoBox","PlayerController","setupEventListeners","updatePlayerPosition","currentSpeed","targetVelocityX","targetVelocityY","acceleration","friction","healthSliderParams","bloodDirection","emission","me","other","targetId","playerDeath","triggerUniques","resetPlayerState","PlayerState","isStaminaRecoveryBlocked","lastStaminaDrainTime","staminaRecoveryBlockedUntil","statListeners","initPlayer","statPath","notifyChange","lastProp","StaminaController","updateStamina","staminaRecoveryPerFrame","Client","isRoundInProgress","roundWinner","gameWinner","admin","dashController","eventsManager","initClient","ammo","initGlobalEvents","spanParams","watchForInputs","startGame","resetGameState","handleRoomMessage","handleGameMessage","gameData","reason","newHostId","sliderLerpTime","hitPlayer","shooter","box","spawnMap","showGameControls","startGameLoop","winnerId","endRound","staminaSliderParams","resumeGame","isUnique","showWinnerContinueButton","returnToLobby","startNewRound","winnerEntry","endGame","pauseGame","startUpgradePhase","reservedSpawn","executeStartGame","gameLoop","dt","poll","checkActions","showWinnerWaitScreen","showUpgradeSelection","waitingDiv","continueBtn","upgradeDiv","imageDiv","alt","subtitleDiv","selectUpgrade","finishUpgrade","selectedUpgradeId"],"sourceRoot":""}