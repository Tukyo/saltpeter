{"version":3,"file":"app.js","mappings":"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","sources":["webpack://saltpeter/./src/client/upgrades/unique/ sync ^\\.\\/.*\\/.*$","webpack://saltpeter/./src/client/upgrades/unique/spatialtargeting/spatialtargeting.ts","webpack://saltpeter/./src/client/upgrades/unique/phoenixmodule/phoenixmodule.ts","webpack://saltpeter/./src/client/upgrades/resource/ sync ^\\.\\/.*\\/.*$","webpack://saltpeter/./src/client/Types.ts","webpack://saltpeter/./src/client/upgrades/stats/hemoglobinsaturator/hemoglobinsaturator.ts","webpack://saltpeter/./src/client/upgrades/stats/locomotionmodule/locomotionmodule.ts","webpack://saltpeter/./src/client/upgrades/unique/clustermodule/clustermodule.ts","webpack://saltpeter/./src/client/upgrades/unique/muzzlesplitter/muzzlesplitter.ts","webpack://saltpeter/./src/client/upgrades/unique/spectralimage/spectralimage.ts","webpack://saltpeter/./src/client/upgrades/stats/bioregulator/bioregulator.ts","webpack://saltpeter/./src/client/upgrades/stats/damagebuffer/damagebuffer.ts","webpack://saltpeter/./src/client/upgrades/equipment/switch/switch.ts","webpack://saltpeter/./src/client/upgrades/unique/kineticbrain/kineticbrain.ts","webpack://saltpeter/./src/client/upgrades/resource/carepackage/carepackage.ts","webpack://saltpeter/./src/client/upgrades/unique/projectilearray/projectilearray.ts","webpack://saltpeter/./src/client/upgrades/stats/ sync ^\\.\\/.*\\/.*$","webpack://saltpeter/./src/client/upgrades/equipment/ sync ^\\.\\/.*\\/.*$","webpack://saltpeter/webpack/bootstrap","webpack://saltpeter/webpack/runtime/define property getters","webpack://saltpeter/webpack/runtime/hasOwnProperty shorthand","webpack://saltpeter/webpack/runtime/make namespace object","webpack://saltpeter/./src/client/Config.ts","webpack://saltpeter/./src/client/Admin.ts","webpack://saltpeter/./src/client/Animator.ts","webpack://saltpeter/./src/client/AudioPool.ts","webpack://saltpeter/./src/client/AudioManager.ts","webpack://saltpeter/./src/client/CacheManager.ts","webpack://saltpeter/./src/client/CharacterConfig.ts","webpack://saltpeter/./src/client/CharacterManager.ts","webpack://saltpeter/./src/client/ChatManager.ts","webpack://saltpeter/./src/client/ControlsManager.ts","webpack://saltpeter/./src/client/CollisionsManager.ts","webpack://saltpeter/./src/client/DecalsConfig.ts","webpack://saltpeter/./src/client/DecalsManager.ts","webpack://saltpeter/./src/client/EventsManager.ts","webpack://saltpeter/./src/client/GameState.ts","webpack://saltpeter/./src/client/LobbyManager.ts","webpack://saltpeter/./src/client/ParticlesConfig.ts","webpack://saltpeter/./src/client/ParticlesManager.ts","webpack://saltpeter/./src/client/RenderingManager.ts","webpack://saltpeter/./src/client/RoomController.ts","webpack://saltpeter/./src/client/RoomManager.ts","webpack://saltpeter/./src/client/SettingsManager.ts","webpack://saltpeter/./src/client/upgrades/equipment/index.ts","webpack://saltpeter/./src/client/upgrades/index.ts","webpack://saltpeter/./src/client/upgrades/resource/index.ts","webpack://saltpeter/./src/client/upgrades/stats/index.ts","webpack://saltpeter/./src/client/upgrades/unique/index.ts","webpack://saltpeter/./src/client/UpgradeManager.ts","webpack://saltpeter/./src/client/player/AmmoReservesUIController.ts","webpack://saltpeter/./src/client/UserInterface.ts","webpack://saltpeter/./src/client/Utility.ts","webpack://saltpeter/./src/client/WebsocketManager.ts","webpack://saltpeter/./src/client/player/CombatController.ts","webpack://saltpeter/./src/client/player/DashController.ts","webpack://saltpeter/./src/client/player/LuckController.ts","webpack://saltpeter/./src/client/player/MoveController.ts","webpack://saltpeter/./src/client/ObjectsManager.ts","webpack://saltpeter/./src/client/player/PlayerController.ts","webpack://saltpeter/./src/client/player/PlayerState.ts","webpack://saltpeter/./src/client/player/StaminaController.ts","webpack://saltpeter/./src/client/player/PlayerConfig.ts","webpack://saltpeter/./src/client/AudioConfig.ts","webpack://saltpeter/./src/client/client.ts"],"sourcesContent":["var map = {\n\t\"./clustermodule/clustermodule\": 224,\n\t\"./clustermodule/clustermodule.ts\": 224,\n\t\"./kineticbrain/kineticbrain\": 748,\n\t\"./kineticbrain/kineticbrain.ts\": 748,\n\t\"./muzzlesplitter/muzzlesplitter\": 358,\n\t\"./muzzlesplitter/muzzlesplitter.ts\": 358,\n\t\"./phoenixmodule/phoenixmodule\": 96,\n\t\"./phoenixmodule/phoenixmodule.ts\": 96,\n\t\"./projectilearray/projectilearray\": 800,\n\t\"./projectilearray/projectilearray.ts\": 800,\n\t\"./spatialtargeting/spatialtargeting\": 88,\n\t\"./spatialtargeting/spatialtargeting.ts\": 88,\n\t\"./spectralimage/spectralimage\": 368,\n\t\"./spectralimage/spectralimage.ts\": 368\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 65;","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Allows player's rotation to slightly influence projectile direction.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"spatial_targeting\",\r\n        name: \"Spatial Targeting\",\r\n        subtitle: \"Projectile upgrade that syncs its spatial awareness with the user.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/spatialtargeting.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.SUPERIOR,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('spatial_targeting')) {\r\n                player.unique.push('spatial_targeting');\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based * 1.5, on death chance to trigger.\r\n// One-time use, double damage received permanently on trigger.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"phoenix_module\",\r\n        name: \"Phoenix Module\",\r\n        subtitle: \"Return from the flames with vengeance.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/phoenixmodule.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.LEGENDARY,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('phoenix_module')) {\r\n                player.unique.push('phoenix_module');\r\n            }\r\n        }\r\n    };\r\n}","var map = {\n\t\"./carepackage/carepackage\": 751,\n\t\"./carepackage/carepackage.ts\": 751\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 136;","import { LobbyManager } from \"./LobbyManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\n// #region [ Core ]\r\n//\r\n/**\r\n * Represents a 2D vector with x and y coordinates.\r\n */\r\nexport type Vec2 = { x: number, y: number }\r\n\r\n/**\r\n * Represents an object's position and rotation in 2D space.\r\n */\r\nexport type Transform = {\r\n  pos: Vec2;\r\n  rot: number;\r\n}\r\n\r\n/**\r\n * Represents a directional relationship between two points in 2D space.\r\n */\r\nexport type Direction = { rootPos: Vec2; targetPos: Vec2; };\r\n//\r\n// #endregion\r\n\r\n// #region [ Game Object ]\r\n/**\r\n * Base interface for all game world entities.\r\n * Includes a unique ID, transform data, and a timestamp for synchronization.\r\n */\r\nexport interface GameObject {\r\n  id: string;\r\n  transform: Transform;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * All gameobject types.\r\n */\r\nexport type ObjectType = 'AmmoBox' | 'Player' | 'Projectile';\r\n\r\n/**\r\n * Mapping definition for stored player objects.\r\n */\r\nexport type Players = Map<string, Player>;\r\n\r\n/**\r\n * Full representation of the player object. Extends GameObject.\r\n */\r\nexport interface Player extends GameObject {\r\n  actions: {\r\n    dash: {\r\n      drain: number;\r\n      cooldown: number;\r\n      multiplier: number;\r\n      time: number;\r\n    }\r\n    melee: {\r\n      cooldown: number;\r\n      damage: number;\r\n      duration: number;\r\n      range: number;\r\n      size: number;\r\n    }\r\n    primary: {\r\n      buffer: number;\r\n      burst: {\r\n        amount: number;\r\n        delay: number;\r\n      }\r\n      magazine: {\r\n        currentAmmo: number;\r\n        currentReserve: number;\r\n        maxReserve: number;\r\n        size: number;\r\n      }\r\n      offset: number;\r\n      projectile: {\r\n        amount: number;\r\n        color: string;\r\n        damage: number;\r\n        length: number;\r\n        range: number;\r\n        size: number;\r\n        speed: number;\r\n        spread: number;\r\n      }\r\n      reload: { time: number; }\r\n    }\r\n    sprint: {\r\n      drain: number;\r\n      multiplier: number;\r\n    }\r\n  }\r\n  color: string;\r\n  equipment: string[],\r\n  flags: {\r\n    hidden: boolean;\r\n    invulnerable: boolean;\r\n  }\r\n  inventory: {\r\n    primary: string;\r\n    melee: string;\r\n  }\r\n  physics: {\r\n    acceleration: number;\r\n    friction: number;\r\n  }\r\n  rig: {\r\n    body: string;\r\n    head: string;\r\n    headwear: string;\r\n    weapon: string;\r\n  }\r\n  stats: {\r\n    defense: number;\r\n    health: {\r\n      max: number;\r\n      value: number;\r\n    }\r\n    luck: number;\r\n    size: number;\r\n    speed: number;\r\n    stamina: {\r\n      max: number;\r\n      recovery: {\r\n        delay: number;\r\n        rate: number;\r\n      }\r\n      value: number;\r\n    }\r\n  }\r\n  unique: string[];\r\n}\r\n\r\nexport interface Projectile extends GameObject {\r\n  color: string;\r\n  damage: number;\r\n  distanceTraveled: number;\r\n  length: number;\r\n  ownerId: string;\r\n  range: number;\r\n  size: number;\r\n  velocity: Vec2;\r\n}\r\n\r\nexport type ProjectileOverrides = {\r\n  canTriggerUnique?: boolean;\r\n  bypassDefault?: boolean;\r\n  color?: string;\r\n  damage?: number;\r\n  length?: number;\r\n  range?: number;\r\n  size?: number;\r\n  speed?: number;\r\n  spread?: number;\r\n  amount?: number;\r\n};\r\n\r\nexport interface AmmoBox extends GameObject {\r\n  ammoAmount: number;\r\n  isOpen: boolean;\r\n  lid: {\r\n    pos: Vec2;\r\n    rot: number;\r\n    velocity: Vec2;\r\n    torque: number;\r\n  };\r\n}\r\n\r\nexport interface SpawnObjectParams {\r\n  transform: Transform;\r\n  type: ObjectType;\r\n  data?: any;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Animation ]\r\n//\r\nexport interface PlayerPartAnimParams {\r\n  playerId: string;\r\n  part: string;\r\n  frames: { [key: number]: { x: number, y: number } };\r\n  duration: number;\r\n  partIndex?: number;\r\n}\r\n\r\nexport type TextAnimParams = {\r\n  element: HTMLElement;\r\n  oldValue: number;\r\n  newValue: number;\r\n  decimals: number;\r\n  animTime: number;\r\n  steps: number;\r\n  color: string;\r\n  timeout: number;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Audio ]\r\n//\r\nexport interface AudioParams {\r\n  delay?: {\r\n    min: number;\r\n    max: number;\r\n  }\r\n  listener: Vec2;\r\n  loop?: boolean;\r\n  output?: string;\r\n  priority?: number;\r\n  pitch?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  spatial?: {\r\n    blend?: number;\r\n    pos?: Vec2;\r\n    rolloff?: {\r\n      distance: number;\r\n      factor: number;\r\n      type?: 'linear' | 'logarithmic';\r\n    }\r\n  }\r\n  src: string;\r\n  volume?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Lobby & Room ]\r\n//\r\nexport type ResetType = 'Room' | 'Lobby'\r\n\r\nexport interface RoomMessage {\r\n  type: 'join-room' | 'create-room' | 'leave-room' | 'room-message' | 'room-created' | 'room-joined' | 'room-joined-game' | 'room-error' | 'user-joined' | 'user-left';\r\n  roomId?: string;\r\n  userId: string;\r\n  message?: string;\r\n  data?: any;\r\n  gameActive?: boolean;\r\n}\r\n\r\nexport interface LobbyPlayer {\r\n  id: string;\r\n  color: string;\r\n  isHost: boolean;\r\n  rig: {\r\n    body: string;\r\n    head: string;\r\n    headwear: string;\r\n    weapon: string;\r\n  }\r\n  transform: Transform;\r\n}\r\n\r\nexport type LobbyControlsParams = {\r\n  lobby: LobbyManager;\r\n  lobbyOptions: LobbyOptionsParams;\r\n  myPlayer: Player;\r\n  roomId: string;\r\n  userId: string;\r\n}\r\n\r\nexport type LobbyOptionsParams = {\r\n  maxPlayers: number;\r\n  maxWins: number;\r\n  isHost: boolean;\r\n  privateRoom: boolean;\r\n  upgradesEnabled: boolean;\r\n}\r\n\r\nexport type ChatMessage = {\r\n  senderId: string;\r\n  message: string;\r\n  isOwn?: boolean;\r\n};\r\n//\r\n// #endregion\r\n\r\n// #region [ Settings ]\r\n//\r\nexport interface GameSettings {\r\n  audio: {\r\n    mixer: {\r\n      master: number;\r\n      interface: number;\r\n      music: number;\r\n      sfx: number;\r\n      voice: number;\r\n    }\r\n  }\r\n  controls: {\r\n    keybinds: {\r\n      attack: string;\r\n      dash: string;\r\n      melee: string;\r\n      moveDown: string;\r\n      moveLeft: string;\r\n      moveRight: string;\r\n      moveUp: string;\r\n      reload: string;\r\n      sprint: string;\r\n    },\r\n    gamepad: {\r\n      attack: number;\r\n      dash: number;\r\n      deadzone: number;\r\n      melee: number;\r\n      reload: number;\r\n      sprint: number;\r\n    }\r\n  }\r\n  graphics: {\r\n    physics: {\r\n      ammoReserves: boolean;\r\n    }\r\n    renderBackgroundParticles: boolean;\r\n    showStaticOverlay: boolean;\r\n  }\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Params ]\r\n//\r\nexport type RandomColorParams = {\r\n  format: 'hex' | 'rgb';\r\n  mode: 'any' | 'primary' | 'pastel' | 'vibrant' | 'dark' | 'light' | 'grayscale';\r\n\r\n}\r\n\r\nexport type SetInputParams = {\r\n  inputId: string;\r\n  value: number;\r\n}\r\n\r\nexport type SetSliderParams = {\r\n  sliderId: string;\r\n  targetValue: number;\r\n  maxValue: number;\r\n  lerpTime?: number;\r\n}\r\n\r\nexport type SetSpanParams = {\r\n  spanId: string;\r\n  value: string | number;\r\n}\r\n\r\nexport type SetToggleParams = {\r\n  toggleId: string;\r\n  value: boolean;\r\n}\r\n\r\nexport type PlayerHitParams = {\r\n  target: Player;\r\n  shooterId: string;\r\n  damage: number;\r\n  newHealth: number;\r\n  source: Projectile | ShrapnelPiece;\r\n  wasKill: boolean;\r\n}\r\n//\r\n// #endregion\r\n\r\n// #region [ Leaderboard ]\r\n//\r\nexport interface LeaderboardEntry {\r\n  playerId: string;\r\n  kills: number;\r\n  deaths: number;\r\n  wins: number;\r\n}\r\n\r\nexport type Leaderboard = Map<string, LeaderboardEntry>;\r\n//\r\n// #endregion\r\n\r\n// #region [ Combat ]\r\n//\r\nexport type AttackType = 'melee' | 'ranged';\r\n//\r\n// #endregion\r\n\r\n// #region [ Visual ]\r\n//\r\nexport type CreateParticleParams = {\r\n  id: string;\r\n  pos: Vec2;\r\n  particleParams: ParticleParams;\r\n  direction?: Vec2;\r\n}\r\n\r\nexport type ParticleParams = {\r\n  count: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  lifetime: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  noise: {\r\n    strength: {\r\n      min: number;\r\n      max: number;\r\n    };\r\n    scale: {\r\n      min: number;\r\n      max: number;\r\n    };\r\n  };\r\n  opacity: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  speed: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  sizeOverLifetime: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  size: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  torque: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  collide: boolean;\r\n  fade: boolean;\r\n  paint: boolean;\r\n  spread: number;\r\n  stain: boolean;\r\n  colors: string[];\r\n};\r\n\r\nexport type Particle = {\r\n  age: number;\r\n  collide: boolean;\r\n  color: string;\r\n  fade: boolean;\r\n  hasCollided: boolean;\r\n  id: string;\r\n  initialSize: number;\r\n  lifetime: number;\r\n  maxOpacity: number;\r\n  noiseStrength: number;\r\n  noiseScale: number;\r\n  opacity: number;\r\n  paint: boolean;\r\n  pos: Vec2;\r\n  rotation: number;\r\n  size: number;\r\n  sizeOverLifetime: number;\r\n  stain: boolean;\r\n  torque: number;\r\n  velocity: Vec2\r\n}\r\n\r\nexport type EmitterParams = {\r\n  type?: string;\r\n  id: string;\r\n  interval: number;\r\n  lifetime: number;\r\n  offset: Vec2;\r\n  playerId: string;\r\n  pos: Vec2;\r\n  particleType: ParticleParams;\r\n}\r\n\r\nexport type Emitter = {\r\n  age: number;\r\n  direction: number;\r\n  emissionInterval: number;\r\n  lastEmission: number;\r\n  lifetime: number;\r\n  offset: Vec2;\r\n  playerId: string;\r\n  particleType: ParticleParams;\r\n}\r\n\r\nexport type Decal = {\r\n  params: DecalParams | null;\r\n  pos: Vec2;\r\n};\r\n\r\nexport type DecalParams = {\r\n  id: string;\r\n  pos: Vec2;\r\n  type: 'parametric' | 'image';\r\n  parametric?: ParametricDecalParams;\r\n  image?: ImageDecalParams;\r\n};\r\n\r\nexport type ParametricDecalParams = {\r\n  radius: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  density: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  opacity: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  variation: number;\r\n  colors: string[];\r\n};\r\n\r\nexport type ImageDecalParams = {\r\n  src: string;\r\n  scale: number;\r\n  rotation: number;\r\n};\r\n\r\nexport type Shrapnel = {\r\n  amount: number;\r\n  damage: number;\r\n  images: string[];\r\n  lifetime: { min: number, max: number };\r\n  pos: Vec2;\r\n  size: { min: number, max: number };\r\n  speed: { min: number, max: number };\r\n  torque: { min: number, max: number };\r\n}\r\n\r\nexport type ShrapnelPiece = {\r\n  id: string;\r\n  image: string;\r\n  transform: Transform;\r\n  velocity: Vec2;\r\n  rotationSpeed: number;\r\n  size: number;\r\n  age: number;\r\n  lifetime: number;\r\n  ownerId: string;\r\n  damage: number;\r\n}\r\n\r\nexport type DeathDecal = { // TODO: Somehow pass the pool based on current charConfig\r\n  gore: {\r\n    amount: number;\r\n    // pool: string;\r\n  }\r\n  blood: {\r\n    amount: number;\r\n    // pool: string;\r\n  }\r\n  ownerId: string;\r\n  pos: Vec2;\r\n  radius: number;\r\n}\r\n\r\nexport type DeathStamp = {\r\n  transform: Transform;\r\n  type: string;\r\n  scale: number;\r\n  src: string;\r\n}\r\n\r\nexport type ReserveBulletParticle = {\r\n  transform: Transform;\r\n  velocity: Vec2;\r\n  torque: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport type RenderCharacterParams = {\r\n  player: Player | LobbyPlayer;\r\n  context: CanvasRenderingContext2D;\r\n}\r\n\r\nexport type CharacterAnimation = Map<string, {\r\n  playerId: string;\r\n  part: string;\r\n  partIndex?: number;\r\n  frames: { [key: number]: { x: number, y: number } };\r\n  duration: number;\r\n  startTime: number;\r\n  originalOffset: { x: number, y: number };\r\n}>\r\n\r\nexport type CharacterLayer = 'BODY' | 'WEAPON' | 'HEAD' | 'HEADWEAR' | 'UPGRADES';\r\n//\r\n// #endregion\r\n\r\n// #region [ Upgrades ]\r\n//\r\nexport enum UpgradeRarity {\r\n  COMMON = 0,\r\n  UNCOMMON = 1,\r\n  SPECIAL = 2,\r\n  SUPERIOR = 3,\r\n  RARE = 4,\r\n  EXCEPTIONAL = 5,\r\n  LEGENDARY = 6,\r\n  MYTHICAL = 7,\r\n  ENLIGHTENED = 8,\r\n  HOLY = 9\r\n}\r\n\r\nexport enum UpgradeType {\r\n  EQUIPMENT = 'equipment',\r\n  RESOURCE = 'resource',\r\n  STAT = 'stat',\r\n  UNIQUE = 'unique',\r\n}\r\n\r\nexport interface Upgrade {\r\n  id: string;\r\n  icon: string;\r\n  name: string;\r\n  rarity: UpgradeRarity;\r\n  subtitle: string;\r\n  type: UpgradeType;\r\n  unique: boolean;\r\n  func: (player: Player) => void;\r\n}\r\n\r\nexport type UpgradeParams = {\r\n  playerState: PlayerState;\r\n  ui: UserInterface;\r\n  utility: Utility;\r\n}\r\n//\r\n// #endregion","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Increases the player's max health.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"hemoglobin_saturator\",\r\n        name: \"Hemoglobin Saturator\",\r\n        subtitle: \"Increases red blood cell density for extended durability.\",\r\n        icon: \"/assets/img/icon/upgrades/stats/hemoglobinsaturator.png\",\r\n        type: UpgradeType.STAT,\r\n        rarity: UpgradeRarity.UNCOMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            params.playerState.updateStat('stats.health.max', player.stats.health.max + 10);\r\n            params.playerState.updateStat('stats.health.value', player.stats.health.max); // Heal to new max\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Increases speed but also increases dash cooldown.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"locomotion_module\",\r\n        name: \"Locomotion Module\",\r\n        subtitle: \"Primitave locomotion module installed on the user's footwear.\",\r\n        icon: \"/assets/img/icon/upgrades/stats/locomotionmodule.png\",\r\n        type: UpgradeType.STAT,\r\n        rarity: UpgradeRarity.COMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            params.playerState.updateStat('stats.speed', player.stats.speed + 1);\r\n            params.playerState.updateStat('actions.dash.cooldown', player.actions.dash.cooldown * 1.5);\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based, causes projectiles to sometimes break into shrapnel on impact.\r\n// Varying amounts of pieces can spawn, and shrapnel does 1 damage to any enemy hit.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"cluster_module\",\r\n        name: \"Cluster Module\",\r\n        subtitle: \"Cluster enhancement module for primary attacks.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/clustermodule.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.RARE,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('cluster_module')) {\r\n                player.unique.push('cluster_module');\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based, can replace standard shot with split shot.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"muzzle_splitter\",\r\n        name: \"Muzzle Splitter\",\r\n        subtitle: \"Muzzle modification for primary attacks, requires certain skillset.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/muzzlesplitter.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.SPECIAL,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('muzzle_splitter')) {\r\n                player.unique.push('muzzle_splitter');\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Dash replaced with spectral teleport, and increased range. No collisions when dashing.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"spectral_image\",\r\n        name: \"Spectral Image\",\r\n        subtitle: \"Forward imaging coordinate transponder.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/spectralimage.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.EXCEPTIONAL,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('spectral_image')) {\r\n                player.unique.push('spectral_image');\r\n                params.playerState.updateStat('actions.dash.time', player.actions.dash.time + 50);\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Increases stamina, and stamina recovery, but increases regen delay after using.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"bioregulator\",\r\n        name: \"Bioregulator\",\r\n        subtitle: \"Increases energy regulation efficiency, with a small boot overhead.\",\r\n        icon: \"/assets/img/icon/upgrades/stats/bioregulator.png\",\r\n        type: UpgradeType.STAT,\r\n        rarity: UpgradeRarity.COMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            params.playerState.updateStat('stats.stamina.max', player.stats.stamina.max * 1.1);\r\n            params.playerState.updateStat('stats.stamina.recovery.rate', player.stats.stamina.recovery.rate + 1);\r\n            params.playerState.updateStat('stats.stamina.recovery.delay', player.stats.stamina.recovery.delay * 1.25);\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Increases damage and shot buffer by 10%.\r\n// Bullets hit harder, but can be shot less often each time this is taken. \r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"damage_buffer\",\r\n        name: \"Damage Buffer\",\r\n        subtitle: \"Type D125 buffer, which improves damage at a small cost. \",\r\n        icon: \"/assets/img/icon/upgrades/stats/damagebuffer.png\",\r\n        type: UpgradeType.STAT,\r\n        rarity: UpgradeRarity.UNCOMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            params.playerState.updateStat('actions.primary.projectile.damage', player.actions.primary.projectile.damage * 1.1);\r\n            params.playerState.updateStat('actions.primary.buffer', player.actions.primary.buffer * 1.1);\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// During dash cooldown, player will be able to hold shoot to auto-fire.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"switch\",\r\n        name: \"Switch\",\r\n        subtitle: \"Completely legal and completely functional.\",\r\n        icon: \"/assets/img/icon/upgrades/equipment/switch.png\",\r\n        type: UpgradeType.EQUIPMENT,\r\n        rarity: UpgradeRarity.RARE,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            if (!player.equipment.includes('switch')) {\r\n                player.equipment.push('switch');\r\n                params.playerState.updateStat('actions.primary.projectile.spread', player.actions.primary.projectile.spread *= 1.15);\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based, creates visible aura around player.\r\n// Enemy projectiles in radius have a chance to be deflected.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"kinetic_brain\",\r\n        name: \"Kinetic Brain\",\r\n        subtitle: \"Cerebral kinetic stem implant, unable to function at maximum capacity.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/kineticbrain.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.EXCEPTIONAL,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('kinetic_brain')) {\r\n                player.unique.push('kinetic_brain');\r\n            }\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Gives the player some ammo in their reserves.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"care_package\",\r\n        name: \"Care Package\",\r\n        subtitle: \"These are hard to come by.\",\r\n        icon: \"/assets/img/icon/upgrades/resource/carepackage.png\",\r\n        type: UpgradeType.RESOURCE,\r\n        rarity: UpgradeRarity.COMMON,\r\n        unique: false,\r\n        func: (player: Player) => {\r\n            const ammo = 20;\r\n            player.actions.primary.magazine.currentReserve += ammo;\r\n            params.ui.ammoReservesUIController.spawnAmmoInReserveUI(ammo);\r\n        }\r\n    };\r\n}","import { Upgrade, UpgradeType, UpgradeRarity, Player, UpgradeParams } from '../../../Types';\r\n\r\n// Luck based, chance to add extra projectiles on shot in random direction.\r\n// Extra shots have more spread, less distance and do half damage.\r\n\r\nexport function create(params: UpgradeParams): Upgrade {\r\n    return {\r\n        id: \"projectile_array\",\r\n        name: \"Projectile Array\",\r\n        subtitle: \"Chance to fire an array of extra projectiles.\",\r\n        icon: \"/assets/img/icon/upgrades/unique/projectilearray.png\",\r\n        type: UpgradeType.UNIQUE,\r\n        rarity: UpgradeRarity.RARE,\r\n        unique: true,\r\n        func: (player: Player) => {\r\n            if (!player.unique.includes('projectile_array')) {\r\n                player.unique.push('projectile_array');\r\n            }\r\n        }\r\n    };\r\n}","var map = {\n\t\"./bioregulator/bioregulator\": 528,\n\t\"./bioregulator/bioregulator.ts\": 528,\n\t\"./damagebuffer/damagebuffer\": 612,\n\t\"./damagebuffer/damagebuffer.ts\": 612,\n\t\"./hemoglobinsaturator/hemoglobinsaturator\": 168,\n\t\"./hemoglobinsaturator/hemoglobinsaturator.ts\": 168,\n\t\"./locomotionmodule/locomotionmodule\": 204,\n\t\"./locomotionmodule/locomotionmodule.ts\": 204\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 823;","var map = {\n\t\"./switch/switch\": 617,\n\t\"./switch/switch.ts\": 617\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 854;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const OBJECT_DEFAULTS = {\r\n    DATA: {\r\n        ID_LENGTH: 8\r\n    },\r\n};\r\n\r\nexport const SHRAPNEL = {\r\n    PIECE: [\r\n        '/assets/img/effects/shrapnel/shrapnel_00.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_01.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_02.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_03.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_04.png',\r\n        '/assets/img/effects/shrapnel/shrapnel_05.png'\r\n    ]\r\n};\r\n\r\nexport const AMMO_BOX = {\r\n    BASE: '/assets/img/object/ammobox/base.png',\r\n    BULLETS: '/assets/img/object/ammobox/bullets.png',\r\n    LID: '/assets/img/object/ammobox/lid.png',\r\n}\r\n\r\nexport const CANVAS = {\r\n    WIDTH: 800,\r\n    HEIGHT: 600,\r\n    BORDER_COLOR: '#333',\r\n    BORDER_WIDTH: 2,\r\n    BORDER_MARGIN: 15,\r\n};\r\n\r\nexport const GAMEPAD_MAP = {\r\n    // Face buttons\r\n    A: 0,\r\n    B: 1,\r\n    X: 2,\r\n    Y: 3,\r\n\r\n    // Bumpers\r\n    LB: 4,\r\n    RB: 5,\r\n\r\n    // Triggers\r\n    LT: 6,\r\n    RT: 7,\r\n\r\n    // System buttons\r\n    SELECT: 8,\r\n    START: 9,\r\n\r\n    // Stick clicks\r\n    L_STICK: 10,\r\n    R_STICK: 11,\r\n\r\n    // D-Pad\r\n    DPAD_UP: 12,\r\n    DPAD_DOWN: 13,\r\n    DPAD_LEFT: 14,\r\n    DPAD_RIGHT: 15,\r\n\r\n    // Home/Guide button\r\n    HOME: 16,\r\n\r\n    // Axes\r\n    AXES: {\r\n        LEFT_STICK_X: 0,\r\n        LEFT_STICK_Y: 1,\r\n        RIGHT_STICK_X: 2,\r\n        RIGHT_STICK_Y: 3\r\n    }\r\n};\r\n\r\nexport const GAME = {\r\n    CHARACTER_SIZE: 650,\r\n    CONNECTION_TIMEOUT: 1000,\r\n    CONTROLS: {\r\n        KEYBINDS: {\r\n            MELEE: 'mouse2',\r\n            MOVE_UP: 'w',\r\n            MOVE_LEFT: 'a',\r\n            MOVE_DOWN: 's',\r\n            MOVE_RIGHT: 'd',\r\n            RELOAD: 'r',\r\n            SPRINT: 'shift',\r\n            ATTACK: 'mouse1',\r\n            DASH: ' '\r\n        },\r\n        GAMEPAD: {\r\n            MELEE: GAMEPAD_MAP.RB,\r\n            DASH: GAMEPAD_MAP.LB,\r\n            DEADZONE: 0.2,\r\n            RELOAD: GAMEPAD_MAP.A,\r\n            SPRINT: GAMEPAD_MAP.LT,\r\n            ATTACK: GAMEPAD_MAP.RT\r\n        }\r\n    },\r\n    GAME_END_DELAY: 5000,\r\n    GRAPHICS: {\r\n        PHYSICS: {\r\n            AMMORESERVES: true\r\n        },\r\n        STATIC_OVERLAY: true,\r\n        BACKGROUND_PARTICLES: true\r\n    },\r\n    MAX_PLAYERS: 4,\r\n    MAX_WINS: 5,\r\n    RECONNECT_DELAY: 3000,\r\n    ROUND_END_DELAY: 3000,\r\n    NEW_ROUND_DELAY: 500\r\n};\r\n\r\nexport const UI = {\r\n    PLAYER_ID_LENGTH: 6,\r\n    FONT: '12px Arial',\r\n    TEXT_COLOR: '#fff'\r\n};\r\n\r\nexport const ROOM = {\r\n    ID_PREFIX: 'room_',\r\n    ID_LENGTH: 10\r\n};\r\n\r\nexport const CHAT = {\r\n    MAX_MESSAGES: 100,\r\n    MAX_MESSAGE_LENGTH: 200\r\n};\r\n\r\nexport const NETWORK = {\r\n    MOVE_INTERVAL: 10, //ms\r\n    ROTATE_INTERVAL: 25 //ms\r\n}","import { CacheManager } from \"./CacheManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nconst ADMIN_KEYS = {\r\n    KEYS: ['Control', 'Shift', 'Alt', '-', '+'],\r\n    REQUIRED_COUNT: 5\r\n} as const;\r\n\r\nconst CONSOLE_KEY = 'Control';\r\n\r\nexport class Admin {\r\n    private adminKeysHeld: Set<string> = new Set();\r\n\r\n    constructor(private cacheManager: CacheManager, private ui: UserInterface) {\r\n        this.initKeyListener();\r\n        this.initConsoleKeybinds();\r\n    }\r\n\r\n    // #region [ Admin (Locked) ]\r\n    //\r\n    /**\r\n     * Listens for admin key combo and shows modal when detected.\r\n     */\r\n    private initKeyListener(): void {\r\n        window.addEventListener('keydown', (e) => {\r\n            this.adminKeysHeld.add(e.key);\r\n            this.checkAdminCombo();\r\n        });\r\n\r\n        window.addEventListener('keyup', (e) => {\r\n            this.adminKeysHeld.delete(e.key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks held keys against the ADMIN_KEYS configuration.\r\n     */\r\n    private checkAdminCombo(): void {\r\n        const hasAllKeys = ADMIN_KEYS.KEYS.every(key => this.adminKeysHeld.has(key));\r\n\r\n        if (hasAllKeys && this.adminKeysHeld.size === ADMIN_KEYS.REQUIRED_COUNT) {\r\n            this.adminKeysHeld.clear(); // Prevent repeated triggers\r\n            this.showAdminModal();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows the admin modal using the general website modal.\r\n     */\r\n    private showAdminModal(): void {\r\n        if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalConfirmButton ||\r\n            !this.ui.modalCancelButton || !this.ui.modalErrorDiv || !this.ui.modalText) return;\r\n\r\n        this.ui.modal.classList.remove('hidden');\r\n        this.ui.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.ui.modalInput.value = '';\r\n        this.ui.modalInput.style.display = 'block';\r\n        this.ui.modalErrorDiv.textContent = '';\r\n        this.ui.modalText.textContent = 'Enter Admin Command.';\r\n        this.ui.modalConfirmButton.textContent = 'Execute';\r\n        this.ui.modalCancelButton.textContent = 'Cancel';\r\n\r\n        this.ui.modalInput.focus();\r\n\r\n        this.ui.modalConfirmButton.onclick = () => {\r\n            if (!this.ui.modalInput || !this.ui.modalErrorDiv) return;\r\n\r\n            const value = this.ui.modalInput.value.trim();\r\n            if (!value.includes(':')) {\r\n                this.ui.modalErrorDiv.textContent = 'Invalid format.';\r\n                return;\r\n            }\r\n\r\n            const [command, key] = value.split(':');\r\n            if (!command || !key) {\r\n                this.ui.modalErrorDiv.textContent = 'Invalid format.';\r\n                return;\r\n            }\r\n\r\n            this.executeAdminCommand(command.trim(), key.trim());\r\n            this.ui.closeModal();\r\n        };\r\n\r\n        this.ui.modalCancelButton.onclick = () => this.ui.closeModal();\r\n    }\r\n\r\n    /**\r\n     * Executes a command that is in the input field of the admin modal.\r\n     */\r\n    private executeAdminCommand(command: string, key: string): void {\r\n        // This will be called from your main game class with the WebSocket\r\n        console.log(`Admin command: ${command} with key: ${key}`);\r\n\r\n        // You'll expose this via a callback or event system\r\n        this.onAdminCommand?.(command, key);\r\n    }\r\n\r\n    // Public callback for Client.ts\r\n    public onAdminCommand?: (command: string, key: string) => void;\r\n\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Console ]\r\n    //\r\n    /**\r\n     * Clears cache with tilde key\r\n     */\r\n    private initConsoleKeybinds(): void {\r\n        document.addEventListener('keydown', (e) => {\r\n            if (!e.getModifierState(CONSOLE_KEY)) return;\r\n            if (e.key === '`') { e.preventDefault(); this.clearCacheCommand(); }\r\n        });\r\n    }\r\n\r\n    private clearCacheCommand(): void {\r\n        this.cacheManager.clear().then(() => {\r\n            console.log('Cache cleared! Reload the page.');\r\n            location.reload();\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { PlayerPartAnimParams, CharacterAnimation, Vec2 } from \"./Types\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { NETWORK } from \"./Config\";\r\n\r\nexport class Animator {\r\n    private characterAnimations: CharacterAnimation = new Map();\r\n    public characterOffsets: Map<string, Vec2> = new Map();\r\n\r\n    constructor(private playerState: PlayerState, private roomManager: RoomManager, private userId: string) { }\r\n\r\n    // #region [ Animation ]\r\n    /**\r\n     * Animates a specific character part locally with generateCharacterAnimation and broadcasts for other clients to sync animations.\r\n     */\r\n    public animateCharacterPart(params: PlayerPartAnimParams): void {\r\n        this.generateCharacterAnimation(params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'character-animation',\r\n            params: params\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Rotates a specific part of a player with the passed rotation.\r\n     */\r\n    public rotateCharacterPart(playerId: string, rotation: number): void {\r\n        if (playerId === this.userId) {\r\n            this.playerState.myPlayer.transform.rot = rotation;\r\n        } else {\r\n            const player = this.playerState.players.get(playerId);\r\n            if (!player) return;\r\n            player.transform.rot = rotation;\r\n        }\r\n\r\n        const now = Date.now();\r\n        const rotationDiff = Math.abs(rotation - this.playerState.lastSentRotation);\r\n        if (rotationDiff > 0.1 && now - this.playerState.lastSentRotationTime >= NETWORK.ROTATE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    rot: this.playerState.myPlayer.transform.rot\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentRotation = rotation;\r\n            this.playerState.lastSentRotationTime = now;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to a network request to process a character animation.\r\n     */\r\n    public animateCharacterPartNetwork(params: PlayerPartAnimParams): void {\r\n        this.generateCharacterAnimation(params);\r\n    }\r\n\r\n    /**\r\n     * Assembles the character animation and adds it to the characterAnimations mapping for playback during update processing.\r\n     */\r\n    private generateCharacterAnimation(params: PlayerPartAnimParams): void {\r\n        const { playerId, part, frames, duration, partIndex } = params;\r\n        const animationId = `${playerId}_${part}_${partIndex || 0}`;\r\n\r\n        this.characterAnimations.set(animationId, {\r\n            playerId: playerId,\r\n            part: part,\r\n            partIndex: partIndex,\r\n            frames: frames,\r\n            duration: duration,\r\n            startTime: Date.now(),\r\n            originalOffset: { x: 0, y: 0 }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Process visual character animations by updating part positions.\r\n     */\r\n    public updateCharacterAnimations(delta: number): void {\r\n        const animationsToRemove: string[] = [];\r\n        const currentTime = Date.now();\r\n\r\n        this.characterAnimations.forEach((animation, animationId) => {\r\n            const elapsed = currentTime - animation.startTime;\r\n            const progress = elapsed / animation.duration;\r\n\r\n            if (animation.duration !== 0 && progress >= 1) {\r\n                // Animation complete, remove it\r\n                animationsToRemove.push(animationId);\r\n                return;\r\n            }\r\n\r\n            // Find current keyframe\r\n            const frameKeys = Object.keys(animation.frames).map(Number).sort((a, b) => a - b);\r\n            let currentFrameIndex = 0;\r\n\r\n            for (let i = 0; i < frameKeys.length - 1; i++) {\r\n                const frameProgress = frameKeys[i];\r\n                const nextFrameProgress = frameKeys[i + 1];\r\n\r\n                if (progress >= frameProgress && progress < nextFrameProgress) {\r\n                    currentFrameIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let lerpedX, lerpedY;\r\n            if (progress >= 1) { // Hold at last keyframe for infinite animation\r\n                const lastFrame = animation.frames[frameKeys[frameKeys.length - 1]];\r\n                lerpedX = lastFrame.x;\r\n                lerpedY = lastFrame.y;\r\n            } else { // Normal animation with no lerp\r\n                const currentFrame = animation.frames[frameKeys[currentFrameIndex]];\r\n                const nextFrame = animation.frames[frameKeys[currentFrameIndex + 1]] || currentFrame;\r\n                const frameProgress = (progress - frameKeys[currentFrameIndex]) / (frameKeys[currentFrameIndex + 1] - frameKeys[currentFrameIndex]) || 0;\r\n                lerpedX = currentFrame.x + (nextFrame.x - currentFrame.x) * frameProgress;\r\n                lerpedY = currentFrame.y + (nextFrame.y - currentFrame.y) * frameProgress;\r\n            }\r\n\r\n            this.characterOffsets.set(animationId, { x: lerpedX, y: lerpedY });\r\n        });\r\n\r\n        // Remove completed animations\r\n        animationsToRemove.forEach(id => {\r\n            this.characterAnimations.delete(id);\r\n            if (this.characterOffsets) {\r\n                this.characterOffsets.delete(id);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears all active character animations and offsets.\r\n     */\r\n    public clearAllAnimations(): void {\r\n        this.characterAnimations.clear();\r\n        this.characterOffsets.clear();\r\n    }\r\n    //\r\n    // #endregion\r\n}","export class AudioPool {\r\n    private pools: Map<string, HTMLAudioElement[]> = new Map();\r\n    private activeAudio: Map<string, HTMLAudioElement[]> = new Map();\r\n\r\n    constructor(private poolSize: number = 10, private maxConcurrent: number = 5) { }\r\n\r\n    private createPool(src: string): HTMLAudioElement[] {\r\n        const pool: HTMLAudioElement[] = [];\r\n        for (let i = 0; i < this.poolSize; i++) {\r\n            const audio = new Audio(src);\r\n            audio.preload = 'auto';\r\n            audio.addEventListener('ended', () => this.returnToPool(src, audio));\r\n            audio.addEventListener('pause', () => this.returnToPool(src, audio));\r\n            pool.push(audio);\r\n        }\r\n        return pool;\r\n    }\r\n\r\n    private returnToPool(src: string, audio: HTMLAudioElement): void {\r\n        const active = this.activeAudio.get(src);\r\n        if (active) {\r\n            const index = active.indexOf(audio);\r\n            if (index > -1) {\r\n                active.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        const pool = this.pools.get(src);\r\n        if (pool && !pool.includes(audio)) {\r\n            pool.push(audio);\r\n        }\r\n    }\r\n\r\n    public getAudio(src: string): HTMLAudioElement | null {\r\n        // Check if we're at max concurrent instances\r\n        const active = this.activeAudio.get(src) || [];\r\n        if (active.length >= this.maxConcurrent) {\r\n            return null; // Skip playing if too many instances\r\n        }\r\n\r\n        // Get or create pool for this sound\r\n        let pool = this.pools.get(src);\r\n        if (!pool) {\r\n            pool = this.createPool(src);\r\n            this.pools.set(src, pool);\r\n            this.activeAudio.set(src, []);\r\n        }\r\n\r\n        // Get available audio from pool\r\n        const audio = pool.pop();\r\n        if (audio) {\r\n            // Reset audio properties\r\n            audio.currentTime = 0;\r\n            audio.volume = 1;\r\n            audio.playbackRate = 1;\r\n            audio.loop = false;\r\n\r\n            // Move to active list\r\n            active.push(audio);\r\n            return audio;\r\n        }\r\n\r\n        return null; // Pool exhausted\r\n    }\r\n\r\n    public preloadSound(src: string): void {\r\n        if (!this.pools.has(src)) {\r\n            const pool = this.createPool(src);\r\n            this.pools.set(src, pool);\r\n            this.activeAudio.set(src, []);\r\n        }\r\n    }\r\n}","import { CANVAS } from \"./Config\";\r\n\r\nimport { AudioPool } from \"./AudioPool\";\r\nimport { AudioParams } from \"./Types\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { Utility } from \"./Utility\";\r\nimport { AudioConfig } from \"./AudioConfig\";\r\n\r\nexport class AudioManager {\r\n    private audioPool: AudioPool;\r\n\r\n    constructor(\r\n        private audioConfig: AudioConfig,\r\n        private roomManager: RoomManager,\r\n        private settingsManager: SettingsManager,\r\n        private utility: Utility\r\n    ) {\r\n        this.audioPool = new AudioPool(\r\n            this.audioConfig.settings.poolSize,\r\n            this.audioConfig.settings.maxConcurrent\r\n        );\r\n    }\r\n\r\n    // #region [ Playback ]\r\n    //\r\n    /**\r\n     * Plays an audio source using the predefined pool for the audio source.\r\n     */\r\n    public playAudio(params: AudioParams): void {\r\n        const audio = this.audioPool.getAudio(params.src);\r\n        if (!audio) {\r\n            console.warn(`Audio pool exhausted or max concurrent reached for: ${params.src}`);\r\n            return;\r\n        }\r\n\r\n        // [ Volume ]\r\n        let volume = 1.0;\r\n        if (params.volume) {\r\n            volume = params.volume.min + Math.random() * (params.volume.max - params.volume.min);\r\n        }\r\n\r\n        // [ 2D Spatial Audio ]\r\n        const blend = params.spatial?.blend ?? 0;\r\n        if (blend > 0 && params.spatial?.pos) {\r\n            const dx = params.spatial.pos.x - params.listener.x;\r\n            const dy = params.spatial.pos.y - params.listener.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            let distanceVolume: number;\r\n\r\n            if (params.spatial.rolloff) {\r\n                const rolloffType = params.spatial.rolloff.type || 'linear';\r\n                const factor = params.spatial.rolloff.factor;\r\n                const maxDistance = params.spatial.rolloff.distance;\r\n\r\n                if (rolloffType === 'logarithmic') {\r\n                    // Factor determines reference distance as % of max distance\r\n                    const referenceDistance = maxDistance * factor;\r\n\r\n                    if (distance < referenceDistance) {\r\n                        distanceVolume = 1.0;\r\n                    } else {\r\n                        const normalizedDistance = (distance - referenceDistance) / (maxDistance - referenceDistance);\r\n                        distanceVolume = Math.max(0, 1 - Math.pow(normalizedDistance, 0.5));\r\n                    }\r\n                } else {\r\n                    // Linear: factor is just multiplier on falloff curve\r\n                    distanceVolume = Math.max(0, 1 - (distance / maxDistance) * factor);\r\n                }\r\n            } else {\r\n                // Default: simple linear falloff using canvas dimensions as fallback\r\n                const maxDistance = Math.max(CANVAS.WIDTH, CANVAS.HEIGHT); //TODO: Remove reliance on config\r\n                distanceVolume = Math.max(0, 1 - (distance / maxDistance));\r\n            }\r\n\r\n            volume *= (1 - blend) + (distanceVolume * blend);\r\n        }\r\n\r\n        // [ Mixer ]\r\n        const outputGroup = params.output?.toLowerCase() || null;\r\n        const mixer = this.settingsManager.getSettings().audio.mixer;\r\n        if (outputGroup && mixer[outputGroup as keyof typeof mixer] !== undefined) {\r\n            volume *= mixer[outputGroup as keyof typeof mixer];\r\n        }\r\n\r\n        volume *= this.settingsManager.getSettings().audio.mixer.master;\r\n        audio.volume = Math.max(0, Math.min(1, volume));\r\n\r\n        // [ Pitch ]\r\n        if (params.pitch) {\r\n            const pitch = params.pitch.min + Math.random() * (params.pitch.max - params.pitch.min);\r\n            audio.playbackRate = Math.max(0.25, Math.min(4, pitch));\r\n        }\r\n\r\n        // [ Loop ]\r\n        if (params.loop !== undefined) {\r\n            audio.loop = params.loop;\r\n        }\r\n\r\n        // [ Trigger Delay ]\r\n        let delayMs = 0;\r\n        if (params.delay) {\r\n            delayMs = (params.delay.min + Math.random() * (params.delay.max - params.delay.min)) * 1000; // Convert to seconds\r\n        }\r\n\r\n        this.utility.safeTimeout(() => {\r\n            audio.play().catch((error: unknown) => {\r\n                console.warn('Audio play failed:', error);\r\n            });\r\n        }, delayMs);\r\n    }\r\n\r\n    /**\r\n     * Syncs an audio trigger over the network.\r\n     */\r\n    public playAudioNetwork(params: AudioParams): void {\r\n        this.playAudio(params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'play-audio',\r\n            params: params\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Preloading ]\r\n    /**\r\n     * Preloads all audio of a single filetype for the game.\r\n     */\r\n    public preloadAudioAssets(sfx: any, extension: string): void {\r\n        this.preloadSFX(sfx, extension);\r\n    }\r\n\r\n    /**\r\n     * Iterate through the passed audio object, and preload them for the session.\r\n     */\r\n    private preloadSFX(obj: any, extension: string): void {\r\n        for (const key in obj) {\r\n            const value = obj[key];\r\n\r\n            if (Array.isArray(value)) {\r\n                // If it's an array, assume it's an array of audio file paths\r\n                value.forEach(src => {\r\n                    if (typeof src === 'string' && (src.endsWith(extension))) { // All sound files should be .ogg\r\n                        this.audioPool.preloadSound(src);\r\n                    }\r\n                });\r\n            } else if (typeof value === 'object' && value !== null) {\r\n                // If it's an object, recurse into it\r\n                this.preloadSFX(value, extension);\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","export class CacheManager {\r\n    private dbName = 'SaltpeterCache';\r\n    private dbVersion = 1;\r\n    private db: IDBDatabase | null = null;\r\n\r\n    constructor() {\r\n        this.initDB();\r\n    }\r\n\r\n    /**\r\n     * Initializes the IndexedDB database\r\n     */\r\n    private async initDB(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = indexedDB.open(this.dbName, this.dbVersion);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => {\r\n                this.db = request.result;\r\n                resolve();\r\n            };\r\n\r\n            request.onupgradeneeded = (event) => {\r\n                const db = (event.target as IDBOpenDBRequest).result;\r\n                if (!db.objectStoreNames.contains('settings')) {\r\n                    db.createObjectStore('settings');\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Writes any value to the cache\r\n     */\r\n    public async write(key: string, value: any): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.put(value, key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reads a value from the cache\r\n     */\r\n    public async read(key: string): Promise<any> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readonly');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.get(key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve(request.result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes a value from the cache\r\n     */\r\n    public async delete(key: string): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.delete(key);\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears all cached data\r\n     */\r\n    public async clear(): Promise<void> {\r\n        if (!this.db) await this.initDB();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = this.db!.transaction(['settings'], 'readwrite');\r\n            const store = transaction.objectStore('settings');\r\n            const request = store.clear();\r\n\r\n            request.onerror = () => reject(request.error);\r\n            request.onsuccess = () => resolve();\r\n        });\r\n    }\r\n}","export class CharacterConfig {\r\n    public weapon = {\r\n        glock: [\r\n            '/assets/img/weapon/glock/body.png',\r\n            '/assets/img/weapon/glock/slide.png',\r\n        ],\r\n        knife: [\r\n            '/assets/img/weapon/melee/knife_00.png'\r\n        ]\r\n    };\r\n\r\n    public magazine = {\r\n        glock: {\r\n            empty: '/assets/img/object/weapons/glock/magazine_empty.png',\r\n            full: '/assets/img/object/weapons/glock/magazine_full.png'\r\n        }\r\n    };\r\n\r\n    public body = {\r\n        default: '/assets/img/char/body/default.png'\r\n    };\r\n\r\n    public head = {\r\n        default: '/assets/img/char/head/default.png',\r\n        blondeAfro: '/assets/img/char/head/blonde_afro.png'\r\n    };\r\n\r\n    public headwear = {\r\n        default: '/assets/img/char/headwear/default.png',\r\n        fez: '/assets/img/char/headwear/fez.png',\r\n        strawHat: '/assets/img/char/headwear/straw_hat.png',\r\n        trucker: '/assets/img/char/headwear/trucker.png'\r\n    };\r\n\r\n    public upgrades = {\r\n        kineticBrain: '/assets/img/char/upgrades/kineticbrain.png'\r\n    };\r\n\r\n    public characterDecals = {\r\n        default: {\r\n            blood: [\r\n                '/assets/img/effects/blood/blood_00.png',\r\n                '/assets/img/effects/blood/blood_01.png',\r\n                '/assets/img/effects/blood/blood_02.png',\r\n                '/assets/img/effects/blood/blood_03.png',\r\n                '/assets/img/effects/blood/blood_04.png'\r\n            ],\r\n            gore: [\r\n                '/assets/img/effects/gore/gore_00.png',\r\n                '/assets/img/effects/gore/gore_01.png',\r\n                '/assets/img/effects/gore/gore_02.png',\r\n                '/assets/img/effects/gore/gore_03.png',\r\n                '/assets/img/effects/gore/gore_04.png',\r\n                '/assets/img/effects/gore/gore_05.png',\r\n                '/assets/img/effects/gore/gore_06.png',\r\n                '/assets/img/effects/gore/gore_07.png',\r\n                '/assets/img/effects/gore/gore_08.png',\r\n                '/assets/img/effects/gore/gore_09.png',\r\n                '/assets/img/effects/gore/gore_10.png',\r\n                '/assets/img/effects/gore/gore_11.png',\r\n                '/assets/img/effects/gore/gore_12.png',\r\n                '/assets/img/effects/gore/gore_13.png'\r\n            ]\r\n        }\r\n    };\r\n\r\n    constructor() { }\r\n}","import { CharacterConfig } from \"./CharacterConfig\";\r\nimport { CharacterLayer } from \"./Types\";\r\n\r\nexport class CharacterManager {\r\n    constructor(private charConfig: CharacterConfig) { }\r\n\r\n    public getCharacterAsset(layer: CharacterLayer, variant: string): string | string[] {\r\n        switch (layer) {\r\n            case 'BODY':\r\n                return this.charConfig.body[variant as keyof typeof this.charConfig.body] || this.charConfig.body.default;\r\n            case 'WEAPON':\r\n                return this.charConfig.weapon[variant as keyof typeof this.charConfig.weapon] || this.charConfig.weapon.glock;\r\n            case 'HEAD':\r\n                return this.charConfig.head[variant as keyof typeof this.charConfig.head] || this.charConfig.head.default;\r\n            case 'HEADWEAR':\r\n                return this.charConfig.headwear[variant as keyof typeof this.charConfig.headwear] || this.charConfig.headwear.default;\r\n            case 'UPGRADES':\r\n                return variant;\r\n            default:\r\n                throw new Error(`Unknown character layer: ${layer}`);\r\n        }\r\n    }\r\n\r\n    public getUpgradeVisual(upgradeName: string): string | null {\r\n        const lowerName = upgradeName.toLowerCase();\r\n        return this.charConfig.upgrades[lowerName as keyof typeof this.charConfig.upgrades] || null;\r\n    }\r\n}","import { CHAT } from \"./Config\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { ChatMessage } from \"./Types\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nexport class ChatManager {\r\n    constructor(private roomManager: RoomManager, private ui: UserInterface) { }\r\n\r\n    // #region [ Chat Management ]\r\n    //\r\n    /**\r\n     * Sends a message in the chat.\r\n     */\r\n    public sendChatMessage(userId: string): void {\r\n        if (!this.ui.chatInput || !this.ui.chatInput.value.trim()) return;\r\n\r\n        const message = this.ui.chatInput.value.trim();\r\n        if (message.length > CHAT.MAX_MESSAGE_LENGTH) { //TODO: Abstract reliance on config\r\n            alert(`Message too long! Max ${CHAT.MAX_MESSAGE_LENGTH} characters.`);\r\n            return;\r\n        }\r\n\r\n        // Send message to server\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'chat-message',\r\n            message: message,\r\n            timestamp: Date.now()\r\n        }));\r\n\r\n        // Display own message immediately\r\n        this.displayChatMessage({senderId: userId, message: message, isOwn: true});\r\n\r\n        // Clear input\r\n        this.ui.chatInput.value = '';\r\n    }\r\n\r\n    /**\r\n     * Displayes messages sent in the chat.\r\n     */\r\n    public displayChatMessage(params: ChatMessage): void {\r\n        if (!this.ui.chatMessages) return;\r\n        const { senderId, message, isOwn = false } = params;\r\n\r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.className = `chat_message ${isOwn ? 'own' : 'other'}`;\r\n\r\n        const senderSpan = document.createElement('span');\r\n        senderSpan.className = 'sender';\r\n        senderSpan.textContent = isOwn ? 'You:' : `${senderId}:`;\r\n\r\n        const contentSpan = document.createElement('span');\r\n        contentSpan.className = 'content';\r\n        contentSpan.textContent = message;\r\n\r\n        messageDiv.appendChild(senderSpan);\r\n        messageDiv.appendChild(contentSpan);\r\n\r\n        this.ui.chatMessages.appendChild(messageDiv);\r\n\r\n        // Scroll to bottom\r\n        this.ui.chatMessages.scrollTop = this.ui.chatMessages.scrollHeight;\r\n\r\n        // Limit message history\r\n        while (this.ui.chatMessages.children.length > CHAT.MAX_MESSAGES) {\r\n            this.ui.chatMessages.removeChild(this.ui.chatMessages.firstChild!);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the chat.\r\n     */\r\n    public clearChat(): void {\r\n        if (this.ui.chatMessages) {\r\n            this.ui.chatMessages.innerHTML = '';\r\n        }\r\n        if (this.ui.chatInput) {\r\n            this.ui.chatInput.value = '';\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { Vec2 } from \"./Types\";\r\n\r\nimport { SettingsManager } from \"./SettingsManager\";\r\n\r\nexport class ControlsManager {\r\n    private activeKeys: Set<string> = new Set();\r\n    private gamepadKeys: Set<string> = new Set();\r\n    private previousKeys: Set<string> = new Set();\r\n\r\n    private mousePos: Vec2 = { x: 0, y: 0 };;\r\n\r\n    private gamepadConnected: boolean = false;\r\n    public gamepadConnectionEnabled: boolean = true;\r\n\r\n    private gamepadRAxis: number | null = null;\r\n\r\n    constructor(private settingsManager: SettingsManager) {\r\n        this.initGamepad();\r\n    }\r\n\r\n    // #region [ Keys ]\r\n    //\r\n    /**\r\n     * Returns true if the key is currently being held down.\r\n     */\r\n    public held(key: string): boolean {\r\n        return this.activeKeys.has(key);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the key was pressed this frame.\r\n     */\r\n    public triggered(key: string): boolean {\r\n        return this.activeKeys.has(key) && !this.previousKeys.has(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a read-only copy of the currently active (pressed) keys.\r\n     */\r\n    public getActiveKeys(): ReadonlySet<string> {\r\n        return this.activeKeys;\r\n    }\r\n\r\n    /**\r\n     * Adds a key to the active key set.\r\n     */\r\n    public addKey(key: string): void {\r\n        this.activeKeys.add(key);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the active key set.\r\n     */\r\n    public removeKey(key: string): void {\r\n        this.activeKeys.delete(key);\r\n    }\r\n\r\n    /**\r\n     * Clears all currently active (pressed) keys.\r\n     */\r\n    public clearActiveKeys(): void {\r\n        this.activeKeys.clear();\r\n    }\r\n\r\n    /**\r\n     * Monitors the previous keys set, allowing for action triggers.\r\n     */\r\n    public updatePreviousKeys(): void {\r\n        this.previousKeys = new Set(this.activeKeys);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Mouse ]\r\n    //\r\n    /**\r\n     * Returns the current mouse position as a read-only Vec2.\r\n     */\r\n    public getMousePos(): Readonly<Vec2> {\r\n        return this.mousePos;\r\n    }\r\n\r\n    /**\r\n     * Updates the stored mouse position.\r\n     */\r\n    public setMousePos(pos: Vec2): void {\r\n        this.mousePos.x = pos.x;\r\n        this.mousePos.y = pos.y;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Gamepad ]\r\n    //\r\n    /**\r\n     * Initializes gamepad connection listeners.\r\n     */\r\n    private initGamepad(): void {\r\n        window.addEventListener(\"gamepadconnected\", () => {\r\n            console.log(\"Gamepad connected!\");\r\n            this.gamepadConnected = true;\r\n        });\r\n\r\n        window.addEventListener(\"gamepaddisconnected\", () => {\r\n            console.log(\"Gamepad disconnected!\");\r\n            this.gamepadConnected = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to poll for gamepad inputs when one is connected.\r\n     * \r\n     * Gamepad bindings map to the keyboard bindings to trigger actions.\r\n     */\r\n    public pollGamepad(): void {\r\n        if (!this.gamepadConnected) return;\r\n\r\n        const gamepads = navigator.getGamepads();\r\n        const gamepad = gamepads[0];\r\n        if (!gamepad) return;\r\n\r\n        const settings = this.settingsManager.getSettings();\r\n        const keybinds = settings.controls.keybinds;\r\n        const gamepadMap = settings.controls.gamepad;\r\n        const deadzone = gamepadMap.deadzone;\r\n\r\n        // Clear previous gamepad keys\r\n        this.gamepadKeys.forEach(key => this.activeKeys.delete(key));\r\n        this.gamepadKeys.clear();\r\n\r\n        const xAxis = gamepad.axes[0];\r\n        const yAxis = gamepad.axes[1];\r\n\r\n        if (xAxis > deadzone) {\r\n            this.activeKeys.add(keybinds.moveRight);\r\n            this.gamepadKeys.add(keybinds.moveRight);\r\n        }\r\n\r\n        if (xAxis < -deadzone) {\r\n            this.activeKeys.add(keybinds.moveLeft);\r\n            this.gamepadKeys.add(keybinds.moveLeft);\r\n        }\r\n\r\n        if (yAxis > deadzone) {\r\n            this.activeKeys.add(keybinds.moveDown);\r\n            this.gamepadKeys.add(keybinds.moveDown);\r\n        }\r\n\r\n        if (yAxis < -deadzone) {\r\n            this.activeKeys.add(keybinds.moveUp);\r\n            this.gamepadKeys.add(keybinds.moveUp);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.melee].pressed) {\r\n            this.activeKeys.add(keybinds.melee);\r\n            this.gamepadKeys.add(keybinds.melee);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.dash].pressed) {\r\n            this.activeKeys.add(keybinds.dash);\r\n            this.gamepadKeys.add(keybinds.dash);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.reload].pressed) {\r\n            this.activeKeys.add(keybinds.reload);\r\n            this.gamepadKeys.add(keybinds.reload);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.attack].pressed) {\r\n            this.activeKeys.add(keybinds.attack);\r\n            this.gamepadKeys.add(keybinds.attack);\r\n        }\r\n\r\n        if (gamepad.buttons[gamepadMap.sprint].pressed) {\r\n            this.activeKeys.add(keybinds.sprint);\r\n            this.gamepadKeys.add(keybinds.sprint);\r\n        }\r\n\r\n        // Right stick aiming\r\n        const rightX = gamepad.axes[2];\r\n        const rightY = gamepad.axes[3];\r\n        const aimMagnitude = Math.sqrt(rightX * rightX + rightY * rightY);\r\n\r\n        if (aimMagnitude > deadzone) {\r\n            this.gamepadRAxis = Math.atan2(rightY, rightX) + Math.PI / 2;\r\n        } else {\r\n            this.gamepadRAxis = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current right axis input.\r\n     */\r\n    public getGamepadRAxis(): number | null {\r\n        return this.gamepadRAxis;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { CANVAS } from \"./Config\";\r\nimport { Player } from \"./Types\";\r\n\r\nimport { ObjectsManager } from \"./ObjectsManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\n\r\nexport class CollisionsManager {\r\n    constructor(\r\n        private objectsManager: ObjectsManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string\r\n    ) {}\r\n\r\n    /**\r\n     * Responsible for handling all collisions in the game. Routes to other collision functions.\r\n     */\r\n    public checkCollisions(delta: number): void {\r\n        const minX = CANVAS.BORDER_MARGIN;\r\n        const maxX = CANVAS.WIDTH - CANVAS.BORDER_MARGIN;\r\n        const minY = CANVAS.BORDER_MARGIN;\r\n        const maxY = CANVAS.HEIGHT - CANVAS.BORDER_MARGIN;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = Math.max(minX, Math.min(maxX, this.playerState.myPlayer.transform.pos.x));\r\n        this.playerState.myPlayer.transform.pos.y = Math.max(minY, Math.min(maxY, this.playerState.myPlayer.transform.pos.y));\r\n\r\n        this.checkObjectCollisions(delta);\r\n        this.checkPlayersCollisions(delta);\r\n    }\r\n\r\n    /**\r\n     * Checks for my player colliding with objects in the game. \r\n     */\r\n    private checkObjectCollisions(delta: number): void {\r\n        if (!this.collisionsEnabled(this.playerState.myPlayer)) return;\r\n\r\n        const collisionRadius = this.getPlayerCollider(this.playerState.myPlayer, 5);\r\n\r\n        this.objectsManager.ammoBoxes.forEach((ammoBox, boxId) => {\r\n            if (ammoBox.isOpen) return;\r\n\r\n            const dx = this.playerState.myPlayer.transform.pos.x - ammoBox.transform.pos.x;\r\n            const dy = this.playerState.myPlayer.transform.pos.y - ammoBox.transform.pos.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (distance <= collisionRadius) {\r\n                // Calculate how much ammo can actually be picked up\r\n                const currentReserve = this.playerState.myPlayer.actions.primary.magazine.currentReserve;\r\n                const maxReserve = this.playerState.myPlayer.actions.primary.magazine.maxReserve;\r\n                const actualAmmoAdded = Math.min(ammoBox.ammoAmount, maxReserve - currentReserve);\r\n\r\n                // Only pick up if we can actually add ammo\r\n                if (actualAmmoAdded > 0) {\r\n                    this.playerState.myPlayer.actions.primary.magazine.currentReserve += actualAmmoAdded;\r\n\r\n                    // Spawn UI bullets based on ACTUAL ammo added, not ammo box amount\r\n                    this.ui.ammoReservesUIController.spawnAmmoInReserveUI(actualAmmoAdded);\r\n\r\n                    console.log(`Picked up ammo box! +${actualAmmoAdded} bullets. Inventory: ${this.playerState.myPlayer.actions.primary.magazine.currentReserve}/${this.playerState.myPlayer.actions.primary.magazine.maxReserve}`);\r\n\r\n                    // Generate random lid physics\r\n                    const angle = Math.random() * Math.PI * 2;\r\n                    const speed = 2 + Math.random() * 3;\r\n\r\n                    ammoBox.isOpen = true;\r\n                    ammoBox.lid.velocity = {\r\n                        x: Math.cos(angle) * speed,\r\n                        y: Math.sin(angle) * speed\r\n                    };\r\n                    ammoBox.lid.torque = (Math.random() - 0.5) * 0.3;\r\n\r\n                    // Broadcast pickup with full box state\r\n                    this.roomManager.sendMessage(JSON.stringify({\r\n                        type: 'ammo-pickup',\r\n                        ammoBoxId: boxId,\r\n                        playerId: this.userId,\r\n                        boxState: {\r\n                            isOpen: true,\r\n                            lid: ammoBox.lid\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Checks for collisions with other players, blocking movement.\r\n     */\r\n    private checkPlayersCollisions(delta: number): void {\r\n        if (!this.collisionsEnabled(this.playerState.myPlayer)) return;\r\n\r\n        this.playerState.players.forEach((player: Player) => {\r\n            if (!this.collisionsEnabled(player)) return;\r\n\r\n            const dx = this.playerState.myPlayer.transform.pos.x - player.transform.pos.x;\r\n            const dy = this.playerState.myPlayer.transform.pos.y - player.transform.pos.y;\r\n            const dist = Math.sqrt(dx * dx + dy * dy);\r\n            const minDist = this.getPlayerCollider(this.playerState.myPlayer) + this.getPlayerCollider(player);\r\n\r\n            if (dist < minDist && dist > 0.01) { // Push myself away from the other player\r\n                const overlap = minDist - dist;\r\n                const pushX = (dx / dist) * overlap;\r\n                const pushY = (dy / dist) * overlap;\r\n\r\n                this.playerState.myPlayer.transform.pos.x += pushX;\r\n                this.playerState.myPlayer.transform.pos.y += pushY;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the player collider, with padding if needed.\r\n     */\r\n    public getPlayerCollider(player: Player, padding?: number): number {\r\n        let col = player.stats.size / 4\r\n\r\n        if (padding && padding > 0) {\r\n            col = (player.stats.size / 4) + padding\r\n        }\r\n\r\n        return col;\r\n    }\r\n    \r\n    /**\r\n     * Checks if the specific player's collisions are enabled.\r\n     */\r\n    public collisionsEnabled(player: Player): boolean {\r\n        if (player.stats.health.value <= 0) return false\r\n        if (player.flags.hidden && player.flags.invulnerable) return false\r\n        return true\r\n    }\r\n}","import { ParametricDecalParams } from \"./Types\";\r\n\r\nexport class DecalsConfig {\r\n    public decals = {\r\n        projectile: {\r\n            radius: {\r\n                min: 4,\r\n                max: 8\r\n            },\r\n            density: {\r\n                min: 0.175,\r\n                max: 0.35\r\n            },\r\n            opacity: {\r\n                min: 0.15,\r\n                max: 0.25\r\n            },\r\n            variation: 0.215,\r\n            colors: [\"#000000\", \"#191919\", \"#39362d\"]\r\n        } as ParametricDecalParams,\r\n        blood: {\r\n            radius: {\r\n                min: 5,\r\n                max: 17.5\r\n            },\r\n            density: {\r\n                min: 0.1,\r\n                max: 0.175\r\n            },\r\n            opacity: {\r\n                min: 0.275,\r\n                max: 0.315\r\n            },\r\n            variation: 0.5,\r\n            colors: [\"#781414\", \"#710606\", \"#a10101\"]\r\n        } as ParametricDecalParams,\r\n        explosion: {\r\n            radius: {\r\n                min: 25,\r\n                max: 40\r\n            },\r\n            density: {\r\n                min: 0.375,\r\n                max: 0.575\r\n            },\r\n            opacity: {\r\n                min: 0.35,\r\n                max: 0.525\r\n            },\r\n            variation: 0.2,\r\n            colors: [\"#434343\", \"#2a2a2a\", \"#3b1d1d\"]\r\n        } as ParametricDecalParams\r\n    };\r\n\r\n    constructor() { }\r\n}","import { CANVAS } from \"./Config\";\r\nimport { Decal, DecalParams, ImageDecalParams, ParametricDecalParams, Vec2 } from \"./Types\";\r\n\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\nimport { DecalsConfig } from \"./DecalsConfig\";\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { CharacterConfig } from \"./CharacterConfig\";\r\n\r\nexport class DecalsManager {\r\n    public decalsConfig: DecalsConfig;\r\n\r\n    public dynamicDecals: Map<string, Decal> = new Map();\r\n    public staticDecalData: ImageData | null = null;\r\n\r\n    constructor(\r\n        private charConfig: CharacterConfig,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) {\r\n        this.decalsConfig = new DecalsConfig();\r\n    }\r\n\r\n    // #region [ Decals ]\r\n    //\r\n    /**\r\n     * Create a decal and broadcast over the network.\r\n     */\r\n    public createDecal(params: DecalParams): void {\r\n        this.generateDecal(params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'add-decal',\r\n            params: params\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Create a decal locally when receiving an 'add-decal' network message.\r\n     */\r\n    public createDecalNetwork(params: DecalParams): void {\r\n        if (this.dynamicDecals.has(params.id)) return; // Don't create duplicate decals\r\n\r\n        this.generateDecal(params);\r\n    }\r\n\r\n    /**\r\n     * Locally generate the decal and stamp it to the decal canvas.\r\n     */\r\n    public generateDecal(params: DecalParams): void {\r\n        if (!this.ui.decalCtx) return;\r\n        \r\n        const { x, y } = params.pos; // Don't create decals outside canvas bounds\r\n        if (x < 0 || x > CANVAS.WIDTH || y < 0 || y > CANVAS.HEIGHT) return;\r\n\r\n        // Handle different decal types\r\n        if (params.type === 'parametric' && params.parametric) {\r\n            this.generateParametricDecal(params.pos, params.parametric);\r\n        } else if (params.type === 'image' && params.image) {\r\n            this.generateImageDecal(params.pos, params.image);\r\n        }\r\n\r\n        // Store decal\r\n        this.dynamicDecals.set(params.id, { params, pos: { x, y } });\r\n    }\r\n\r\n    /**\r\n     * Generate parametric pixel-based decal.\r\n     * \r\n     * This type of decal does not use an image, but instead paints pixels based on parameters.\r\n     */\r\n    private generateParametricDecal(pos: Vec2, params: ParametricDecalParams): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        const radius = params.radius.min + Math.random() * (params.radius.max - params.radius.min);\r\n        const density = params.density.min + Math.random() * (params.density.max - params.density.min);\r\n        const opacity = params.opacity.min + Math.random() * (params.opacity.max - params.opacity.min);\r\n\r\n        const numPixels = Math.floor((radius * radius * Math.PI) * density);\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.globalCompositeOperation = 'source-over';\r\n\r\n        for (let i = 0; i < numPixels; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const distance = Math.random() * radius;\r\n            const pixelX = pos.x + Math.cos(angle) * distance;\r\n            const pixelY = pos.y + Math.sin(angle) * distance;\r\n\r\n            if (pixelX < 0 || pixelX >= CANVAS.WIDTH || pixelY < 0 || pixelY >= CANVAS.HEIGHT) continue;\r\n\r\n            // Pick random color from array\r\n            const chosenColor = params.colors[Math.floor(Math.random() * params.colors.length)];\r\n            const rgb = this.utility.hexToRgb(chosenColor);\r\n            if (!rgb) continue;\r\n\r\n            const pixelOpacity = opacity + (Math.random() - 0.5) * params.variation;\r\n            const clampedOpacity = Math.max(0.05, Math.min(0.6, pixelOpacity));\r\n\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${clampedOpacity})`;\r\n            this.ui.decalCtx.fillRect(Math.floor(pixelX), Math.floor(pixelY), 1, 1);\r\n        }\r\n\r\n        this.ui.decalCtx.restore();\r\n    }\r\n\r\n    /**\r\n     * Generate image-based decal (for magazines, gore, etc.).\r\n     */\r\n    private generateImageDecal(pos: Vec2, params: ImageDecalParams): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        let image = new Image();\r\n        image.src = params.src;\r\n\r\n        const drawImage = () => {\r\n            if (!this.ui.decalCtx) return;\r\n            if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n            this.ui.decalCtx.save();\r\n            this.ui.decalCtx.translate(pos.x, pos.y);\r\n            this.ui.decalCtx.rotate(params.rotation);\r\n\r\n            const drawSize = 32 * params.scale;\r\n            this.ui.decalCtx.drawImage(\r\n                image,\r\n                -drawSize / 2,\r\n                -drawSize / 2,\r\n                drawSize,\r\n                drawSize\r\n            );\r\n\r\n            this.ui.decalCtx.restore();\r\n        };\r\n\r\n        if (image.complete) {\r\n            drawImage();\r\n        } else {\r\n            image.onload = drawImage;\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Baking ]\r\n    //\r\n    // TODO: Implement dynamic -> static decal baking as performance requires\r\n    /**\r\n     * Bake all current dynamic decals into static ImageData and clear the dynamic map.\r\n     * This merges all decals into a single pixel buffer that gets composited once per frame.\r\n     */\r\n    private bakeDecals(): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        // Capture current decal canvas state as ImageData\r\n        const currentBaked = this.ui.decalCtx.getImageData(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n\r\n        if (!this.staticDecalData) {\r\n            // First bake - just store it\r\n            this.staticDecalData = currentBaked;\r\n        } else {\r\n            // Merge new decals with existing baked data\r\n            for (let i = 0; i < currentBaked.data.length; i += 4) {\r\n                const alpha = currentBaked.data[i + 3];\r\n                if (alpha > 0) {\r\n                    // Composite new pixel over old (simple alpha blend)\r\n                    const newAlpha = alpha / 255;\r\n                    const oldAlpha = this.staticDecalData.data[i + 3] / 255;\r\n\r\n                    this.staticDecalData.data[i] = currentBaked.data[i] * newAlpha + this.staticDecalData.data[i] * oldAlpha * (1 - newAlpha);\r\n                    this.staticDecalData.data[i + 1] = currentBaked.data[i + 1] * newAlpha + this.staticDecalData.data[i + 1] * oldAlpha * (1 - newAlpha);\r\n                    this.staticDecalData.data[i + 2] = currentBaked.data[i + 2] * newAlpha + this.staticDecalData.data[i + 2] * oldAlpha * (1 - newAlpha);\r\n                    this.staticDecalData.data[i + 3] = Math.min(255, alpha + this.staticDecalData.data[i + 3]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Clear dynamic decals\r\n        this.dynamicDecals.clear();\r\n        this.ui.decalCtx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n    }\r\n\r\n    /**\r\n     * Render baked decals to the decal canvas (call at start of frame, before dynamic decals)\r\n     */\r\n    private renderBakedDecals(): void {\r\n        if (!this.staticDecalData || !this.ui.decalCtx) return;\r\n        this.ui.decalCtx.putImageData(this.staticDecalData, 0, 0);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Weapon Magazine ]\r\n    //\r\n    /**\r\n     * Spawns weapon magazine using createDecal function, also being broadcast over the network.\r\n     */\r\n    public spawnMagazineDecal(): void {\r\n        setTimeout(() => {\r\n            const currentAmmo = this.playerState.myPlayer.actions.primary.magazine.currentAmmo;\r\n\r\n            // Choose magazine sprite: empty if 0 ammo, full if > 0\r\n            const magazineSrc = currentAmmo > 0 // TODO: Get current ranged weapon\r\n                ? this.charConfig.magazine.glock.full\r\n                : this.charConfig.magazine.glock.empty;\r\n\r\n            // Random position in small radius around player\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const distance = this.utility.getRandomNum(8, 24);\r\n\r\n            const x = this.playerState.myPlayer.transform.pos.x + Math.cos(angle) * distance;\r\n            const y = this.playerState.myPlayer.transform.pos.y + Math.sin(angle) * distance;\r\n            const rotation = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const scale = this.utility.getRandomNum(0.65, 0.75);\r\n\r\n            const decalId = `magazine_${this.userId}_${Date.now()}`;\r\n\r\n            const decalParams: DecalParams = {\r\n                id: decalId,\r\n                pos: { x, y },\r\n                type: 'image',\r\n                image: {\r\n                    src: magazineSrc,\r\n                    scale: scale,\r\n                    rotation: rotation\r\n                }\r\n            };\r\n            this.createDecal(decalParams);\r\n\r\n            console.log(`Spawned ${currentAmmo > 0 ? 'full' : 'empty'} magazine at reload`);\r\n        }, 150);\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { GAMEPAD_MAP } from \"./Config\";\r\n\r\nimport { Animator } from \"./Animator\";\r\nimport { ChatManager } from \"./ChatManager\";\r\nimport { ControlsManager } from \"./ControlsManager\";\r\nimport { GameState } from \"./GameState\";\r\nimport { RoomController } from \"./RoomController\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class EventsManager {\r\n    constructor(\r\n        private animator: Animator,\r\n        private chatManager: ChatManager,\r\n        private controlsManager: ControlsManager,\r\n        private gameState: GameState,\r\n        private roomController: RoomController,\r\n        private playerState: PlayerState,\r\n        private settingsManager: SettingsManager,\r\n        private ui: UserInterface,\r\n        private userId: string\r\n    ) { }\r\n\r\n    // #region [ Events ]\r\n    //\r\n    /**\r\n     * Initializes all event listeners to the required DOM elements.\r\n     */\r\n    public initEventListeners(): void {\r\n        if (!this.ui.canvas || !this.ui.hostButton || !this.ui.joinButton || !this.ui.quickplayButton ||\r\n            !this.ui.lobbyLeaveButton || !this.ui.lobbyCodeButton || !this.ui.gameLeaveButton ||\r\n            !this.ui.gameCodeButton || !this.ui.startGameBtn || !this.ui.chatSendBtn || !this.ui.chatInput) return;\r\n\r\n        this.ui.hostButton.addEventListener(\"click\", () => this.roomController.hostRoom());\r\n        this.ui.joinButton.addEventListener(\"click\", () => this.roomController.joinRoom());\r\n        this.ui.quickplayButton.addEventListener(\"click\", () => this.roomController.quickPlay());\r\n        this.ui.lobbyLeaveButton.addEventListener(\"click\", () => this.roomController.leaveRoom());\r\n        this.ui.lobbyCodeButton.addEventListener(\"click\", () => this.roomController.copyRoomCode());\r\n        this.ui.gameLeaveButton.addEventListener(\"click\", () => this.roomController.leaveRoom());\r\n        this.ui.gameCodeButton.addEventListener(\"click\", () => this.roomController.copyRoomCode());\r\n        this.ui.startGameBtn.addEventListener(\"click\", () => this.onStartButtonClick());\r\n\r\n        // [ Chat ]\r\n        this.ui.chatSendBtn.addEventListener(\"click\", () => this.chatManager.sendChatMessage(this.userId));\r\n        this.ui.chatInput.addEventListener(\"keypress\", (e) => {\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault();\r\n                this.chatManager.sendChatMessage(this.userId);\r\n            }\r\n        });\r\n        this.ui.chatInput.addEventListener(\"focus\", () => {\r\n            this.controlsManager.clearActiveKeys();\r\n\r\n            this.playerState.canShoot = false;\r\n            this.playerState.isSprinting = false;\r\n            this.playerState.isDashing = false;\r\n            this.playerState.isBurstActive = false;\r\n            this.playerState.currentBurstShot = 0;\r\n        });\r\n\r\n        this.ui.chatInput.addEventListener(\"blur\", () => {\r\n            this.controlsManager.clearActiveKeys();\r\n\r\n            this.playerState.canShoot = true;\r\n            this.playerState.isSprinting = false;\r\n            this.playerState.isDashing = false;\r\n        });\r\n\r\n        this.ui.settingsButton?.addEventListener('click', () => {\r\n            this.ui.showSettingsPage();\r\n        });\r\n\r\n        this.ui.settingsCloseButton?.addEventListener('click', () => {\r\n            this.ui.hideSettingsPage();\r\n        })\r\n\r\n        // Prevent right-click context menu on the entire window\r\n        window.addEventListener('contextmenu', (e) => {\r\n            e.preventDefault();\r\n        });\r\n\r\n        // Listen on document for events, not canvas.\r\n        // If this presents issues, swap \"document.\" with \"this.interface.canvas\"\r\n        document.addEventListener('keydown', (e) => this.onKeyDown(e));\r\n        document.addEventListener('keyup', (e) => this.onKeyUp(e));\r\n\r\n        document.addEventListener('mouseup', (e) => this.onMouseUp(e));\r\n        document.addEventListener('mousemove', (e) => this.onMouseMove(e));\r\n\r\n        this.ui.canvas.addEventListener('mousedown', (e) => this.onMouseDown(e)); // Canvas only listening for mouse (shooting mainly)\r\n\r\n        this.ui.switchSettingsPage('sound'); // Init settings page to sound tab on dom load\r\n\r\n        this.ui.controlsTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('controls');\r\n        });\r\n\r\n        this.ui.graphicsTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('graphics');\r\n        });\r\n\r\n        this.ui.soundTab?.addEventListener('click', () => {\r\n            this.ui.switchSettingsPage('sound');\r\n        });\r\n\r\n        // Settings page click to open when hidden\r\n        this.ui.controlsBody?.addEventListener('click', () => {\r\n            if (this.ui.controlsBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('controls');\r\n            }\r\n        });\r\n\r\n        this.ui.graphicsBody?.addEventListener('click', () => {\r\n            if (this.ui.graphicsBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('graphics');\r\n            }\r\n        });\r\n\r\n        this.ui.soundBody?.addEventListener('click', () => {\r\n            if (this.ui.soundBody?.classList.contains('settings_page_hidden')) {\r\n                this.ui.switchSettingsPage('sound');\r\n            }\r\n        });\r\n\r\n        this.initSettingsAudioSliders();\r\n        this.initSettingsInputListeners();\r\n        this.initSettingsToggleListeners();\r\n    }\r\n\r\n    /**\r\n     * Handles all key press events.\r\n     */\r\n    private onKeyDown(e: KeyboardEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        const key = e.key.toLowerCase();\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        const isGameKey = Object.values(keybinds).includes(key);\r\n        if (!isGameKey) return;\r\n\r\n        e.preventDefault();\r\n        this.controlsManager.addKey(key);\r\n    }\r\n\r\n    /**\r\n     * Handles all key release events.\r\n     */\r\n    private onKeyUp(e: KeyboardEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        const key = e.key.toLowerCase();\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        if (!Object.values(keybinds).includes(key)) return;\r\n\r\n        e.preventDefault();\r\n        this.controlsManager.removeKey(key);\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse click events.\r\n     */\r\n    private onMouseDown(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused || !this.ui.canvas) return;\r\n\r\n        if (e.button === 0) {\r\n            this.updateMouse(e);\r\n            this.controlsManager.addKey('mouse1'); // Left Click\r\n        } else if (e.button === 1) {\r\n            this.controlsManager.addKey('mouse3'); // Middle Click\r\n        } else if (e.button === 2) {\r\n            this.updateMouse(e);\r\n            this.controlsManager.addKey('mouse2'); // Right Click\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse release events.\r\n     */\r\n    private onMouseUp(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        if (e.button === 0) {\r\n            this.controlsManager.removeKey('mouse1'); // Left Click\r\n        } else if (e.button === 1) {\r\n            this.controlsManager.addKey('mouse3'); // Middle Click\r\n        } else if (e.button === 2) {\r\n            this.controlsManager.removeKey('mouse2'); // Right Click\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles all mouse movement events.\r\n     */\r\n    private onMouseMove(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        this.updateMouse(e);\r\n        const mousePos = this.controlsManager.getMousePos();\r\n\r\n        // Calculate rotation based on mouse position\r\n        const dx = mousePos.x - this.playerState.myPlayer.transform.pos.x;\r\n        const dy = mousePos.y - this.playerState.myPlayer.transform.pos.y;\r\n        const rotation = Math.atan2(dy, dx) + Math.PI / 2;\r\n\r\n        // Rotate my character\r\n        this.animator.rotateCharacterPart(this.userId, rotation);\r\n    }\r\n\r\n    /**\r\n     * Processes mouse position and updates.\r\n     */\r\n    private updateMouse(e: MouseEvent): void {\r\n        if (this.ui.chatInput === document.activeElement) return;\r\n        if (!this.ui.canvas) return;\r\n\r\n        const rect = this.ui.canvas.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n\r\n        this.controlsManager.setMousePos({ x, y });\r\n    }\r\n\r\n    /**\r\n     * Called when the Start Game button is pressed.\r\n     */\r\n    private onStartButtonClick(): void {\r\n        const event = new CustomEvent(\"customEvent_startGame\");\r\n        window.dispatchEvent(event);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Page ]\r\n    //\r\n    /**\r\n     * Initializes event listeners for audio sliders on audio settings page.\r\n     */\r\n    private initSettingsAudioSliders(): void {\r\n        const sliders = [\r\n            { slider: this.ui.masterSlider, fill: this.ui.masterFill, value: this.ui.masterValue, channel: 'master' },\r\n            { slider: this.ui.interfaceSlider, fill: this.ui.interfaceFill, value: this.ui.interfaceValue, channel: 'interface' },\r\n            { slider: this.ui.musicSlider, fill: this.ui.musicFill, value: this.ui.musicValue, channel: 'music' },\r\n            { slider: this.ui.sfxSlider, fill: this.ui.sfxFill, value: this.ui.sfxValue, channel: 'sfx' },\r\n            { slider: this.ui.voiceSlider, fill: this.ui.voiceFill, value: this.ui.voiceValue, channel: 'voice' }\r\n        ];\r\n\r\n        sliders.forEach(({ slider, fill, value, channel }) => {\r\n            if (!slider || !fill || !value) return;\r\n\r\n            slider.addEventListener('mousedown', (e) => {\r\n                const handleMove = (moveEvent: MouseEvent) => {\r\n                    const sliderValue = this.ui.calculateSliderValue(slider, moveEvent.clientX);\r\n                    this.ui.updateSettingsSlider(fill, value, sliderValue);\r\n\r\n                    this.settingsManager.updateSettings({\r\n                        audio: {\r\n                            mixer: {\r\n                                [channel]: sliderValue\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n\r\n                const handleUp = () => {\r\n                    document.removeEventListener('mousemove', handleMove);\r\n                    document.removeEventListener('mouseup', handleUp);\r\n                };\r\n\r\n                handleMove(e);\r\n                document.addEventListener('mousemove', handleMove);\r\n                document.addEventListener('mouseup', handleUp);\r\n                e.preventDefault();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners for input fields on all settings pages.\r\n     */\r\n    private initSettingsInputListeners(): void {\r\n        const inputs = [\r\n            { input: this.ui.deadzoneInput, settingPath: 'controls.gamepad.deadzone', parse: parseFloat }\r\n            // Future inputs go here: { input: this.ui.someInput, settingPath: 'path.to.setting', parse: parseFloat }\r\n        ];\r\n\r\n        inputs.forEach(({ input, settingPath, parse }) => {\r\n            if (!input) return;\r\n\r\n            input.addEventListener('change', () => {\r\n                const rawValue = input.value;\r\n                const parsedValue = parse(rawValue);\r\n\r\n                if (isNaN(parsedValue)) return; // Invalid input\r\n\r\n                // Build nested update object\r\n                const pathParts = settingPath.split('.');\r\n                const update: any = {};\r\n                let current = update;\r\n\r\n                for (let i = 0; i < pathParts.length - 1; i++) {\r\n                    current[pathParts[i]] = {};\r\n                    current = current[pathParts[i]];\r\n                }\r\n                current[pathParts[pathParts.length - 1]] = parsedValue;\r\n\r\n                this.settingsManager.updateSettings(update);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners for toggles on all settings pages.\r\n     */\r\n    private initSettingsToggleListeners(): void {\r\n        const toggles = [\r\n            { toggle: this.ui.particleJSToggle, settingPath: 'graphics.renderBackgroundParticles' },\r\n            { toggle: this.ui.staticVfxToggle, settingPath: 'graphics.showStaticOverlay' },\r\n            { toggle: this.ui.ammoReservesPhysicsToggle, settingPath: 'graphics.physics.ammoReserves' }\r\n        ];\r\n\r\n        toggles.forEach(({ toggle, settingPath }) => {\r\n            if (!toggle) return;\r\n\r\n            toggle.addEventListener('click', () => {\r\n                const currentValue = toggle.getAttribute('aria-checked') === 'true';\r\n                const newValue = !currentValue;\r\n\r\n                // Update toggle visually\r\n                if (newValue) {\r\n                    toggle.setAttribute('checked', 'true');\r\n                    toggle.setAttribute('aria-checked', 'true');\r\n                } else {\r\n                    toggle.removeAttribute('checked');\r\n                    toggle.setAttribute('aria-checked', 'false');\r\n                }\r\n\r\n                // Build nested update object\r\n                const pathParts = settingPath.split('.');\r\n                const update: any = {};\r\n                let current = update;\r\n\r\n                for (let i = 0; i < pathParts.length - 1; i++) {\r\n                    current[pathParts[i]] = {};\r\n                    current = current[pathParts[i]];\r\n                }\r\n                current[pathParts[pathParts.length - 1]] = newValue;\r\n\r\n                this.settingsManager.updateSettings(update);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the keybinds interface, with user prefs or defaults.\r\n     * \r\n     * Also sets up keybind change listeners.\r\n     */\r\n    public initKeybindListeners(): void {\r\n        const controlsSettings = this.settingsManager.getSettings().controls;\r\n        this.ui.initKeybindsInterface(\r\n            controlsSettings,\r\n            (action, type, newBinding) => this.onBindingChange(action, type, newBinding)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Event that fires on keybind or gamepad press when input change modal is visible.\r\n     */\r\n    public onBindingChange(action: string, type: 'keybind' | 'gamepad', newBinding: string | number): void {\r\n        if (type === 'keybind') {\r\n            this.settingsManager.updateSettings({\r\n                controls: {\r\n                    keybinds: {\r\n                        [action]: newBinding as string\r\n                    }\r\n                }\r\n            });\r\n\r\n            const element = document.getElementById(`${action}Keybind`);\r\n            if (element) {\r\n                element.textContent = newBinding === ' ' ? 'SPACE' : (newBinding as string).toUpperCase();\r\n            }\r\n        } else {\r\n            this.settingsManager.updateSettings({\r\n                controls: {\r\n                    gamepad: {\r\n                        [action]: newBinding as number\r\n                    }\r\n                }\r\n            });\r\n\r\n            const element = document.getElementById(`${action}Gamepad`);\r\n            if (element) {\r\n                const buttonName = Object.keys(GAMEPAD_MAP).find(\r\n                    key => typeof GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === 'number'\r\n                        && GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === newBinding\r\n                );\r\n                element.textContent = buttonName || newBinding.toString();\r\n            }\r\n        }\r\n    }\r\n}","import { GAME } from \"./Config\";\r\n\r\nexport class GameState {\r\n    /**\r\n     * Tracks paused state of the application.\r\n     */\r\n    public isPaused = false;\r\n\r\n    /**\r\n     * Becomes true when game loop starts.\r\n     * \r\n     * False when game loop is no longer ongoing (end game, websocket disconnect, leave room)\r\n     */\r\n    public gameInProgress = false;\r\n\r\n    /**\r\n     * Max wins needed for session to end.\r\n     */\r\n    public gameMaxWins = GAME.MAX_WINS;\r\n\r\n    /**\r\n     * Max players allowed in a game.\r\n     */\r\n    public gameMaxPlayers = GAME.MAX_PLAYERS;\r\n\r\n    constructor() {}\r\n}","import { LobbyControlsParams, LobbyOptionsParams, LobbyPlayer, SetInputParams, SetToggleParams } from \"./Types\";\r\n\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { Utility } from \"./Utility\";\r\nimport { CharacterManager } from \"./CharacterManager\";\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { PlayerConfig } from \"./player/PlayerConfig\";\r\n\r\nexport class LobbyManager {\r\n    public inLobby = false;\r\n    public lobbyPlayers: Map<string, LobbyPlayer> = new Map(); // Temporary partial player object used for lobby only information\r\n    private charCustomizeHandlers: Array<{ element: HTMLElement, handler: () => void }> = []; // Event handlers for lobby customization arrows\r\n\r\n    constructor(\r\n        private characterManager: CharacterManager,\r\n        private playerConfig: PlayerConfig,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // #region [ Lobby Controls ]\r\n    //\r\n    /**\r\n     * Calls updateDisplay to show the lobby specific controls.\r\n     */\r\n    public showLobbyControls(params: LobbyControlsParams): void {\r\n        const { lobby, lobbyOptions, myPlayer, roomId, userId } = params;\r\n        const { isHost, maxWins, privateRoom, upgradesEnabled } = lobbyOptions;\r\n\r\n        this.ui.updateDisplay(lobby, \"lobby\", roomId);\r\n\r\n        const centerX = this.ui.charCustomizeCanvas ? this.ui.charCustomizeCanvas.width / 2 : 0;\r\n        const centerY = this.ui.charCustomizeCanvas ? this.ui.charCustomizeCanvas.height / 2 : 0;\r\n\r\n        // Add myself to lobby\r\n        this.lobbyPlayers.set(userId, {\r\n            id: userId,\r\n            color: myPlayer.color,\r\n            isHost: isHost,\r\n            rig: { //TODO: Load from the user's saved charCustomization\r\n                body: this.playerConfig.default.rig.body,\r\n                head: this.playerConfig.default.rig.head,\r\n                headwear: this.playerConfig.default.rig.headwear,\r\n                weapon: this.playerConfig.default.rig.weapon\r\n            },\r\n            transform: {\r\n                pos: { x: centerX, y: centerY },\r\n                rot: 0\r\n            }\r\n        });\r\n\r\n        // Setup lobby inputs/toggles using nested options\r\n        this.setupLobbyOptions(lobbyOptions);\r\n\r\n        const winsInputParams: SetInputParams = {\r\n            inputId: \"winsInput\",\r\n            value: maxWins\r\n        };\r\n        const privateToggleParams: SetToggleParams = {\r\n            toggleId: \"privateToggle\",\r\n            value: privateRoom\r\n        };\r\n        const upgradesToggleParams: SetToggleParams = {\r\n            toggleId: \"upgradesToggle\",\r\n            value: upgradesEnabled\r\n        };\r\n\r\n        this.utility.setToggle(privateToggleParams);\r\n        this.utility.setToggle(upgradesToggleParams);\r\n        this.utility.setInput(winsInputParams);\r\n\r\n        this.ui.displayLobbyPlayers(isHost, lobby, userId);\r\n        this.ui.updateHostDisplay(isHost, lobby);\r\n\r\n        window.dispatchEvent(new CustomEvent(\"customEvent_renderCharacter\"));\r\n        this.setupCharacterCustomization();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Lobby Options ]\r\n    //\r\n    /**\r\n     * Sets up lobby toggles and input for game settings.\r\n     */\r\n    public setupLobbyOptions(params: LobbyOptionsParams): void {\r\n        this.setupLobbyToggle('privateToggle', params.isHost, 'privateRoom', () => params.privateRoom, (val) => params.privateRoom = val);\r\n        this.setupLobbyToggle('upgradesToggle', params.isHost, 'upgradesEnabled', () => params.upgradesEnabled, (val) => params.upgradesEnabled = val);\r\n        this.setupLobbyInput('winsInput', params.isHost, 'maxWins', () => params.maxWins, (val) => params.maxWins = val);\r\n        this.setupLobbyInput('playersInput', params.isHost, 'maxPlayers', () => params.maxPlayers, (val) => params.maxPlayers = val);\r\n    }\r\n\r\n    /**\r\n     * Called by setupLobbyOptions - Responsible for toggles.\r\n     */\r\n    private setupLobbyToggle(elementProp: 'privateToggle' | 'upgradesToggle', isHost: boolean, messageKey: string, getter: () => boolean, setter: (val: boolean) => void): void {\r\n        const element = this.ui[elementProp];\r\n        if (!element) return;\r\n\r\n        // Store the handler so we can remove it later\r\n        const handlerKey = `${elementProp}Handler` as keyof this;\r\n\r\n        // Remove existing listener if it exists\r\n        if (this[handlerKey]) {\r\n            element.removeEventListener('click', this[handlerKey] as EventListener);\r\n        }\r\n\r\n        // Create and store the new handler\r\n        const handler = () => {\r\n            if (!isHost) return;\r\n\r\n            const newValue = !getter();\r\n            setter(newValue);\r\n\r\n            const toggleParams: SetToggleParams = {\r\n                toggleId: elementProp,\r\n                value: newValue\r\n            }\r\n            this.utility.setToggle(toggleParams);\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'lobby-options',\r\n                [messageKey]: newValue\r\n            }));\r\n\r\n            console.log(`${messageKey} changed to: ${newValue}`);\r\n        };\r\n\r\n        // Store handler for later removal & add listener\r\n        (this as any)[handlerKey] = handler;\r\n        element.addEventListener('click', handler);\r\n    }\r\n\r\n    /**\r\n     * Called by setupLobbyOptions - Responsible for input fields.\r\n     */\r\n    private setupLobbyInput(elementProp: 'winsInput' | 'playersInput', isHost: boolean, messageKey: string, getter: () => number, setter: (val: number) => void): void {\r\n        const element = this.ui[elementProp];\r\n        if (!element) return;\r\n\r\n        // Store the handler so we can remove it later\r\n        const handlerKey = `${elementProp}Handler` as keyof this;\r\n\r\n        // Remove existing listener if it exists\r\n        if (this[handlerKey]) {\r\n            element.removeEventListener('change', this[handlerKey] as EventListener);\r\n        }\r\n\r\n        // Create and store the new handler\r\n        const handler = () => {\r\n            if (!isHost) return;\r\n\r\n            const newValue = parseInt(element.value);\r\n            if (isNaN(newValue) || newValue < 1) {\r\n                element.value = getter().toString();\r\n                return;\r\n            }\r\n\r\n            setter(newValue);\r\n\r\n            const inputParams: SetInputParams = {\r\n                inputId: elementProp,\r\n                value: newValue\r\n            }\r\n            this.utility.setInput(inputParams);\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'lobby-options',\r\n                [messageKey]: newValue\r\n            }));\r\n\r\n            console.log(`${messageKey} changed to: ${newValue}`);\r\n        };\r\n\r\n        // Store handler for later removal & setup listener\r\n        (this as any)[handlerKey] = handler;\r\n        element.addEventListener('change', handler);\r\n    }\r\n\r\n    /**\r\n     * Syncs lobby options when state change messages are received over websocket.\r\n     */\r\n    public syncLobbyOptions(options: any): void {\r\n        this.syncOption(options, 'privateRoom', 'isPrivateRoom', 'privateToggle', this.utility.setToggle.bind(this.utility), 'Lobby privacy', (v) => v ? 'Private' : 'Public');\r\n        this.syncOption(options, 'maxWins', 'gameMaxWins', 'winsInput', this.utility.setInput.bind(this.utility), 'Game max wins');\r\n        this.syncOption(options, 'maxPlayers', 'gameMaxPlayers', 'playersInput', this.utility.setInput.bind(this.utility), 'Game max players');\r\n        this.syncOption(options, 'upgradesEnabled', 'isUpgradesEnabled', 'upgradesToggle', this.utility.setToggle.bind(this.utility), 'Game upgrades toggled');\r\n    }\r\n\r\n    /**\r\n     * [DO NOT CALL] Syncs a lobby option - called by syncLobbyOptions.\r\n     */\r\n    private syncOption<T extends SetInputParams | SetToggleParams>(options: any, key: string, prop: string, elementId: string, fn: (params: T) => void, label: string, format?: (v: any) => string): void {\r\n        if (options[key] === undefined) return;\r\n\r\n        (this as any)[prop] = options[key];\r\n\r\n        // Build params object based on element type\r\n        const params = elementId.includes('Input')\r\n            ? { inputId: elementId, value: options[key] } as T\r\n            : { toggleId: elementId, value: options[key] } as T;\r\n\r\n        fn(params);\r\n\r\n        const displayValue = format ? format(options[key]) : options[key];\r\n        console.log(`${label} synced to: ${displayValue}`);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Lobby Player Management ]\r\n    //\r\n    /**\r\n     * Promote specific player to host.\r\n     */\r\n    public promotePlayer(playerId: string): void {\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'promote-player',\r\n            targetPlayerId: playerId\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Kick specific  player from the current lobby.\r\n     */\r\n    public kickPlayer(playerId: string): void {\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'kick-player',\r\n            targetPlayerId: playerId\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Char Customization ]\r\n    //\r\n    /**\r\n     * Initializes the lobby character customization menu buttons.\r\n     */\r\n    public setupCharacterCustomization(): void {\r\n        if (!this.ui.bodyArrowLeft || !this.ui.bodyArrowRight ||\r\n            !this.ui.headArrowLeft || !this.ui.headArrowRight ||\r\n            !this.ui.headwearArrowLeft || !this.ui.headwearArrowRight) return;\r\n\r\n        const myLobbyPlayer = this.lobbyPlayers.get(this.playerState.myPlayer.id);\r\n        if (!myLobbyPlayer) return;\r\n\r\n        // Remove all old listeners\r\n        this.charCustomizeHandlers.forEach(({ element, handler }) => {\r\n            element.removeEventListener('click', handler);\r\n        });\r\n        this.charCustomizeHandlers = [];\r\n\r\n        // Helper to add and track listeners\r\n        const addHandler = (element: HTMLElement, handler: () => void) => {\r\n            this.charCustomizeHandlers.push({ element, handler });\r\n            element.addEventListener('click', handler);\r\n        };\r\n\r\n        // Body arrows\r\n        addHandler(this.ui.bodyArrowLeft, () => this.cycleRigVariant('body', -1));\r\n        addHandler(this.ui.bodyArrowRight, () => this.cycleRigVariant('body', 1));\r\n\r\n        // Head arrows\r\n        addHandler(this.ui.headArrowLeft, () => this.cycleRigVariant('head', -1));\r\n        addHandler(this.ui.headArrowRight, () => this.cycleRigVariant('head', 1));\r\n\r\n        // Headwear arrows\r\n        addHandler(this.ui.headwearArrowLeft, () => this.cycleRigVariant('headwear', -1));\r\n        addHandler(this.ui.headwearArrowRight, () => this.cycleRigVariant('headwear', 1));\r\n    }\r\n\r\n    /**\r\n     * Responsible for swapping layers in the character customizer. Arrow buttons call this, via event handlers.\r\n     */\r\n    private cycleRigVariant(rigProp: 'body' | 'head' | 'headwear' | 'weapon', direction: number): void {\r\n        const myLobbyPlayer = this.lobbyPlayers.get(this.playerState.myPlayer.id);\r\n        if (!myLobbyPlayer) return;\r\n\r\n        // Get all variants for this layer\r\n        const allVariants = Object.keys(this.characterManager['charConfig'][rigProp]);\r\n\r\n        // Find current index\r\n        const currentVariant = myLobbyPlayer.rig[rigProp];\r\n        const currentIndex = allVariants.indexOf(currentVariant);\r\n\r\n        // Calculate new index (with wrapping)\r\n        let newIndex = currentIndex + direction;\r\n        if (newIndex < 0) {\r\n            newIndex = allVariants.length - 1; // Wrap to last\r\n        } else if (newIndex >= allVariants.length) {\r\n            newIndex = 0; // Wrap to first\r\n        }\r\n\r\n        // Update the rig\r\n        myLobbyPlayer.rig[rigProp] = allVariants[newIndex];\r\n\r\n        window.dispatchEvent(new CustomEvent(\"customEvent_renderCharacter\"));\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { ParticleParams } from \"./Types\";\r\n\r\nexport class ParticlesConfig {\r\n    public particles = {\r\n        blood: {\r\n            drip: {\r\n                count: {\r\n                    min: 1,\r\n                    max: 4\r\n                },\r\n                lifetime: {\r\n                    min: 800,\r\n                    max: 1000\r\n                },\r\n                noise: {\r\n                    strength: {\r\n                        min: 0,\r\n                        max: 0\r\n                    },\r\n                    scale: {\r\n                        min: 0,\r\n                        max: 0\r\n                    }\r\n                },\r\n                opacity: {\r\n                    min: 0.25,\r\n                    max: 0.75\r\n                },\r\n                speed: {\r\n                    min: 0.25,\r\n                    max: 0.75\r\n                },\r\n                sizeOverLifetime: {\r\n                    min: 0,\r\n                    max: 0\r\n                },\r\n                size: {\r\n                    min: 0.125,\r\n                    max: 2.275\r\n                },\r\n                torque: {\r\n                    min: -720,\r\n                    max: 720\r\n                },\r\n                collide: true,\r\n                fade: true,\r\n                paint: false,\r\n                spread: 0.25,\r\n                stain: true,\r\n                colors: [\"#690303\", \"#820c0c\", \"#a70707\"]\r\n            } as ParticleParams,\r\n            spray: {\r\n                count: {\r\n                    min: 4,\r\n                    max: 12\r\n                },\r\n                lifetime: {\r\n                    min: 150,\r\n                    max: 1200\r\n                },\r\n                noise: {\r\n                    strength: {\r\n                        min: 0,\r\n                        max: 0\r\n                    },\r\n                    scale: {\r\n                        min: 0,\r\n                        max: 0\r\n                    }\r\n                },\r\n                opacity: {\r\n                    min: 0.425,\r\n                    max: 0.775\r\n                },\r\n                speed: {\r\n                    min: 1.5,\r\n                    max: 4.75\r\n                },\r\n                sizeOverLifetime: {\r\n                    min: 0,\r\n                    max: 0\r\n                },\r\n                size: {\r\n                    min: 0.75,\r\n                    max: 3.5\r\n                },\r\n                torque: {\r\n                    min: -720,\r\n                    max: 720\r\n                },\r\n                collide: true,\r\n                fade: false,\r\n                paint: true,\r\n                spread: 0.425,\r\n                stain: true,\r\n                colors: [\"#7e0a0a\", \"#941414\", \"#b51a1a\"]\r\n            } as ParticleParams,\r\n        },\r\n        glock: {\r\n            muzzle: {\r\n                smoke: {\r\n                    count: {\r\n                        min: 3,\r\n                        max: 6\r\n                    },\r\n                    lifetime: {\r\n                        min: 800,\r\n                        max: 1400\r\n                    },\r\n                    noise: {\r\n                        strength: {\r\n                            min: 0,\r\n                            max: 0\r\n                        },\r\n                        scale: {\r\n                            min: 0,\r\n                            max: 0\r\n                        }\r\n                    },\r\n                    opacity: {\r\n                        min: 0.15,\r\n                        max: 0.35\r\n                    },\r\n                    speed: {\r\n                        min: 0.5,\r\n                        max: 1.5\r\n                    },\r\n                    size: {\r\n                        min: 4,\r\n                        max: 8\r\n                    },\r\n                    sizeOverLifetime: {\r\n                        min: 2,\r\n                        max: 3\r\n                    },\r\n                    torque: {\r\n                        min: -180,\r\n                        max: 180\r\n                    },\r\n                    collide: false,\r\n                    fade: true,\r\n                    paint: false,\r\n                    spread: 0.4,\r\n                    stain: false,\r\n                    colors: [\"#5a5a5a\", \"#7a7a7a\"]\r\n                } as ParticleParams,\r\n                flash: {\r\n                    count: {\r\n                        min: 8,\r\n                        max: 15\r\n                    },\r\n                    lifetime: {\r\n                        min: 150,\r\n                        max: 300\r\n                    },\r\n                    noise: {\r\n                        strength: {\r\n                            min: 0,\r\n                            max: 0\r\n                        },\r\n                        scale: {\r\n                            min: 0,\r\n                            max: 0\r\n                        }\r\n                    },\r\n                    opacity: {\r\n                        min: 0.4,\r\n                        max: 0.8\r\n                    },\r\n                    speed: {\r\n                        min: 4,\r\n                        max: 10\r\n                    },\r\n                    sizeOverLifetime: {\r\n                        min: 0,\r\n                        max: 0\r\n                    },\r\n                    size: {\r\n                        min: 1,\r\n                        max: 3\r\n                    },\r\n                    torque: {\r\n                        min: 0,\r\n                        max: 0\r\n                    },\r\n                    collide: false,\r\n                    fade: true,\r\n                    paint: false,\r\n                    spread: 0.6,\r\n                    stain: false,\r\n                    colors: [\"#ffaa00\", \"#f3b02a\", \"#edbe60\"]\r\n                } as ParticleParams,\r\n            },\r\n            projectile: {\r\n                shell: {\r\n                    count: {\r\n                        min: 1,\r\n                        max: 1\r\n                    },\r\n                    lifetime: {\r\n                        min: 250,\r\n                        max: 550\r\n                    },\r\n                    noise: {\r\n                        strength: {\r\n                            min: 0,\r\n                            max: 0\r\n                        },\r\n                        scale: {\r\n                            min: 0,\r\n                            max: 0\r\n                        }\r\n                    },\r\n                    opacity: {\r\n                        min: 1.0,\r\n                        max: 1.0\r\n                    },\r\n                    speed: {\r\n                        min: 5,\r\n                        max: 8\r\n                    },\r\n                    sizeOverLifetime: {\r\n                        min: 0,\r\n                        max: 0\r\n                    },\r\n                    size: {\r\n                        min: 2,\r\n                        max: 2\r\n                    },\r\n                    torque: {\r\n                        min: -720,\r\n                        max: 720\r\n                    },\r\n                    collide: true,\r\n                    fade: false,\r\n                    paint: true,\r\n                    spread: 0.4,\r\n                    stain: false,\r\n                    colors: [\"#d4af37\", \"#c69e1c\", \"#dcb01f\"]\r\n                } as ParticleParams,\r\n                sparks: {\r\n                    count: {\r\n                        min: 8,\r\n                        max: 16\r\n                    },\r\n                    lifetime: {\r\n                        min: 150,\r\n                        max: 300\r\n                    },\r\n                    noise: {\r\n                        strength: {\r\n                            min: 0.25,\r\n                            max: 5\r\n                        },\r\n                        scale: {\r\n                            min: 0.25,\r\n                            max: 1.5\r\n                        }\r\n                    },\r\n                    opacity: {\r\n                        min: 0.4,\r\n                        max: 0.8\r\n                    },\r\n                    speed: {\r\n                        min: 4,\r\n                        max: 10\r\n                    },\r\n                    size: {\r\n                        min: 1,\r\n                        max: 3\r\n                    },\r\n                    sizeOverLifetime: {\r\n                        min: 0,\r\n                        max: 0\r\n                    },\r\n                    torque: {\r\n                        min: -720,\r\n                        max: 720\r\n                    },\r\n                    collide: false,\r\n                    fade: true,\r\n                    paint: false,\r\n                    spread: 0.6,\r\n                    stain: false,\r\n                    colors: [\"#ffaa00\", \"#ffcf70\", \"#f9dea7\"]\r\n                } as ParticleParams,\r\n            }\r\n        }\r\n    };\r\n\r\n    constructor() { }\r\n}","import { CANVAS, OBJECT_DEFAULTS } from \"./Config\";\r\nimport { CreateParticleParams, DeathDecal, DeathStamp, DecalParams, Emitter, EmitterParams, Particle, ParticleParams, PlayerHitParams, Shrapnel, ShrapnelPiece } from \"./Types\";\r\n\r\nimport { CharacterConfig } from \"./CharacterConfig\";\r\nimport { DecalsManager } from \"./DecalsManager\";\r\nimport { RenderingManager } from \"./RenderingManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { CollisionsManager } from \"./CollisionsManager\";\r\nimport { ParticlesConfig } from \"./ParticlesConfig\";\r\n\r\nexport class ParticlesManager {\r\n    public particlesConfig: ParticlesConfig;\r\n\r\n    public particles: Map<string, Particle> = new Map();\r\n    public emitters: Map<string, Emitter> = new Map();\r\n    public shrapnel: Map<string, ShrapnelPiece> = new Map();\r\n\r\n    constructor(\r\n        private charConfig: CharacterConfig,\r\n        private collisionsManager: CollisionsManager,\r\n        private decalsManager: DecalsManager,\r\n        private playerState: PlayerState,\r\n        private renderingManager: RenderingManager,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) {\r\n        this.particlesConfig = new ParticlesConfig();\r\n    }\r\n\r\n    // #region [ Particles ]\r\n    //\r\n    // [ Basic Particles ]\r\n    //\r\n    /**\r\n     * Creates particles with params. Entrypoint for all particle creations.\r\n     */\r\n    public createParticles(params: CreateParticleParams): void {\r\n        this.generateParticles(params);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'add-particles',\r\n            params: params\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Create a particles locally when receiving an 'add-particles' network message.\r\n     */\r\n    public createParticlesNetwork(params: CreateParticleParams): void {\r\n        if (this.particles.has(params.id)) return; // Don't create duplicate particles\r\n\r\n        this.generateParticles(params);\r\n    }\r\n    /**\r\n     * Responsible for actual generation of particles locally.\r\n     */\r\n    public generateParticles(params: CreateParticleParams): void {\r\n        const particleParams: ParticleParams = params.particleParams;\r\n\r\n        const count = Math.floor(this.utility.getRandomNum(particleParams.count.min, particleParams.count.max));\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const lifetime = this.utility.getRandomNum(particleParams.lifetime.min, particleParams.lifetime.max);\r\n            const speed = this.utility.getRandomNum(particleParams.speed.min, particleParams.speed.max);\r\n            const size = this.utility.getRandomNum(particleParams.size.min, particleParams.size.max);\r\n            const opacity = this.utility.getRandomNum(particleParams.opacity.min, particleParams.opacity.max);\r\n            const torque = this.utility.getRandomNum(particleParams.torque.min, particleParams.torque.max);\r\n            const noiseStrength = this.utility.getRandomNum(particleParams.noise.strength.min, particleParams.noise.strength.max);\r\n            const noiseScale = this.utility.getRandomNum(particleParams.noise.scale.min, particleParams.noise.scale.max);\r\n            const sizeOverLifetime = this.utility.getRandomNum(particleParams.sizeOverLifetime.min, particleParams.sizeOverLifetime.max);\r\n\r\n            // Pick random color from array\r\n            const chosenColor = this.utility.getRandomInArray(particleParams.colors);\r\n\r\n            let angle;\r\n            if (params.direction) {\r\n                angle = Math.atan2(params.direction.y, params.direction.x) + (this.utility.getRandomNum(0, 1) - 0.5) * particleParams.spread;\r\n            } else {\r\n                angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            }\r\n\r\n            const particle: Particle = {\r\n                age: 0,\r\n                collide: particleParams.collide,\r\n                color: chosenColor,\r\n                fade: particleParams.fade,\r\n                hasCollided: false,\r\n                id: `${params.id}_${i}`,\r\n                initialSize: size,\r\n                lifetime: lifetime,\r\n                maxOpacity: opacity,\r\n                noiseScale: noiseScale,\r\n                noiseStrength: noiseStrength,\r\n                opacity: opacity,\r\n                paint: particleParams.paint,\r\n                pos: {\r\n                    x: params.pos.x,\r\n                    y: params.pos.y\r\n                },\r\n                size: size,\r\n                stain: particleParams.stain,\r\n                torque: torque,\r\n                rotation: this.utility.getRandomNum(0, Math.PI * 2),\r\n                sizeOverLifetime: sizeOverLifetime,\r\n                velocity: {\r\n                    x: Math.cos(angle) * speed,\r\n                    y: Math.sin(angle) * speed\r\n                }\r\n            };\r\n\r\n            this.particles.set(particle.id, particle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles updating of all particles in the game during the update loop.\r\n     */\r\n    public updateParticles(delta: number): void {\r\n        const particlesToRemove: string[] = [];\r\n\r\n        this.particles.forEach((particle, id) => {\r\n            if (particle.noiseStrength > 0 && particle.noiseScale > 0) {\r\n                const time = Date.now() * 0.001; // Use time for animation\r\n                const noiseX = this.utility.simplexNoise2D(particle.pos.x / particle.noiseScale, time);\r\n                const noiseY = this.utility.simplexNoise2D(particle.pos.y / particle.noiseScale, time + 100);\r\n\r\n                particle.velocity.x += noiseX * particle.noiseStrength * delta;\r\n                particle.velocity.y += noiseY * particle.noiseStrength * delta;\r\n            }\r\n\r\n            if (particle.sizeOverLifetime > 0) {\r\n                const ageRatio = particle.age / particle.lifetime;\r\n                particle.size = particle.initialSize * (1 + ageRatio * particle.sizeOverLifetime);\r\n            }\r\n\r\n            particle.pos.x += particle.velocity.x * delta;\r\n            particle.pos.y += particle.velocity.y * delta;\r\n            particle.age += 16.67 * delta;\r\n\r\n            particle.rotation += (particle.torque * Math.PI / 180) * delta;\r\n\r\n            if (particle.fade) {\r\n                const ageRatio = particle.age / particle.lifetime;\r\n                particle.opacity = particle.maxOpacity * (1 - ageRatio);\r\n            }\r\n\r\n            // Handle staining during extended collision life\r\n            if (particle.hasCollided && particle.stain) {\r\n                // Paint every frame during extended life\r\n                this.stampParticle(particle);\r\n\r\n                // Calculate how far we are through the extended life\r\n                const extendedLifeRatio = (particle.age - (particle.lifetime - particle.lifetime * 0.5)) / (particle.lifetime * 0.5);\r\n\r\n                if (extendedLifeRatio > 0) {\r\n                    // Shrink particle during extended life\r\n                    particle.size = Math.max(0.5, particle.size * (1 - extendedLifeRatio * 0.1));\r\n\r\n                    // Fade opacity during extended life (from current opacity to 0)\r\n                    particle.opacity = particle.opacity * (1 - extendedLifeRatio);\r\n                }\r\n            }\r\n\r\n            const shouldRemove = particle.age >= particle.lifetime ||\r\n                particle.pos.x < -10 || particle.pos.x > CANVAS.WIDTH + 10 ||\r\n                particle.pos.y < -10 || particle.pos.y > CANVAS.HEIGHT + 10;\r\n\r\n            if (shouldRemove) {\r\n                // Handle collision for particles with COLLIDE property\r\n                if (particle.collide && particle.age >= particle.lifetime &&\r\n                    particle.pos.x >= 0 && particle.pos.x <= CANVAS.WIDTH &&\r\n                    particle.pos.y >= 0 && particle.pos.y <= CANVAS.HEIGHT &&\r\n                    !particle.hasCollided) {\r\n\r\n                    // Simulate collision with ground/surface\r\n                    particle.hasCollided = true;\r\n\r\n                    // Reduce speed\r\n                    const speedReduction = 0.875 + Math.random() * 0.1;\r\n                    particle.velocity.x *= (1 - speedReduction);\r\n                    particle.velocity.y *= (1 - speedReduction);\r\n\r\n                    // Extend lifetime\r\n                    const lifetimeExtension = particle.lifetime * 0.5;\r\n                    particle.lifetime += lifetimeExtension;\r\n\r\n                    // Don't remove this particle yet\r\n                    return;\r\n                }\r\n\r\n                // Handle painting before removal (only for non-staining particles)\r\n                if (particle.paint && !particle.stain && particle.age >= particle.lifetime &&\r\n                    particle.pos.x >= 0 && particle.pos.x <= CANVAS.WIDTH &&\r\n                    particle.pos.y >= 0 && particle.pos.y <= CANVAS.HEIGHT) {\r\n\r\n                    this.stampParticle(particle);\r\n                }\r\n\r\n                particlesToRemove.push(id);\r\n            }\r\n        });\r\n\r\n        particlesToRemove.forEach(id => this.particles.delete(id));\r\n    }\r\n\r\n    /**\r\n     * Responsible for the actual rendering of particles spawned via emitters and particle functions.\r\n     */\r\n    public drawParticles(): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        this.particles.forEach(particle => {\r\n            const rgb = this.utility.hexToRgb(particle.color);\r\n            if (!rgb) return;\r\n\r\n            if (!this.ui.ctx) return;\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.globalAlpha = particle.opacity;\r\n\r\n            // Apply rotation if torque exists\r\n            if (particle.torque !== 0) {\r\n                this.ui.ctx.translate(particle.pos.x + particle.size / 2, particle.pos.y + particle.size / 2);\r\n                this.ui.ctx.rotate(particle.rotation);\r\n                this.ui.ctx.fillStyle = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n                this.ui.ctx.fillRect(-particle.size / 2, -particle.size / 2, particle.size, particle.size);\r\n            } else {\r\n                this.ui.ctx.fillStyle = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n                this.ui.ctx.fillRect(Math.floor(particle.pos.x), Math.floor(particle.pos.y), particle.size, particle.size);\r\n            }\r\n\r\n            this.ui.ctx.restore();\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Persistence ]\r\n    //\r\n    /**\r\n     * Stamps local particles onto the decal canvas.\r\n     */\r\n    private stampParticle(particle: Particle): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        const rgb = this.utility.hexToRgb(particle.color);\r\n        if (!rgb) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.globalCompositeOperation = 'source-over';\r\n\r\n        // Paint with rotation if particle had torque\r\n        if (particle.torque !== 0) {\r\n            this.ui.decalCtx.translate(particle.pos.x + particle.size / 2, particle.pos.y + particle.size / 2);\r\n            this.ui.decalCtx.rotate(particle.rotation);\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${particle.opacity})`;\r\n            this.ui.decalCtx.fillRect(-particle.size / 2, -particle.size / 2, particle.size, particle.size);\r\n        } else {\r\n            this.ui.decalCtx.fillStyle = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${particle.opacity})`;\r\n            this.ui.decalCtx.fillRect(Math.floor(particle.pos.x), Math.floor(particle.pos.y), particle.size, particle.size);\r\n        }\r\n\r\n        this.ui.decalCtx.restore();\r\n\r\n        const id = `stamp_${Date.now()}`;\r\n\r\n        this.decalsManager.dynamicDecals.set(id, {\r\n            params: null,\r\n            pos: {\r\n                x: particle.pos.x,\r\n                y: particle.pos.y\r\n            }\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Emitters ]\r\n    //\r\n    /**\r\n     * Creates a particle emitter in the game, and syncs this action via websocket message \"particle-emitter\".\r\n     */\r\n    public createEmitter(params: EmitterParams): void {\r\n        this.generateEmitter(params); // Create an emitter locally\r\n\r\n        // Broadcast to other clients\r\n        const message: EmitterParams = {\r\n            type: 'particle-emitter',\r\n            id: params.id,\r\n            interval: params.interval,\r\n            lifetime: params.lifetime,\r\n            offset: {\r\n                x: params.offset.x,\r\n                y: params.offset.y\r\n            },\r\n            pos: {\r\n                x: params.pos.x,\r\n                y: params.pos.y\r\n            },\r\n            particleType: params.particleType,\r\n            playerId: params.playerId\r\n        };\r\n        this.roomManager.sendMessage(JSON.stringify(message));\r\n\r\n        console.log(`Emitter created on ${params.playerId} for ${params.lifetime}ms`);\r\n    }\r\n\r\n    /**\r\n     * Actual generation of the emitter object into the emitter mapping.\r\n     */\r\n    public generateEmitter(params: EmitterParams): void {\r\n        // Calculate offset from center\r\n        const offsetX = params.pos.x - params.offset.x;\r\n        const offsetY = params.pos.y - params.offset.y;\r\n\r\n        // Calculate direction (away from center towards hit point)\r\n        const angle = Math.atan2(offsetY, offsetX);\r\n\r\n        this.emitters.set(params.id, {\r\n            age: 0,\r\n            direction: angle,\r\n            emissionInterval: params.interval,\r\n            lastEmission: 0,\r\n            lifetime: params.lifetime,\r\n            offset: {\r\n                x: offsetX,\r\n                y: offsetY\r\n            },\r\n            particleType: params.particleType,\r\n            playerId: params.playerId\r\n        });\r\n    }\r\n    /**\r\n     * Process all particle emitters in the game during the update loop.\r\n     */\r\n    public updateEmitters(delta: number): void {\r\n        const emittersToRemove: string[] = [];\r\n\r\n        this.emitters.forEach((emitter, emitterId) => {\r\n            emitter.age += 16.67 * delta;\r\n\r\n            const player = emitter.playerId === this.userId ? this.playerState.myPlayer : this.playerState.players.get(emitter.playerId);\r\n            if (!player || player.stats.health.value <= 0) {\r\n                emittersToRemove.push(emitterId);\r\n                return;\r\n            }\r\n\r\n            // Calculate current world position\r\n            const worldX = player.transform.pos.x + emitter.offset.x;\r\n            const worldY = player.transform.pos.y + emitter.offset.y;\r\n\r\n            if (emitter.age >= emitter.lastEmission + emitter.emissionInterval) {\r\n                // Create directional spray with cone spread\r\n                const coneSpread = Math.PI * 0.6; // 108 degree cone\r\n                const randomSpread = (Math.random() - 0.5) * coneSpread;\r\n                const angle = emitter.direction + randomSpread;\r\n\r\n                // Variable speed for more natural spray\r\n                const baseSpeed = 3;\r\n                const speedVariation = (Math.random() - 0.5) * 4; // -2 to +2\r\n                const finalSpeed = Math.max(0.5, baseSpeed + speedVariation);\r\n\r\n                const particleParams: CreateParticleParams = {\r\n                    id: `emitter_particles_${emitterId}_${emitter.age}`,\r\n                    pos: {\r\n                        x: worldX + (Math.random() - 0.5) * 8,\r\n                        y: worldY + (Math.random() - 0.5) * 8\r\n                    },\r\n                    particleParams: emitter.particleType,\r\n                    direction: {\r\n                        x: Math.cos(angle) * finalSpeed,\r\n                        y: Math.sin(angle) * finalSpeed\r\n                    }\r\n                }\r\n                this.generateParticles(particleParams);\r\n\r\n                emitter.lastEmission = emitter.age;\r\n                emitter.emissionInterval = 120 + Math.random() * 180; // More consistent timing\r\n            }\r\n\r\n            // Remove expired emitters\r\n            if (emitter.age >= emitter.lifetime) {\r\n                const decalParams: DecalParams = {\r\n                    id: `emitter_decal_${emitterId}`,\r\n                    pos: {\r\n                        x: worldX,\r\n                        y: worldY\r\n                    },\r\n                    type: \"parametric\",\r\n                    parametric: this.decalsManager.decalsConfig.decals.blood\r\n                };\r\n                this.decalsManager.generateDecal(decalParams);\r\n\r\n                emittersToRemove.push(emitterId);\r\n            }\r\n        });\r\n\r\n        emittersToRemove.forEach(id => this.emitters.delete(id));\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Gore ]\r\n    //\r\n    /**\r\n     * Generates gore particles using the decals for the character object.\r\n     */\r\n    public generateGore(params: DeathDecal): void {\r\n        const gorePool = [...this.charConfig.characterDecals.default.gore]; // TODO: Get current pool for gore\r\n        for (let i = 0; i < params.gore.amount && gorePool.length > 0; i++) {\r\n            const goreAsset = this.utility.getRandomInArray(gorePool);\r\n            gorePool.splice(gorePool.indexOf(goreAsset), 1);\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const distance = this.utility.getRandomNum(0, params.radius);\r\n\r\n            const goreDecal: DeathStamp = {\r\n                type: 'gore',\r\n                src: goreAsset,\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x + Math.cos(angle) * distance,\r\n                        y: params.pos.y + Math.sin(angle) * distance\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2),\r\n                },\r\n                scale: this.utility.getRandomNum(0.65, 1.05)\r\n            };\r\n\r\n            const decalId = `death_gore_${params.ownerId}_${Date.now()}_${i}`;\r\n            this.stampGore(goreDecal);\r\n            this.decalsManager.dynamicDecals.set(decalId, {\r\n                params: null,\r\n                pos: {\r\n                    x: goreDecal.transform.pos.x,\r\n                    y: goreDecal.transform.pos.y\r\n                }\r\n            });\r\n        }\r\n\r\n        const bloodPool = [...this.charConfig.characterDecals.default.blood]; // TODO: Get current pool for blood\r\n        for (let i = 0; i < params.blood.amount && bloodPool.length > 0; i++) {\r\n            const bloodAsset = this.utility.getRandomInArray(bloodPool);\r\n            bloodPool.splice(bloodPool.indexOf(bloodAsset), 1);\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const distance = this.utility.getRandomNum(0, params.radius * 0.7);\r\n\r\n            const bloodDecal: DeathStamp = {\r\n                type: 'blood',\r\n                src: bloodAsset,\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x + Math.cos(angle) * distance,\r\n                        y: params.pos.y + Math.sin(angle) * distance\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2),\r\n                },\r\n                scale: this.utility.getRandomNum(1.25, 1.45)\r\n            };\r\n\r\n            const decalId = `death_blood_${params.ownerId}_${Date.now()}_${i}`;\r\n            this.stampGore(bloodDecal);\r\n            this.decalsManager.dynamicDecals.set(decalId, {\r\n                params: null,\r\n                pos: {\r\n                    x: bloodDecal.transform.pos.x,\r\n                    y: bloodDecal.transform.pos.y\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Persists gore on the decal canvas.\r\n     */\r\n    private stampGore(params: DeathStamp): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        let image = this.renderingManager.characterImages.get(params.src);\r\n\r\n        if (!image) {\r\n            image = new Image();\r\n            image.src = params.src;\r\n            this.renderingManager.characterImages.set(params.src, image);\r\n\r\n            if (!image.complete) {\r\n                image.onload = () => {\r\n                    this.stampGore(params);\r\n                };\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.translate(params.transform.pos.x, params.transform.pos.y);\r\n        this.ui.decalCtx.rotate(params.transform.rot);\r\n\r\n        const drawSize = 32 * params.scale;\r\n        this.ui.decalCtx.drawImage(\r\n            image,\r\n            -drawSize / 2,\r\n            -drawSize / 2,\r\n            drawSize,\r\n            drawSize\r\n        );\r\n\r\n        this.ui.decalCtx.restore();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Shrapnel ]\r\n    //\r\n    /**\r\n     * Creates shrapnel pieces and sends network message with Shrapnel data.\r\n     */\r\n    public spawnShrapnel(params: Shrapnel): void {\r\n        const pieces: ShrapnelPiece[] = [];\r\n\r\n        // Generate all pieces locally\r\n        for (let i = 0; i < params.amount; i++) {\r\n            const angle = this.utility.getRandomNum(0, Math.PI * 2);\r\n            const speed = this.utility.getRandomNum(params.speed.min, params.speed.max);\r\n            const lifetime = this.utility.getRandomNum(params.lifetime.min, params.lifetime.max);\r\n            const size = this.utility.getRandomNum(params.size.min, params.size.max);\r\n            const torque = this.utility.getRandomNum(params.torque.min, params.torque.max) * (Math.PI / 180); // Convert radians > deg\r\n\r\n            const piece: ShrapnelPiece = {\r\n                id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n                image: params.images[i], // Already randomly selected in triggerUnique\r\n                transform: {\r\n                    pos: {\r\n                        x: params.pos.x,\r\n                        y: params.pos.y\r\n                    },\r\n                    rot: this.utility.getRandomNum(0, Math.PI * 2), // Random start rot\r\n                },\r\n                velocity: {\r\n                    x: Math.cos(angle) * speed,\r\n                    y: Math.sin(angle) * speed\r\n                },\r\n                rotationSpeed: torque, // Random spin\r\n                size: size,\r\n                age: 0,\r\n                lifetime: lifetime,\r\n                ownerId: this.userId,\r\n                damage: params.damage\r\n            };\r\n\r\n            pieces.push(piece);\r\n            this.shrapnel.set(piece.id, piece);\r\n        }\r\n\r\n        // Send ONE message with all pieces\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'shrapnel-spawn',\r\n            pieces: pieces\r\n        }));\r\n\r\n        console.log(`Spawned ${pieces.length} shrapnel pieces`);\r\n    }\r\n\r\n    /**\r\n     * Generates shrapnel baed on received network message 'shrapnel-spawn' data.\r\n     */\r\n    public generateShrapnel(params: ShrapnelPiece[]): void {\r\n        params.forEach(piece => {\r\n            this.shrapnel.set(piece.id, piece);\r\n        });\r\n\r\n        console.log(`Received ${params.length} shrapnel pieces from network`);\r\n    }\r\n\r\n    /**\r\n     * When shrapnel exists, handles updating of each piece via Client udpate loop.\r\n     */\r\n    public updateShrapnel(delta: number): void {\r\n        if (this.shrapnel.size === 0) return;\r\n\r\n        const shrapnelToRemove: string[] = [];\r\n\r\n        this.shrapnel.forEach((piece, id) => {\r\n            // Update physics\r\n            piece.transform.pos.x += piece.velocity.x * delta;\r\n            piece.transform.pos.y += piece.velocity.y * delta;\r\n            piece.transform.rot += piece.rotationSpeed * delta;\r\n            piece.age += 16.67 * delta;\r\n\r\n            // Apply friction\r\n            // TODO: Add world friction\r\n            piece.velocity.x *= 0.98;\r\n            piece.velocity.y *= 0.98;\r\n\r\n            // Only owner checks collisions and deals damage\r\n            if (piece.ownerId === this.userId) {\r\n                // Check collision with all players\r\n                this.playerState.players.forEach((player, playerId) => {\r\n                    if (player.stats.health.value > 0) {\r\n                        const dx = piece.transform.pos.x - player.transform.pos.x;\r\n                        const dy = piece.transform.pos.y - player.transform.pos.y;\r\n                        const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                        // Collision detection (using player collider + shrapnel size for padding)\r\n                        if (distance <= this.collisionsManager.getPlayerCollider(player, piece.size)) {\r\n                            const actualDamage = Math.max(0, piece.damage - player.stats.defense);\r\n                            const newHealth = Math.max(0, player.stats.health.value - actualDamage);\r\n                            player.stats.health.value = newHealth;\r\n\r\n                            // Remove this shrapnel piece after hit\r\n                            shrapnelToRemove.push(id);\r\n                            console.log(`Shrapnel hit ${playerId} for ${piece.damage} damage`);\r\n\r\n                            const params: PlayerHitParams = {\r\n                                target: player,\r\n                                shooterId: this.userId,\r\n                                damage: piece.damage,\r\n                                newHealth: newHealth,\r\n                                source: piece,\r\n                                wasKill: newHealth <= 0\r\n                            }\r\n                            window.dispatchEvent(new CustomEvent(\"customEvent_playerHitRelay\", { detail: { params } }));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Remove if lifetime expired or out of bounds\r\n            if (piece.age >= piece.lifetime ||\r\n                piece.transform.pos.x < 0 || piece.transform.pos.x > CANVAS.WIDTH ||\r\n                piece.transform.pos.y < 0 || piece.transform.pos.y > CANVAS.HEIGHT) {\r\n\r\n                // Stamp as decal if died in bounds\r\n                if (piece.transform.pos.x >= 0 && piece.transform.pos.x <= CANVAS.WIDTH &&\r\n                    piece.transform.pos.y >= 0 && piece.transform.pos.y <= CANVAS.HEIGHT) {\r\n                    this.stampShrapnel(piece);\r\n                }\r\n\r\n                shrapnelToRemove.push(id);\r\n            }\r\n        });\r\n\r\n        // Remove dead shrapnel\r\n        shrapnelToRemove.forEach(id => this.shrapnel.delete(id));\r\n    }\r\n\r\n    /**\r\n     * Draws the moving shrapnel to the canvas for rendering.\r\n     */\r\n    public drawShrapnel(): void {\r\n        if (!this.ui.ctx || this.shrapnel.size === 0) return;\r\n\r\n        this.shrapnel.forEach(piece => {\r\n            if (!this.ui.ctx) return;\r\n\r\n            let image = this.renderingManager.characterImages.get(piece.image);\r\n\r\n            if (!image) {\r\n                image = new Image();\r\n                image.src = piece.image;\r\n                this.renderingManager.characterImages.set(piece.image, image);\r\n\r\n                if (!image.complete) { return; }\r\n            }\r\n\r\n            if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.translate(piece.transform.pos.x, piece.transform.pos.y);\r\n            this.ui.ctx.rotate(piece.transform.rot);\r\n\r\n            this.ui.ctx.drawImage(\r\n                image,\r\n                -piece.size / 2,\r\n                -piece.size / 2,\r\n                piece.size,\r\n                piece.size\r\n            );\r\n\r\n            this.ui.ctx.restore();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stamps dead shrapnel to the decal canvas to persist visually.\r\n     */\r\n    private stampShrapnel(params: ShrapnelPiece): void {\r\n        if (!this.ui.decalCtx) return;\r\n\r\n        let image = this.renderingManager.characterImages.get(params.image);\r\n        if (!image || !image.complete || image.naturalWidth === 0) return;\r\n\r\n        this.ui.decalCtx.save();\r\n        this.ui.decalCtx.translate(params.transform.pos.x, params.transform.pos.y);\r\n        this.ui.decalCtx.rotate(params.transform.rot);\r\n\r\n        this.ui.decalCtx.drawImage(\r\n            image,\r\n            -params.size / 2,\r\n            -params.size / 2,\r\n            params.size,\r\n            params.size\r\n        );\r\n\r\n        this.ui.decalCtx.restore();\r\n\r\n        // Register decal\r\n        this.decalsManager.dynamicDecals.set(`shrapnel_${params.id}`, {\r\n            params: null,\r\n            pos: {\r\n                x: params.transform.pos.x,\r\n                y: params.transform.pos.y\r\n            }\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { AMMO_BOX, CANVAS, GAME, UI } from \"./Config\";\r\nimport { CharacterLayer, Projectile, RenderCharacterParams } from \"./Types\";\r\n\r\nimport { Animator } from \"./Animator\";\r\nimport { CharacterManager } from \"./CharacterManager\";\r\nimport { ObjectsManager } from \"./ObjectsManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { LobbyManager } from \"./LobbyManager\";\r\nimport { PlayerConfig } from \"./player/PlayerConfig\";\r\n\r\nexport class RenderingManager {\r\n    public characterImages: Map<string, HTMLImageElement> = new Map();\r\n    public ammoBoxImages: { [layer: string]: HTMLImageElement } = {};\r\n\r\n    constructor(\r\n        private animator: Animator,\r\n        private charManager: CharacterManager,\r\n        private lobbyManager: LobbyManager,\r\n        private objectsManager: ObjectsManager,\r\n        private playerConfig: PlayerConfig,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n    ) {\r\n        this.initEventListeners();\r\n    }\r\n\r\n    // #region [ General ]\r\n    //\r\n    /**\r\n     * Clear all canvas rendering context in the game.\r\n     * \r\n     * / OR /\r\n     * \r\n     * Pass the specific CanvasRenderingContext2D to clear.\r\n     */\r\n    public clearCtx(customCtx?: CanvasRenderingContext2D): void {\r\n        if (customCtx) {\r\n            customCtx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n            return;\r\n        }\r\n\r\n        if (!this.ui.decalCtx || !this.ui.ctx) return;\r\n\r\n        this.ui.ctx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n        this.ui.decalCtx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Character ]\r\n    //\r\n    /**\r\n     * Draws the corresponding character layers defined in the rig to create the player character.\r\n     */\r\n    public drawCharacter(params: RenderCharacterParams): void {\r\n        const { player, context } = params;\r\n        if (!context || !player) return;\r\n\r\n        if ('stats' in player) {\r\n            if (player.stats.health.value <= 0) return;\r\n            this.renderUniqueEffects(params);\r\n            if (player.flags.hidden) return;\r\n\r\n            context.fillStyle = UI.TEXT_COLOR;\r\n            context.font = UI.FONT;\r\n            context.textAlign = 'center';\r\n\r\n            const displayName = player.id === this.userId ? 'You' : player.id.substring(0, 6);\r\n            context.fillText(\r\n                displayName,\r\n                player.transform.pos.x,\r\n                player.transform.pos.y - this.playerConfig.default.data.idOffset\r\n            );\r\n        }\r\n\r\n        // Main player\r\n        this.drawCharacterLayers(params);\r\n    }\r\n    /**\r\n     * Entrypoint for rendering of all character layers.\r\n     */\r\n    private drawCharacterLayers(params: RenderCharacterParams): void {\r\n        const player = params.player;\r\n        if (!player) return;\r\n\r\n        this.drawCharacterLayer(params, 'BODY', player.rig.body);\r\n        this.drawCharacterLayer(params, 'WEAPON', player.rig.weapon);\r\n        this.drawCharacterLayer(params, 'HEAD', player.rig.head);\r\n        this.drawCharacterLayer(params, 'HEADWEAR', player.rig.headwear);\r\n\r\n        if ('stats' in player) { this.drawUpgradeLayers(params); }\r\n    }\r\n\r\n    /**\r\n     * Retrieves character assets and draws each layer using drawCharacterPart.\r\n     */\r\n    private drawCharacterLayer(params: RenderCharacterParams, layer: CharacterLayer, variant: string): void {\r\n        if (!params) return;\r\n\r\n        const assets = this.charManager.getCharacterAsset(layer, variant);\r\n\r\n        if (typeof assets === 'string') {\r\n            this.drawCharacterPart(params, assets, layer);\r\n        }\r\n        else if (Array.isArray(assets)) {\r\n            assets.forEach((assetPath, index) => {\r\n                this.drawCharacterPart(params, assetPath, layer, index);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the actual rendering for all player parts on each layer.\r\n     */\r\n    private drawCharacterPart(params: RenderCharacterParams, assetPath: string, partType: CharacterLayer, partIndex?: number): void {\r\n        const { context, player } = params;\r\n        if (!context || !player) return;\r\n\r\n        let image = this.characterImages.get(assetPath);\r\n\r\n        if (!image) {\r\n            image = new Image();\r\n            image.src = assetPath;\r\n            this.characterImages.set(assetPath, image);\r\n\r\n            image.onload = () => { this.renderLobbyPlayer(); };\r\n\r\n            if (!image.complete) return;\r\n        }\r\n\r\n        if (!image.complete || image.naturalWidth === 0) return;\r\n\r\n        // Determine draw size based on player type\r\n        const drawSize = 'stats' in player\r\n            ? GAME.CHARACTER_SIZE * (player.stats.size / GAME.CHARACTER_SIZE)\r\n            : GAME.CHARACTER_SIZE * 0.35;\r\n\r\n        // Get position - lobby players might not have transform\r\n        const posX = player.transform?.pos?.x ?? 0;\r\n        const posY = player.transform?.pos?.y ?? 0;\r\n\r\n        context.save();\r\n\r\n        // Only apply rotation and animation for full players\r\n        if ('stats' in player && player.transform.rot !== undefined) {\r\n            const animationId = `${player.id}_${partType}_${partIndex || 0}`;\r\n            const animationOffset = this.animator.characterOffsets?.get(animationId) || { x: 0, y: 0 };\r\n\r\n            context.translate(posX, posY);\r\n            context.rotate(player.transform.rot);\r\n            context.translate(animationOffset.x, animationOffset.y);\r\n\r\n            context.drawImage(\r\n                image,\r\n                -drawSize / 2,\r\n                -drawSize / 2,\r\n                drawSize,\r\n                drawSize\r\n            );\r\n        } else {\r\n            // Simple centered draw for lobby players\r\n            context.drawImage(\r\n                image,\r\n                posX - drawSize / 2,\r\n                posY - drawSize / 2,\r\n                drawSize,\r\n                drawSize\r\n            );\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Uniques & Upgrades ]\r\n    //\r\n    /**\r\n     * Draws the equipment and unique upgrades that have a character layer visual component.\r\n     */\r\n    private drawUpgradeLayers(params: RenderCharacterParams): void {\r\n        const { player } = params;\r\n\r\n        if ('unique' in player) {\r\n            // Check unique upgrades\r\n            player.unique.forEach(uniqueName => {\r\n                const assetPath = this.charManager.getUpgradeVisual(uniqueName);\r\n                if (assetPath) {\r\n                    this.drawCharacterPart(params, assetPath, 'UPGRADES');\r\n                }\r\n            });\r\n\r\n            // Check equipment upgrades\r\n            player.equipment.forEach(equipmentName => {\r\n                const assetPath = this.charManager.getUpgradeVisual(equipmentName);\r\n                if (assetPath) {\r\n                    this.drawCharacterPart(params, assetPath, 'UPGRADES');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called in main rendering loop, used to override standard rendering when unique effects temporarily need to.\r\n     */\r\n    private renderUniqueEffects(params: RenderCharacterParams): void {\r\n        const { player } = params;\r\n        if (!player) return;\r\n\r\n        if ('unique' in player) {\r\n            if (player.unique.includes(\"spectral_image\")) {\r\n                this.renderSpectralImage(params);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the chosen player as a spectral image.\r\n     */\r\n    private renderSpectralImage(params: RenderCharacterParams): void {\r\n        const { context, player } = params;\r\n        if (!context || !player || !('stats' in player)) return;\r\n\r\n        // Static ghost memory (attached per instance)\r\n        const staticGhosts = (this as any)._spectralGhosts ??= {\r\n            lastHidden: new Map<string, boolean>(),\r\n            flashes: [] as {\r\n                x: number;\r\n                y: number;\r\n                t: number;\r\n                type: 'start' | 'end';\r\n                playerId: string;\r\n            }[]\r\n        };\r\n\r\n        const now = Date.now();\r\n        const wasHidden = staticGhosts.lastHidden.get(player.id) ?? false;\r\n        const isHidden = player.flags.hidden;\r\n\r\n        // Detect start of dash (flash out)\r\n        if (!wasHidden && isHidden) {\r\n            staticGhosts.flashes.push({\r\n                x: player.transform.pos.x,\r\n                y: player.transform.pos.y,\r\n                t: now,\r\n                type: 'start',\r\n                playerId: player.id\r\n            });\r\n        }\r\n\r\n        // Detect end of dash (flash in)\r\n        if (wasHidden && !isHidden) {\r\n            staticGhosts.flashes.push({\r\n                x: player.transform.pos.x,\r\n                y: player.transform.pos.y,\r\n                t: now,\r\n                type: 'end',\r\n                playerId: player.id\r\n            });\r\n        }\r\n\r\n        staticGhosts.lastHidden.set(player.id, isHidden);\r\n\r\n        // Render ghost flashes\r\n        for (const ghost of staticGhosts.flashes) {\r\n            if (ghost.playerId !== player.id) continue;\r\n            const age = now - ghost.t;\r\n            if (age > player.actions.dash.time) continue;\r\n\r\n            const alpha = ghost.type === 'start'\r\n                ? 1 - (age / player.actions.dash.time)\r\n                : (age / player.actions.dash.time);\r\n\r\n            context.save();\r\n\r\n            // Invert-style effect via difference + high saturation\r\n            context.globalAlpha = alpha * 0.8;\r\n            context.globalCompositeOperation = 'difference';\r\n            context.filter = 'saturate(100) contrast(2)';\r\n\r\n            const ghostPlayer = {\r\n                ...player,\r\n                transform: {\r\n                    ...player.transform,\r\n                    pos: { x: ghost.x, y: ghost.y }\r\n                }\r\n            };\r\n\r\n            this.drawCharacterLayers({\r\n                player: ghostPlayer,\r\n                context: context\r\n            });\r\n            context.restore();\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Lobby Rendering ]\r\n    //\r\n    /**\r\n     * Renders lobby player in customization canvas via character rendering functions.\r\n     */\r\n    private renderLobbyPlayer(): void {\r\n        if (!this.lobbyManager.inLobby) return;\r\n\r\n        const myLobbyPlayer = this.lobbyManager.lobbyPlayers.get(this.userId);\r\n        if (!myLobbyPlayer || !this.ui.charCustomizeCanvas) return;\r\n\r\n        const ctx = this.ui.charCustomizeCanvas.getContext('2d');\r\n        if (!ctx) return;\r\n\r\n        ctx.clearRect(0, 0, this.ui.charCustomizeCanvas.width, this.ui.charCustomizeCanvas.height);\r\n\r\n        this.drawCharacter({\r\n            player: myLobbyPlayer,\r\n            context: ctx\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Objects ]\r\n    //\r\n    /**\r\n     * Draws object entities on the canvas.\r\n     */\r\n    public drawObjects(): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        //TODO: Use this function to draw all 'objects' in the scene.\r\n\r\n        // Ammo Boxes\r\n        this.objectsManager.ammoBoxes.forEach(ammoBox => {\r\n            if (!this.ui.ctx) return;\r\n\r\n            // Load and cache images\r\n            if (!this.ammoBoxImages) this.ammoBoxImages = {};\r\n            const layers: (keyof typeof AMMO_BOX)[] = ['BASE', 'BULLETS', 'LID'];\r\n            layers.forEach(layer => {\r\n                if (!this.ammoBoxImages[layer]) {\r\n                    const img = new Image();\r\n                    img.src = AMMO_BOX[layer];\r\n                    this.ammoBoxImages[layer] = img;\r\n                }\r\n            });\r\n\r\n            if (!layers.every(layer => this.ammoBoxImages[layer]?.complete && this.ammoBoxImages[layer]?.naturalWidth > 0)) return;\r\n\r\n            const scale = 35;\r\n            const x = ammoBox.transform.pos.x;\r\n            const y = ammoBox.transform.pos.y;\r\n\r\n            // Update lid physics if open\r\n            if (ammoBox.isOpen) {\r\n                ammoBox.lid.velocity.x *= 0.85;\r\n                ammoBox.lid.velocity.y *= 0.85;\r\n                ammoBox.lid.torque *= 0.85;\r\n\r\n                ammoBox.lid.pos.x += ammoBox.lid.velocity.x;\r\n                ammoBox.lid.pos.y += ammoBox.lid.velocity.y;\r\n                ammoBox.lid.rot += ammoBox.lid.torque;\r\n            }\r\n\r\n            this.ui.ctx.save();\r\n            this.ui.ctx.translate(x, y);\r\n            this.ui.ctx.rotate(ammoBox.transform.rot || 0);\r\n\r\n            // Draw body\r\n            this.ui.ctx.drawImage(this.ammoBoxImages['BASE'], -scale / 2, -scale / 2, scale, scale);\r\n\r\n            // Draw bullets only if NOT open\r\n            if (!ammoBox.isOpen) {\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['BULLETS'], -scale / 2, -scale / 2, scale, scale);\r\n                // Draw closed lid here\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['LID'], -scale / 2, -scale / 2, scale, scale);\r\n            }\r\n\r\n            this.ui.ctx.restore();\r\n\r\n            // Draw flying lid separately if open\r\n            if (ammoBox.isOpen) {\r\n                this.ui.ctx.save();\r\n                this.ui.ctx.translate(x + ammoBox.lid.pos.x, y + ammoBox.lid.pos.y);\r\n                this.ui.ctx.rotate((ammoBox.transform.rot || 0) + ammoBox.lid.rot);\r\n                this.ui.ctx.drawImage(this.ammoBoxImages['LID'], -scale / 2, -scale / 2, scale, scale);\r\n                this.ui.ctx.restore();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draws the rect of the projectile and renders it on the main canvas.\r\n     */\r\n    public drawProjectile(projectile: Projectile): void {\r\n        if (!this.ui.ctx) return;\r\n\r\n        // Calculate projectile direction\r\n        const speed = Math.sqrt(projectile.velocity.x * projectile.velocity.x + projectile.velocity.y * projectile.velocity.y);\r\n        const dirX = projectile.velocity.x / speed;\r\n        const dirY = projectile.velocity.y / speed;\r\n\r\n        // Calculate front and back points\r\n        const frontX = projectile.transform.pos.x + dirX * (projectile.length / 2);\r\n        const frontY = projectile.transform.pos.y + dirY * (projectile.length / 2);\r\n        const backX = projectile.transform.pos.x - dirX * (projectile.length / 2);\r\n        const backY = projectile.transform.pos.y - dirY * (projectile.length / 2);\r\n\r\n        // Draw the capsule body (rectangle)\r\n        this.ui.ctx.fillStyle = projectile.color;\r\n        this.ui.ctx.strokeStyle = projectile.color;\r\n        this.ui.ctx.lineWidth = projectile.size;\r\n        this.ui.ctx.lineCap = 'round';\r\n\r\n        this.ui.ctx.beginPath();\r\n        this.ui.ctx.moveTo(backX, backY);\r\n        this.ui.ctx.lineTo(frontX, frontY);\r\n        this.ui.ctx.stroke();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Events ]\r\n    //\r\n    private initEventListeners(): void {\r\n        window.addEventListener(\"customEvent_renderCharacter\", () => this.renderLobbyPlayer());\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { GAME } from \"./Config\";\r\n\r\nimport { GameState } from \"./GameState\";\r\nimport { LobbyManager } from \"./LobbyManager\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { UpgradeManager } from \"./UpgradeManager\";\r\nimport { UserInterface } from \"./UserInterface\";\r\nimport { Utility } from \"./Utility\";\r\nimport { WebsocketManager } from \"./WebsocketManager\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class RoomController {\r\n    constructor(\r\n        private gameState: GameState,\r\n        private lobbyManager: LobbyManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private upgradeManager: UpgradeManager,\r\n        private userId: string,\r\n        private utility: Utility,\r\n        private wsManager: WebsocketManager\r\n    ) { }\r\n\r\n    /**\r\n     * Calls updateDisplay to show the room specific controls.\r\n     */\r\n    public showRoomControls(): void {\r\n        this.ui.updateDisplay(this.lobbyManager, \"room\");\r\n    }\r\n\r\n    /**\r\n     * Creates a websocket connection on the server, and a room with the roomManager.\r\n     */\r\n    public hostRoom(): void {\r\n        if (!this.wsManager.getWebSocket()) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                const roomId = this.roomManager.createRoom();\r\n                if (!roomId) return;\r\n\r\n                this.playerState.isHost = true;\r\n\r\n                this.lobbyManager.showLobbyControls({\r\n                    lobby: this.lobbyManager,\r\n                    lobbyOptions: {\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    },\r\n                    myPlayer: this.playerState.myPlayer,\r\n                    roomId: roomId,\r\n                    userId: this.userId\r\n                });\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        } else {\r\n            const roomId = this.roomManager.createRoom();\r\n            if (!roomId) return;\r\n\r\n            this.playerState.isHost = true;\r\n\r\n            this.lobbyManager.showLobbyControls({\r\n                lobby: this.lobbyManager,\r\n                lobbyOptions: {\r\n                    maxPlayers: this.gameState.gameMaxPlayers,\r\n                    maxWins: this.gameState.gameMaxWins,\r\n                    isHost: this.playerState.isHost,\r\n                    privateRoom: this.roomManager.isPrivateRoom,\r\n                    upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                },\r\n                myPlayer: this.playerState.myPlayer,\r\n                roomId: roomId,\r\n                userId: this.userId\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Displays the room joining modal, and allows pasting of room code.\r\n     */\r\n    public joinRoom(): void {\r\n        this.ui.showJoinRoomModal((roomId: string) => {\r\n            this.joinRoomById(roomId);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Directly connect to a game with it's room id.\r\n     * \r\n     * Called by the room join modal.\r\n     */\r\n    private joinRoomById(roomId: string): void {\r\n        if (!roomId) return;\r\n        if (!this.wsManager.getWebSocket()) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                this.roomManager.joinRoom(roomId!);\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        } else {\r\n            this.roomManager.joinRoom(roomId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls quickplay endpoint on server to find a random open public room.\r\n     */\r\n    public quickPlay(): void {\r\n        fetch('/quickplay')\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('No available rooms');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                if (!this.wsManager.getWebSocket()) {\r\n                    this.wsManager.connectWebSocket();\r\n                    this.utility.safeTimeout(() => {\r\n                        this.roomManager.joinRoom(data.roomId);\r\n                    }, GAME.CONNECTION_TIMEOUT);\r\n                } else {\r\n                    this.roomManager.joinRoom(data.roomId);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (!this.ui.modal || !this.ui.modalConfirmButton || !this.ui.modalCancelButton ||\r\n                    !this.ui.modalContent || !this.ui.modalText || !this.ui.modalInput ||\r\n                    !this.ui.modalErrorDiv || !this.ui.modalButtons) return;\r\n\r\n                this.ui.modal.classList.remove('hidden');\r\n                this.ui.modalInput.style.display = 'none';\r\n                this.ui.modalErrorDiv.textContent = ' ';\r\n                this.ui.modalButtons.style.display = 'flex';\r\n                this.ui.modalCancelButton.style.display = 'none';\r\n\r\n                this.ui.modalText.textContent = 'No available games found.';\r\n\r\n                this.ui.modalConfirmButton.textContent = 'Confirm';\r\n                this.ui.modalConfirmButton.onclick = () => {\r\n                    if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalCancelButton ||\r\n                        !this.ui.modalText || !this.ui.modalConfirmButton) return;\r\n\r\n                    this.ui.modal.classList.add('hidden');\r\n                    this.ui.modalInput.style.display = 'flex';\r\n                    this.ui.modalText.textContent = 'Join Room';\r\n                    this.ui.modalCancelButton.style.display = 'flex';\r\n                    this.ui.modalConfirmButton.onclick = null;\r\n                };\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Called when leaving the current room - resets game state.\r\n     */\r\n    public leaveRoom(): void {\r\n        this.roomManager.leaveRoom();\r\n\r\n        window.dispatchEvent(new CustomEvent(\"customEvent_resetGameState\", {\r\n            detail: { resetType: \"Room\" }\r\n        }));\r\n\r\n        this.showRoomControls();\r\n    }\r\n\r\n    /**\r\n     * Used to check for a room link in the URL when loading the page.\r\n     */\r\n    public checkForRoomInURL(): void {\r\n        const roomId = this.getRoomIdFromURL();\r\n        if (roomId) {\r\n            this.wsManager.connectWebSocket();\r\n            this.utility.safeTimeout(() => {\r\n                this.roomManager.joinRoom(roomId);\r\n            }, GAME.CONNECTION_TIMEOUT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * [DO NOT CALL - Call checkForRoomInURL] Directly parses the room ID from the URL if one is found. \r\n     */\r\n    private getRoomIdFromURL(): string | null {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        return urlParams.get('room');\r\n    }\r\n\r\n    /**\r\n     * Gets the room ID contextually, and copies it to clipboard.\r\n     */\r\n    public copyRoomCode(): void {\r\n        // Get room ID from either lobby or game container\r\n        const roomId = this.lobbyManager.inLobby\r\n            ? this.ui.roomIdDisplay?.textContent\r\n            : this.ui.gameRoomIdDisplay?.textContent;\r\n\r\n        if (!roomId) return;\r\n\r\n        navigator.clipboard.writeText(roomId).then(() => {\r\n            if (!this.ui.modal || !this.ui.modalConfirmButton || !this.ui.modalCancelButton ||\r\n                !this.ui.modalContent || !this.ui.modalText || !this.ui.modalInput ||\r\n                !this.ui.modalErrorDiv || !this.ui.modalButtons) return;\r\n\r\n            this.ui.modal.classList.remove('hidden');\r\n            this.ui.modalInput.style.display = 'none';\r\n            this.ui.modalErrorDiv.textContent = ' ';\r\n            this.ui.modalButtons.style.display = 'flex';\r\n            this.ui.modalCancelButton.style.display = 'none';\r\n\r\n            this.ui.modalText.textContent = 'Room code copied!';\r\n            this.ui.modalConfirmButton.textContent = 'Confirm';\r\n\r\n            // Define the close function\r\n            const closeModal = () => {\r\n                if (!this.ui.modal || !this.ui.modalInput || !this.ui.modalCancelButton ||\r\n                    !this.ui.modalText || !this.ui.modalConfirmButton) return;\r\n\r\n                this.ui.modal.classList.add('hidden');\r\n                this.ui.modalInput.style.display = 'flex';\r\n                this.ui.modalText.textContent = 'Join Room';\r\n                this.ui.modalCancelButton.style.display = 'flex';\r\n                this.ui.modalConfirmButton.onclick = null;\r\n            };\r\n\r\n            this.ui.modalConfirmButton.onclick = closeModal;\r\n\r\n            // Auto-close after 3 seconds\r\n            this.utility.safeTimeout(() => {\r\n                if (this.ui.modal && !this.ui.modal.classList.contains('hidden')) {\r\n                    closeModal();\r\n                }\r\n            }, 3000);\r\n        }).catch(() => {\r\n            alert(\"Could not copy. Please copy manually.\");\r\n        });\r\n    }\r\n}","import { ROOM } from './Config';\r\nimport { RoomMessage } from './Types';\r\n\r\nimport { Utility } from './Utility';\r\n\r\nexport class RoomManager {\r\n  private currentRoom: string | null = null;\r\n  private ws: WebSocket | null = null;\r\n  private messageHandlers: ((message: RoomMessage) => void)[] = [];\r\n\r\n  public isPrivateRoom = false;\r\n\r\n  constructor(private userId: string, private utility: Utility) { }\r\n\r\n  /**\r\n   * Assigns the active WebSocket connection and sets up message handling.\r\n   */\r\n  public setWebSocket(ws: WebSocket): void {\r\n    this.ws = ws;\r\n    this.setupMessageHandler();\r\n  }\r\n\r\n  /**\r\n   * Creates a new room and automatically joins it as the host.\r\n   */\r\n  public createRoom(): string | null {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot create room: Not connected to server. Please refresh the page.');\r\n      return null;\r\n    }\r\n\r\n    const roomId = this.utility.generateUID(ROOM.ID_LENGTH, ROOM.ID_PREFIX);\r\n    this.joinRoom(roomId, true);\r\n    return roomId;\r\n  }\r\n\r\n  /**\r\n   * Joins an existing room or creates one if isHost is true.\r\n   */\r\n  public joinRoom(roomId: string, isHost: boolean = false): void {\r\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot join room: Not connected to server. Please refresh the page.');\r\n      return;\r\n    }\r\n\r\n    const message: RoomMessage = {\r\n      type: isHost ? 'create-room' : 'join-room',\r\n      roomId,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n    this.currentRoom = roomId;\r\n    this.utility.generateLink(roomId, 'room');\r\n  }\r\n\r\n  /**\r\n   * Leaves the current room and resets the client state.\r\n   */\r\n  public leaveRoom(): void {\r\n    if (!this.currentRoom || !this.ws) return;\r\n\r\n    const message: RoomMessage = {\r\n      type: 'leave-room',\r\n      roomId: this.currentRoom,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n    this.currentRoom = null;\r\n    window.history.pushState({}, '', window.location.origin);\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of the current active room.\r\n   */\r\n  public sendMessage(text: string): void {\r\n    if (!this.currentRoom || !this.ws) return;\r\n\r\n    if (this.ws.readyState !== WebSocket.OPEN) {\r\n      alert('Cannot send message: Not connected to server. Please refresh the page.');\r\n      return;\r\n    }\r\n\r\n    const message: RoomMessage = {\r\n      type: 'room-message',\r\n      roomId: this.currentRoom,\r\n      userId: this.userId,\r\n      message: text\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n  }\r\n\r\n  /**\r\n   * Sends an admin command from the frontend to backend.\r\n   */\r\n  public sendAdminCommand(command: string, key: string): void {\r\n    if (!this.ws) return;\r\n\r\n    const message = {\r\n      type: 'admin-command',\r\n      id: command,\r\n      key: key,\r\n      userId: this.userId\r\n    };\r\n\r\n    this.ws.send(JSON.stringify(message));\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of the current active room.\r\n   */\r\n  public getCurrentRoom(): string | null {\r\n    return this.currentRoom;\r\n  }\r\n\r\n  /**\r\n   * Generates a shareable link for the current room.\r\n   */\r\n  public getRoomLink(param?: string): string | null {\r\n    return this.currentRoom ? this.utility.generateLink(this.currentRoom, param) : null;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to handle incoming room messages.\r\n   */\r\n  public onMessage(handler: (message: RoomMessage) => void): void {\r\n    this.messageHandlers.push(handler);\r\n  }\r\n\r\n  /**\r\n   * Processes incoming WebSocket messages and dispatches them to all handlers.\r\n   */\r\n  private setupMessageHandler(): void {\r\n    if (!this.ws) return;\r\n\r\n    this.ws.onmessage = (event) => {\r\n      try {\r\n        const message: RoomMessage = JSON.parse(event.data);\r\n        this.messageHandlers.forEach(handler => handler(message));\r\n      } catch (error) {\r\n        // Handle plain text messages (backwards compatibility)\r\n        const plainMessage: RoomMessage = {\r\n          type: 'room-message',\r\n          userId: 'server',\r\n          message: event.data\r\n        };\r\n        this.messageHandlers.forEach(handler => handler(plainMessage));\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { GAME } from \"./Config\";\r\nimport { GameSettings } from \"./Types\";\r\n\r\nimport { CacheManager } from \"./CacheManager\";\r\nimport { AudioConfig } from \"./AudioConfig\";\r\n\r\nexport class SettingsManager {\r\n    private gameSettings: GameSettings\r\n\r\n    constructor(private audioConfig: AudioConfig, private cacheManager: CacheManager) {\r\n        this.gameSettings = this.initSettings();\r\n    }\r\n\r\n    /**\r\n     * Initializes default options when the game starts.\r\n     */\r\n    public initSettings(): GameSettings {\r\n        return { // [ IMPORTANT ] Keep track of the default game options here\r\n            audio: {\r\n                mixer: {\r\n                    master: this.audioConfig.mixer.master,\r\n                    interface: this.audioConfig.mixer.interface,\r\n                    music: this.audioConfig.mixer.music,\r\n                    sfx: this.audioConfig.mixer.sfx,\r\n                    voice: this.audioConfig.mixer.voice\r\n                }\r\n            },\r\n            controls: {\r\n                keybinds: {\r\n                    attack: GAME.CONTROLS.KEYBINDS.ATTACK,\r\n                    dash: GAME.CONTROLS.KEYBINDS.DASH,\r\n                    melee: GAME.CONTROLS.KEYBINDS.MELEE,\r\n                    moveDown: GAME.CONTROLS.KEYBINDS.MOVE_DOWN,\r\n                    moveLeft: GAME.CONTROLS.KEYBINDS.MOVE_LEFT,\r\n                    moveRight: GAME.CONTROLS.KEYBINDS.MOVE_RIGHT,\r\n                    moveUp: GAME.CONTROLS.KEYBINDS.MOVE_UP,\r\n                    reload: GAME.CONTROLS.KEYBINDS.RELOAD,\r\n                    sprint: GAME.CONTROLS.KEYBINDS.SPRINT,\r\n                },\r\n                gamepad: {\r\n                    attack: GAME.CONTROLS.GAMEPAD.ATTACK,\r\n                    dash: GAME.CONTROLS.GAMEPAD.DASH,\r\n                    deadzone: GAME.CONTROLS.GAMEPAD.DEADZONE,\r\n                    melee: GAME.CONTROLS.GAMEPAD.MELEE,\r\n                    reload: GAME.CONTROLS.GAMEPAD.RELOAD,\r\n                    sprint: GAME.CONTROLS.GAMEPAD.SPRINT\r\n                }\r\n            },\r\n            graphics: {\r\n                physics: {\r\n                    ammoReserves: GAME.GRAPHICS.PHYSICS.AMMORESERVES\r\n                },\r\n                renderBackgroundParticles: GAME.GRAPHICS.BACKGROUND_PARTICLES,\r\n                showStaticOverlay: GAME.GRAPHICS.STATIC_OVERLAY,\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the currently stored gameSettings.\r\n     */\r\n    public getSettings(): GameSettings { return this.gameSettings }\r\n\r\n    /**\r\n     * Recursively updates any setting(s) passed within the stored gameSettings.\r\n     */\r\n    public updateSettings(settings: any): void {\r\n        const merge = (target: any, source: any): void => {\r\n            for (const key in source) {\r\n                if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\r\n                    if (!target[key]) target[key] = {};\r\n                    merge(target[key], source[key]);\r\n                } else {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        };\r\n\r\n        merge(this.gameSettings, settings);\r\n        this.cacheManager.write('gameSettings', this.gameSettings);\r\n    }\r\n\r\n    /**\r\n     * Loads the currently cached gameSettings from the cacheManager.\r\n     */\r\n    public async loadSettings(): Promise<void> {\r\n        const cached = await this.cacheManager.read('gameSettings');\r\n        if (cached) {\r\n            this.gameSettings = cached;\r\n        }\r\n    }\r\n}","export const equipment = [\r\n    'switch'\r\n];","import { equipment } from './equipment';\r\nimport { resource } from './resource';\r\nimport { stats } from './stats';\r\nimport { unique } from './unique';\r\n\r\nexport const upgradeFiles = {\r\n    equipment,\r\n    resource,\r\n    stats,\r\n    unique\r\n};","export const resource = [\r\n    'carepackage'\r\n];","export const stats = [\r\n    'bioregulator',\r\n    'damagebuffer',\r\n    'hemoglobinsaturator',\r\n    'locomotionmodule'\r\n];","export const unique = [\r\n    'clustermodule',\r\n    'kineticbrain',\r\n    'muzzlesplitter',\r\n    'phoenixmodule',\r\n    'projectilearray',\r\n    'spatialtargeting',\r\n    'spectralimage'\r\n];","import { Player, Upgrade, UpgradeParams, UpgradeRarity, UpgradeType } from './Types';\r\n\r\nimport { upgradeFiles } from './upgrades';\r\n\r\nimport { UserInterface } from './UserInterface';\r\nimport { Utility } from './Utility';\r\n\r\nimport { PlayerState } from './player/PlayerState';\r\nimport { PlayerConfig } from './player/PlayerConfig';\r\n\r\nexport class UpgradeManager {\r\n    public takenUniques = new Set<string>(); // Pool of uniques already taken by players during this session\r\n    public upgradesCompleted = new Set<string>(); // Tracks round end upgrade progress\r\n\r\n    public isUpgradesEnabled = true;\r\n\r\n    private rarityConfig = {\r\n        [UpgradeRarity.COMMON]: {\r\n            weight: 35,\r\n            color: '#7e7e7e'\r\n        },\r\n        [UpgradeRarity.UNCOMMON]: {\r\n            weight: 20,\r\n            color: '#61b6d5'\r\n        },\r\n        [UpgradeRarity.SPECIAL]: {\r\n            weight: 15,\r\n            color: '#58d688'\r\n        },\r\n        [UpgradeRarity.SUPERIOR]: {\r\n            weight: 12,\r\n            color: '#ffc233'\r\n        },\r\n        [UpgradeRarity.RARE]: {\r\n            weight: 8,\r\n            color: '#0077ff'\r\n        },\r\n        [UpgradeRarity.EXCEPTIONAL]: {\r\n            weight: 5,\r\n            color: '#00ff62'\r\n        },\r\n        [UpgradeRarity.LEGENDARY]: {\r\n            weight: 2.5,\r\n            color: '#f6ff00'\r\n        },\r\n        [UpgradeRarity.MYTHICAL]: {\r\n            weight: 1.5,\r\n            color: '#ff0000'\r\n        },\r\n        [UpgradeRarity.ENLIGHTENED]: {\r\n            weight: 0.9,\r\n            color: '#9500ff'\r\n        },\r\n        [UpgradeRarity.HOLY]: {\r\n            weight: 0.1,\r\n            color: '#ff00f7'\r\n        }\r\n    };\r\n\r\n    public upgrades: Upgrade[] = []\r\n\r\n    constructor(\r\n        private playerConfig: PlayerConfig,\r\n        private playerState: PlayerState,\r\n        private ui: UserInterface,\r\n        private utility: Utility\r\n    ) { \r\n        this.initUpgrades();\r\n    }\r\n\r\n    /**\r\n     * Initializes upgrades[] by importing the upgradeFiles from the index.ts in the upgrades folder.\r\n     */\r\n    private initUpgrades(): void {\r\n        const params: UpgradeParams = {\r\n            playerState: this.playerState,\r\n            ui: this.ui,\r\n            utility: this.utility\r\n        };\r\n\r\n        upgradeFiles.equipment.forEach(filename => {\r\n            const upgrade = require(`./upgrades/equipment/${filename}/${filename}`).create(params);\r\n            this.upgrades.push(upgrade);\r\n        });\r\n\r\n        upgradeFiles.resource.forEach(filename => {\r\n            const upgrade = require(`./upgrades/resource/${filename}/${filename}`).create(params);\r\n            this.upgrades.push(upgrade);\r\n        });\r\n\r\n        upgradeFiles.stats.forEach(filename => {\r\n            const upgrade = require(`./upgrades/stats/${filename}/${filename}`).create(params);\r\n            this.upgrades.push(upgrade);\r\n        });\r\n\r\n        upgradeFiles.unique.forEach(filename => {\r\n            const upgrade = require(`./upgrades/unique/${filename}/${filename}`).create(params);\r\n            this.upgrades.push(upgrade);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a selected amount of upgrades for a specific player in the game.\r\n     * \r\n     * Used to display upgrades for all round losers after brief roud-end pause.\r\n     */\r\n    public getUpgrades(count: number, player: Player): Upgrade[] {\r\n        // Filter available upgrades based on type restrictions\r\n        const availableUpgrades = this.upgrades.filter(upgrade => {\r\n            // Check if unique upgrade has already been taken globally\r\n            if (upgrade.unique && this.takenUniques.has(upgrade.id)) {\r\n                return false;\r\n            }\r\n\r\n            // Check if equipment is already owned by this player\r\n            if (upgrade.type === UpgradeType.EQUIPMENT && player.equipment.includes(upgrade.id)) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        // Weighted random selection using rarity config\r\n        const selected: Upgrade[] = [];\r\n\r\n        for (let i = 0; i < Math.min(count, availableUpgrades.length); i++) {\r\n            if (availableUpgrades.length === 0) break;\r\n\r\n            // Calculate weighted random selection using this.rarityConfig\r\n            const totalWeight = availableUpgrades.reduce((sum, upgrade) => {\r\n                return sum + this.getRarityWeight(upgrade.rarity);\r\n            }, 0);\r\n\r\n            let random = Math.random() * totalWeight;\r\n            let selectedUpgrade: Upgrade | null = null;\r\n\r\n            for (const upgrade of availableUpgrades) {\r\n                random -= this.getRarityWeight(upgrade.rarity);\r\n                if (random <= 0) {\r\n                    selectedUpgrade = upgrade;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (selectedUpgrade) {\r\n                selected.push(selectedUpgrade);\r\n                // Remove from available pool to prevent duplicates in this selection\r\n                const index = availableUpgrades.indexOf(selectedUpgrade);\r\n                availableUpgrades.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        return selected;\r\n    }\r\n\r\n    /**\r\n     * Applies a specific upgrade to a specific player by mutating their myPlayer object.\r\n     */\r\n    public applyUpgrade(upgradeId: string, player: Player): boolean {\r\n        const upgrade = this.upgrades.find(u => u.id === upgradeId);\r\n        if (!upgrade) return false;\r\n\r\n        // Double-check restrictions\r\n        if (upgrade.unique && this.takenUniques.has(upgradeId)) {\r\n            console.warn(`Unique upgrade ${upgradeId} already taken globally`);\r\n            return false;\r\n        }\r\n\r\n        if (upgrade.type === UpgradeType.EQUIPMENT && this.hasEquipment(player, upgradeId)) {\r\n            console.warn(`Equipment ${upgradeId} already owned by player`);\r\n            return false;\r\n        }\r\n\r\n        // Track unique upgrades globally\r\n        if (upgrade.unique) {\r\n            this.takenUniques.add(upgradeId);\r\n        }\r\n\r\n        // Apply the upgrade to the player object\r\n        upgrade.func(player);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes a unique upgrade from the global pool.\r\n     * \r\n     * This process involved adding the unique item to the client's takenUniques array.\r\n     * \r\n     * Network message 'upgrade-taken' broadcasts this to all players.\r\n     */\r\n    public removeUpgradeFromPool(upgradeId: string): void {\r\n        this.takenUniques.add(upgradeId);\r\n    }\r\n\r\n    /**\r\n     * Resets the global uniques pool to a clean slate.\r\n     */\r\n    public resetUpgrades(player: Player): void {\r\n        this.takenUniques.clear();\r\n\r\n        player.equipment = this.playerConfig.default.equipment;\r\n        player.unique = this.playerConfig.default.unique;\r\n    }\r\n\r\n    // #region [ Helpers ]\r\n    //\r\n    /**\r\n     * Returns boolean based on if the selected player has a specific equipment piece or not.\r\n     */\r\n    public hasEquipment(player: Player, equipmentId: string): boolean {\r\n        return player.equipment.includes(equipmentId);\r\n    }\r\n\r\n    /**\r\n     * Returns boolean based on if the selected player has a specific unique item or not.\r\n     */\r\n    private hasUnique(player: Player, uniqueId: string): boolean {\r\n        return player.unique.includes(uniqueId);\r\n    }\r\n\r\n    /**\r\n     * Gets the color associated with a specific rarity.\r\n     */\r\n    private getRarityColor(rarity: UpgradeRarity): string {\r\n        return this.rarityConfig[rarity].color;\r\n    }\r\n\r\n    /**\r\n     * Gets the weight of a specific rarity.\r\n     */\r\n    private getRarityWeight(rarity: UpgradeRarity): number {\r\n        return this.rarityConfig[rarity].weight;\r\n    }\r\n}\r\n\r\n/**\r\n Upgrade Ideas:\r\n ionic compound\r\n randomly chance to combine all nProjeciles into one\r\n explosion on dash\r\n while sprinting, luck doubled\r\n bullet trails\r\n projectile with padding on sides = projectiles that are detonated on reload\r\n on death respawn as 1hp ghost who can melee with .25s invul\r\n chemistry system\r\n volatile upgrades\r\n\r\n on hit, chance to instakill player, destroy one of your equipment, only trigger if enemies damage would kill you\r\n - one time use, destroys itself and another upgrade\r\n \r\n > [ Stats ]\r\n  - Size -- / Speed ++\r\n  - Damage ++ / Buffer ++\r\n  - \r\n > [ Persistent ]\r\n  - Projectile burst into more projectiles on non-player hit.\r\n  - Dash becomes teleport but uses twice as much stamina.\r\n  - Switch, unlocking further firing modes \r\n > [ Luck Based ]\r\n  - Explosive\r\n    > explode on hit\r\n    > stick, then explode after timer\r\n    > only explode on player hit\r\n  - Fire\r\n    > leave behind a flame on ground hit that persists and does damage for some time\r\n    > burn player on hit for timer\r\n  - Oil\r\n    > leave oil puddles on hit, flammable, oil on fire persists much longer\r\n  - Poison\r\n    > decrease player health gradually for timer on player hit\r\n    > leave pool of poison on ground for timer\r\n    > spray poison out on ground hit\r\n  - Bounce\r\n    > chance for projectile to bounce\r\n  - Orbital Laser\r\n    > chance to spawn cluster of lasers on non-boundary hit\r\n*/","import { ReserveBulletParticle } from \"../Types\";\r\n\r\nimport { SettingsManager } from \"../SettingsManager\";\r\nimport { UserInterface } from \"../UserInterface\";\r\nimport { Utility } from \"../Utility\";\r\n\r\nexport class AmmoReservesUIController {\r\n    private ammoReserveIcon: HTMLImageElement | null = null;\r\n    private projectileIcon: HTMLImageElement | null = null;\r\n\r\n    public reserveBulletParticles: ReserveBulletParticle[] = [];\r\n\r\n    constructor(\r\n        private settings: SettingsManager,\r\n        private ui: UserInterface,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // [ Ammo Reserve Canvas ]\r\n    //\r\n    /**\r\n     * Initializes the ammo reserve canvas in the HUD.\r\n     */\r\n    public initAmmoReserveCanvas(): void { // TODO: Unify where UI element references are stored\r\n        this.ammoReserveIcon = new Image();\r\n        this.ammoReserveIcon.src = '/assets/img/icon/inventory/ammobox.png';\r\n        this.ammoReserveIcon.onload = () => {\r\n            this.renderAmmoReserves();\r\n        };\r\n\r\n        this.projectileIcon = new Image();\r\n        this.projectileIcon.src = '/assets/img/icon/inventory/9mm.png';\r\n\r\n        // Start physics loop if it is enabled in the user's prefs\r\n        if (this.settings.getSettings().graphics.physics.ammoReserves) {\r\n            requestAnimationFrame(() => this.updateAmmoReservePhysics());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When picking up ammo, this function spawns the casings in the player's ammo reserve UI.\r\n     */\r\n    public spawnAmmoInReserveUI(amount: number = 1): void {\r\n        if (!this.ui.ammoReservesCtx || !this.projectileIcon) return;\r\n\r\n        const physicsEnabled = this.settings.getSettings().graphics.physics.ammoReserves;\r\n\r\n        const spawnDelay = 100;\r\n        const { collisionHeight, collisionWidth, collisionX, collisionY } = this.getAmmoReserveCollisionZone();\r\n\r\n        const scale = 0.25;\r\n        const bulletWidth = 11 * scale;\r\n        const bulletHeight = 28 * scale;\r\n\r\n        for (let i = 0; i < amount; i++) {\r\n            this.utility.safeTimeout(() => {\r\n                if (physicsEnabled) {\r\n                    // Physics mode: spawn with velocity from right side\r\n                    const x = collisionX + collisionWidth;\r\n                    const y = collisionY + collisionHeight / 2;\r\n                    const speed = 2 + Math.random() * 8;\r\n                    const angle = (Math.random() - 0.5) * (Math.PI / 3);\r\n                    const vx = Math.cos(angle) * speed;\r\n                    const vy = Math.sin(angle) * speed;\r\n                    const rotation = Math.random() * Math.PI * 2;\r\n                    const torque = (Math.random() - 0.5) * 0.1;\r\n\r\n                    this.reserveBulletParticles.push({\r\n                        transform: {\r\n                            pos: { x, y },\r\n                            rot: rotation,\r\n                        },\r\n                        velocity: { x: vx, y: vy },\r\n                        torque,\r\n                        width: bulletWidth,\r\n                        height: bulletHeight\r\n                    });\r\n                } else {\r\n                    // Static mode: spawn at random position, no velocity\r\n                    const x = collisionX + Math.random() * collisionWidth;\r\n                    const y = collisionY + Math.random() * collisionHeight;\r\n                    const rotation = Math.random() * Math.PI * 2;\r\n\r\n                    this.reserveBulletParticles.push({\r\n                        transform: {\r\n                            pos: { x, y },\r\n                            rot: rotation,\r\n                        },\r\n                        velocity: { x: 0, y: 0 },\r\n                        torque: 0,\r\n                        width: bulletWidth,\r\n                        height: bulletHeight\r\n                    });\r\n                    this.renderAmmoReserves(); // Render static bullet immediately\r\n                }\r\n            }, i * spawnDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes ammo from the reserves UI when ammo is taken from the player's reserves.\r\n     */\r\n    public removeAmmoFromReserveUI(amount: number = 1): void {\r\n        const removeDelay = 100; // ms, match spawnBullet\r\n        for (let i = 0; i < amount; i++) {\r\n            this.utility.safeTimeout(() => {\r\n                if (this.reserveBulletParticles.length > 0) {\r\n                    this.reserveBulletParticles.shift();\r\n                }\r\n                if (!this.settings.getSettings().graphics.physics.ammoReserves) {\r\n                    this.renderAmmoReserves();\r\n                }\r\n            }, i * removeDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes ammo reserve physics for the projectiles in the ammo reserve UI.\r\n     */\r\n    private updateAmmoReservePhysics(): void {\r\n        if (!this.settings.getSettings().graphics.physics.ammoReserves) return;\r\n        if (!this.ui.ammoReservesCtx || !this.ammoReserveIcon) return;\r\n\r\n        // TODO: Add sleeping when they come to a stop and end simulation\r\n\r\n        // Physics constants\r\n        const friction = 0.9;\r\n        const bounce = 0.5;\r\n\r\n        const { collisionHeight, collisionWidth, collisionX, collisionY } = this.getAmmoReserveCollisionZone();\r\n\r\n        // Clear\r\n        this.ui.ammoReservesCtx.clearRect(0, 0, this.ui.ammoReservesCanvas!.width, this.ui.ammoReservesCanvas!.height);\r\n\r\n        // Draw background box\r\n        this.ui.ammoReservesCtx.drawImage(\r\n            this.ammoReserveIcon,\r\n            0, 0,\r\n            this.ui.ammoReservesCanvas!.width,\r\n            this.ui.ammoReservesCanvas!.height\r\n        );\r\n\r\n        // Update and draw bullets\r\n        for (let bullet of this.reserveBulletParticles) {\r\n            // Physics\r\n            bullet.transform.pos.x += bullet.velocity.x;\r\n            bullet.transform.pos.y += bullet.velocity.y;\r\n            bullet.transform.rot += bullet.torque;\r\n\r\n            bullet.velocity.x *= friction;\r\n            bullet.velocity.y *= friction;\r\n            bullet.torque *= friction;\r\n\r\n            // Wall collisions\r\n            // Left\r\n            if (bullet.transform.pos.x - bullet.width / 2 < collisionX) {\r\n                bullet.transform.pos.x = collisionX + bullet.width / 2;\r\n                bullet.velocity.x *= -bounce;\r\n            }\r\n            // Right\r\n            if (bullet.transform.pos.x + bullet.width / 2 > collisionX + collisionWidth) {\r\n                bullet.transform.pos.x = collisionX + collisionWidth - bullet.width / 2;\r\n                bullet.velocity.x *= -bounce;\r\n            }\r\n            // Top\r\n            if (bullet.transform.pos.y - bullet.height / 2 < collisionY) {\r\n                bullet.transform.pos.y = collisionY + bullet.height / 2;\r\n                bullet.velocity.y *= -bounce;\r\n            }\r\n            // Bottom\r\n            if (bullet.transform.pos.y + bullet.height / 2 > collisionY + collisionHeight) {\r\n                bullet.transform.pos.y = collisionY + collisionHeight - bullet.height / 2;\r\n                bullet.velocity.y *= -bounce;\r\n            }\r\n        }\r\n\r\n        // Optional: bullet-bullet collisions (efficient, skip if <2 bullets)\r\n        for (let i = 0; i < this.reserveBulletParticles.length; i++) {\r\n            for (let j = i + 1; j < this.reserveBulletParticles.length; j++) {\r\n                const a = this.reserveBulletParticles[i];\r\n                const b = this.reserveBulletParticles[j];\r\n                const dx = a.transform.pos.x - b.transform.pos.x;\r\n                const dy = a.transform.pos.y - b.transform.pos.y;\r\n                const dist = Math.sqrt(dx * dx + dy * dy);\r\n                const minDist = (a.width + b.width) / 2;\r\n                if (dist < minDist) {\r\n                    // Simple elastic collision\r\n                    const angle = Math.atan2(dy, dx);\r\n                    const overlap = minDist - dist;\r\n                    const ax = Math.cos(angle) * overlap / 2;\r\n                    const ay = Math.sin(angle) * overlap / 2;\r\n\r\n                    a.transform.pos.x += ax;\r\n                    a.transform.pos.y += ay;\r\n                    b.transform.pos.x -= ax;\r\n                    b.transform.pos.y -= ay;\r\n\r\n                    // Swap velocities (1D along collision axis)\r\n                    const va = a.velocity.x * Math.cos(angle) + a.velocity.y * Math.sin(angle);\r\n                    const vb = b.velocity.x * Math.cos(angle) + b.velocity.y * Math.sin(angle);\r\n                    const avg = (va + vb) / 2;\r\n                    a.velocity.x += (avg - va) * bounce;\r\n                    b.velocity.x += (avg - vb) * bounce;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Draw bullets\r\n        for (let bullet of this.reserveBulletParticles) {\r\n            this.ui.ammoReservesCtx.save();\r\n            this.ui.ammoReservesCtx.translate(bullet.transform.pos.x, bullet.transform.pos.y);\r\n            this.ui.ammoReservesCtx.rotate(bullet.transform.rot);\r\n            this.ui.ammoReservesCtx.drawImage(\r\n                this.projectileIcon!,\r\n                -bullet.width / 2,\r\n                -bullet.height / 2,\r\n                bullet.width,\r\n                bullet.height\r\n            );\r\n            this.ui.ammoReservesCtx.restore();\r\n        }\r\n\r\n        requestAnimationFrame(() => this.updateAmmoReservePhysics());\r\n    }\r\n\r\n    /**\r\n     * Renders the ammo reserves canvas.\r\n     */\r\n    private renderAmmoReserves(): void {\r\n        if (!this.ui.ammoReservesCtx || !this.ammoReserveIcon || !this.ammoReserveIcon.complete) return;\r\n\r\n        // Clear the canvas\r\n        this.ui.ammoReservesCtx.clearRect(0, 0, this.ui.ammoReservesCanvas!.width, this.ui.ammoReservesCanvas!.height);\r\n\r\n        // Draw the ammobox icon to fill the entire canvas\r\n        this.ui.ammoReservesCtx.drawImage(\r\n            this.ammoReserveIcon,\r\n            0, 0,\r\n            this.ui.ammoReservesCanvas!.width,\r\n            this.ui.ammoReservesCanvas!.height\r\n        );\r\n\r\n        if (!this.settings.getSettings().graphics.physics.ammoReserves) {\r\n            for (let bullet of this.reserveBulletParticles) {\r\n                this.ui.ammoReservesCtx.save();\r\n                this.ui.ammoReservesCtx.translate(bullet.transform.pos.x, bullet.transform.pos.y);\r\n                this.ui.ammoReservesCtx.rotate(bullet.transform.rot);\r\n                this.ui.ammoReservesCtx.drawImage(\r\n                    this.projectileIcon!,\r\n                    -bullet.width / 2,\r\n                    -bullet.height / 2,\r\n                    bullet.width,\r\n                    bullet.height\r\n                );\r\n                this.ui.ammoReservesCtx.restore();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the ammo reserves collision zone to help with physics calculations for rendered projectiles.\r\n     */\r\n    private getAmmoReserveCollisionZone(): { collisionHeight: number; collisionWidth: number; collisionX: number; collisionY: number } {\r\n        const collisionWidth = 63;\r\n        const collisionHeight = 27;\r\n        const collisionX = (this.ui.ammoReservesCanvas!.width - collisionWidth) / 2 - 3;\r\n        const collisionY = (this.ui.ammoReservesCanvas!.height - collisionHeight) / 2 - 1;\r\n\r\n        const params = { collisionHeight, collisionWidth, collisionX, collisionY };\r\n\r\n        return params;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { CANVAS, GAMEPAD_MAP } from \"./Config\";\r\nimport { GameSettings, Leaderboard, Players } from \"./Types\";\r\n\r\nimport { LobbyManager } from \"./LobbyManager\";\r\nimport { SettingsManager } from \"./SettingsManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\nimport { AmmoReservesUIController } from \"./player/AmmoReservesUIController\";\r\n\r\nexport class UserInterface {\r\n    public ammoReservesUIController: AmmoReservesUIController;\r\n\r\n    // [ Canvas ]\r\n    //\r\n    public ammoReservesCanvas: HTMLCanvasElement | null = null;\r\n    public ammoReservesCtx: CanvasRenderingContext2D | null = null;\r\n    public canvas: HTMLCanvasElement | null = null;\r\n    public ctx: CanvasRenderingContext2D | null = null;\r\n    public decalCanvas: HTMLCanvasElement | null = null;\r\n    public decalCtx: CanvasRenderingContext2D | null = null;\r\n    //\r\n    //\r\n    // [ Containers ]\r\n    //\r\n    public gameContainer: HTMLDivElement | null = null;\r\n    public gameOptionsContainer: HTMLDivElement | null = null;\r\n    public lobbyContainer: HTMLDivElement | null = null;\r\n    public roomControls: HTMLDivElement | null = null;\r\n    public upgradeContainer: HTMLElement | null = null;\r\n    //\r\n    //\r\n    // [ Displays ]\r\n    //\r\n    public gameRoomIdDisplay: HTMLSpanElement | null = null;\r\n    public lobbyPlayersList: HTMLDivElement | null = null;\r\n    public roomIdDisplay: HTMLSpanElement | null = null;\r\n    public userIdDisplay: HTMLSpanElement | null = null;\r\n    //\r\n    //\r\n    // [ Buttons ]\r\n    //\r\n    public gameCodeButton: HTMLButtonElement | null = null;\r\n    public gameLeaveButton: HTMLButtonElement | null = null;\r\n    public hostButton: HTMLButtonElement | null = null;\r\n    public joinButton: HTMLButtonElement | null = null;\r\n    public lobbyCodeButton: HTMLButtonElement | null = null;\r\n    public lobbyLeaveButton: HTMLButtonElement | null = null;\r\n    public quickplayButton: HTMLButtonElement | null = null;\r\n    public startGameBtn: HTMLButtonElement | null = null;\r\n    //\r\n    //\r\n    // [ Inputs / Toggles ]\r\n    //\r\n    public playersInput: HTMLInputElement | null = null;\r\n    public privateToggle: HTMLElement | null = null;\r\n    public upgradesToggle: HTMLElement | null = null;\r\n    public winsInput: HTMLInputElement | null = null;\r\n    //\r\n    //\r\n    // [ Chat ]\r\n    //\r\n    public chatContainer: HTMLDivElement | null = null;\r\n    public chatInput: HTMLInputElement | null = null;\r\n    public chatMessages: HTMLDivElement | null = null;\r\n    public chatSendBtn: HTMLButtonElement | null = null;\r\n    //\r\n    //\r\n    // [ Char Customizer ]\r\n    //\r\n    public charCustomizeContainer: HTMLDivElement | null = null;\r\n    public charCustomizeCanvas: HTMLCanvasElement | null = null;\r\n    public charCustomizeCtx: CanvasRenderingContext2D | null = null;\r\n    public headwearArrowLeft: HTMLDivElement | null = null;\r\n    public headArrowLeft: HTMLDivElement | null = null;\r\n    public bodyArrowLeft: HTMLDivElement | null = null;\r\n    public headwearArrowRight: HTMLDivElement | null = null;\r\n    public headArrowRight: HTMLDivElement | null = null;\r\n    public bodyArrowRight: HTMLDivElement | null = null;\r\n    //\r\n    //\r\n    // [ Modal ]\r\n    //\r\n    public modal: HTMLElement | null = null;\r\n    public modalButtons: HTMLDivElement | null = null;\r\n    public modalCancelButton: HTMLButtonElement | null = null;\r\n    public modalConfirmButton: HTMLButtonElement | null = null;\r\n    public modalContent: HTMLElement | null = null;\r\n    public modalErrorDiv: HTMLElement | null = null;\r\n    public modalInput: HTMLInputElement | null = null;\r\n    public modalText: HTMLSpanElement | null = null;\r\n    //\r\n    //\r\n    // [ Leaderboard ]\r\n    //\r\n    public leaderboard: Leaderboard = new Map();\r\n    public leaderboardBody: HTMLTableSectionElement | null = null;\r\n    public leaderboardContainer: HTMLDivElement | null = null;\r\n    //\r\n    //\r\n    // [ Settings ]\r\n    public settingsContainer: HTMLDivElement | null = null;\r\n    public settingsButton: HTMLButtonElement | null = null;\r\n    public settingsCloseButton: HTMLButtonElement | null = null;\r\n    public controlsTab: HTMLDivElement | null = null;\r\n    public graphicsTab: HTMLDivElement | null = null;\r\n    public soundTab: HTMLDivElement | null = null;\r\n    public controlsBody: HTMLDivElement | null = null;\r\n    public graphicsBody: HTMLDivElement | null = null;\r\n    public soundBody: HTMLDivElement | null = null;\r\n\r\n    public masterSlider: HTMLDivElement | null = null;\r\n    public masterFill: HTMLDivElement | null = null;\r\n    public masterValue: HTMLDivElement | null = null;\r\n    public interfaceSlider: HTMLDivElement | null = null;\r\n    public interfaceFill: HTMLDivElement | null = null;\r\n    public interfaceValue: HTMLDivElement | null = null;\r\n    public musicSlider: HTMLDivElement | null = null;\r\n    public musicFill: HTMLDivElement | null = null;\r\n    public musicValue: HTMLDivElement | null = null;\r\n    public sfxSlider: HTMLDivElement | null = null;\r\n    public sfxFill: HTMLDivElement | null = null;\r\n    public sfxValue: HTMLDivElement | null = null;\r\n    public voiceSlider: HTMLDivElement | null = null;\r\n    public voiceFill: HTMLDivElement | null = null;\r\n    public voiceValue: HTMLDivElement | null = null;\r\n\r\n    public deadzoneInput: HTMLInputElement | null = null;\r\n\r\n    public particleJSToggle: HTMLElement | null = null;\r\n    public staticVfxToggle: HTMLElement | null = null;\r\n    public ammoReservesPhysicsToggle: HTMLElement | null = null;\r\n    //\r\n    //\r\n    // [ Stats ]\r\n    public accuracyStat: HTMLSpanElement | null = null;\r\n    public damageStat: HTMLSpanElement | null = null;\r\n    public luckStat: HTMLSpanElement | null = null;\r\n    public rangeStat: HTMLSpanElement | null = null;\r\n    public shotSpeedStat: HTMLSpanElement | null = null;\r\n    public speedStat: HTMLSpanElement | null = null;\r\n\r\n    constructor(\r\n        private playerState: PlayerState,\r\n        private settingsManager: SettingsManager,\r\n        private utility: Utility\r\n    ) {\r\n        this.ammoReservesUIController = new AmmoReservesUIController(\r\n            this.settingsManager,\r\n            this,\r\n            this.utility\r\n        );\r\n\r\n        this.initInterfaceListeners();\r\n    }\r\n\r\n    // #region [ Init ]\r\n    //\r\n    /**\r\n     * Responsible for initializing all elements defined in the class structure.\r\n     * \r\n     * Do not use \"getElement\" type lookups on runtime. Cache them all on start.\r\n     */\r\n    public initInterface() {\r\n        this.canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\r\n        this.decalCanvas = document.createElement('canvas') as HTMLCanvasElement;\r\n        this.ammoReservesCanvas = document.getElementById('ammoReservesCanvas') as HTMLCanvasElement;\r\n        this.charCustomizeCanvas = document.getElementById('charCustomizeCanvas') as HTMLCanvasElement;\r\n\r\n        this.roomControls = document.getElementById('roomControls') as HTMLDivElement;\r\n        this.gameContainer = document.getElementById('gameContainer') as HTMLDivElement;\r\n        this.lobbyContainer = document.getElementById('lobbyContainer') as HTMLDivElement;\r\n        this.lobbyPlayersList = document.getElementById('lobbyPlayersList') as HTMLDivElement;\r\n        this.startGameBtn = document.getElementById('startGameBtn') as HTMLButtonElement;\r\n        this.gameOptionsContainer = document.getElementById('gameOptionsContainer') as HTMLDivElement;\r\n\r\n        this.userIdDisplay = document.getElementById('userId') as HTMLSpanElement;\r\n        this.roomIdDisplay = document.getElementById('roomId') as HTMLSpanElement;\r\n        this.gameRoomIdDisplay = document.getElementById('gameRoomId') as HTMLSpanElement;\r\n\r\n        this.chatContainer = document.getElementById('chatContainer') as HTMLDivElement;\r\n        this.chatMessages = document.getElementById('chatMessages') as HTMLDivElement;\r\n        this.chatInput = document.getElementById('chatInput') as HTMLInputElement;\r\n        this.chatSendBtn = document.getElementById('chatSendBtn') as HTMLButtonElement;\r\n\r\n        this.charCustomizeContainer = document.getElementById('charCustomizeContainer') as HTMLDivElement;\r\n        this.headwearArrowLeft = document.getElementById('headwearArrowLeft') as HTMLDivElement;\r\n        this.headArrowLeft = document.getElementById('headArrowLeft') as HTMLDivElement;\r\n        this.bodyArrowLeft = document.getElementById('bodyArrowLeft') as HTMLDivElement;\r\n        this.headwearArrowRight = document.getElementById('headwearArrowRight') as HTMLDivElement;\r\n        this.headArrowRight = document.getElementById('headArrowRight') as HTMLDivElement;\r\n        this.bodyArrowRight = document.getElementById('bodyArrowRight') as HTMLDivElement;\r\n\r\n        this.privateToggle = document.getElementById('privateToggle') as HTMLElement;\r\n        this.upgradesToggle = document.getElementById('upgradesToggle') as HTMLElement;\r\n        this.winsInput = document.getElementById('winsInput') as HTMLInputElement;\r\n        this.playersInput = document.getElementById('playersInput') as HTMLInputElement;\r\n\r\n        this.upgradeContainer = document.getElementById('upgradeContainer') as HTMLElement;\r\n\r\n        this.leaderboardContainer = document.getElementById('leaderboardContainer') as HTMLDivElement;\r\n        this.leaderboardBody = document.getElementById('leaderboardBody') as HTMLTableSectionElement;\r\n\r\n        this.hostButton = document.getElementById('atomHost') as HTMLButtonElement;\r\n        this.joinButton = document.getElementById('atomJoin') as HTMLButtonElement;\r\n        this.quickplayButton = document.getElementById('atomQuickplay') as HTMLButtonElement;\r\n\r\n        this.lobbyLeaveButton = document.getElementById('lobbyLeaveBtn') as HTMLButtonElement;\r\n        this.lobbyCodeButton = document.getElementById('lobbyCodeBtn') as HTMLButtonElement;\r\n\r\n        this.gameLeaveButton = document.getElementById('gameLeaveBtn') as HTMLButtonElement;\r\n        this.gameCodeButton = document.getElementById('gameCodeBtn') as HTMLButtonElement;\r\n\r\n        this.modal = document.getElementById('modal') as HTMLDivElement;\r\n        this.modalInput = document.getElementById('joinRoomInput') as HTMLInputElement;\r\n        this.modalButtons = document.getElementById('modalButtons') as HTMLDivElement;\r\n        this.modalConfirmButton = document.getElementById('joinRoomConfirmBtn') as HTMLButtonElement;\r\n        this.modalCancelButton = document.getElementById('joinRoomCancelBtn') as HTMLButtonElement;\r\n        this.modalErrorDiv = document.getElementById('joinRoomError') as HTMLDivElement;\r\n        this.modalContent = document.getElementById('modalContent') as HTMLDivElement;\r\n        this.modalText = document.getElementById('modalText') as HTMLSpanElement;\r\n\r\n        this.settingsContainer = document.getElementById('settingsContainer') as HTMLDivElement;\r\n        this.settingsButton = document.getElementById('atomSettings') as HTMLButtonElement;\r\n        this.settingsCloseButton = document.getElementById('settingsCloseButton') as HTMLButtonElement;\r\n        this.controlsTab = document.getElementById('controlsTab') as HTMLDivElement;\r\n        this.graphicsTab = document.getElementById('graphicsTab') as HTMLDivElement;\r\n        this.soundTab = document.getElementById('soundTab') as HTMLDivElement;\r\n        this.controlsBody = document.getElementById('controlsBody') as HTMLDivElement;\r\n        this.graphicsBody = document.getElementById('graphicsBody') as HTMLDivElement;\r\n        this.soundBody = document.getElementById('soundBody') as HTMLDivElement;\r\n\r\n        this.masterSlider = document.getElementById('masterSlider') as HTMLDivElement;\r\n        this.masterFill = document.getElementById('masterFill') as HTMLDivElement;\r\n        this.masterValue = document.getElementById('masterValue') as HTMLDivElement;\r\n        this.interfaceSlider = document.getElementById('interfaceSlider') as HTMLDivElement;\r\n        this.interfaceFill = document.getElementById('interfaceFill') as HTMLDivElement;\r\n        this.interfaceValue = document.getElementById('interfaceValue') as HTMLDivElement;\r\n        this.musicSlider = document.getElementById('musicSlider') as HTMLDivElement;\r\n        this.musicFill = document.getElementById('musicFill') as HTMLDivElement;\r\n        this.musicValue = document.getElementById('musicValue') as HTMLDivElement;\r\n        this.sfxSlider = document.getElementById('sfxSlider') as HTMLDivElement;\r\n        this.sfxFill = document.getElementById('sfxFill') as HTMLDivElement;\r\n        this.sfxValue = document.getElementById('sfxValue') as HTMLDivElement;\r\n        this.voiceSlider = document.getElementById('voiceSlider') as HTMLDivElement;\r\n        this.voiceFill = document.getElementById('voiceFill') as HTMLDivElement;\r\n        this.voiceValue = document.getElementById('voiceValue') as HTMLDivElement;\r\n\r\n        this.deadzoneInput = document.getElementById('deadzoneInput') as HTMLInputElement;\r\n\r\n        this.particleJSToggle = document.getElementById('particleJSToggle') as HTMLElement;\r\n        this.staticVfxToggle = document.getElementById('staticToggle') as HTMLElement;\r\n        this.ammoReservesPhysicsToggle = document.getElementById('ammoReservesPhysicsToggle') as HTMLElement;\r\n\r\n        this.accuracyStat = document.getElementById('accuracyValue') as HTMLSpanElement;\r\n        this.damageStat = document.getElementById('damageValue') as HTMLSpanElement;\r\n        this.luckStat = document.getElementById('luckValue') as HTMLSpanElement;\r\n        this.rangeStat = document.getElementById('rangeValue') as HTMLSpanElement;\r\n        this.shotSpeedStat = document.getElementById('shotSpeedValue') as HTMLSpanElement;\r\n        this.speedStat = document.getElementById('speedValue') as HTMLSpanElement;\r\n\r\n        if (!this.canvas || !this.decalCanvas || !this.ammoReservesCanvas || !this.charCustomizeCanvas ||\r\n            !this.roomControls || !this.gameContainer || !this.lobbyContainer || !this.userIdDisplay ||\r\n            !this.roomIdDisplay || !this.gameRoomIdDisplay || !this.lobbyPlayersList || !this.startGameBtn ||\r\n            !this.gameOptionsContainer || !this.chatContainer || !this.chatMessages || !this.chatInput ||\r\n            !this.chatSendBtn || !this.privateToggle || !this.upgradesToggle || !this.winsInput ||\r\n            !this.playersInput || !this.upgradeContainer || !this.leaderboardContainer ||\r\n            !this.leaderboardBody || !this.hostButton || !this.joinButton || !this.quickplayButton ||\r\n            !this.lobbyLeaveButton || !this.lobbyCodeButton || !this.gameLeaveButton || !this.gameCodeButton ||\r\n            !this.settingsButton || !this.settingsCloseButton || !this.settingsContainer || !this.controlsTab ||\r\n            !this.graphicsTab || !this.soundTab || !this.controlsBody || !this.graphicsBody || !this.soundBody ||\r\n            !this.masterSlider || !this.masterFill || !this.interfaceSlider || !this.interfaceFill ||\r\n            !this.musicSlider || !this.musicFill || !this.sfxSlider || !this.sfxFill || !this.voiceSlider ||\r\n            !this.voiceFill || !this.masterValue || !this.interfaceValue || !this.musicValue || !this.sfxValue ||\r\n            !this.voiceValue || !this.accuracyStat || !this.damageStat || !this.luckStat || !this.rangeStat ||\r\n            !this.shotSpeedStat || !this.speedStat || !this.deadzoneInput || !this.particleJSToggle ||\r\n            !this.staticVfxToggle || !this.ammoReservesPhysicsToggle || !this.charCustomizeContainer ||\r\n            !this.headwearArrowLeft || !this.headArrowLeft || !this.bodyArrowLeft || !this.headwearArrowRight ||\r\n            !this.headArrowRight || !this.bodyArrowRight\r\n        ) {\r\n            alert('Failed to load game. Please refresh the page.');\r\n            throw new Error('Critical error: Required DOM elements are missing.');\r\n        }\r\n\r\n        this.canvas.width = CANVAS.WIDTH;\r\n        this.canvas.height = CANVAS.HEIGHT;\r\n        this.decalCanvas.width = CANVAS.WIDTH;\r\n        this.decalCanvas.height = CANVAS.HEIGHT;\r\n        this.ammoReservesCanvas.width = 100;\r\n        this.ammoReservesCanvas.height = 64;\r\n        this.charCustomizeCanvas.width = 200;\r\n        this.charCustomizeCanvas.height = 200;\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.decalCtx = this.decalCanvas.getContext('2d');\r\n        this.ammoReservesCtx = this.ammoReservesCanvas.getContext('2d');\r\n        this.charCustomizeCtx = this.charCustomizeCanvas.getContext('2d')\r\n\r\n        if (!this.ctx || !this.decalCtx || !this.ammoReservesCtx || !this.charCustomizeCtx) {\r\n            alert('Failed to load game. Please refresh the page.');\r\n            throw new Error('Could not get canvas context');\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Display ]\r\n    //\r\n    /**\r\n     * Updates the display based on the current state.\r\n     */\r\n    public updateDisplay(lobby: LobbyManager, target: \"lobby\" | \"room\" | \"game\", roomId?: string): void {\r\n        if (!this.roomControls || !this.lobbyContainer || !this.gameContainer ||\r\n            !this.chatContainer || !this.leaderboardContainer || !this.charCustomizeContainer) return;\r\n\r\n        this.clearDisplay();\r\n\r\n        switch (target) {\r\n            case \"lobby\":\r\n                this.lobbyContainer.style.display = \"flex\";\r\n                this.chatContainer.style.display = \"flex\";\r\n                this.charCustomizeContainer.style.display = \"flex\";\r\n                if (roomId && this.roomIdDisplay) {\r\n                    this.roomIdDisplay.textContent = roomId;\r\n                }\r\n                lobby.inLobby = true;\r\n                break;\r\n\r\n            case \"room\":\r\n                this.roomControls.style.display = \"flex\";\r\n                break;\r\n\r\n            case \"game\":\r\n                this.gameContainer.style.display = \"flex\";\r\n                this.chatContainer.style.display = \"flex\";\r\n                this.leaderboardContainer.style.display = \"flex\";\r\n                if (roomId) {\r\n                    const gameRoomId = this.gameRoomIdDisplay;\r\n                    if (gameRoomId) gameRoomId.textContent = roomId;\r\n                }\r\n                lobby.inLobby = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows host controls when called.\r\n     */\r\n    public updateHostDisplay(isHost: boolean, lobby: LobbyManager): void {\r\n        if (!this.startGameBtn || !this.gameOptionsContainer) return;\r\n\r\n        this.startGameBtn.style.display = isHost ? 'block' : 'none';\r\n        this.startGameBtn.disabled = lobby.lobbyPlayers.size < 1;\r\n\r\n        this.gameOptionsContainer.style.display = isHost ? 'flex' : 'none';\r\n    }\r\n\r\n    /**\r\n     * Displays connected players in the lobby interface.\r\n     */\r\n    public displayLobbyPlayers(isHost: boolean, lobby: LobbyManager, userId: string): void {\r\n        if (!this.lobbyPlayersList) return;\r\n\r\n        this.lobbyPlayersList.innerHTML = '';\r\n\r\n        // Sort players: host first, then others\r\n        const sortedPlayers = Array.from(lobby.lobbyPlayers.values()).sort((a, b) => {\r\n            if (a.isHost && !b.isHost) return -1;\r\n            if (!a.isHost && b.isHost) return 1;\r\n            return 0;\r\n        });\r\n\r\n        sortedPlayers.forEach(player => {\r\n            const playerDiv = document.createElement('div');\r\n            playerDiv.className = 'lobby_player';\r\n\r\n            const colorDiv = document.createElement('div');\r\n            colorDiv.className = 'player_color';\r\n            colorDiv.style.backgroundColor = player.color;\r\n\r\n            const nameDiv = document.createElement('div');\r\n            nameDiv.className = 'player_name';\r\n            nameDiv.textContent = `${player.id}${player.isHost ? ' (Host)' : ''}`;\r\n\r\n            const controlsDiv = document.createElement('div');\r\n            controlsDiv.className = 'player_controls';\r\n\r\n            // Only show controls if I'm the host and this isn't me\r\n            if (isHost && player.id !== userId) {\r\n                const promoteBtn = document.createElement('button');\r\n                promoteBtn.textContent = 'Promote';\r\n                promoteBtn.onclick = () => lobby.promotePlayer(player.id);\r\n\r\n                const kickBtn = document.createElement('button');\r\n                kickBtn.textContent = 'Kick';\r\n                kickBtn.className = 'danger';\r\n                kickBtn.onclick = () => lobby.kickPlayer(player.id);\r\n\r\n                controlsDiv.appendChild(promoteBtn);\r\n                controlsDiv.appendChild(kickBtn);\r\n            }\r\n\r\n            playerDiv.appendChild(colorDiv);\r\n            playerDiv.appendChild(nameDiv);\r\n            playerDiv.appendChild(controlsDiv);\r\n\r\n            if (this.lobbyPlayersList) {\r\n                this.lobbyPlayersList.appendChild(playerDiv);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refreshes the display to a blank slate.\r\n     */\r\n    private clearDisplay(): void {\r\n        if (!this.roomControls || !this.lobbyContainer || !this.gameContainer\r\n            || !this.chatContainer || !this.leaderboardContainer\r\n            || !this.upgradeContainer || !this.charCustomizeContainer) return;\r\n\r\n        this.roomControls.style.display = \"none\";\r\n        this.lobbyContainer.style.display = \"none\";\r\n        this.gameContainer.style.display = \"none\";\r\n        this.chatContainer.style.display = \"none\";\r\n        this.leaderboardContainer.style.display = \"none\";\r\n        this.upgradeContainer.style.display = \"none\";\r\n        this.charCustomizeContainer.style.display = \"none\";\r\n    }\r\n\r\n    /**\r\n     * Unified modal closure function used to close and refresh the modal.\r\n     */\r\n    public closeModal(): void {\r\n        if (!this.modal || !this.modalInput || !this.modalConfirmButton ||\r\n            !this.modalCancelButton || !this.modalText) return;\r\n\r\n        this.modal.classList.add('hidden');\r\n        this.modalInput.style.display = 'flex';\r\n        this.modalText.textContent = 'Join Room';\r\n        this.modalConfirmButton.onclick = null;\r\n        this.modalCancelButton.onclick = null;\r\n        this.modalInput.onkeydown = null;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Room Modal ]\r\n    //\r\n    /**\r\n     * Shows the join room modal for pasting room codes.\r\n     */\r\n    public showJoinRoomModal(onConfirm: (roomId: string) => void): void {\r\n        if (!this.modal || !this.modalInput || !this.modalConfirmButton ||\r\n            !this.modalCancelButton || !this.modalErrorDiv) return;\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.modalInput.value = '';\r\n        this.modalErrorDiv.textContent = '';\r\n\r\n        this.modalConfirmButton.textContent = 'Join'\r\n\r\n        this.modalInput.focus();\r\n\r\n        this.modalConfirmButton.onclick = () => {\r\n            if (!this.modalInput || !this.modalErrorDiv) return;\r\n\r\n            const value = this.modalInput.value.trim();\r\n            if (!value) {\r\n                this.modalErrorDiv.textContent = 'Invalid code...';\r\n                return;\r\n            }\r\n\r\n            let roomId: string | null = null;\r\n            try {\r\n                const url = new URL(value, window.location.origin);\r\n                if (url.pathname.startsWith(\"/room_\")) {\r\n                    roomId = url.pathname.replace(\"/\", \"\");\r\n                } else {\r\n                    roomId = new URLSearchParams(url.search).get(\"room\");\r\n                }\r\n            } catch {\r\n                if (value.startsWith(\"room_\")) {\r\n                    roomId = value;\r\n                }\r\n            }\r\n\r\n            if (!roomId) {\r\n                this.modalErrorDiv.textContent = 'Invalid code...';\r\n                return;\r\n            }\r\n\r\n            this.closeModal();\r\n            onConfirm(roomId); // pass back the parsed roomId\r\n        };\r\n\r\n        this.modalCancelButton.onclick = () => this.closeModal();\r\n    }\r\n\r\n    /**\r\n     * Displays a wanring modal if the player starts a game alone.\r\n     */\r\n    public soloGameWarning(onConfirm: () => void): void {\r\n        if (!this.modal || !this.modalConfirmButton || !this.modalCancelButton ||\r\n            !this.modalContent || !this.modalText || !this.modalInput ||\r\n            !this.modalErrorDiv || !this.modalButtons) return;\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalConfirmButton.classList.remove('hidden');\r\n\r\n        this.modalInput.style.display = 'none';\r\n        this.modalErrorDiv.textContent = ' ';\r\n        this.modalButtons.style.display = 'flex';\r\n        this.modalCancelButton.style.display = 'flex';\r\n\r\n        this.modalText.textContent = 'Start game as only player? Other players will be unable to join until you return to the lobby.';\r\n        this.modalConfirmButton.textContent = 'Start Game';\r\n        this.modalCancelButton.textContent = 'Cancel';\r\n\r\n        this.modalConfirmButton.onclick = () => {\r\n            this.closeModal();\r\n            onConfirm(); // Proceed with starting the game\r\n        };\r\n\r\n        this.modalCancelButton.onclick = () => this.closeModal();\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Modal ]\r\n    /**\r\n     * Shows the settings modal.\r\n     */\r\n    public showSettingsPage(): void {\r\n        if (!this.settingsContainer) return;\r\n        this.settingsContainer.classList.remove('hidden');\r\n    }\r\n\r\n    /**\r\n     * Hides the settings modal.\r\n     */\r\n    public hideSettingsPage(): void {\r\n        if (!this.settingsContainer) return;\r\n        this.settingsContainer.classList.add('hidden');\r\n    }\r\n\r\n    /**\r\n     * Switches active settings page.\r\n     */\r\n    public switchSettingsPage(page: 'controls' | 'graphics' | 'sound'): void {\r\n        if (!this.controlsBody || !this.graphicsBody || !this.soundBody ||\r\n            !this.controlsTab || !this.graphicsTab || !this.soundTab) return;\r\n\r\n        // Remove active class from all tabs\r\n        this.controlsTab.classList.remove('settings_tab_active');\r\n        this.graphicsTab.classList.remove('settings_tab_active');\r\n        this.soundTab.classList.remove('settings_tab_active');\r\n\r\n        // Remove hidden class from all pages\r\n        this.controlsBody.classList.remove('settings_page_hidden');\r\n        this.graphicsBody.classList.remove('settings_page_hidden');\r\n        this.soundBody.classList.remove('settings_page_hidden');\r\n\r\n        // Hide all pages and activate the selected tab\r\n        switch (page) {\r\n            case 'controls':\r\n                this.controlsTab.classList.add('settings_tab_active');\r\n                this.graphicsBody.classList.add('settings_page_hidden');\r\n                this.soundBody.classList.add('settings_page_hidden');\r\n                break;\r\n            case 'graphics':\r\n                this.graphicsTab.classList.add('settings_tab_active');\r\n                this.controlsBody.classList.add('settings_page_hidden');\r\n                this.soundBody.classList.add('settings_page_hidden');\r\n                break;\r\n            case 'sound':\r\n                this.soundTab.classList.add('settings_tab_active');\r\n                this.controlsBody.classList.add('settings_page_hidden');\r\n                this.graphicsBody.classList.add('settings_page_hidden');\r\n                break;\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Sliders ]\r\n    //\r\n    /**\r\n     * Updates settings specific sliders that also have value elements associated.\r\n     */\r\n    public updateSettingsSlider(fillElement: HTMLDivElement, valueElement: HTMLDivElement, value: number): void {\r\n        const percentage = Math.max(0, Math.min(100, value * 100));\r\n        fillElement.style.width = `${percentage}%`;\r\n        valueElement.textContent = `${Math.round(percentage)}%`;\r\n    }\r\n\r\n    /**\r\n     * Calculates the value of the slider based on the hovered mouse position.\r\n     */\r\n    public calculateSliderValue(sliderElement: HTMLDivElement, mouseX: number): number {\r\n        const rect = sliderElement.getBoundingClientRect();\r\n        const position = mouseX - rect.left;\r\n        const width = rect.width;\r\n        return Math.max(0, Math.min(1, position / width));\r\n    }\r\n\r\n    /**\r\n     * Initializes the sound sliders in the sound settings page with user prefs or defaults.\r\n     */\r\n    public initSoundSliders(settings: GameSettings): void {\r\n        const audioSettings = settings.audio.mixer;\r\n        if (this.masterFill && this.masterValue) this.updateSettingsSlider(this.masterFill, this.masterValue, audioSettings.master);\r\n        if (this.interfaceFill && this.interfaceValue) this.updateSettingsSlider(this.interfaceFill, this.interfaceValue, audioSettings.interface);\r\n        if (this.musicFill && this.musicValue) this.updateSettingsSlider(this.musicFill, this.musicValue, audioSettings.music);\r\n        if (this.sfxFill && this.sfxValue) this.updateSettingsSlider(this.sfxFill, this.sfxValue, audioSettings.sfx);\r\n        if (this.voiceFill && this.voiceValue) this.updateSettingsSlider(this.voiceFill, this.voiceValue, audioSettings.voice);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Inputs ]\r\n    //\r\n    /**\r\n     * Initializes all inputs in settings pages with user prefs or defaults.\r\n     */\r\n    public initSettingsInputs(settings: GameSettings): void {\r\n        if (this.deadzoneInput) {\r\n            this.deadzoneInput.value = settings.controls.gamepad.deadzone.toString();\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Toggles ]\r\n    //\r\n    /**\r\n     * Initializes all toggles in settings pages with user prefs or defaults.\r\n     */\r\n    public initSettingsToggles(settings: GameSettings): void {\r\n        if (this.particleJSToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'particleJSToggle',\r\n                value: settings.graphics.renderBackgroundParticles\r\n            });\r\n        }\r\n\r\n        if (this.staticVfxToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'staticToggle',\r\n                value: settings.graphics.showStaticOverlay\r\n            });\r\n        }\r\n\r\n        if (this.ammoReservesPhysicsToggle) {\r\n            this.utility.setToggle({\r\n                toggleId: 'ammoReservesPhysicsToggle',\r\n                value: settings.graphics.physics.ammoReserves\r\n            });\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Settings Interfaces ]\r\n    //\r\n    /**\r\n     * Initializes the keybinds settings page interface.\r\n     */\r\n    public initKeybindsInterface(controlsSettings: { keybinds: Record<string, string>, gamepad: Record<string, number> }, onBindingChange: (action: string, type: 'keybind' | 'gamepad', newBinding: string | number) => void): void {\r\n        // [ Keys ]\r\n        Object.keys(controlsSettings.keybinds).forEach(action => {\r\n            const elementId = `${action}Keybind`;\r\n            const element = document.getElementById(elementId);\r\n            if (element) {\r\n                const key = controlsSettings.keybinds[action];\r\n                element.textContent = key === ' ' ? 'SPACE' : key.toUpperCase();\r\n\r\n                element.addEventListener('click', () => {\r\n                    this.showRebindModal(action, 'keybind', (newBinding) => {\r\n                        onBindingChange(action, 'keybind', newBinding as string);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        // [ Gamepad ]\r\n        Object.keys(controlsSettings.gamepad).forEach(action => {\r\n            const elementId = `${action}Gamepad`;\r\n            const element = document.getElementById(elementId);\r\n\r\n            if (element && controlsSettings.gamepad[action] !== undefined) {\r\n                const buttonValue = controlsSettings.gamepad[action];\r\n                const buttonName = Object.keys(GAMEPAD_MAP).find(\r\n                    key => typeof GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === 'number'\r\n                        && GAMEPAD_MAP[key as keyof typeof GAMEPAD_MAP] === buttonValue\r\n                );\r\n                element.textContent = buttonName || buttonValue.toString();\r\n\r\n                element.addEventListener('click', () => {\r\n                    this.showRebindModal(action, 'gamepad', (newBinding) => {\r\n                        onBindingChange(action, 'gamepad', newBinding as number);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Shows the controls rebinding modal when called.\r\n     * \r\n     * Can be used for rebinding keyboard or gamepad.\r\n     */\r\n    public showRebindModal(action: string, type: 'keybind' | 'gamepad', onRebind: (newBinding: string | number) => void): void {\r\n        if (!this.modal || !this.modalText || !this.modalInput || !this.modalConfirmButton || !this.modalCancelButton || !this.modalErrorDiv) return;\r\n\r\n        const duplicateWarnings = [\r\n            \"Binding already assigned!\",\r\n            \"Binding already in use!\",\r\n            \"That binding is assigned already!\",\r\n            \"Binding already being used!\",\r\n            \"Already bound to another action!\"\r\n        ];\r\n        let warningIndex = 0;\r\n\r\n        // Check for gamepad if type is gamepad\r\n        if (type === 'gamepad') {\r\n            const gamepads = navigator.getGamepads();\r\n            const hasGamepad = Array.from(gamepads).some(gp => gp !== null);\r\n\r\n            if (!hasGamepad) {\r\n                this.modal.classList.remove('hidden');\r\n                this.modalErrorDiv.textContent = '';\r\n                this.modalText.textContent = 'No gamepad detected';\r\n                this.modalInput.style.display = 'none';\r\n                this.modalConfirmButton.classList.add('hidden');\r\n                this.modalCancelButton.textContent = 'Close';\r\n\r\n                this.modalCancelButton.onclick = () => this.closeModal();\r\n\r\n                this.utility.safeTimeout(() => {\r\n                    this.closeModal();\r\n                }, 3000);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.modal.classList.remove('hidden');\r\n        this.modalErrorDiv.textContent = '';\r\n        this.modalInput.style.display = 'none';\r\n        this.modalText.textContent = `Press any ${type === 'keybind' ? 'key' : 'button'} for ${action.toUpperCase()}`;\r\n        this.modalConfirmButton.classList.add('hidden');\r\n        this.modalCancelButton.textContent = 'Cancel';\r\n\r\n        const checkDuplicate = (binding: string | number): boolean => {\r\n            if (type === 'keybind') {\r\n                const allKeybinds = Object.entries(this.settingsManager?.getSettings().controls.keybinds || {});\r\n                return allKeybinds.some(([key, value]) => key !== action && value === binding);\r\n            } else {\r\n                const allGamepad = Object.entries(this.settingsManager?.getSettings().controls.gamepad || {});\r\n                return allGamepad.some(([key, value]) => key !== action && value === binding);\r\n            }\r\n        };\r\n\r\n        const handleKeyPress = (e: KeyboardEvent) => {\r\n            e.preventDefault();\r\n            if (e.key === 'Escape') {\r\n                cleanup();\r\n                this.closeModal();\r\n                return;\r\n            }\r\n\r\n            const newKey = e.key.toLowerCase();\r\n\r\n            if (checkDuplicate(newKey)) {\r\n                if (!this.modalErrorDiv) return;\r\n                this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                warningIndex++;\r\n                return;\r\n            }\r\n\r\n            cleanup();\r\n            onRebind(newKey);\r\n            this.closeModal();\r\n        };\r\n\r\n        const handleMouseDown = (e: MouseEvent) => {\r\n            // Check if click is on cancel button\r\n            if (e.target === this.modalCancelButton || this.modalCancelButton?.contains(e.target as Node)) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            let mouseKey = '';\r\n            if (e.button === 0) mouseKey = 'mouse1';\r\n            else if (e.button === 1) mouseKey = 'mouse3';\r\n            else if (e.button === 2) mouseKey = 'mouse2';\r\n\r\n            if (mouseKey) {\r\n                if (checkDuplicate(mouseKey)) {\r\n                    if (!this.modalErrorDiv) return;\r\n                    this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                    warningIndex++;\r\n                    return;\r\n                }\r\n\r\n                cleanup();\r\n                onRebind(mouseKey);\r\n                this.closeModal();\r\n            }\r\n        };\r\n\r\n        const handleGamepadPress = () => {\r\n            const gamepads = navigator.getGamepads();\r\n            for (const gamepad of gamepads) {\r\n                if (!gamepad) continue;\r\n\r\n                for (let i = 0; i < gamepad.buttons.length; i++) {\r\n                    if (gamepad.buttons[i].pressed) {\r\n                        if (checkDuplicate(i)) {\r\n                            if (!this.modalErrorDiv) return;\r\n                            this.modalErrorDiv.textContent = duplicateWarnings[warningIndex % duplicateWarnings.length];\r\n                            warningIndex++;\r\n                            requestAnimationFrame(handleGamepadPress);\r\n                            return;\r\n                        }\r\n\r\n                        cleanup();\r\n                        onRebind(i);\r\n                        this.closeModal();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            requestAnimationFrame(handleGamepadPress);\r\n        };\r\n\r\n        const cleanup = () => {\r\n            if (type === 'keybind') {\r\n                document.removeEventListener('keydown', handleKeyPress);\r\n                document.removeEventListener('mousedown', handleMouseDown);\r\n            }\r\n            this.modalCancelButton!.onclick = null;\r\n        };\r\n\r\n        if (type === 'keybind') {\r\n            document.addEventListener('keydown', handleKeyPress);\r\n            document.addEventListener('mousedown', handleMouseDown);\r\n        } else {\r\n            requestAnimationFrame(handleGamepadPress);\r\n        }\r\n\r\n        this.modalCancelButton.onclick = () => {\r\n            cleanup();\r\n            this.closeModal();\r\n        };\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Leaderboard ]\r\n    //\r\n    /**\r\n     * Locally initialize the leaderboard, or update it if it already exists.\r\n     */\r\n    public createLeaderboard(lobby: LobbyManager, players: Players, userId: string): void {\r\n        // Create a set of all players\r\n        const allPlayers = new Set<string>();\r\n        allPlayers.add(userId);\r\n        players.forEach((_, playerId) => {\r\n            allPlayers.add(playerId);\r\n        });\r\n        lobby.lobbyPlayers.forEach((_, playerId) => {\r\n            allPlayers.add(playerId);\r\n        });\r\n\r\n        // Create/update leaderboard entries for all players\r\n        allPlayers.forEach(playerId => {\r\n            if (!this.leaderboard.has(playerId)) {\r\n                this.leaderboard.set(playerId, { // Create new entry with 0 stats\r\n                    playerId: playerId,\r\n                    wins: 0,\r\n                    kills: 0,\r\n                    deaths: 0\r\n                });\r\n                console.log(`Created leaderboard entry for ${playerId}`);\r\n            }\r\n            // If entry already exists, leave it alone (preserves existing stats)\r\n        });\r\n\r\n        this.updateLeaderboardDisplay(userId);\r\n        console.log('Leaderboard created/updated:', Array.from(this.leaderboard.entries()));\r\n    }\r\n\r\n    /**\r\n     * Update the table for the leaderboard to display the current game status.\r\n     */\r\n    public updateLeaderboardDisplay(localPlayer: string): void {\r\n        if (!this.leaderboardBody) return;\r\n\r\n        // Clear existing rows\r\n        this.leaderboardBody.innerHTML = '';\r\n\r\n        // Sort by wins (highest first), then by kills\r\n        const sortedEntries = Array.from(this.leaderboard.entries()).sort((a, b) => {\r\n            const [, entryA] = a;\r\n            const [, entryB] = b;\r\n\r\n            // First sort by wins (descending)\r\n            if (entryB.wins !== entryA.wins) {\r\n                return entryB.wins - entryA.wins;\r\n            }\r\n            // Then by kills (descending)\r\n            return entryB.kills - entryA.kills;\r\n        });\r\n\r\n        // Create table rows\r\n        sortedEntries.forEach(([playerId, entry]) => {\r\n            const row = document.createElement('tr');\r\n            row.className = 'leaderboard_row';\r\n\r\n            // Highlight current player\r\n            if (playerId === localPlayer) {\r\n                row.classList.add('current-player');\r\n            }\r\n\r\n            // Player name\r\n            const nameCell = document.createElement('td');\r\n            nameCell.textContent = playerId === localPlayer ? 'You' : playerId.substring(0, 8);\r\n            nameCell.className = 'player_name';\r\n            row.appendChild(nameCell);\r\n\r\n            // Wins\r\n            const winsCell = document.createElement('td');\r\n            winsCell.textContent = entry.wins.toString();\r\n            winsCell.className = 'wins';\r\n            row.appendChild(winsCell);\r\n\r\n            // Kills\r\n            const killsCell = document.createElement('td');\r\n            killsCell.textContent = entry.kills.toString();\r\n            killsCell.className = 'kills';\r\n            row.appendChild(killsCell);\r\n\r\n            // Deaths\r\n            const deathsCell = document.createElement('td');\r\n            deathsCell.textContent = entry.deaths.toString();\r\n            deathsCell.className = 'deaths';\r\n            row.appendChild(deathsCell);\r\n\r\n            if (this.leaderboardBody) {\r\n                this.leaderboardBody.appendChild(row);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reset the leaderboard to default state.\r\n     */\r\n    public clearLeaderboard(): void {\r\n        this.leaderboard.clear();\r\n        if (this.leaderboardBody) {\r\n            this.leaderboardBody.innerHTML = '';\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Events ]\r\n    //\r\n    /**\r\n     * Initializes listeners to interface elements, and sets up their animations.\r\n     */\r\n    private initInterfaceListeners(): void {\r\n        const uiDecimals = 2;\r\n        const animTime = 500;\r\n        const steps = 20;\r\n        const increaseColor = '#00ff00';\r\n        const decreaseColor = '#ff0000';\r\n        const timeout = 200;\r\n\r\n        // Accuracy (spread - inverted: lower is better)\r\n        this.playerState.onStatChange('actions.primary.projectile.spread', (value) => {\r\n            if (!this.accuracyStat) return;\r\n            const oldValue = parseFloat(this.accuracyStat.textContent || '0');\r\n            const isIncrease = value < oldValue;\r\n\r\n            this.utility.animateTextInElement({\r\n                element: this.accuracyStat,\r\n                oldValue: oldValue,\r\n                newValue: value,\r\n                decimals: uiDecimals,\r\n                animTime: animTime,\r\n                steps: steps,\r\n                color: isIncrease ? increaseColor : decreaseColor,\r\n                timeout: timeout\r\n            });\r\n        });\r\n\r\n        // Damage\r\n        this.playerState.onStatChange('actions.primary.projectile.damage', (value) => {\r\n            if (!this.damageStat) return;\r\n            const oldValue = parseFloat(this.damageStat.textContent || '0');\r\n            const isIncrease = value > oldValue;\r\n\r\n            this.utility.animateTextInElement({\r\n                element: this.damageStat,\r\n                oldValue: oldValue,\r\n                newValue: Math.round(value),\r\n                decimals: uiDecimals,\r\n                animTime: animTime,\r\n                steps: steps,\r\n                color: isIncrease ? increaseColor : decreaseColor,\r\n                timeout: timeout\r\n            });\r\n        });\r\n\r\n        // Speed\r\n        this.playerState.onStatChange('stats.speed', (value) => {\r\n            if (!this.speedStat) return;\r\n            const oldValue = parseFloat(this.speedStat.textContent || '0');\r\n            const isIncrease = value > oldValue;\r\n\r\n            this.utility.animateTextInElement({\r\n                element: this.speedStat,\r\n                oldValue: oldValue,\r\n                newValue: value,\r\n                decimals: uiDecimals,\r\n                animTime: animTime,\r\n                steps: steps,\r\n                color: isIncrease ? increaseColor : decreaseColor,\r\n                timeout: timeout\r\n            });\r\n        });\r\n\r\n        // Range\r\n        this.playerState.onStatChange('actions.primary.projectile.range', (value) => {\r\n            if (!this.rangeStat) return;\r\n            const oldValue = parseFloat(this.rangeStat.textContent || '0');\r\n            const isIncrease = value > oldValue;\r\n\r\n            this.utility.animateTextInElement({\r\n                element: this.rangeStat,\r\n                oldValue: oldValue,\r\n                newValue: value,\r\n                decimals: uiDecimals,\r\n                animTime: animTime,\r\n                steps: steps,\r\n                color: isIncrease ? increaseColor : decreaseColor,\r\n                timeout: timeout\r\n            });\r\n        });\r\n\r\n        // Shot Speed\r\n        this.playerState.onStatChange('actions.primary.projectile.speed', (value) => {\r\n            if (!this.shotSpeedStat) return;\r\n            const oldValue = parseFloat(this.shotSpeedStat.textContent || '0');\r\n            const isIncrease = value > oldValue;\r\n\r\n            this.utility.animateTextInElement({\r\n                element: this.shotSpeedStat,\r\n                oldValue: oldValue,\r\n                newValue: value,\r\n                decimals: uiDecimals,\r\n                animTime: animTime,\r\n                steps: steps,\r\n                color: isIncrease ? increaseColor : decreaseColor,\r\n                timeout: timeout\r\n            });\r\n        });\r\n\r\n        // Luck\r\n        this.playerState.onStatChange('stats.luck', (value) => {\r\n            if (!this.luckStat) return;\r\n            const oldValue = parseFloat(this.luckStat.textContent || '0');\r\n            const isIncrease = value > oldValue;\r\n\r\n            this.utility.animateTextInElement({\r\n                element: this.luckStat,\r\n                oldValue: oldValue,\r\n                newValue: value,\r\n                decimals: uiDecimals,\r\n                animTime: animTime,\r\n                steps: steps,\r\n                color: isIncrease ? increaseColor : decreaseColor,\r\n                timeout: timeout\r\n            });\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { Direction, RandomColorParams, SetInputParams, SetSliderParams, SetSpanParams, SetToggleParams, TextAnimParams, Vec2 } from './Types';\r\n\r\nexport class Utility {\r\n    private lastFrameTime: number;\r\n    private simplexTable: Uint8Array;\r\n    private activeTimeouts: Set<number>;\r\n\r\n    constructor() {\r\n        this.lastFrameTime = performance.now();\r\n        this.simplexTable = this.generateSimplexTable();\r\n        this.activeTimeouts = new Set();\r\n    }\r\n\r\n    // #region [ General ]\r\n    //\r\n    public deepMerge(target: any, source: any): void {\r\n        for (const key in source) {\r\n            if (\r\n                source[key] !== null &&\r\n                typeof source[key] === 'object' &&\r\n                !Array.isArray(source[key])\r\n            ) {\r\n                if (!target[key]) target[key] = {};\r\n                this.deepMerge(target[key], source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Time ]\r\n    //\r\n    /**\r\n     * Calculates and returns delta time.\r\n     * \r\n     * https://en.wikipedia.org/wiki/Delta_timing\r\n     */\r\n    public deltaTime(): number {\r\n        const now = performance.now();\r\n        const delta = now - this.lastFrameTime;\r\n        this.lastFrameTime = now;\r\n\r\n        // Normalize to 60fps (16.67ms per frame)\r\n        // Cap at 100ms to prevent huge jumps during lag spikes\r\n        return Math.min(delta, 100) / 16.67;\r\n    }\r\n\r\n    /**\r\n     * Overrides 'setTimeout' with safe processing.\r\n     * \r\n     * Timeouts are stored in the 'activeTimeouts' set - allowing stale timeouts to be cleared.\r\n     */\r\n    public safeTimeout(callback: () => void, delay: number): number {\r\n        const id = window.setTimeout(() => {\r\n            this.activeTimeouts.delete(id);\r\n            callback();\r\n        }, delay);\r\n        this.activeTimeouts.add(id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Clears all active timeouts from the activeTimeouts cache.\r\n     */\r\n    public clearTimeoutCache(): void {\r\n        this.activeTimeouts.forEach(id => window.clearTimeout(id));\r\n        this.activeTimeouts.clear();\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Math ]\r\n    /**\r\n     * Returns a random number.\r\n     * \r\n     * Optionally pass the decimals if you want the returned value trimmed.\r\n     */\r\n    public getRandomNum(min: number, max: number, decimals?: number): number {\r\n        const value = Math.random() * (max - min) + min;\r\n\r\n        if (decimals !== undefined) {\r\n            return parseFloat(value.toFixed(decimals));\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Returns a random int between the passed min/max values.\r\n     */\r\n    public getRandomInt(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    /**\r\n     * Returns a random position in an array.\r\n     */\r\n    public getRandomInArray<T>(array: T[]): T {\r\n        return array[Math.floor(Math.random() * array.length)];\r\n    }\r\n\r\n    /**\r\n     * Returns a shuffled copy of an array.\r\n     */\r\n    public getShuffledArray<T>(array: T[]): T[] {\r\n        return array.slice().sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    /**\r\n     * Returns the dot product of two 2D vectors.\r\n     */\r\n    public getDotProduct(v1: Vec2, v2: Vec2): number {\r\n        return v1.x * v2.x + v1.y * v2.y;\r\n    }\r\n\r\n    /**\r\n     * Reflects a velocity vector off a surface normal.\r\n     * Formula: V' = V - 2(V·N)N\r\n     */\r\n    public getReflection(velocity: Vec2, normal: Vec2): Vec2 {\r\n        const dot = this.getDotProduct(velocity, normal);\r\n        return {\r\n            x: velocity.x - 2 * dot * normal.x,\r\n            y: velocity.y - 2 * dot * normal.y\r\n        };\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Direction ]\r\n    //\r\n    /**\r\n     * Returns the forward facing direction of the passed rotation.\r\n     */\r\n    public forward(rot: number): Vec2 {\r\n        return { x: Math.cos(rot), y: Math.sin(rot) };\r\n    }\r\n\r\n    /**\r\n     * Gets the current aim direction of the local player.\r\n     */\r\n    public getDirection(params: Direction): Vec2 {\r\n        const dx = params.targetPos.x - params.rootPos.x;\r\n        const dy = params.targetPos.y - params.rootPos.y;\r\n\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        if (distance === 0) return { x: 0, y: 0 }; // avoid NaN\r\n\r\n        return { x: dx / distance, y: dy / distance };\r\n    }\r\n\r\n    /**\r\n     * Returns a random based on the degree radius.\r\n     */\r\n    public getRandomDirection(degrees: number): Vec2 {\r\n        const randomAngle = Math.random() * (degrees * Math.PI / 180);\r\n        const direction = { x: Math.cos(randomAngle), y: Math.sin(randomAngle) }\r\n        return direction;\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Visual ]\r\n    /**\r\n     * Returns a random color. With no params passed, color will be completely random hex.\r\n     * \r\n     * Params can be used to return color templates in either hex or RGB.\r\n     */\r\n    public getRandomColor(params?: RandomColorParams): string {\r\n        const format = params?.format ?? 'hex';\r\n        const mode = params?.mode ?? 'any';\r\n\r\n        let hexColor: string;\r\n\r\n        switch (mode) {\r\n            case 'primary':\r\n                const primaries = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#00FFFF', '#FF00FF'];\r\n                hexColor = this.getRandomInArray(primaries);\r\n                break;\r\n\r\n            case 'pastel':\r\n                const r = this.getRandomInt(127, 254);\r\n                const g = this.getRandomInt(127, 254);\r\n                const b = this.getRandomInt(127, 254);\r\n                hexColor = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'vibrant':\r\n                const channels = [255, this.getRandomInt(0, 255), this.getRandomInt(0, 255)];\r\n                channels.sort(() => Math.random() - 0.5);\r\n                hexColor = `#${channels[0].toString(16).padStart(2, '0')}${channels[1].toString(16).padStart(2, '0')}${channels[2].toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'dark':\r\n                const dr = this.getRandomInt(0, 127);\r\n                const dg = this.getRandomInt(0, 127);\r\n                const db = this.getRandomInt(0, 127);\r\n                hexColor = `#${dr.toString(16).padStart(2, '0')}${dg.toString(16).padStart(2, '0')}${db.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'light':\r\n                const lr = this.getRandomInt(128, 255);\r\n                const lg = this.getRandomInt(128, 255);\r\n                const lb = this.getRandomInt(128, 255);\r\n                hexColor = `#${lr.toString(16).padStart(2, '0')}${lg.toString(16).padStart(2, '0')}${lb.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'grayscale':\r\n                const gray = this.getRandomInt(0, 255);\r\n                hexColor = `#${gray.toString(16).padStart(2, '0')}${gray.toString(16).padStart(2, '0')}${gray.toString(16).padStart(2, '0')}`;\r\n                break;\r\n\r\n            case 'any':\r\n            default:\r\n                hexColor = \"#\" + this.getRandomInt(0, 0xFFFFFF).toString(16).padStart(6, \"0\");\r\n                break;\r\n        }\r\n\r\n        // Convert to requested format\r\n        if (format === 'rgb') {\r\n            const rgb = this.hexToRgb(hexColor);\r\n            if (!rgb) return hexColor; // Fallback to hex if conversion fails\r\n            return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\r\n        }\r\n\r\n        return hexColor;\r\n    }\r\n\r\n    /**\r\n     * Converts hex color code to RGB.\r\n     */\r\n    public hexToRgb(hex: string): { r: number, g: number, b: number } | null {\r\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    /**\r\n     * Generates the permutation table for simplex noise.\r\n     */\r\n    private generateSimplexTable(): Uint8Array {\r\n        const table = new Uint8Array(512);\r\n        for (let k = 0; k < 256; k++) table[k] = k;\r\n        for (let k = 0; k < 256; k++) {\r\n            const r = k + this.getRandomInt(0, 255 - k);\r\n            [table[k], table[r]] = [table[r], table[k]];\r\n        }\r\n        for (let k = 0; k < 256; k++) table[256 + k] = table[k];\r\n        return table;\r\n    }\r\n\r\n    /**\r\n     * 2D noise function using Simplex.\r\n     * \r\n     * https://en.wikipedia.org/wiki/Simplex_noise\r\n     */\r\n    public simplexNoise2D(x: number, y: number, override: boolean = false): number {\r\n        if (override) { this.simplexTable = this.generateSimplexTable(); }\r\n\r\n        const perm = this.simplexTable;\r\n\r\n        const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\r\n        const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\r\n\r\n        const s = (x + y) * F2;\r\n        const i = Math.floor(x + s);\r\n        const j = Math.floor(y + s);\r\n\r\n        const t = (i + j) * G2;\r\n        const X0 = i - t;\r\n        const Y0 = j - t;\r\n        const x0 = x - X0;\r\n        const y0 = y - Y0;\r\n\r\n        const i1 = x0 > y0 ? 1 : 0;\r\n        const j1 = x0 > y0 ? 0 : 1;\r\n\r\n        const x1 = x0 - i1 + G2;\r\n        const y1 = y0 - j1 + G2;\r\n        const x2 = x0 - 1.0 + 2.0 * G2;\r\n        const y2 = y0 - 1.0 + 2.0 * G2;\r\n\r\n        const ii = i & 255;\r\n        const jj = j & 255;\r\n\r\n        const gi0 = perm[ii + perm[jj]] % 12;\r\n        const gi1 = perm[ii + i1 + perm[jj + j1]] % 12;\r\n        const gi2 = perm[ii + 1 + perm[jj + 1]] % 12;\r\n\r\n        const grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\r\n        [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\r\n        [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\r\n\r\n        const dot = (g: number[], x: number, y: number) => g[0] * x + g[1] * y;\r\n\r\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\r\n        let n0 = t0 < 0 ? 0 : Math.pow(t0, 4) * dot(grad3[gi0], x0, y0);\r\n\r\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\r\n        let n1 = t1 < 0 ? 0 : Math.pow(t1, 4) * dot(grad3[gi1], x1, y1);\r\n\r\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\r\n        let n2 = t2 < 0 ? 0 : Math.pow(t2, 4) * dot(grad3[gi2], x2, y2);\r\n\r\n        return 70.0 * (n0 + n1 + n2);\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ Generation ]\r\n    //\r\n    /**\r\n     * Returns a UID using pure random math. With 36 characters defined - 8 character long UID has ~2.8 trillion outcomes.\r\n     */\r\n    public generateUID(length: number, prefix?: string): string {\r\n        const chars = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n        let result = prefix ?? '';\r\n        for (let i = 0; i < length; i++) {\r\n            result += chars[this.getRandomInt(0, chars.length - 1)];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Generate a custom link using the url from the window object.\r\n     * \r\n     * Example: generateLink(abc123, 'room'); Result: https://www.link.com/?room=abc123\r\n     */\r\n    public generateLink(value: string, param?: string): string {\r\n        const base = window.location.origin;\r\n        if (param) {\r\n            return `${base}?${param}=${value}`;\r\n        }\r\n        return `${base}?${value}`;\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    // #region [ DOM ]\r\n    //\r\n    /**\r\n     * Sets the value of the chosen HTMLInputElement in the DOM.\r\n     */\r\n    public setInput(params: SetInputParams): void {\r\n        const inputElement = document.getElementById(params.inputId) as HTMLInputElement | null;\r\n        if (inputElement) {\r\n            inputElement.value = params.value.toString();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a specific slider to a specific value.\r\n     * \r\n     * Slider must have a base element and a fill element. Optionally lerp the value between the target and the current, using the max.\r\n     */\r\n    public setSlider(params: SetSliderParams): void {\r\n        const { sliderId, targetValue, maxValue, lerpTime = 0 } = params;\r\n\r\n        const sliderContainer = document.getElementById(sliderId);\r\n        const sliderFill = sliderContainer?.querySelector('div') as HTMLElement;\r\n\r\n        if (!sliderContainer || !sliderFill) {\r\n            console.warn(`Slider not found: ${sliderId}...`);\r\n            return;\r\n        }\r\n\r\n        if (maxValue === 0) {\r\n            console.warn(\"maxValue cannot be 0...\");\r\n            return;\r\n        }\r\n\r\n        // Clamp target value between 0 and maxValue\r\n        const clampedTarget = Math.max(0, Math.min(maxValue, targetValue));\r\n        const targetPercentage = (clampedTarget / maxValue) * 100;\r\n\r\n        // Get current width percentage\r\n        const currentWidthStr = sliderFill.style.width || '100%';\r\n        const currentPercentage = parseFloat(currentWidthStr.replace('%', ''));\r\n\r\n        // If already at target, no animation needed\r\n        if (Math.abs(currentPercentage - targetPercentage) < 0.1) return;\r\n\r\n        // If lerpTime is <= 0, directly set the slider to the targetValue\r\n        if (lerpTime <= 0) {\r\n            sliderFill.style.transition = 'none';\r\n            sliderFill.style.width = `${targetPercentage}%`;\r\n            return;\r\n        }\r\n\r\n        // Animate using CSS transition\r\n        sliderFill.style.transition = `width ${lerpTime}ms ease-out`;\r\n        sliderFill.style.width = `${targetPercentage}%`;\r\n\r\n        // Clear transition after animation completes to avoid interfering with future updates\r\n        setTimeout(() => {\r\n            if (sliderFill) {\r\n                sliderFill.style.transition = '';\r\n            }\r\n        }, lerpTime);\r\n    }\r\n\r\n    /**\r\n     * Update a span element with a specific number or string.\r\n     */\r\n    public setSpan(params: SetSpanParams): void {\r\n        const spanElement = document.getElementById(params.spanId);\r\n\r\n        if (!spanElement) {\r\n            console.warn(`Span not found: ${params.spanId}`);\r\n            return;\r\n        }\r\n\r\n        spanElement.textContent = params.value.toString();\r\n    }\r\n\r\n    /**\r\n     * Updates the attributes of a toggle element for reference.\r\n     */\r\n    public setToggle(params: SetToggleParams): void {\r\n        const toggle = document.getElementById(params.toggleId);\r\n        if (toggle) {\r\n            if (params.value) {\r\n                toggle.setAttribute('checked', 'true');\r\n                toggle.setAttribute('aria-checked', 'true');\r\n            } else {\r\n                toggle.removeAttribute('checked');\r\n                toggle.setAttribute('aria-checked', 'false');\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Animation ]\r\n    //\r\n    /**\r\n     * Can be used to animate most elements with text on the page.\r\n     * \r\n     * Element must have '.style.color' and '.textContent'.\r\n     */\r\n    public animateTextInElement(params: TextAnimParams): void {\r\n        const increment = (params.newValue - params.oldValue) / params.steps;\r\n        const stepTime = params.animTime / params.steps;\r\n\r\n        let currentStep = 0;\r\n        let currentValue = params.oldValue;\r\n\r\n        // Set color\r\n        params.element.style.color = params.color;\r\n\r\n        const interval = setInterval(() => {\r\n            currentStep++;\r\n            currentValue += increment;\r\n\r\n            if (currentStep >= params.steps) {\r\n                params.element.textContent = params.newValue.toFixed(params.decimals);\r\n                clearInterval(interval);\r\n\r\n                // Reset color after animation\r\n                setTimeout(() => {\r\n                    params.element.style.color = '';\r\n                }, params.timeout);\r\n            } else {\r\n                params.element.textContent = currentValue.toFixed(params.decimals);\r\n            }\r\n        }, stepTime);\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { GAME } from \"./Config\";\r\n\r\nimport { GameState } from \"./GameState\";\r\nimport { RoomManager } from \"./RoomManager\";\r\nimport { Utility } from \"./Utility\";\r\n\r\nexport class WebsocketManager {\r\n    private ws: WebSocket | null = null;\r\n\r\n    constructor(\r\n        private gameState: GameState,\r\n        private roomManager: RoomManager,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    /**\r\n     * Used for creating the websocket connection between clients.\r\n     * \r\n     * Called when joining or creating a room.\r\n     */\r\n    public connectWebSocket(): void {\r\n        const wsProtocol = location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\r\n        let wsHost: string;\r\n\r\n        if (location.port === '8888') { // Electron testing → connect to localhost:8080\r\n            wsHost = 'localhost:8080';\r\n            this.ws = new WebSocket(`ws://${wsHost}`);\r\n        } else if (location.port === '9999') { // Electron production → connect to saltpeter.xyz\r\n            wsHost = 'saltpeter.xyz';\r\n            this.ws = new WebSocket(`wss://${wsHost}`);\r\n        } else { // Browser (not Electron)\r\n            wsHost = location.hostname === 'localhost' ? 'localhost:8080' : location.host;\r\n            this.ws = new WebSocket(`${wsProtocol}//${wsHost}`);\r\n        }\r\n\r\n        this.ws.onopen = () => {\r\n            console.log(\"Connected to WebSocket\");\r\n            this.roomManager.setWebSocket(this.ws!);\r\n        };\r\n\r\n        this.ws.onclose = () => {\r\n            console.log(\"Disconnected from WebSocket\");\r\n            this.gameState.gameInProgress = false;\r\n            this.utility.safeTimeout(() => this.connectWebSocket(), GAME.RECONNECT_DELAY);\r\n        };\r\n\r\n        this.ws.onerror = (error) => {\r\n            console.error(\"WebSocket error:\", error);\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the current WebSocket connection.\r\n     */\r\n    public getWebSocket(): WebSocket | null {\r\n        return this.ws;\r\n    }\r\n}","import { CANVAS, OBJECT_DEFAULTS, SHRAPNEL } from \"../Config\";\r\nimport { AttackType, AudioParams, CreateParticleParams, DecalParams, PlayerHitParams, Projectile, ProjectileOverrides, Shrapnel, Vec2 } from \"../Types\";\r\n\r\nimport { Animator } from \"../Animator\";\r\nimport { AudioManager } from \"../AudioManager\";\r\nimport { CollisionsManager } from \"../CollisionsManager\";\r\nimport { DecalsManager } from \"../DecalsManager\";\r\nimport { GameState } from \"../GameState\";\r\nimport { LuckController } from \"./LuckController\";\r\nimport { ParticlesManager } from \"../ParticlesManager\";\r\nimport { PlayerState } from \"./PlayerState\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { Utility } from \"../Utility\";\r\nimport { PlayerController, } from \"./PlayerController\";\r\nimport { UserInterface } from \"../UserInterface\";\r\nimport { AudioConfig } from \"../AudioConfig\";\r\n\r\nexport class CombatController {\r\n    public projectiles: Map<string, Projectile> = new Map();\r\n\r\n    constructor(\r\n        private animator: Animator,\r\n        private audioConfig: AudioConfig,\r\n        private audioManager: AudioManager,\r\n        private collisionsManager: CollisionsManager,\r\n        private decalsManager: DecalsManager,\r\n        private gameState: GameState,\r\n        private luckController: LuckController,\r\n        private particlesManager: ParticlesManager,\r\n        private playerController: PlayerController,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) { }\r\n\r\n    // #region [ Attack ]\r\n    /**\r\n     * Entrypoint for triggering attacks based on type needed.\r\n     */\r\n    public triggerAttack(type: AttackType): void {\r\n        switch (type) {\r\n            case 'melee':\r\n                this.startMelee();\r\n                break;\r\n            case 'ranged':\r\n                this.startBurst();\r\n                break;\r\n            default:\r\n                console.warn(`Unknown attack type: ${type}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responsible for what happens during attack actions.\r\n     */\r\n    public updateAttack(delta: number): void {\r\n        if (!this.gameState.gameInProgress || this.playerState.myPlayer.stats.health.value <= 0) return;\r\n\r\n        const currentTime = Date.now();\r\n\r\n        // Handle reload\r\n        if (this.playerState.isReloading) {\r\n            if (currentTime >= this.playerState.reloadStartTime + this.playerState.myPlayer.actions.primary.reload.time) { // Reload complete\r\n                this.finishReload();\r\n            }\r\n            return; // Can't shoot while reloading\r\n        }\r\n\r\n        // Handle ongoing burst\r\n        if (this.playerState.isBurstActive && currentTime >= this.playerState.nextBurstShotTime) {\r\n            // Check if we still have ammo and haven't finished the intended burst amount\r\n            const ammoNeeded = this.playerState.myPlayer.actions.primary.burst.amount;\r\n            if (this.playerState.myPlayer.actions.primary.magazine.currentAmmo > 0 && this.playerState.currentBurstShot < ammoNeeded) {\r\n                const angle = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                const targetDir = { x: Math.cos(angle), y: Math.sin(angle) };\r\n\r\n                const triggeredUniques = this.triggerBurstUniques();\r\n                if (triggeredUniques.length === 0) {\r\n                    this.launchProjectile(targetDir);\r\n                }\r\n\r\n                this.playerState.currentBurstShot++;\r\n                this.playerState.myPlayer.actions.primary.magazine.currentAmmo--; // Use 1 ammo per shot in burst\r\n\r\n                console.log(`Burst shot ${this.playerState.currentBurstShot}! Magazine: ${this.playerState.myPlayer.actions.primary.magazine.currentAmmo}/${this.playerState.myPlayer.actions.primary.magazine.size}, Inventory: ${this.playerState.myPlayer.actions.primary.magazine.currentReserve}/${this.playerState.myPlayer.actions.primary.magazine.maxReserve}`);\r\n\r\n                if (this.playerState.currentBurstShot >= ammoNeeded || this.playerState.myPlayer.actions.primary.magazine.currentAmmo === 0) { // Burst complete (reached burst amount or out of ammo)\r\n                    this.playerState.isBurstActive = false;\r\n                    this.playerState.currentBurstShot = 0;\r\n                } else { // Schedule next shot in burst\r\n                    this.playerState.nextBurstShotTime = currentTime + this.playerState.myPlayer.actions.primary.burst.delay;\r\n                }\r\n            } else { // Out of ammo or reached burst limit\r\n                this.playerState.isBurstActive = false;\r\n                this.playerState.currentBurstShot = 0;\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Melee ]\r\n    //\r\n    /**\r\n     * Checks if the player can melee or not.\r\n     */\r\n    public canMelee(): boolean {\r\n        const now = Date.now(); 1\r\n        return (\r\n            !this.playerState.isMelee &&\r\n            now >= this.playerState.lastMeleeTime + this.playerState.myPlayer.actions.melee.cooldown &&\r\n            this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) &&\r\n            !this.playerState.isBurstActive &&\r\n            !this.playerState.isReloading\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Triggers a melee attack, using standard projectiles with special params.\r\n     */\r\n    private startMelee(): void {\r\n        this.playerState.isMelee = true;\r\n        this.playerState.lastMeleeTime = Date.now();\r\n\r\n        this.playerState.myPlayer.rig.weapon = this.playerState.myPlayer.inventory.melee;\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'weapon-change',\r\n            playerId: this.userId,\r\n            weapon: this.playerState.myPlayer.inventory.melee\r\n        }));\r\n\r\n        // Calculate melee direction (use current rotation)\r\n        const angle = this.playerState.myPlayer.transform.rot;\r\n        const range = this.playerState.myPlayer.actions.melee.range;\r\n        const size = this.playerState.myPlayer.actions.melee.size;\r\n\r\n        // Use the same spawn offset as normal projectiles\r\n        const spawnOffset = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer) +\r\n            this.playerState.myPlayer.actions.primary.projectile.size +\r\n            this.playerState.myPlayer.actions.primary.offset;\r\n\r\n        // Calculate spawn position at the tip of the weapon\r\n        const spawnX = this.playerState.myPlayer.transform.pos.x + Math.cos(angle - Math.PI / 2) * spawnOffset;\r\n        const spawnY = this.playerState.myPlayer.transform.pos.y + Math.sin(angle - Math.PI / 2) * spawnOffset;\r\n\r\n        const velocity = {\r\n            x: Math.cos(angle - Math.PI / 2) * range,\r\n            y: Math.sin(angle - Math.PI / 2) * range\r\n        };\r\n\r\n        const meleeProjectile = {\r\n            id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n            transform: {\r\n                pos: { x: spawnX, y: spawnY },\r\n                rot: angle\r\n            },\r\n            timestamp: Date.now(),\r\n            color: 'rgba(255, 255, 255, 0)',\r\n            damage: this.playerState.myPlayer.actions.melee.damage,\r\n            distanceTraveled: 0,\r\n            length: size,\r\n            ownerId: this.userId,\r\n            range: range,\r\n            size: size,\r\n            velocity: velocity\r\n        };\r\n\r\n        this.projectiles.set(meleeProjectile.id, meleeProjectile);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'projectile-launch',\r\n            projectile: meleeProjectile\r\n        }));\r\n\r\n        // Remove melee projectile after it has traveled its duration\r\n        this.utility.safeTimeout(() => {\r\n            this.projectiles.delete(meleeProjectile.id);\r\n            this.playerState.isMelee = false;\r\n\r\n            this.playerState.myPlayer.rig.weapon = this.playerState.myPlayer.inventory.primary;\r\n\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'weapon-change',\r\n                playerId: this.userId,\r\n                weapon: this.playerState.myPlayer.inventory.primary\r\n            }));\r\n        }, this.playerState.myPlayer.actions.melee.duration);\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Ranged ]\r\n    //\r\n    /**\r\n     * Entrypoint for ranged attacks. When this is called, it starts the primary attack flow.\r\n     */\r\n    private startBurst(): void {\r\n        if (this.playerState.isBurstActive || !this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) || this.playerState.isReloading) return;\r\n\r\n        const now = Date.now();\r\n        if (now < this.playerState.lastShotTime + this.playerState.myPlayer.actions.primary.buffer) return;\r\n        this.playerState.lastShotTime = now;\r\n\r\n        // Check if we have enough ammo for the burst\r\n        const ammoNeeded = this.playerState.myPlayer.actions.primary.burst.amount;\r\n        const ammoToUse = Math.min(ammoNeeded, this.playerState.myPlayer.actions.primary.magazine.currentAmmo);\r\n\r\n        if (ammoToUse === 0) {\r\n            console.log('Out of ammo! Magazine empty.');\r\n\r\n            this.animator.animateCharacterPart({\r\n                playerId: this.userId,\r\n                part: 'WEAPON',\r\n                frames: {\r\n                    0: { x: 0, y: 8 } // Slide held back\r\n                },\r\n                duration: 0,\r\n                partIndex: 1\r\n            }); // duration=0 means infinite/held\r\n\r\n            this.audioManager.playAudioNetwork({\r\n                src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.weapon.glock.empty),\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.975, max: 1.05 },\r\n                spatial: {\r\n                    blend: 1.0,\r\n                    pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n                },\r\n                volume: { min: 0.985, max: 1 }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.playerState.isBurstActive = true;\r\n        this.playerState.currentBurstShot = 0;\r\n\r\n        // Calculate direction from player's current rotation instead of mouse\r\n        const angle = this.playerState.myPlayer.transform.rot - Math.PI / 2; // Subtract PI/2 to convert from visual rotation to direction\r\n        const targetDir = { x: Math.cos(angle), y: Math.sin(angle) };\r\n\r\n        const triggeredUniques = this.triggerBurstUniques();\r\n        if (triggeredUniques.length === 0) {\r\n            this.launchProjectile(targetDir);\r\n        }\r\n\r\n        this.playerState.currentBurstShot++;\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo--; // Use 1 ammo per shot in burst\r\n\r\n        // Blend in empty sound as magazine gets low\r\n        // This is a local sound only, to help the player manage their ammo\r\n        const ammoRatio = this.playerState.myPlayer.actions.primary.magazine.currentAmmo / this.playerState.myPlayer.actions.primary.magazine.size;\r\n        const emptyBlend = 1 - ammoRatio; // 0 when full, 1 when empty\r\n\r\n        if (emptyBlend > 0.5) { // Only play when below 50% ammo (half mag empty)\r\n            const blendVolume = (emptyBlend - 0.5) * 2 * 0.5; // Remap 0.5-1.0 to 0-0.5 volume\r\n            this.audioManager.playAudio({ // Play sound locally\r\n                src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.weapon.glock.empty), // TODO: Use current weapon\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.975, max: 1.05 },\r\n                volume: { min: blendVolume, max: blendVolume }\r\n            });\r\n        }\r\n\r\n        // If burst has more shots and we have ammo, schedule the next one\r\n        if (this.playerState.myPlayer.actions.primary.burst.amount > 1 && this.playerState.myPlayer.actions.primary.magazine.currentAmmo > 0 && this.playerState.currentBurstShot < ammoToUse) {\r\n            this.playerState.nextBurstShotTime = Date.now() + this.playerState.myPlayer.actions.primary.burst.delay;\r\n        } else { // Burst complete\r\n            this.playerState.isBurstActive = false;\r\n            this.playerState.currentBurstShot = 0;\r\n\r\n            if (this.playerState.myPlayer.actions.primary.magazine.currentAmmo === 0) {\r\n                this.animator.animateCharacterPart({\r\n                    playerId: this.userId,\r\n                    part: 'WEAPON',\r\n                    frames: {\r\n                        0: { x: 0, y: 8 } // Slide held back\r\n                    },\r\n                    duration: 0,\r\n                    partIndex: 1\r\n                }); // duration=0 means infinite/held\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates physics for projectile and adds them to mapping.\r\n     */\r\n    private launchProjectile(dir: Vec2, overrides?: ProjectileOverrides): void {\r\n        console.log(`Fired shot!`);\r\n\r\n        // Use the passed direction and normalize it\r\n        const distance = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\r\n        if (distance === 0) return;\r\n\r\n        const dirX = dir.x / distance;\r\n        const dirY = dir.y / distance;\r\n\r\n        // Animate weapon slide (glock_slide.png is index 1 in the WEAPON.GLOCK array)\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 0 },    // Start position\r\n                0.5: { x: 0, y: 20 }, // Pull back slide\r\n                1: { x: 0, y: 0 }     // Return to start\r\n            },\r\n            duration: 175,\r\n            partIndex: 1\r\n        });\r\n\r\n        const canTriggerUnique = overrides?.canTriggerUnique ?? true;\r\n        const projectileAmount = overrides?.amount ?? this.playerState.myPlayer.actions.primary.projectile.amount;\r\n        const projectileColor = overrides?.color ?? this.playerState.myPlayer.actions.primary.projectile.color;\r\n        const projectileDamage = overrides?.damage ?? this.playerState.myPlayer.actions.primary.projectile.damage;\r\n        const projectileLength = overrides?.length ?? this.playerState.myPlayer.actions.primary.projectile.length;\r\n        const projectileRange = overrides?.range ?? this.playerState.myPlayer.actions.primary.projectile.range;\r\n        const projectileSize = overrides?.size ?? this.playerState.myPlayer.actions.primary.projectile.size;\r\n        const projectileSpeed = overrides?.speed ?? this.playerState.myPlayer.actions.primary.projectile.speed;\r\n        const projectileSpread = overrides?.spread ?? this.playerState.myPlayer.actions.primary.projectile.spread;\r\n\r\n        // Calculate spawn offset\r\n        const baseAngle = Math.atan2(dirY, dirX);\r\n        const spawnOffset = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer) + projectileSize + this.playerState.myPlayer.actions.primary.offset;\r\n        const bulletSpawnX = this.playerState.myPlayer.transform.pos.x + Math.cos(baseAngle) * spawnOffset;\r\n        const bulletSpawnY = this.playerState.myPlayer.transform.pos.y + Math.sin(baseAngle) * spawnOffset;\r\n        const rightX = -dirY;\r\n        const rightY = dirX;\r\n\r\n        // TODO: Wrap all of these particles in some sort of defined type that contains this in one message\r\n\r\n        const muzzleParams: CreateParticleParams = {\r\n            id: `muzzle_${Date.now()}`,\r\n            pos: {\r\n                x: bulletSpawnX,\r\n                y: bulletSpawnY\r\n            },\r\n            particleParams: this.particlesManager.particlesConfig.particles.glock.muzzle.flash, // TODO: Get current weapon\r\n            direction: { x: dirX, y: dirY }\r\n        }\r\n        this.particlesManager.createParticles(muzzleParams);\r\n\r\n        const smokeParams: CreateParticleParams = {\r\n            id: `smoke_${Date.now()}`,\r\n            pos: {\r\n                x: bulletSpawnX,\r\n                y: bulletSpawnY\r\n            },\r\n            particleParams: this.particlesManager.particlesConfig.particles.glock.muzzle.smoke, // TODO: Get current weapon\r\n            direction: { x: dirX * 0.3, y: dirY * 0.3 }\r\n        }\r\n        this.particlesManager.createParticles(smokeParams);\r\n\r\n        const shellParams: CreateParticleParams = {\r\n            id: `shell_${Date.now()}`,\r\n            pos: {\r\n                x: bulletSpawnX - 5,\r\n                y: bulletSpawnY - 5\r\n            },\r\n            particleParams: this.particlesManager.particlesConfig.particles.glock.projectile.shell, // TODO: Get current weapon\r\n            direction: { x: rightX * 0.8 + dirX * -0.2, y: rightY * 0.8 + dirY * -0.2 } // Right + slightly back\r\n        }\r\n        this.particlesManager.createParticles(shellParams);\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.weapon.glock.attack), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.95, max: 1.125 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y },\r\n                rolloff: {\r\n                    distance: Math.max(CANVAS.WIDTH, CANVAS.HEIGHT) * 2,\r\n                    factor: 0.5,\r\n                    type: 'logarithmic'\r\n                }\r\n            },\r\n            volume: { min: 0.965, max: 1 }\r\n        });\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.weapon.glock.shell), // TODO: Use current weapon\r\n            delay: { min: 0.25, max: 0.5 }, // Play with a short delay trigger to simulate the shell hitting the ground\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.95, max: 1.125 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.375, max: 0.85 }\r\n        });\r\n\r\n        // Create projectiles\r\n        for (let i = 0; i < projectileAmount; i++) {\r\n            if (this.playerState.myPlayer.unique.length > 0 && canTriggerUnique) {\r\n                const shuffledUniques = this.utility.getShuffledArray(this.playerState.myPlayer.unique);\r\n\r\n                for (const unique of shuffledUniques) {\r\n                    if (this.luckController.luckRoll()) {\r\n                        this.triggerUnique(unique);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const spread = (Math.random() - 0.5) * (projectileSpread / 100);\r\n            const angle = Math.atan2(dirY, dirX) + spread;\r\n            const dir = this.utility.forward(angle);\r\n\r\n            const projectile: Projectile = {\r\n                id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n                transform: {\r\n                    pos: {\r\n                        x: bulletSpawnX,\r\n                        y: bulletSpawnY,\r\n                    },\r\n                    rot: angle\r\n                },\r\n                timestamp: Date.now(),\r\n                color: projectileColor,\r\n                damage: projectileDamage,\r\n                distanceTraveled: 0,\r\n                length: projectileLength,\r\n                ownerId: this.userId,\r\n                range: projectileRange * 100, // Convert to px\r\n                size: projectileSize,\r\n                velocity: {\r\n                    x: dir.x * projectileSpeed,\r\n                    y: dir.y * projectileSpeed,\r\n                },\r\n            };\r\n\r\n            this.projectiles.set(projectile.id, projectile);\r\n\r\n            // Send projectile to other players\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'projectile-launch',\r\n                projectile: projectile\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates all projectiles in the game locally.\r\n     */\r\n    public updateProjectiles(delta: number): void {\r\n        const projectilesToRemove: string[] = [];\r\n\r\n        this.projectiles.forEach((projectile, id) => {\r\n            // Update movement (with optional spatial targeting nudge)\r\n            if (projectile.ownerId === this.userId) {\r\n                if (this.playerState.myPlayer.unique.includes('spatial_targeting')) {\r\n                    const aim = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                    const dx = Math.cos(aim), dy = Math.sin(aim);\r\n                    const speed = Math.sqrt(projectile.velocity.x ** 2 + projectile.velocity.y ** 2);\r\n                    const vx = projectile.velocity.x / speed, vy = projectile.velocity.y / speed;\r\n                    const lerpFactor = 0.05;\r\n                    const lx = vx + (dx - vx) * lerpFactor;\r\n                    const ly = vy + (dy - vy) * lerpFactor;\r\n                    const norm = Math.sqrt(lx ** 2 + ly ** 2);\r\n\r\n                    projectile.velocity.x = (lx / norm) * speed;\r\n                    projectile.velocity.y = (ly / norm) * speed;\r\n                    projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n                }\r\n            }\r\n            projectile.transform.pos.x += projectile.velocity.x * delta;\r\n            projectile.transform.pos.y += projectile.velocity.y * delta;\r\n\r\n            // Update distance traveled\r\n            const frameDistance = Math.sqrt(\r\n                projectile.velocity.x * projectile.velocity.x +\r\n                projectile.velocity.y * projectile.velocity.y\r\n            ) * delta;\r\n            projectile.distanceTraveled += frameDistance;\r\n\r\n            // Check collision with my player (only if I'm alive)\r\n            if (this.collisionsManager.collisionsEnabled(this.playerState.myPlayer)) {\r\n                const dx = projectile.transform.pos.x - this.playerState.myPlayer.transform.pos.x;\r\n                const dy = projectile.transform.pos.y - this.playerState.myPlayer.transform.pos.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                const playerCollider = this.collisionsManager.getPlayerCollider(this.playerState.myPlayer);\r\n                const canDeflect = this.playerState.myPlayer.unique.includes('kinetic_brain') &&\r\n                    distance <= playerCollider * 4 &&\r\n                    distance > playerCollider + projectile.size &&\r\n                    projectile.ownerId !== this.userId;\r\n\r\n                if (canDeflect) {\r\n                    if (this.luckController.luckRoll()) {\r\n                        console.log('Kinetic Brain activated! Deflecting projectile.');\r\n\r\n                        // Calculate normal from player center to projectile\r\n                        const normal = {\r\n                            x: (projectile.transform.pos.x - this.playerState.myPlayer.transform.pos.x) / distance,\r\n                            y: (projectile.transform.pos.y - this.playerState.myPlayer.transform.pos.y) / distance\r\n                        };\r\n\r\n                        const speedReduction = this.utility.getRandomNum(0.85, 0.95);\r\n\r\n                        // Reflect velocity off the normal\r\n                        const reflected = this.utility.getReflection(projectile.velocity, normal);\r\n                        projectile.velocity.x = reflected.x * speedReduction; // Slow down\r\n                        projectile.velocity.y = reflected.y * 0.85;\r\n\r\n                        // Change ownership\r\n                        projectile.ownerId = this.userId;\r\n                        projectile.color = this.playerState.myPlayer.actions.primary.projectile.color;\r\n\r\n                        // Update rotation\r\n                        projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n\r\n                        // Broadcast deflection\r\n                        this.roomManager.sendMessage(JSON.stringify({\r\n                            type: 'projectile-update',\r\n                            projectileId: projectile.id,\r\n                            newOwnerId: this.userId,\r\n                            velocity: projectile.velocity,\r\n                            color: projectile.color\r\n                        }));\r\n\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (distance <= playerCollider + projectile.size) { // Projectile collided with my player\r\n                    projectilesToRemove.push(id);\r\n\r\n                    const actualDamage = Math.max(0, projectile.damage - this.playerState.myPlayer.stats.defense);\r\n                    this.playerState.myPlayer.stats.health.value = Math.max(0, this.playerState.myPlayer.stats.health.value - actualDamage);\r\n\r\n                    const params: PlayerHitParams = {\r\n                        target: this.playerState.myPlayer,\r\n                        shooterId: projectile.ownerId,\r\n                        damage: projectile.damage,\r\n                        newHealth: this.playerState.myPlayer.stats.health.value,\r\n                        source: projectile,\r\n                        wasKill: this.playerState.myPlayer.stats.health.value <= 0\r\n                    }\r\n                    this.playerController.playerHit(params);\r\n                }\r\n            }\r\n\r\n            // Check collision with other players (for my projectiles only)\r\n            if (projectile.ownerId === this.userId) {\r\n                this.playerState.players.forEach((player, playerId) => {\r\n                    if (this.collisionsManager.collisionsEnabled(player)) { // Only check collision if the player has collisions enabled\r\n                        const dx2 = projectile.transform.pos.x - player.transform.pos.x;\r\n                        const dy2 = projectile.transform.pos.y - player.transform.pos.y;\r\n                        const distance2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\r\n\r\n                        if (distance2 <= this.collisionsManager.getPlayerCollider(player) + projectile.size) { // My projectile hit another player!\r\n                            projectilesToRemove.push(id);\r\n\r\n                            const actualDamage = Math.max(0, projectile.damage - player.stats.defense);\r\n                            const newHealth = Math.max(0, player.stats.health.value - actualDamage);\r\n                            player.stats.health.value = newHealth;\r\n\r\n                            const params: PlayerHitParams = {\r\n                                target: player,\r\n                                shooterId: this.userId,\r\n                                damage: projectile.damage,\r\n                                newHealth: newHealth,\r\n                                source: projectile,\r\n                                wasKill: newHealth <= 0\r\n                            }\r\n                            this.playerController.playerHit(params);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Check if projectile should be removed (range/bounds)\r\n            if (projectile.distanceTraveled >= projectile.range ||\r\n                projectile.transform.pos.x < 0 || projectile.transform.pos.x > CANVAS.WIDTH ||\r\n                projectile.transform.pos.y < 0 || projectile.transform.pos.y > CANVAS.HEIGHT) {\r\n\r\n                projectilesToRemove.push(id);\r\n\r\n                // Create burn mark where projectile expired (only for my projectiles)\r\n                if (projectile.ownerId === this.userId) {\r\n                    const triggeredUniques = this.triggerCollisionUniques(projectile.transform.pos);\r\n\r\n                    // TODO: Catch the triggered uniques, and use that string array, might be a bouncing bullet or something that makes it not get destroyed yet\r\n\r\n                    if (projectile.distanceTraveled >= projectile.range) {\r\n                        const decalParams: DecalParams = {\r\n                            id: `impact_${id}`,\r\n                            pos: {\r\n                                x: projectile.transform.pos.x,\r\n                                y: projectile.transform.pos.y\r\n                            },\r\n                            type: 'parametric',\r\n                            parametric: this.decalsManager.decalsConfig.decals.projectile\r\n                        };\r\n                        this.decalsManager.createDecal(decalParams);\r\n                    }\r\n\r\n                    const sparksParams: CreateParticleParams = {\r\n                        id: `sparks_${id}`,\r\n                        pos: {\r\n                            x: projectile.transform.pos.x,\r\n                            y: projectile.transform.pos.y\r\n                        },\r\n                        particleParams: this.particlesManager.particlesConfig.particles.glock.projectile.sparks  // TODO: Use current projectile hit effect\r\n                    }\r\n                    this.particlesManager.createParticles(sparksParams);\r\n\r\n                    const sfxParams: AudioParams = {\r\n                        src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.impact.metal.bullet), // TODO: Use current projectile type\r\n                        listener: {\r\n                            x: this.playerState.myPlayer.transform.pos.x,\r\n                            y: this.playerState.myPlayer.transform.pos.y\r\n                        },\r\n                        output: 'sfx',\r\n                        pitch: { min: 0.95, max: 1.125 },\r\n                        spatial: {\r\n                            blend: 1.0,\r\n                            pos: { x: projectile.transform.pos.x, y: projectile.transform.pos.y }\r\n                        },\r\n                        volume: { min: 0.965, max: 1 }\r\n                    }\r\n                    this.audioManager.playAudioNetwork(sfxParams);\r\n\r\n                    // Notify others to remove projectile\r\n                    this.roomManager.sendMessage(JSON.stringify({\r\n                        type: 'projectile-remove',\r\n                        projectileId: id\r\n                    }));\r\n                }\r\n            }\r\n        });\r\n\r\n        // Remove projectiles locally\r\n        projectilesToRemove.forEach(id => {\r\n            this.projectiles.delete(id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to toggle auto fire\r\n     */\r\n    public toggleAutoFire(timestamp: number): void {\r\n        this.playerState.canAutoFire = true;\r\n\r\n        const cachedBuffer = this.playerState.myPlayer.actions.primary.buffer\r\n\r\n        this.playerState.myPlayer.actions.primary.buffer *= 0.5; // TODO: Pass the buffer change\r\n\r\n        console.log(`Auto-fire enabled until ${timestamp}`);\r\n\r\n        this.utility.safeTimeout(() => {\r\n            this.playerState.canAutoFire = false;\r\n            this.playerState.myPlayer.actions.primary.buffer = cachedBuffer;\r\n            console.log('Auto-fire disabled.');\r\n        }, timestamp - Date.now()); // Duration of override\r\n    } // TODO: Timestamp duration should be optional, if not passed toggle is permanent on/off\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Uniques ]\r\n    //\r\n    /**\r\n     * Manually triggers a specific unique effect when called.\r\n     */\r\n    private triggerUnique(unique: string, pos?: Vec2): void {\r\n        if (unique === \"cluster_module\") {\r\n            if (pos) {\r\n                const amount = this.utility.getRandomInt(3, 6);\r\n                const images: string[] = [];\r\n                for (let i = 0; i < amount; i++) {\r\n                    images.push(this.utility.getRandomInArray(SHRAPNEL.PIECE));\r\n                }\r\n                const shrapnel: Shrapnel = {\r\n                    amount: amount,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage * 0.1,\r\n                    images: images,\r\n                    lifetime: { // ms\r\n                        min: 100,\r\n                        max: 500\r\n                    },\r\n                    pos: {\r\n                        x: pos.x,\r\n                        y: pos.y\r\n                    },\r\n                    size: { // px^2\r\n                        min: 8,\r\n                        max: 14\r\n                    },\r\n                    speed: { // px/frame*(dt)\r\n                        min: 10,\r\n                        max: 15\r\n                    },\r\n                    torque: { // deg/frame*dt\r\n                        min: -360,\r\n                        max: 360\r\n                    }\r\n                }\r\n                this.particlesManager.spawnShrapnel(shrapnel);\r\n            }\r\n        }\r\n\r\n        if (unique === \"projectile_array\") {\r\n            const amount = this.utility.getRandomInt(1, 3);\r\n            for (let i = 0; i < amount; i++) {\r\n                const dir = this.utility.getRandomDirection(360);\r\n\r\n                const params: ProjectileOverrides = {\r\n                    canTriggerUnique: false,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage / 2,\r\n                    range: this.utility.getRandomNum((this.playerState.myPlayer.actions.primary.projectile.range / 2), this.playerState.myPlayer.actions.primary.projectile.range),\r\n                    spread: this.utility.getRandomNum(this.playerState.myPlayer.actions.primary.projectile.spread, (this.playerState.myPlayer.actions.primary.projectile.spread * 2))\r\n                }\r\n\r\n\r\n                this.launchProjectile(dir, params);\r\n            }\r\n        }\r\n\r\n        console.log(`Triggered Unique: ${unique}`)\r\n    }\r\n\r\n    /**\r\n     * Responsible for processing possible unique triggers on burst. (Before launchProjectile is called...)\r\n     */\r\n    private triggerBurstUniques(): string[] {\r\n        const triggered: string[] = [];\r\n\r\n        if (this.playerState.myPlayer.unique.includes('muzzle_splitter')) {\r\n            if (this.luckController.luckRoll()) {\r\n                const baseAngle = this.playerState.myPlayer.transform.rot - Math.PI / 2;\r\n                const angleOffset = 10 * (Math.PI / 180); // 10 degrees\r\n\r\n                const dirA = { x: Math.cos(baseAngle - angleOffset), y: Math.sin(baseAngle - angleOffset) };\r\n                const dirB = { x: Math.cos(baseAngle + angleOffset), y: Math.sin(baseAngle + angleOffset) };\r\n\r\n                const baseParams: ProjectileOverrides = {\r\n                    canTriggerUnique: false,\r\n                    damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                    range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                    size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                    speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                    color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                    length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                    spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                };\r\n\r\n                this.launchProjectile(dirA, baseParams);\r\n                this.launchProjectile(dirB, baseParams);\r\n\r\n                console.log(`Triggered burst unique: muzzle_splitter`);\r\n                triggered.push('muzzle_splitter');\r\n            }\r\n        }\r\n\r\n        return triggered;\r\n    }\r\n\r\n    /**\r\n     * Responsible for checking specific uniques on collision.\r\n     */\r\n    private triggerCollisionUniques(pos?: Vec2): string[] {\r\n        if (this.playerState.myPlayer.unique.length === 0) return [];\r\n\r\n        const succeededUniques: string[] = [];\r\n\r\n        for (const unique of this.playerState.myPlayer.unique) {\r\n            if (unique === 'cluster_module') {\r\n                const succeeded = this.luckController.luckRoll();\r\n\r\n                if (succeeded) {\r\n                    this.triggerUnique(unique, pos);\r\n                    succeededUniques.push('cluster_module');\r\n                }\r\n            }\r\n        }\r\n        return succeededUniques;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Reload ]\r\n    //\r\n    /**\r\n     * Checks if the player can reload or not.\r\n     */\r\n    private canReload(): boolean {\r\n        return (\r\n            !this.playerState.isReloading &&\r\n            this.playerState.myPlayer.actions.primary.magazine.currentAmmo < this.playerState.myPlayer.actions.primary.magazine.size &&\r\n            this.playerState.myPlayer.actions.primary.magazine.currentReserve > 0 && !this.playerState.isMelee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Manual trigger for reload. Called when pressing the assigned keybind.\r\n     */\r\n    public startReload(): void {\r\n        if (!this.canReload()) return;\r\n        console.log(`Reloading...`);\r\n\r\n        this.playerState.isReloading = true;\r\n        this.playerState.reloadStartTime = Date.now();\r\n\r\n        // Cancel any ongoing burst\r\n        this.playerState.isBurstActive = false;\r\n        this.playerState.currentBurstShot = 0;\r\n\r\n        this.decalsManager.spawnMagazineDecal();\r\n\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 8 } // Slide held back\r\n            },\r\n            duration: 0,\r\n            partIndex: 1\r\n        }); // duration=0 means infinite/held\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.weapon.glock.reload.start), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.975, max: 1.05 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.985, max: 1 }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ends the reload loop, and updates visual state.\r\n     */\r\n    private finishReload(): void {\r\n        const magazineSpace = this.playerState.myPlayer.actions.primary.magazine.size - this.playerState.myPlayer.actions.primary.magazine.currentAmmo;\r\n        const ammoToReload = Math.min(magazineSpace, this.playerState.myPlayer.actions.primary.magazine.currentReserve);\r\n\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo += ammoToReload;\r\n        this.playerState.myPlayer.actions.primary.magazine.currentReserve -= ammoToReload;\r\n        this.playerState.isReloading = false;\r\n\r\n        this.ui.ammoReservesUIController.removeAmmoFromReserveUI(ammoToReload);\r\n\r\n        this.animator.animateCharacterPart({\r\n            playerId: this.userId,\r\n            part: 'WEAPON',\r\n            frames: {\r\n                0: { x: 0, y: 20 }, // Start with slide back\r\n                1: { x: 0, y: 0 } // Return to start\r\n            },\r\n            duration: 175,\r\n            partIndex: 1\r\n        });\r\n\r\n        this.audioManager.playAudioNetwork({\r\n            src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.weapon.glock.reload.end), // TODO: Use current weapon\r\n            listener: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            output: 'sfx',\r\n            pitch: { min: 0.975, max: 1.05 },\r\n            spatial: {\r\n                blend: 1.0,\r\n                pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n            },\r\n            volume: { min: 0.985, max: 1 }\r\n        });\r\n\r\n        console.log(`Reload complete...`);\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { NETWORK } from \"../Config\";\r\n\r\nimport { PlayerState } from \"./PlayerState\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { MoveController } from \"./MoveController\";\r\nimport { StaminaController } from \"./StaminaController\";\r\nimport { CombatController } from \"./CombatController\";\r\nimport { CollisionsManager } from \"../CollisionsManager\";\r\n\r\nexport class DashController {\r\n    constructor(\r\n        private collisionsManager: CollisionsManager,\r\n        private combatController: CombatController,\r\n        private moveController: MoveController,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private staminaController: StaminaController,\r\n        private userId: string\r\n    ) { }\r\n\r\n    // #region [ Dash ]\r\n    //\r\n    /**\r\n     * Start a dash when the assigned keybind is pressed.\r\n     */\r\n    public startDash(): void {\r\n        if (this.playerState.isDashing || !this.collisionsManager.collisionsEnabled(this.playerState.myPlayer) || !this.moveController.isMoving()) return;\r\n\r\n        const currentTime = Date.now(); // Cooldown check first\r\n        if (currentTime < this.playerState.lastDashTime + this.playerState.myPlayer.actions.dash.cooldown) {\r\n            console.log('Dash on cooldown');\r\n            return;\r\n        }\r\n\r\n        // Input check\r\n        let { inputX, inputY, inputLength } = this.moveController.getMoveInput();\r\n\r\n        // Normalize input\r\n        if (!this.moveController.isMoving()) {\r\n            console.log('No movement input for dash');\r\n            return;\r\n        }\r\n\r\n        inputX = inputX / inputLength;\r\n        inputY = inputY / inputLength;\r\n\r\n        if (!this.staminaController.requestStamina(this.playerState.myPlayer.actions.dash.drain)) {\r\n            console.log('Not enough stamina to dash');\r\n            return;\r\n        }\r\n\r\n        if (this.playerState.myPlayer.unique.includes('spectral_image')) {\r\n            // Set local state\r\n            this.playerState.myPlayer.flags.hidden = true;\r\n            this.playerState.myPlayer.flags.invulnerable = true;\r\n\r\n            // Broadcast partial update\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'partial-state',\r\n                userId: this.userId,\r\n                flags: {\r\n                    hidden: true,\r\n                    invulnerable: true\r\n                }\r\n            }));\r\n        }\r\n\r\n        // Start dash\r\n        this.playerState.isDashing = true;\r\n        this.playerState.dashStartTime = currentTime;\r\n        this.playerState.lastDashTime = currentTime;\r\n\r\n        // Set dash velocity\r\n        const dashSpeed = this.playerState.myPlayer.stats.speed * this.playerState.myPlayer.actions.dash.multiplier;\r\n        this.playerState.playerVelocityX = inputX * dashSpeed;\r\n        this.playerState.playerVelocityY = inputY * dashSpeed;\r\n\r\n        console.log(`Dashing! Speed: ${dashSpeed}`);\r\n    }\r\n\r\n    /**\r\n     * Process dash update loop when isDashing.\r\n     */\r\n    public updateDash(delta: number): void {\r\n        if (!this.playerState.isDashing) return;\r\n\r\n        const currentTime = Date.now();\r\n\r\n        let newX = this.playerState.myPlayer.transform.pos.x + this.playerState.playerVelocityX * delta;\r\n        let newY = this.playerState.myPlayer.transform.pos.y + this.playerState.playerVelocityY * delta;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = newX;\r\n        this.playerState.myPlayer.transform.pos.y = newY;\r\n\r\n        let moved = (this.playerState.playerVelocityX !== 0 || this.playerState.playerVelocityY !== 0);\r\n\r\n        // Send position update if moved\r\n        const distanceFromLastSent = Math.sqrt(\r\n            (this.playerState.myPlayer.transform.pos.x - this.playerState.lastSentX) ** 2 +\r\n            (this.playerState.myPlayer.transform.pos.y - this.playerState.lastSentY) ** 2\r\n        );\r\n\r\n        if (moved && distanceFromLastSent > 2 && currentTime - this.playerState.lastSentMoveTime >= NETWORK.MOVE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    pos: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    }\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentX = this.playerState.myPlayer.transform.pos.x;\r\n            this.playerState.lastSentY = this.playerState.myPlayer.transform.pos.y;\r\n            this.playerState.lastSentMoveTime = currentTime;\r\n        }\r\n\r\n        // Check if dash time is over\r\n        if (currentTime >= this.playerState.dashStartTime + this.playerState.myPlayer.actions.dash.time) {\r\n            if (this.playerState.myPlayer.unique.includes('spectral_image')) {\r\n                // Revert local state\r\n                this.playerState.myPlayer.flags.hidden = false;\r\n                this.playerState.myPlayer.flags.invulnerable = false;\r\n\r\n                // Broadcast partial update\r\n                this.roomManager.sendMessage(JSON.stringify({\r\n                    type: 'partial-state',\r\n                    userId: this.userId,\r\n                    flags: {\r\n                        hidden: false,\r\n                        invulnerable: false\r\n                    }\r\n                }));\r\n            }\r\n\r\n            this.playerState.isDashing = false;\r\n\r\n            if (this.playerState.myPlayer.equipment.includes('switch')) {\r\n                this.combatController.toggleAutoFire(Date.now() + this.playerState.myPlayer.actions.dash.cooldown);\r\n            }\r\n\r\n            console.log('Dash ended');\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { PlayerState } from \"./PlayerState\";\r\n\r\nexport class LuckController {\r\n    constructor(private playerState: PlayerState) { }\r\n\r\n    /**\r\n     * Perform a luck roll using the player's luck stat.\r\n     *\r\n     * Luck is a signed value centered around 0.\r\n     * - Uses tanh() to map luck smoothly into [-1, 1], which gives soft limits.\r\n     * - The resulting chance is 5%–95%, with heavy diminishing returns past ±10.\r\n     *\r\n     * Approximate success odds:\r\n     *   luck -20 → ~2%\r\n     *   luck -10 → ~4%\r\n     *   luck  -5 → ~6%\r\n     *   luck   0 → 10%\r\n     *   luck  +5 → 17%\r\n     *   luck +10 → 30%\r\n     *   luck +20 → 45%\r\n     * \r\n     * Optionally pass a multiplier to scale luck.\r\n     */\r\n    public luckRoll(multiplier: number = 1): boolean {\r\n        const effectiveLuck = this.playerState.myPlayer.stats.luck * multiplier;\r\n        const scaledLuck = Math.tanh(effectiveLuck / 10);\r\n\r\n        const baseChance = 0.1; // 10%\r\n        const softCap = 0.35; // 35%\r\n\r\n        const chance = baseChance + scaledLuck * softCap;\r\n        return Math.random() < chance;\r\n    }\r\n}","import { ControlsManager } from \"../ControlsManager\";\r\nimport { SettingsManager } from \"../SettingsManager\";\r\n\r\nexport class MoveController {\r\n    constructor(private controlsManager: ControlsManager, private settingsManager: SettingsManager) {}\r\n\r\n    /**\r\n     * Detects and returns the Vec2 movement input from the assigned keybinds.\r\n     */\r\n    public getMoveInput(): { inputX: number; inputY: number; inputLength: number } {\r\n        let inputX = 0;\r\n        let inputY = 0;\r\n\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveUp)) inputY -= 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveDown)) inputY += 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveLeft)) inputX -= 1;\r\n        if (this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveRight)) inputX += 1;\r\n\r\n        const inputLength = Math.sqrt(inputX * inputX + inputY * inputY);\r\n\r\n        if (inputLength > 0) {\r\n            inputX = inputX / inputLength;\r\n            inputY = inputY / inputLength;\r\n        }\r\n\r\n        return { inputX, inputY, inputLength };\r\n    }\r\n\r\n    /**\r\n     * Returns state based on if the player is currently moving or not.\r\n     */\r\n    public isMoving(): boolean {\r\n        return this.getMoveInput().inputLength > 0;\r\n    }\r\n}","import { OBJECT_DEFAULTS } from \"./Config\";\r\nimport { AmmoBox, GameObject, SpawnObjectParams } from \"./Types\";\r\n\r\nimport { Utility } from \"./Utility\";\r\n\r\nimport { PlayerState } from \"./player/PlayerState\";\r\n\r\nexport class ObjectsManager {\r\n    public ammoBoxes: Map<string, AmmoBox> = new Map();\r\n\r\n    constructor(private playerState: PlayerState, private utility: Utility) {}\r\n\r\n    // #region [ Objects ]\r\n    //\r\n    /**\r\n     * Spawns a GameObject in the scene, returning it's properties for the construction.\r\n     */\r\n    private spawnObject(params: SpawnObjectParams): GameObject {\r\n        const baseObject: GameObject = {\r\n            id: this.utility.generateUID(OBJECT_DEFAULTS.DATA.ID_LENGTH),\r\n            transform: params.transform,\r\n            timestamp: Date.now()\r\n        };\r\n\r\n        switch (params.type) { //TODO: Spawn the player, projectiles and any other GameObject types here\r\n            case 'AmmoBox':\r\n                return {\r\n                    id: baseObject.id,\r\n                    transform: baseObject.transform,\r\n                    timestamp: baseObject.timestamp,\r\n                    ammoAmount: params.data?.amount || 10,\r\n                    isOpen: false,\r\n                    lid: {\r\n                        pos: { x: 0, y: 0 },\r\n                        rot: 0,\r\n                        velocity: { x: 0, y: 0 },\r\n                        torque: 0\r\n                    }\r\n                } as AmmoBox;\r\n\r\n            default:\r\n                throw new Error(`Unknown object type: ${params.type}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructs an ammo box and returns the spawned object instantiated through spawnObject.\r\n     */\r\n    public spawnAmmoBox(amount: number): AmmoBox {\r\n        return this.spawnObject({\r\n            type: 'AmmoBox',\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            data: { amount }\r\n        }) as AmmoBox;\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { NETWORK } from \"../Config\";\r\nimport { AudioParams, CreateParticleParams, DeathDecal, DecalParams, EmitterParams, PlayerHitParams, SetSliderParams, Vec2 } from \"../Types\";\r\n\r\nimport { LuckController } from \"./LuckController\";\r\nimport { MoveController } from \"./MoveController\";\r\nimport { PlayerState } from \"./PlayerState\";\r\n\r\nimport { AudioManager } from \"../AudioManager\";\r\nimport { DecalsManager } from \"../DecalsManager\";\r\nimport { GameState } from \"../GameState\";\r\nimport { ObjectsManager } from \"../ObjectsManager\";\r\nimport { ParticlesManager } from \"../ParticlesManager\";\r\nimport { RoomManager } from \"../RoomManager\";\r\nimport { UserInterface } from \"../UserInterface\";\r\nimport { Utility } from \"../Utility\";\r\nimport { AudioConfig } from \"../AudioConfig\";\r\n\r\n\r\nexport class PlayerController {\r\n    constructor(\r\n        private audioConfig: AudioConfig,\r\n        private audioManager: AudioManager,\r\n        private decalsManager: DecalsManager,\r\n        private gameState: GameState,\r\n        private luckController: LuckController,\r\n        private moveController: MoveController,\r\n        private objectsManager: ObjectsManager,\r\n        private particlesManager: ParticlesManager,\r\n        private playerState: PlayerState,\r\n        private roomManager: RoomManager,\r\n        private ui: UserInterface,\r\n        private userId: string,\r\n        private utility: Utility\r\n    ) {\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        window.addEventListener('customEvent_playerHitRelay', ((event: CustomEvent) => {\r\n            console.log('Player hit event received:', event.detail.params);\r\n            this.playerHit(event.detail.params);\r\n        }) as EventListener);\r\n    }\r\n\r\n    /**\r\n     * Updates the local player's position and movement state.\r\n     * \r\n     * Applies acceleration, friction, sprint multipliers, and stamina drain\r\n     * based on current movement input. Sends position updates to the server\r\n     * when movement exceeds the defined threshold or interval.\r\n     * \r\n     * Does not process updates when game is not active, player is dead, or dashing.\r\n     */\r\n    public updatePlayerPosition(delta: number): void {\r\n        if (!this.gameState.gameInProgress || this.playerState.myPlayer.stats.health.value <= 0 || this.playerState.isDashing) return;\r\n\r\n        const now = Date.now();\r\n        const { inputX, inputY } = this.moveController.getMoveInput();\r\n\r\n        // [ Sprinting ]\r\n        const canSprint = this.playerState.isSprinting && this.playerState.myPlayer.stats.stamina.value > 0 && this.moveController.isMoving();\r\n        const currentSpeed = canSprint ? this.playerState.myPlayer.stats.speed * this.playerState.myPlayer.actions.sprint.multiplier : this.playerState.myPlayer.stats.speed;\r\n        if (this.playerState.isSprinting && this.playerState.myPlayer.stats.stamina.value <= 0) { // Stop sprinting if out of stamina\r\n            this.playerState.isSprinting = false;\r\n            console.log('Out of stamina, stopped sprinting');\r\n        }\r\n        //\r\n\r\n        // CHANGED: Apply friction always, before calculating acceleration\r\n        this.playerState.playerVelocityX *= Math.pow(this.playerState.myPlayer.physics.friction, delta);\r\n        this.playerState.playerVelocityY *= Math.pow(this.playerState.myPlayer.physics.friction, delta);\r\n\r\n        // CHANGED: Only apply acceleration when there's input\r\n        if (this.moveController.isMoving()) {\r\n            const targetVelocityX = inputX * currentSpeed;\r\n            const targetVelocityY = inputY * currentSpeed;\r\n\r\n            this.playerState.playerVelocityX += (targetVelocityX - this.playerState.playerVelocityX) * this.playerState.myPlayer.physics.acceleration * delta;\r\n            this.playerState.playerVelocityY += (targetVelocityY - this.playerState.playerVelocityY) * this.playerState.myPlayer.physics.acceleration * delta;\r\n        }\r\n\r\n        let newX = this.playerState.myPlayer.transform.pos.x + this.playerState.playerVelocityX * delta;\r\n        let newY = this.playerState.myPlayer.transform.pos.y + this.playerState.playerVelocityY * delta;\r\n\r\n        this.playerState.myPlayer.transform.pos.x = newX;\r\n        this.playerState.myPlayer.transform.pos.y = newY;\r\n\r\n        let moved = (this.playerState.playerVelocityX !== 0 || this.playerState.playerVelocityY !== 0);\r\n\r\n        const distanceFromLastSent = Math.sqrt(\r\n            (this.playerState.myPlayer.transform.pos.x - this.playerState.lastSentX) ** 2 +\r\n            (this.playerState.myPlayer.transform.pos.y - this.playerState.lastSentY) ** 2\r\n        );\r\n\r\n        if (moved && distanceFromLastSent > 2 && now - this.playerState.lastSentMoveTime >= NETWORK.MOVE_INTERVAL) {\r\n            this.roomManager.sendMessage(JSON.stringify({\r\n                type: 'player-move',\r\n                transform: {\r\n                    pos: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    }\r\n                }\r\n            }));\r\n\r\n            this.playerState.lastSentX = this.playerState.myPlayer.transform.pos.x;\r\n            this.playerState.lastSentY = this.playerState.myPlayer.transform.pos.y;\r\n            this.playerState.lastSentMoveTime = now;\r\n        }\r\n\r\n        if (Math.abs(this.playerState.playerVelocityX) < 0.01) this.playerState.playerVelocityX = 0;\r\n        if (Math.abs(this.playerState.playerVelocityY) < 0.01) this.playerState.playerVelocityY = 0;\r\n    }\r\n\r\n    /**\r\n     * Processes local hits to players. Sends network message for syncing.\r\n     */\r\n    public playerHit(params: PlayerHitParams): void {\r\n        // Update health slider\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const healthSliderParams: SetSliderParams = {\r\n            sliderId: 'healthBar',\r\n            targetValue: this.playerState.myPlayer.stats.health.value,\r\n            maxValue: this.playerState.myPlayer.stats.health.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n        this.utility.setSlider(healthSliderParams);\r\n\r\n        if (params.target.id === this.userId) { // Random chance to play grunt when I'm hit\r\n            if (this.utility.getRandomNum(0, 1) < 0.2) { // 20%\r\n                const gruntParams: AudioParams = {\r\n                    src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.player.male.grunt), // TODO: Allow player to define gender\r\n                    listener: {\r\n                        x: this.playerState.myPlayer.transform.pos.x,\r\n                        y: this.playerState.myPlayer.transform.pos.y\r\n                    },\r\n                    output: 'sfx',\r\n                    pitch: { min: 0.95, max: 1.075 },\r\n                    spatial: {\r\n                        blend: 1.0,\r\n                        pos: { x: this.playerState.myPlayer.transform.pos.x, y: this.playerState.myPlayer.transform.pos.y }\r\n                    },\r\n                    volume: { min: 0.9, max: 1 }\r\n                }\r\n                this.audioManager.playAudioNetwork(gruntParams);\r\n            }\r\n        } else { // The player hit was not me\r\n            const sfxParams: AudioParams = {\r\n                src: this.utility.getRandomInArray(this.audioConfig.resources.sfx.impact.flesh.bullet), // TODO: User current body material\r\n                listener: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y\r\n                },\r\n                output: 'sfx',\r\n                pitch: { min: 0.925, max: 1.15 },\r\n                spatial: {\r\n                    blend: 1.0,\r\n                    pos: { x: params.source.transform.pos.x, y: params.source.transform.pos.y }\r\n                },\r\n                volume: { min: 0.95, max: 1 }\r\n            }\r\n            this.audioManager.playAudioNetwork(sfxParams);\r\n\r\n            const decalParams: DecalParams = {\r\n                id: `blood_${params.source.id}`,\r\n                pos: {\r\n                    x: params.source.transform.pos.x,\r\n                    y: params.source.transform.pos.y\r\n                },\r\n                type: 'parametric',\r\n                parametric: this.decalsManager.decalsConfig.decals.blood // TODO: Get current blood type\r\n            };\r\n            this.decalsManager.createDecal(decalParams);\r\n\r\n            const bloodDirection: Vec2 = {\r\n                x: -params.source.velocity.x / Math.sqrt(params.source.velocity.x ** 2 + params.source.velocity.y ** 2),\r\n                y: -params.source.velocity.y / Math.sqrt(params.source.velocity.x ** 2 + params.source.velocity.y ** 2)\r\n            };\r\n\r\n            const particleParams: CreateParticleParams = {\r\n                id: `blood_${params.source.id}`,\r\n                pos: {\r\n                    x: params.source.transform.pos.x,\r\n                    y: params.source.transform.pos.y\r\n                },\r\n                particleParams: this.particlesManager.particlesConfig.particles.blood.spray, // TODO: Get current blood type\r\n                direction: bloodDirection\r\n            }\r\n            this.particlesManager.createParticles(particleParams);\r\n\r\n            const emission: EmitterParams = {\r\n                id: `particle_emitter_${params.target.id}_${Date.now()}`,\r\n                interval: this.utility.getRandomNum(200, 400), // ms\r\n                lifetime: this.utility.getRandomNum(1000, 3000), // ms\r\n                offset: {\r\n                    x: params.target.transform.pos.x,\r\n                    y: params.target.transform.pos.y\r\n                },\r\n                particleType: this.particlesManager.particlesConfig.particles.blood.drip, // TODO: Get current blood type\r\n                playerId: params.target.id,\r\n                pos: {\r\n                    x: params.source.transform.pos.x,\r\n                    y: params.source.transform.pos.y\r\n                }\r\n            };\r\n            this.particlesManager.createEmitter(emission);\r\n\r\n            if (params.newHealth <= 0) { // If they died, I get a kill\r\n                console.log(`I killed ${params.target.id}!`);\r\n\r\n                const me = this.ui.leaderboard.get(this.userId);\r\n                if (me) { me.kills++; }\r\n\r\n                const other = this.ui.leaderboard.get(params.target.id);\r\n                if (other) { other.deaths++; }\r\n\r\n                this.ui.updateLeaderboardDisplay(this.userId);\r\n            }\r\n        }\r\n\r\n        const message = {\r\n            type: 'player-hit',\r\n            targetId: params.target.id,\r\n            shooterId: params.shooterId,\r\n            damage: params.damage,\r\n            newHealth: params.newHealth,\r\n            projectileId: params.source.id,\r\n            wasKill: params.wasKill\r\n        }\r\n        this.roomManager.sendMessage(JSON.stringify(message));\r\n    }\r\n\r\n    /**\r\n     * Record the player's own death when they are the targetId of a player-hit message and their health reaches 0.\r\n     */\r\n    public playerDeath(): void {\r\n        const triggeredUniques = this.triggerUniques();\r\n\r\n        console.log('I died! Waiting for round to end...');\r\n\r\n        this.playerState.resetPlayerState();\r\n\r\n        const ammoBox = this.objectsManager.spawnAmmoBox(10);\r\n        this.objectsManager.ammoBoxes.set(ammoBox.id, ammoBox);\r\n\r\n        const gore: DeathDecal = {\r\n            gore: {\r\n                amount: this.utility.getRandomInt(2, 5)\r\n            },\r\n            blood: {\r\n                amount: this.utility.getRandomInt(1, 3)\r\n            },\r\n            ownerId: this.userId,\r\n            pos: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            },\r\n            radius: this.playerState.myPlayer.stats.size\r\n        }\r\n        this.particlesManager.generateGore(gore);\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-death',\r\n            playerId: this.userId,\r\n            x: this.playerState.myPlayer.transform.pos.x,\r\n            y: this.playerState.myPlayer.transform.pos.y,\r\n            size: this.playerState.myPlayer.stats.size,\r\n            ammoBox: ammoBox\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Used to trigger player related uniques during specific states like death, etc.\r\n     * \r\n     * Returns each unique that succeeds.\r\n     */\r\n    private triggerUniques(): string[] {\r\n        if (this.playerState.myPlayer.unique.length === 0) return [];\r\n\r\n        const succeededUniques: string[] = [];\r\n\r\n        for (const unique of this.playerState.myPlayer.unique) {\r\n            if (unique === 'phoenix_module') {\r\n                const succeeded = this.luckController.luckRoll(1.5);\r\n\r\n                if (succeeded) {\r\n                    console.log('Phoenix Module activated!');\r\n\r\n                    // Double damage permanently\r\n                    this.playerState.myPlayer.actions.primary.projectile.damage *= 2;\r\n\r\n                    // Remove phoenix module so it can't trigger again\r\n                    const index = this.playerState.myPlayer.unique.indexOf('phoenix_module');\r\n                    if (index > -1) {\r\n                        this.playerState.myPlayer.unique.splice(index, 1);\r\n                    }\r\n\r\n                    succeededUniques.push('phoenix_module');\r\n                }\r\n            }\r\n        }\r\n        return succeededUniques;\r\n    }\r\n}","import { CANVAS } from \"../Config\";\r\n\r\nimport { Player, Players } from \"../Types\";\r\nimport { Utility } from \"../Utility\";\r\nimport { PlayerConfig } from \"./PlayerConfig\";\r\n\r\nexport class PlayerState {\r\n    public myPlayer: Player; // My player object\r\n    public players: Players = new Map(); // Other players in game\r\n\r\n    public isHost = false;\r\n\r\n    public canShoot = true;\r\n    public canAutoFire = false;\r\n    public isBurstActive = false;\r\n    public isReloading = false;\r\n    public isMelee = false;\r\n    public isSprinting = false;\r\n    public isDashing = false;\r\n    public isStaminaRecoveryBlocked = false;\r\n\r\n    public lastSentX = 0;\r\n    public lastSentY = 0;\r\n    public lastSentRotation = 0;\r\n    public lastSentRotationTime = 0;\r\n    public lastSentMoveTime = 0;\r\n\r\n    public playerVelocityX = 0;\r\n    public playerVelocityY = 0;\r\n\r\n    public dashStartTime = 0;\r\n    public lastDashTime = 0;\r\n    public reloadStartTime = 0;\r\n    public lastShotTime = 0;\r\n    public lastMeleeTime = 0;\r\n    public nextBurstShotTime = 0;\r\n    public currentBurstShot = 0;\r\n    public lastStaminaDrainTime = 0;\r\n    public staminaRecoveryBlockedUntil = 0;\r\n\r\n    private statListeners: Map<string, (value: any) => void> = new Map();\r\n\r\n    constructor(private playerConfig: PlayerConfig, private userId: string, private utility: Utility) {\r\n        this.myPlayer = this.initPlayer(this.userId);\r\n    }\r\n\r\n    // #region [ State ]\r\n    //\r\n    // [ IMPORTANT ] Keep full track of Player object here\r\n    /**\r\n     * Initializes the default player object using the playerConfig.\r\n     */\r\n    public initPlayer(userId: string): Player {\r\n        return this.myPlayer = {\r\n            id: userId,\r\n            transform: {\r\n                pos: {\r\n                    x: Math.random() * (CANVAS.WIDTH - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN,\r\n                    y: Math.random() * (CANVAS.HEIGHT - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN\r\n                },\r\n                rot: 0\r\n            },\r\n            timestamp: Date.now(),\r\n            color: this.utility.getRandomColor(), // TODO: Replace with char customization\r\n            actions: {\r\n                dash: {\r\n                    cooldown: this.playerConfig.default.actions.dash.cooldown,\r\n                    drain: this.playerConfig.default.actions.dash.drain,\r\n                    multiplier: this.playerConfig.default.actions.dash.multiplier,\r\n                    time: this.playerConfig.default.actions.dash.time\r\n                },\r\n                melee: {\r\n                    cooldown: this.playerConfig.default.actions.melee.cooldown,\r\n                    damage: this.playerConfig.default.actions.melee.damage,\r\n                    duration: this.playerConfig.default.actions.melee.duration,\r\n                    range: this.playerConfig.default.actions.melee.range,\r\n                    size: this.playerConfig.default.actions.melee.size\r\n                },\r\n                primary: {\r\n                    buffer: this.playerConfig.default.actions.primary.buffer,\r\n                    burst: {\r\n                        amount: this.playerConfig.default.actions.primary.burst.amount,\r\n                        delay: this.playerConfig.default.actions.primary.burst.delay\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: this.playerConfig.default.actions.primary.magazine.size,\r\n                        currentReserve: this.playerConfig.default.actions.primary.magazine.startingReserve,\r\n                        maxReserve: this.playerConfig.default.actions.primary.magazine.maxReserve,\r\n                        size: this.playerConfig.default.actions.primary.magazine.size\r\n                    },\r\n                    offset: this.playerConfig.default.actions.primary.offset,\r\n                    projectile: {\r\n                        amount: this.playerConfig.default.actions.primary.projectile.amount,\r\n                        color: this.playerConfig.default.actions.primary.projectile.color,\r\n                        damage: this.playerConfig.default.actions.primary.projectile.damage,\r\n                        length: this.playerConfig.default.actions.primary.projectile.length,\r\n                        range: this.playerConfig.default.actions.primary.projectile.range,\r\n                        size: this.playerConfig.default.actions.primary.projectile.size,\r\n                        speed: this.playerConfig.default.actions.primary.projectile.speed,\r\n                        spread: this.playerConfig.default.actions.primary.projectile.spread\r\n                    },\r\n                    reload: {\r\n                        time: this.playerConfig.default.actions.primary.reload.time\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: this.playerConfig.default.actions.sprint.drain,\r\n                    multiplier: this.playerConfig.default.actions.sprint.multiplier\r\n                }\r\n            },\r\n            equipment: this.playerConfig.default.equipment,\r\n            flags: {\r\n                hidden: this.playerConfig.default.flags.hidden,\r\n                invulnerable: this.playerConfig.default.flags.invulnerable\r\n            },\r\n            inventory: {\r\n                primary: this.playerConfig.default.inventory.primary,\r\n                melee: this.playerConfig.default.inventory.melee\r\n            },\r\n            physics: {\r\n                acceleration: this.playerConfig.default.physics.acceleration,\r\n                friction: this.playerConfig.default.physics.friction\r\n            },\r\n            rig: {\r\n                body: this.playerConfig.default.rig.body,\r\n                head: this.playerConfig.default.rig.head,\r\n                headwear: this.playerConfig.default.rig.headwear,\r\n                weapon: this.playerConfig.default.rig.weapon\r\n            },\r\n            stats: {\r\n                defense: this.playerConfig.default.stats.defense,\r\n                health: {\r\n                    max: this.playerConfig.default.stats.health.max,\r\n                    value: this.playerConfig.default.stats.health.max,\r\n                },\r\n                luck: this.playerConfig.default.stats.luck,\r\n                size: this.playerConfig.default.stats.size,\r\n                speed: this.playerConfig.default.stats.speed,\r\n                stamina: {\r\n                    max: this.playerConfig.default.stats.stamina.max,\r\n                    recovery: {\r\n                        delay: this.playerConfig.default.stats.stamina.recovery.delay,\r\n                        rate: this.playerConfig.default.stats.stamina.recovery.rate\r\n                    },\r\n                    value: this.playerConfig.default.stats.stamina.max,\r\n                },\r\n            },\r\n            unique: this.playerConfig.default.unique\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Resets the current player state stored in memory to default.\r\n     */\r\n    public resetPlayerState(): void {\r\n        this.canShoot = true;\r\n        this.isBurstActive = false;\r\n        this.isReloading = false;\r\n        this.isMelee = false;\r\n        this.isSprinting = false;\r\n        this.isDashing = false;\r\n        this.isStaminaRecoveryBlocked = false;\r\n\r\n        this.playerVelocityX = 0;\r\n        this.playerVelocityY = 0;\r\n\r\n        this.dashStartTime = 0;\r\n        this.lastDashTime = 0;\r\n        this.reloadStartTime = 0;\r\n        this.lastMeleeTime = 0;\r\n        this.lastShotTime = 0;\r\n        this.nextBurstShotTime = 0;\r\n        this.currentBurstShot = 0;\r\n        this.lastStaminaDrainTime = 0;\r\n        this.staminaRecoveryBlockedUntil = 0;\r\n\r\n        this.lastSentX = 0;\r\n        this.lastSentY = 0;\r\n        this.lastSentRotation = 0;\r\n        this.lastSentRotationTime = 0;\r\n        this.lastSentMoveTime = 0;\r\n    }\r\n    //\r\n    // #endregion\r\n\r\n    // #region [ Events ]\r\n    //\r\n\r\n    public onStatChange(statPath: string, callback: (value: any) => void): void {\r\n        this.statListeners.set(statPath, callback);\r\n    }\r\n\r\n    private notifyChange(statPath: string, value: any): void {\r\n        const listener = this.statListeners.get(statPath);\r\n        if (listener) {\r\n            listener(value);\r\n        }\r\n    }\r\n\r\n    public updateStat(statPath: string, value: any): void {\r\n        // Navigate to the property and set it\r\n        const pathParts = statPath.split('.');\r\n        let obj: any = this.myPlayer;\r\n\r\n        for (let i = 0; i < pathParts.length - 1; i++) {\r\n            obj = obj[pathParts[i]];\r\n        }\r\n\r\n        const lastProp = pathParts[pathParts.length - 1];\r\n        obj[lastProp] = value;\r\n\r\n        console.log(`${lastProp}: ${value}`);\r\n\r\n        // Notify listeners\r\n        this.notifyChange(statPath, value);\r\n    }\r\n    //\r\n    // #endregion\r\n}","import { PlayerState } from \"./PlayerState\";\r\n\r\nexport class StaminaController {\r\n    constructor(private playerState: PlayerState) { }\r\n\r\n    // #region [ Stamina ]\r\n    //\r\n    /**\r\n     * Requests stamina from my pool for actions that require it.\r\n     * \r\n     * If there is enough, drain the needed stamina and return true.\r\n     */\r\n    public requestStamina(amount: number): boolean {\r\n        if (this.playerState.myPlayer.stats.stamina.value < amount) {\r\n            console.log(`Insufficient stamina! Need: ${amount}, Have: ${this.playerState.myPlayer.stats.stamina}`);\r\n            return false;\r\n        }\r\n\r\n        this.playerState.myPlayer.stats.stamina.value -= amount;\r\n\r\n        // Block stamina recovery for the delay period\r\n        this.playerState.isStaminaRecoveryBlocked = true;\r\n        this.playerState.staminaRecoveryBlockedUntil = Date.now() + this.playerState.myPlayer.stats.stamina.recovery.delay;\r\n\r\n        console.log(`Stamina drained: -${amount}, Remaining: ${this.playerState.myPlayer.stats.stamina}`);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Process stamina requests and recovery.\r\n     */\r\n    public updateStamina(delta: number): void {\r\n        const currentTime = Date.now();\r\n\r\n        // Handle sprint stamina drain (every second while sprinting)\r\n        if (this.playerState.isSprinting && currentTime >= this.playerState.lastStaminaDrainTime + 100) {\r\n            if (!this.requestStamina(this.playerState.myPlayer.actions.sprint.drain)) {\r\n                // Out of stamina, stop sprinting\r\n                this.playerState.isSprinting = false;\r\n                console.log('Out of stamina, stopped sprinting');\r\n            }\r\n            this.playerState.lastStaminaDrainTime = currentTime;\r\n        }\r\n\r\n        // Handle stamina recovery\r\n        if (!this.playerState.isStaminaRecoveryBlocked || currentTime >= this.playerState.staminaRecoveryBlockedUntil) {\r\n            this.playerState.isStaminaRecoveryBlocked = false;\r\n\r\n            // Recover stamina if not at max and not sprinting\r\n            if (this.playerState.myPlayer.stats.stamina.value < this.playerState.myPlayer.stats.stamina.max && !this.playerState.isSprinting) {\r\n                const staminaRecoveryPerFrame = (this.playerState.myPlayer.stats.stamina.recovery.rate / 1000) * 16.67 * delta;\r\n                this.playerState.myPlayer.stats.stamina.value = Math.min(this.playerState.myPlayer.stats.stamina.max, this.playerState.myPlayer.stats.stamina.value + staminaRecoveryPerFrame);\r\n            }\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n}","export class PlayerConfig {\r\n    public default = {\r\n        actions: {\r\n            dash: {\r\n                cooldown: 1000, // ms\r\n                drain: 40, // per dash\r\n                multiplier: 3,\r\n                time: 150 // ms\r\n            },\r\n            melee: {\r\n                cooldown: 250, // ms\r\n                damage: 10,\r\n                duration: 100, // ms\r\n                range: 10, // px\r\n                size: 2, // px^2 area at tip\r\n            },\r\n            primary: {\r\n                buffer: 250, // ms\r\n                burst: {\r\n                    amount: 1,\r\n                    delay: 75 // ms\r\n                },\r\n                magazine: {\r\n                    size: 10,\r\n                    startingReserve: 20,\r\n                    maxReserve: 50\r\n                },\r\n                offset: 10, // px\r\n                projectile: {\r\n                    amount: 1,\r\n                    color: '#fff5beff',\r\n                    damage: 25,\r\n                    length: 15,\r\n                    range: 5,\r\n                    size: 1,\r\n                    speed: 35,\r\n                    spread: 10\r\n                },\r\n                reload: {\r\n                    time: 750 // ms\r\n                }\r\n            },\r\n            sprint: {\r\n                drain: 5, // per ms\r\n                multiplier: 1.75\r\n            },\r\n        },\r\n        data: {\r\n            idLength: 12,\r\n            idOffset: 25\r\n        },\r\n        equipment: [],\r\n        flags: {\r\n            hidden: false,\r\n            invulnerable: false\r\n        },\r\n        inventory: {\r\n            primary: 'glock',\r\n            melee: 'knife'\r\n        },\r\n        physics: {\r\n            acceleration: 0.65,\r\n            friction: 0.8\r\n        },\r\n        rig: {\r\n            body: 'default',\r\n            head: 'default',\r\n            headwear: 'default',\r\n            weapon: 'glock'\r\n        },\r\n        stats: {\r\n            defense: 0,\r\n            health: {\r\n                max: 100\r\n            },\r\n            luck: 1,\r\n            size: 100, // px^2\r\n            speed: 6,\r\n            stamina: {\r\n                max: 100,\r\n                recovery: {\r\n                    delay: 1000,\r\n                    rate: 25\r\n                }\r\n            }\r\n        },\r\n        unique: []\r\n    };\r\n\r\n    constructor() { }\r\n}","export class AudioConfig {\r\n    public mixer = {\r\n        master: 1.0,\r\n        interface: 0.85,\r\n        music: 0.75,\r\n        sfx: 0.9,\r\n        voice: 1.0\r\n    }\r\n\r\n    public resources = {\r\n        sfx: {\r\n            impact: {\r\n                flesh: {\r\n                    bullet: [\r\n                        '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_00.ogg',\r\n                        '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_01.ogg',\r\n                        '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_02.ogg',\r\n                        '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_03.ogg',\r\n                        '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_04.ogg',\r\n                        '/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_05.ogg'\r\n                    ]\r\n                },\r\n                metal: {\r\n                    bullet: [\r\n                        '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_00.ogg',\r\n                        '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_01.ogg',\r\n                        '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_02.ogg',\r\n                        '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_03.ogg',\r\n                        '/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_04.ogg'\r\n                    ]\r\n                }\r\n            },\r\n            player: {\r\n                male: {\r\n                    grunt: [\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_00.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_01.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_02.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_03.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_04.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_05.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_06.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_07.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_08.ogg',\r\n                        '/assets/audio/sfx/player/voice/male/player_male_hit_09.ogg'\r\n                    ]\r\n                },\r\n                // female: {\r\n                //     grunt: [\r\n\r\n                //     ]\r\n                // }\r\n            },\r\n            weapon: {\r\n                glock: {\r\n                    attack: [\r\n                        '/assets/audio/sfx/weapons/glock/glock_attack_00.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_attack_01.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_attack_02.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_attack_03.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_attack_04.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_attack_05.ogg'\r\n                    ],\r\n                    empty: [\r\n                        '/assets/audio/sfx/weapons/glock/glock_empty_00.ogg'\r\n                    ],\r\n                    reload: {\r\n                        end: [\r\n                            '/assets/audio/sfx/weapons/glock/glock_reload_end_00.ogg',\r\n                            '/assets/audio/sfx/weapons/glock/glock_reload_end_01.ogg',\r\n                            '/assets/audio/sfx/weapons/glock/glock_reload_end_02.ogg',\r\n                            '/assets/audio/sfx/weapons/glock/glock_reload_end_03.ogg'\r\n\r\n                        ],\r\n                        start: [\r\n                            '/assets/audio/sfx/weapons/glock/glock_reload_start_00.ogg',\r\n                            '/assets/audio/sfx/weapons/glock/glock_reload_start_01.ogg',\r\n                            '/assets/audio/sfx/weapons/glock/glock_reload_start_02.ogg',\r\n                            '/assets/audio/sfx/weapons/glock/glock_reload_start_03.ogg'\r\n                        ]\r\n                    },\r\n                    shell: [\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_00.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_01.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_02.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_03.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_04.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_05.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_06.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_07.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_08.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_09.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_10.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_11.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_12.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_13.ogg',\r\n                        '/assets/audio/sfx/weapons/glock/glock_shell_14.ogg'\r\n                    ],\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public settings = {\r\n        maxConcurrent: 5, // Max simultaneous instances of same sound\r\n        poolSize: 10, // Number of Audio objects per sound\r\n        preloadSounds: true // Toggle sound resource preloading on start\r\n    }\r\n\r\n    constructor() { }\r\n}","\r\nimport { CANVAS, GAME } from './Config';\r\n\r\nimport { Player, RoomMessage, LobbyPlayer, LeaderboardEntry, ResetType, SetSliderParams, SetSpanParams, DeathDecal, EmitterParams, GameSettings, RenderCharacterParams } from './Types';\r\n\r\nimport { Admin } from './Admin';\r\nimport { Animator } from './Animator';\r\nimport { AudioManager } from './AudioManager';\r\nimport { CacheManager } from './CacheManager';\r\nimport { CharacterConfig } from './CharacterConfig';\r\nimport { CharacterManager } from './CharacterManager';\r\nimport { ChatManager } from './ChatManager';\r\nimport { ControlsManager } from './ControlsManager';\r\nimport { CollisionsManager } from './CollisionsManager';\r\nimport { DecalsManager } from './DecalsManager';\r\nimport { EventsManager } from './EventsManager';\r\nimport { GameState } from './GameState';\r\nimport { LobbyManager } from './LobbyManager';\r\nimport { ParticlesManager } from './ParticlesManager';\r\nimport { RenderingManager } from './RenderingManager';\r\nimport { RoomController } from './RoomController';\r\nimport { RoomManager } from './RoomManager';\r\nimport { SettingsManager } from './SettingsManager';\r\nimport { UpgradeManager } from './UpgradeManager';\r\nimport { UserInterface } from './UserInterface';\r\nimport { Utility } from './Utility';\r\nimport { WebsocketManager } from './WebsocketManager';\r\n\r\nimport { CombatController } from './player/CombatController';\r\nimport { DashController } from './player/DashController';\r\nimport { LuckController } from './player/LuckController';\r\nimport { MoveController } from './player/MoveController';\r\nimport { ObjectsManager } from './ObjectsManager';\r\nimport { PlayerController } from './player/PlayerController';\r\nimport { PlayerState } from './player/PlayerState';\r\nimport { StaminaController } from './player/StaminaController';\r\nimport { PlayerConfig } from './player/PlayerConfig';\r\nimport { AudioConfig } from './AudioConfig';\r\n\r\nclass Client {\r\n    private userId: string;\r\n\r\n    private isRoundInProgress = false;\r\n\r\n    private roundWinner: string | null = null;\r\n    private gameWinner: string | null = null; // TODO: Use the game winner to display lobby historical wins\r\n\r\n    private admin: Admin;\r\n    private animator: Animator;\r\n    private audioConfig: AudioConfig;\r\n    private audioManager: AudioManager;\r\n    private cacheManager: CacheManager;\r\n    private charConfig: CharacterConfig;\r\n    private charManager: CharacterManager;\r\n    private chatManager: ChatManager;\r\n    private collisionsManager: CollisionsManager;\r\n    private combatController: CombatController;\r\n    private controlsManager: ControlsManager;\r\n    private dashController: DashController;\r\n    private decalsManager: DecalsManager;\r\n    private eventsManager: EventsManager;\r\n    private gameState: GameState;\r\n    private lobbyManager: LobbyManager;\r\n    private luckController: LuckController;\r\n    private moveController: MoveController;\r\n    private objectsManager: ObjectsManager;\r\n    private particlesManager: ParticlesManager;\r\n    private playerConfig: PlayerConfig;\r\n    private playerController: PlayerController;\r\n    private playerState: PlayerState;\r\n    private renderingManager: RenderingManager;\r\n    private roomController: RoomController;\r\n    private roomManager: RoomManager;\r\n    private settingsManager: SettingsManager;\r\n    private staminaController: StaminaController;\r\n    private upgradeManager: UpgradeManager;\r\n    private ui: UserInterface;\r\n    private utility: Utility;\r\n    private wsManager: WebsocketManager;\r\n\r\n    // #region [ Initialization ]\r\n    //\r\n    constructor() {\r\n        this.cacheManager = new CacheManager();\r\n        this.utility = new Utility();\r\n        this.gameState = new GameState();\r\n\r\n        this.audioConfig = new AudioConfig();\r\n\r\n        this.settingsManager = new SettingsManager(this.audioConfig, this.cacheManager);\r\n        this.controlsManager = new ControlsManager(this.settingsManager);\r\n\r\n        this.charConfig = new CharacterConfig();\r\n        this.charManager = new CharacterManager(this.charConfig);\r\n\r\n        this.playerConfig = new PlayerConfig();\r\n\r\n        this.userId = this.utility.generateUID(this.playerConfig.default.data.idLength);\r\n        this.playerState = new PlayerState(this.playerConfig, this.userId, this.utility);\r\n\r\n        this.ui = new UserInterface(this.playerState, this.settingsManager, this.utility);\r\n\r\n        this.admin = new Admin(this.cacheManager, this.ui);\r\n\r\n        this.objectsManager = new ObjectsManager(\r\n            this.playerState,\r\n            this.utility\r\n        );\r\n\r\n        this.roomManager = new RoomManager(this.userId, this.utility);\r\n        this.lobbyManager = new LobbyManager(this.charManager, this.playerConfig, this.playerState, this.roomManager, this.ui, this.utility);\r\n        this.wsManager = new WebsocketManager(this.gameState, this.roomManager, this.utility);\r\n        this.chatManager = new ChatManager(this.roomManager, this.ui);\r\n\r\n        this.upgradeManager = new UpgradeManager(\r\n            this.playerConfig,\r\n            this.playerState,\r\n            this.ui,\r\n            this.utility\r\n        );\r\n\r\n        this.roomController = new RoomController(\r\n            this.gameState,\r\n            this.lobbyManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.upgradeManager,\r\n            this.userId,\r\n            this.utility,\r\n            this.wsManager\r\n        );\r\n\r\n        this.collisionsManager = new CollisionsManager(\r\n            this.objectsManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId\r\n        );\r\n\r\n        this.moveController = new MoveController(this.controlsManager, this.settingsManager);\r\n        this.staminaController = new StaminaController(this.playerState);\r\n        this.luckController = new LuckController(this.playerState);\r\n\r\n        this.audioManager = new AudioManager(this.audioConfig, this.roomManager, this.settingsManager, this.utility);\r\n        this.animator = new Animator(this.playerState, this.roomManager, this.userId);\r\n\r\n        this.renderingManager = new RenderingManager(\r\n            this.animator,\r\n            this.charManager,\r\n            this.lobbyManager,\r\n            this.objectsManager,\r\n            this.playerConfig,\r\n            this.ui,\r\n            this.userId\r\n        );\r\n\r\n        this.decalsManager = new DecalsManager(\r\n            this.charConfig,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.particlesManager = new ParticlesManager(\r\n            this.charConfig,\r\n            this.collisionsManager,\r\n            this.decalsManager,\r\n            this.playerState,\r\n            this.renderingManager,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.playerController = new PlayerController(\r\n            this.audioConfig,\r\n            this.audioManager,\r\n            this.decalsManager,\r\n            this.gameState,\r\n            this.luckController,\r\n            this.moveController,\r\n            this.objectsManager,\r\n            this.particlesManager,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.combatController = new CombatController(\r\n            this.animator,\r\n            this.audioConfig,\r\n            this.audioManager,\r\n            this.collisionsManager,\r\n            this.decalsManager,\r\n            this.gameState,\r\n            this.luckController,\r\n            this.particlesManager,\r\n            this.playerController,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.ui,\r\n            this.userId,\r\n            this.utility\r\n        );\r\n\r\n        this.dashController = new DashController(\r\n            this.collisionsManager,\r\n            this.combatController,\r\n            this.moveController,\r\n            this.playerState,\r\n            this.roomManager,\r\n            this.staminaController,\r\n            this.userId\r\n        );\r\n\r\n        this.eventsManager = new EventsManager(\r\n            this.animator,\r\n            this.chatManager,\r\n            this.controlsManager,\r\n            this.gameState,\r\n            this.roomController,\r\n            this.playerState,\r\n            this.settingsManager,\r\n            this.ui,\r\n            this.userId\r\n        );\r\n\r\n        if (document.readyState === 'loading') {\r\n            document.addEventListener('DOMContentLoaded', () => { this.initClient(); });\r\n        } else {\r\n            this.initClient();\r\n        }\r\n\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape' && this.gameState.gameInProgress && !this.lobbyManager.inLobby) {\r\n                e.preventDefault();\r\n                // TODO: Test stuff here!\r\n\r\n                const ammo = 20;\r\n\r\n                this.playerState.myPlayer.actions.primary.magazine.currentReserve += ammo;\r\n                this.ui.ammoReservesUIController.spawnAmmoInReserveUI(ammo);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Main initializer for the game client.\r\n     */\r\n    private async initClient(): Promise<void> {\r\n        this.ui.initInterface();\r\n        this.eventsManager.initEventListeners();\r\n        this.initGlobalEvents();\r\n\r\n        this.roomController.checkForRoomInURL();\r\n        this.roomController.showRoomControls();\r\n\r\n        const spanParams: SetSpanParams = {\r\n            spanId: 'userId',\r\n            value: this.userId\r\n        }\r\n        this.utility.setSpan(spanParams);\r\n\r\n        await this.settingsManager.loadSettings();\r\n        const settings: GameSettings = this.settingsManager.getSettings();\r\n\r\n        this.ui.initSoundSliders(settings);\r\n        this.ui.initSettingsInputs(settings);\r\n        this.ui.initSettingsToggles(settings)\r\n\r\n        this.ui.ammoReservesUIController.initAmmoReserveCanvas();\r\n\r\n        this.eventsManager.initKeybindListeners();\r\n\r\n        if (this.audioConfig.settings.preloadSounds) {\r\n            this.audioManager.preloadAudioAssets(this.audioConfig.resources.sfx, '.ogg');\r\n        }\r\n\r\n        this.watchForInputs();\r\n\r\n        this.admin.onAdminCommand = (command, key) => {\r\n            this.roomManager.sendAdminCommand(command, key);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initializes event listeners.\r\n     */\r\n    private initGlobalEvents(): void {\r\n        window.addEventListener(\"customEvent_startGame\", () => this.startGame());\r\n        window.addEventListener(\"customEvent_resetGameState\", (e: Event) => {\r\n            const event = e as CustomEvent<{ resetType: ResetType }>;\r\n            this.resetGameState(event.detail.resetType);\r\n        });\r\n\r\n        // Room manager message handler\r\n        this.roomManager.onMessage((message) => this.handleRoomMessage(message));\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Client <> Server ]\r\n    //\r\n    private handleRoomMessage(message: RoomMessage): void {\r\n        switch (message.type) {\r\n            case 'room-created':\r\n                console.log('Room created');\r\n                break;\r\n            case 'room-joined':\r\n                console.log('Joined room - lobby');\r\n                this.playerState.isHost = false;\r\n                this.lobbyManager.showLobbyControls({\r\n                    lobby: this.lobbyManager,\r\n                    lobbyOptions: {\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    },\r\n                    myPlayer: this.playerState.myPlayer,\r\n                    roomId: this.roomManager.getCurrentRoom() || \"\",\r\n                    userId: this.userId\r\n                });\r\n\r\n                // Send my lobby info\r\n                this.roomManager.sendMessage(JSON.stringify({\r\n                    type: 'lobby-join',\r\n                    color: this.playerState.myPlayer.color,\r\n                    rig: {\r\n                        body: this.playerConfig.default.rig.body,\r\n                        head: this.playerConfig.default.rig.head,\r\n                        headwear: this.playerConfig.default.rig.headwear,\r\n                        weapon: this.playerConfig.default.rig.weapon\r\n                    }\r\n                }));\r\n\r\n                const centerX = this.ui.charCustomizeCanvas ? this.ui.charCustomizeCanvas.width / 2 : 0;\r\n                const centerY = this.ui.charCustomizeCanvas ? this.ui.charCustomizeCanvas.height / 2 : 0;\r\n\r\n                // Add myself to lobby\r\n                this.lobbyManager.lobbyPlayers.set(this.userId, {\r\n                    id: this.userId,\r\n                    color: this.playerState.myPlayer.color,\r\n                    isHost: this.playerState.isHost,\r\n                    rig: {\r\n                        body: this.playerConfig.default.rig.body,\r\n                        head: this.playerConfig.default.rig.head,\r\n                        headwear: this.playerConfig.default.rig.headwear,\r\n                        weapon: this.playerConfig.default.rig.weapon\r\n                    },\r\n                    transform: {\r\n                        pos: { x: centerX, y: centerY },\r\n                        rot: 0\r\n                    }\r\n                });\r\n                this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n\r\n                if (this.lobbyManager.lobbyPlayers.size === 0) { // No other players added to lobby list\r\n                    this.playerState.isHost = true;\r\n                    this.lobbyManager.lobbyPlayers.get(this.userId)!.isHost = true;\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n                    console.log('I am the only player in the room...');\r\n                }\r\n                break;\r\n            case 'user-left':\r\n                console.log(`User ${message.userId} left`);\r\n                this.lobbyManager.lobbyPlayers.delete(message.userId);\r\n                this.playerState.players.delete(message.userId);\r\n\r\n                // Remove from leaderboard when player leaves\r\n                this.ui.leaderboard.delete(message.userId);\r\n                this.ui.updateLeaderboardDisplay(this.userId);\r\n                console.log(`Removed ${message.userId} from leaderboard`);\r\n\r\n                // Remove projectiles from disconnected player\r\n                this.combatController.projectiles.forEach((projectile, id) => {\r\n                    if (projectile.ownerId === message.userId) {\r\n                        this.combatController.projectiles.delete(id);\r\n                    }\r\n                });\r\n                this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                break;\r\n            case 'room-message':\r\n                this.handleGameMessage(message);\r\n                break;\r\n            case 'room-error':\r\n                alert(`Error: ${message.message}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private handleGameMessage(message: RoomMessage): void {\r\n        if (!message.message) return;\r\n\r\n        try {\r\n            const gameData = JSON.parse(message.message);\r\n\r\n            switch (gameData.type) {\r\n                //\r\n                // [ Lobby ]\r\n                //\r\n                case 'lobby-join':\r\n                    const centerX = this.ui.charCustomizeCanvas ? this.ui.charCustomizeCanvas.width / 2 : 0;\r\n                    const centerY = this.ui.charCustomizeCanvas ? this.ui.charCustomizeCanvas.height / 2 : 0;\r\n\r\n                    this.lobbyManager.lobbyPlayers.set(message.userId, {\r\n                        id: message.userId,\r\n                        color: gameData.color,\r\n                        isHost: false,\r\n                        rig: gameData.rig,\r\n                        transform: {\r\n                            pos: { x: centerX, y: centerY },\r\n                            rot: 0\r\n                        }\r\n                    });\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n\r\n                    // If I'm host, send current lobby state to new player\r\n                    if (this.playerState.isHost) {\r\n                        this.roomManager.sendMessage(JSON.stringify({\r\n                            type: 'lobby-state',\r\n                            players: Array.from(this.lobbyManager.lobbyPlayers.values()),\r\n                            options: {\r\n                                privateRoom: this.roomManager.isPrivateRoom,\r\n                                maxPlayers: this.gameState.gameMaxPlayers,\r\n                                maxWins: this.gameState.gameMaxWins,\r\n                                upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                                // TODO: Add more room options here as enabled\r\n                            }\r\n                        }));\r\n                    }\r\n                    break;\r\n                case 'lobby-state':\r\n                    this.lobbyManager.lobbyPlayers.clear();\r\n\r\n                    gameData.players.forEach((player: LobbyPlayer) => {\r\n                        this.lobbyManager.lobbyPlayers.set(player.id, player);\r\n                    });\r\n\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n\r\n                    if (gameData.options) {\r\n                        this.lobbyManager.syncLobbyOptions(gameData.options);\r\n                    }\r\n                    break;\r\n                case 'lobby-options':\r\n                    this.lobbyManager.syncLobbyOptions(gameData);\r\n                    break;\r\n                case 'promote-player':\r\n                    this.lobbyManager.lobbyPlayers.forEach((player, id) => { // Update host status for all players\r\n                        player.isHost = id === gameData.targetPlayerId;\r\n                    });\r\n\r\n                    // Update my own host status\r\n                    this.playerState.isHost = gameData.targetPlayerId === this.userId;\r\n\r\n                    // If I just became host due to migration, log it\r\n                    if (this.playerState.isHost && gameData.reason === 'host-migration') {\r\n                        console.log('I am now the host due to host migration');\r\n                    }\r\n\r\n                    this.lobbyManager.setupLobbyOptions({\r\n                        maxPlayers: this.gameState.gameMaxPlayers,\r\n                        maxWins: this.gameState.gameMaxWins,\r\n                        isHost: this.playerState.isHost,\r\n                        privateRoom: this.roomManager.isPrivateRoom,\r\n                        upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                    });\r\n\r\n                    this.ui.displayLobbyPlayers(this.playerState.isHost, this.lobbyManager, this.userId);\r\n                    this.ui.updateHostDisplay(this.playerState.isHost, this.lobbyManager);\r\n                    break;\r\n                case 'return-to-lobby': // New message type\r\n                    console.log('Returning to lobby - last player or game ended');\r\n\r\n                    // Update host status if I'm the new host\r\n                    if (gameData.newHostId === this.userId) {\r\n                        this.playerState.isHost = true;\r\n                        console.log('I am now the host as the last remaining player');\r\n                    }\r\n\r\n                    this.resetGameState('Lobby');\r\n\r\n                    // Show lobby\r\n                    this.lobbyManager.showLobbyControls({\r\n                        lobby: this.lobbyManager,\r\n                        lobbyOptions: {\r\n                            maxPlayers: this.gameState.gameMaxPlayers,\r\n                            maxWins: this.gameState.gameMaxWins,\r\n                            isHost: this.playerState.isHost,\r\n                            privateRoom: this.roomManager.isPrivateRoom,\r\n                            upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n                        },\r\n                        myPlayer: this.playerState.myPlayer,\r\n                        roomId: this.roomManager.getCurrentRoom() || \"\",\r\n                        userId: this.userId\r\n                    });\r\n                    break;\r\n                case 'kick-player':\r\n                    if (gameData.targetPlayerId === this.userId) {\r\n                        alert('You have been kicked from the lobby');\r\n                        this.roomController.leaveRoom();\r\n                    }\r\n                    break;\r\n                //\r\n                // [ Chat ]\r\n                //\r\n                case 'chat-message':\r\n                    if (message.userId !== this.userId) {\r\n                        this.chatManager.displayChatMessage({\r\n                            senderId: message.userId,\r\n                            message: gameData.message,\r\n                            isOwn: false\r\n                        });\r\n                    }\r\n                    break;\r\n                //\r\n                // [ Player ]\r\n                //\r\n                // [ IMPORTANT ] Keep full track of Player object here\r\n                case 'player-state':\r\n                    console.log('Player State for player', gameData.id, ':', gameData);\r\n\r\n                    if (!this.lobbyManager.inLobby) {\r\n                        this.playerState.players.set(message.userId, {\r\n                            id: message.userId,\r\n                            transform: {\r\n                                pos: {\r\n                                    x: gameData.transform?.pos.x,\r\n                                    y: gameData.transform?.pos.y\r\n                                },\r\n                                rot: gameData.transform?.rot\r\n                            },\r\n                            timestamp: gameData.timestamp,\r\n                            color: gameData.color,\r\n                            actions: {\r\n                                dash: {\r\n                                    cooldown: gameData.actions?.dash.cooldown || this.playerConfig.default.actions.dash.cooldown,\r\n                                    drain: gameData.actions?.dash.drain || this.playerConfig.default.actions.dash.drain,\r\n                                    multiplier: gameData.actions?.dash.multiplier || this.playerConfig.default.actions.dash.multiplier,\r\n                                    time: gameData.actions?.dash.time || this.playerConfig.default.actions.dash.time\r\n                                },\r\n                                melee: {\r\n                                    cooldown: gameData.actions?.melee.cooldown || this.playerConfig.default.actions.melee.cooldown,\r\n                                    damage: gameData.actions?.melee.damage || this.playerConfig.default.actions.melee.damage,\r\n                                    duration: gameData.actions?.melee.duration || this.playerConfig.default.actions.melee.duration,\r\n                                    range: gameData.actions?.melee.range || this.playerConfig.default.actions.melee.range,\r\n                                    size: gameData.actions?.melee.size || this.playerConfig.default.actions.melee.size\r\n                                },\r\n                                primary: {\r\n                                    buffer: gameData.actions?.primary.buffer || this.playerConfig.default.actions.primary.buffer,\r\n                                    burst: {\r\n                                        amount: gameData.actions?.primary.burst.amount || this.playerConfig.default.actions.primary.burst.amount,\r\n                                        delay: gameData.actions?.primary.burst.delay || this.playerConfig.default.actions.primary.burst.delay\r\n                                    },\r\n                                    magazine: {\r\n                                        currentAmmo: gameData.actions?.primary.magazine.currentAmmo,\r\n                                        currentReserve: gameData.actions?.primary.magazine.currentReserve,\r\n                                        maxReserve: gameData.actions?.primary.magazine.maxReserve,\r\n                                        size: gameData.actions?.primary.magazine.size || this.playerConfig.default.actions.primary.magazine.size\r\n                                    },\r\n                                    offset: gameData.actions?.primary.offset || this.playerConfig.default.actions.primary.offset,\r\n                                    projectile: {\r\n                                        amount: gameData.actions?.primary.projectile.amount || this.playerConfig.default.actions.primary.projectile.amount,\r\n                                        color: gameData.actions?.primary.projectile.color || this.playerConfig.default.actions.primary.projectile.color,\r\n                                        damage: gameData.actions?.primary.projectile.damage || this.playerConfig.default.actions.primary.projectile.damage,\r\n                                        length: gameData.actions?.primary.projectile.length || this.playerConfig.default.actions.primary.projectile.length,\r\n                                        range: gameData.actions?.primary.projectile.range || this.playerConfig.default.actions.primary.projectile.range,\r\n                                        size: gameData.actions?.primary.projectile.size || this.playerConfig.default.actions.primary.projectile.size,\r\n                                        speed: gameData.actions?.primary.projectile.speed || this.playerConfig.default.actions.primary.projectile.speed,\r\n                                        spread: gameData.actions?.primary.projectile.spread ||this.playerConfig.default.actions.primary.projectile.spread\r\n                                    },\r\n                                    reload: {\r\n                                        time: gameData.actions?.primary.reload.time || this.playerConfig.default.actions.primary.reload.time\r\n                                    }\r\n                                },\r\n                                sprint: {\r\n                                    drain: gameData.actions?.sprint.drain || this.playerConfig.default.actions.sprint.drain,\r\n                                    multiplier: gameData.actions?.sprint.multiplier || this.playerConfig.default.actions.sprint.multiplier\r\n                                }\r\n                            },\r\n                            equipment: gameData.equipment || this.playerConfig.default.equipment,\r\n                            flags: {\r\n                                hidden: gameData.flags?.hidden || this.playerConfig.default.flags.hidden,\r\n                                invulnerable: gameData.flags?.invulnerable || this.playerConfig.default.flags.invulnerable\r\n                            },\r\n                            inventory: {\r\n                                primary: gameData.inventory?.primary || this.playerConfig.default.inventory.primary,\r\n                                melee: gameData.inventory?.melee || this.playerConfig.default.inventory.melee\r\n                            },\r\n                            physics: {\r\n                                acceleration: gameData.physics?.acceleration || this.playerConfig.default.physics.acceleration,\r\n                                friction: gameData.physics?.friction || this.playerConfig.default.physics.friction\r\n                            },\r\n                            rig: {\r\n                                body: gameData.rig?.body || this.playerConfig.default.rig.body,\r\n                                head: gameData.rig?.head || this.playerConfig.default.rig.head,\r\n                                headwear: gameData.rig?.headwear || this.playerConfig.default.rig.headwear,\r\n                                weapon: gameData.rig?.weapon || this.playerConfig.default.rig.weapon\r\n                            },\r\n                            stats: {\r\n                                defense: gameData.stats?.defense || this.playerConfig.default.stats.defense,\r\n                                health: {\r\n                                    max: gameData.stats?.health.max || this.playerConfig.default.stats.health.max,\r\n                                    value: gameData.stats?.health.value || this.playerConfig.default.stats.health.max\r\n                                },\r\n                                luck: gameData.stats?.luck || this.playerConfig.default.stats.luck,\r\n                                size: gameData.stats?.size || this.playerConfig.default.stats.size,\r\n                                speed: gameData.stats?.speed || this.playerConfig.default.stats.speed,\r\n                                stamina: {\r\n                                    max: gameData.stats?.stamina.max || this.playerConfig.default.stats.stamina.max,\r\n                                    recovery: {\r\n                                        delay: gameData.stats?.stamina.recovery.delay || this.playerConfig.default.stats.stamina.recovery.delay,\r\n                                        rate: gameData.stats?.stamina.recovery.rate || this.playerConfig.default.stats.stamina.recovery.rate\r\n                                    },\r\n                                    value: gameData.stats?.stamina.value || this.playerConfig.default.stats.stamina.max,\r\n                                },\r\n                            },\r\n                            unique: gameData.unique || this.playerConfig.default.unique\r\n                        });\r\n                    }\r\n\r\n                    if (gameData.leaderboard) {\r\n                        gameData.leaderboard.forEach(([playerId, entry]: [string, LeaderboardEntry]) => {\r\n                            this.ui.leaderboard.set(playerId, entry);\r\n                        });\r\n                    }\r\n\r\n                    this.ui.createLeaderboard(this.lobbyManager, this.playerState.players, this.userId);\r\n                    break;\r\n                case 'partial-state': {\r\n                    if (message.userId === this.userId) return;\r\n\r\n                    const player = this.playerState.players.get(message.userId);\r\n                    if (!player) break;\r\n\r\n                    console.log('Partial State update for player', message.userId, ':', gameData);\r\n\r\n                    this.utility.deepMerge(player, gameData);\r\n                    break;\r\n                }\r\n                case 'player-move':\r\n                    if (!this.lobbyManager.inLobby && this.playerState.players.has(message.userId)) {\r\n                        const player = this.playerState.players.get(message.userId);\r\n                        if (!player) break;\r\n\r\n                        if (gameData.transform.pos) {\r\n                            player.transform.pos.x = gameData.transform.pos.x;\r\n                            player.transform.pos.y = gameData.transform.pos.y;\r\n                        }\r\n\r\n                        if (gameData.transform.rot !== undefined) {\r\n                            player.transform.rot = gameData.transform.rot;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'player-hit':\r\n                    if (gameData.projectileId) { // Remove the projectile for everyone\r\n                        this.combatController.projectiles.delete(gameData.projectileId);\r\n                    }\r\n\r\n                    if (gameData.targetId === this.userId) { // I got hit\r\n                        this.playerState.myPlayer.stats.health.value = gameData.newHealth;\r\n\r\n                        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n                        const healthSliderParams: SetSliderParams = {\r\n                            sliderId: 'healthBar',\r\n                            targetValue: this.playerState.myPlayer.stats.health.value,\r\n                            maxValue: this.playerState.myPlayer.stats.health.max,\r\n                            lerpTime: sliderLerpTime\r\n                        }\r\n                        this.utility.setSlider(healthSliderParams);\r\n\r\n                        if (this.playerState.myPlayer.stats.health.value <= 0) {\r\n                            this.playerController.playerDeath();\r\n                        }\r\n                    } else if (this.playerState.players.has(gameData.targetId)) { // Another player got hit\r\n                        const hitPlayer = this.playerState.players.get(gameData.targetId);\r\n                        if (!hitPlayer) break;\r\n\r\n                        hitPlayer.stats.health.value = gameData.newHealth;\r\n\r\n                        if (hitPlayer.stats.health.value <= 0) {\r\n                            console.log(`Player ${hitPlayer.id} died`);\r\n                        }\r\n                    }\r\n\r\n                    if (gameData.wasKill) {\r\n                        const shooter = this.ui.leaderboard.get(gameData.shooterId);\r\n                        if (shooter) {\r\n                            shooter.kills++;\r\n                        }\r\n\r\n                        const target = this.ui.leaderboard.get(gameData.targetId);\r\n                        if (target) {\r\n                            target.deaths++;\r\n                        }\r\n\r\n                        this.ui.updateLeaderboardDisplay(this.userId);\r\n                    }\r\n                    break;\r\n                case 'player-death':\r\n                    if (message.userId !== this.userId && gameData.ammoBox) { // Spawn ammo\r\n                        this.objectsManager.ammoBoxes.set(gameData.ammoBox.id, gameData.ammoBox);\r\n                        console.log(`Ammo box spawned at death of ${message.userId}`);\r\n                    }\r\n\r\n                    const gore: DeathDecal = {\r\n                        gore: {\r\n                            amount: this.utility.getRandomInt(2, 5)\r\n                        },\r\n                        blood: {\r\n                            amount: this.utility.getRandomInt(1, 3)\r\n                        },\r\n                        ownerId: message.userId,\r\n                        pos: {\r\n                            x: gameData.x,\r\n                            y: gameData.y\r\n                        },\r\n                        radius: gameData.size\r\n                    }\r\n                    this.particlesManager.generateGore(gore); // Spawn gore\r\n\r\n                    console.log(`Generated gore for ${message.userId}`);\r\n                    break;\r\n                case 'ammo-pickup':\r\n                    if (gameData.playerId === this.userId) break;\r\n\r\n                    if (this.objectsManager.ammoBoxes.has(gameData.ammoBoxId)) {\r\n                        const box = this.objectsManager.ammoBoxes.get(gameData.ammoBoxId);\r\n                        if (!box) break;\r\n\r\n                        // Update box state\r\n                        box.isOpen = gameData.boxState.isOpen;\r\n                        box.lid = gameData.boxState.lid;\r\n\r\n                        console.log(`Ammo box opened by ${gameData.playerId}`);\r\n                    }\r\n                    break;\r\n                case 'weapon-change':\r\n                    if (message.userId !== this.userId && this.playerState.players.has(message.userId)) {\r\n                        const player = this.playerState.players.get(message.userId);\r\n                        if (!player) break;\r\n\r\n                        player.rig.weapon = gameData.weapon;\r\n                        console.log(`${message.userId} switched to ${gameData.weapon}`);\r\n                    }\r\n                    break;\r\n                //\r\n                //\r\n                // [ Projectile ]\r\n                //\r\n                case 'projectile-launch':\r\n                    if (!this.lobbyManager.inLobby && message.userId !== this.userId) {\r\n                        this.combatController.projectiles.set(gameData.projectile.id, gameData.projectile);\r\n                    }\r\n                    break;\r\n                case 'projectile-remove':\r\n                    if (!this.lobbyManager.inLobby) {\r\n                        this.combatController.projectiles.delete(gameData.projectileId);\r\n                    }\r\n                    break;\r\n                case 'projectile-update': // Used for deflections or any projectile mid trajectory updates\r\n                    if (!this.lobbyManager.inLobby && this.combatController.projectiles.has(gameData.projectileId)) {\r\n                        const projectile = this.combatController.projectiles.get(gameData.projectileId);\r\n                        if (!projectile) break;\r\n\r\n                        // Update projectile properties\r\n                        projectile.ownerId = gameData.newOwnerId;\r\n                        projectile.velocity = gameData.velocity;\r\n                        projectile.color = gameData.color;\r\n                        projectile.transform.rot = Math.atan2(projectile.velocity.y, projectile.velocity.x);\r\n\r\n                        console.log(`Projectile ${gameData.projectileId} data updated by ${gameData.newOwnerId}`);\r\n                    }\r\n                    break;\r\n                //\r\n                //\r\n                // [ Game ]\r\n                //\r\n                case 'start-game':\r\n                    if (gameData.spawnMap && gameData.spawnMap[this.userId]) {\r\n                        this.playerState.myPlayer.transform.pos.x = gameData.spawnMap[this.userId].x;\r\n                        this.playerState.myPlayer.transform.pos.y = gameData.spawnMap[this.userId].y;\r\n                        console.log(\"My Player Spawn:\", gameData.spawnMap[this.userId].x, gameData.spawnMap[this.userId].y)\r\n                    }\r\n                    // For other players\r\n                    if (gameData.spawnMap) {\r\n                        this.playerState.players.forEach((player: Player, id: string) => {\r\n                            if (gameData.spawnMap[id]) {\r\n                                player.transform.pos.x = gameData.spawnMap[id].x;\r\n                                player.transform.pos.y = gameData.spawnMap[id].y;\r\n                                console.log(`Player ${id} spawn:`, gameData.spawnMap[id].x, gameData.spawnMap[id].y)\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    this.showGameControls(this.roomManager.getCurrentRoom() || '');\r\n                    this.startGameLoop();\r\n                    break;\r\n                case 'game-end':\r\n                    console.log(`Game ended! Winner: ${gameData.winnerId}`);\r\n                    this.gameWinner = gameData.winnerId;\r\n                    break;\r\n                //\r\n                //\r\n                // [ Round ]\r\n                //\r\n                case 'round-end':\r\n                    console.log(`Round ended! Winner: ${gameData.winnerId || 'No one'}`);\r\n                    this.endRound(gameData.winnerId);\r\n                    break;\r\n                case 'new-round':\r\n                    if (!gameData.spawnMap) return;\r\n                    console.log(gameData.spawnMap);\r\n\r\n                    // Hide upgrade UI\r\n                    if (this.ui.upgradeContainer) {\r\n                        this.ui.upgradeContainer.style.display = 'none';\r\n                    }\r\n\r\n                    console.log('New round started! Everyone respawning...');\r\n                    this.isRoundInProgress = true;\r\n                    this.roundWinner = null;\r\n\r\n                    this.playerState.myPlayer.stats.health.value = this.playerState.myPlayer.stats.health.max;\r\n\r\n                    const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n                    const healthSliderParams: SetSliderParams = {\r\n                        sliderId: 'healthBar',\r\n                        targetValue: this.playerState.myPlayer.stats.health.value,\r\n                        maxValue: this.playerState.myPlayer.stats.health.max,\r\n                        lerpTime: sliderLerpTime\r\n                    }\r\n\r\n                    const staminaSliderParams: SetSliderParams = {\r\n                        sliderId: 'staminaBar',\r\n                        targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n                        maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n                        lerpTime: sliderLerpTime\r\n                    }\r\n\r\n                    this.utility.setSlider(healthSliderParams);\r\n                    this.utility.setSlider(staminaSliderParams);\r\n\r\n                    this.playerState.myPlayer.transform.pos.x = gameData.spawnMap[this.userId].x;\r\n                    this.playerState.myPlayer.transform.pos.y = gameData.spawnMap[this.userId].y;\r\n\r\n                    this.resumeGame(); // Unpause locally\r\n\r\n                    // Receive all player's spawn locations and reset their health\r\n                    this.playerState.players.forEach((player: Player, playerId: string) => { // Respawn other players\r\n                        if (gameData.spawnMap[playerId]) {\r\n                            player.transform.pos.x = gameData.spawnMap[player.id].x;\r\n                            player.transform.pos.y = gameData.spawnMap[player.id].y;\r\n                            player.transform.rot = 0;\r\n\r\n                            // Reset vitals for good measure lol\r\n                            player.stats.health.value = player.stats.health.max;\r\n                            player.stats.stamina.value = player.stats.stamina.max;\r\n                        }\r\n                    });\r\n                    break;\r\n                case 'upgrade-taken': // Someone else took an upgrade\r\n                    if (gameData.upgradeId && gameData.isUnique) { // That upgrade is unique - remove it from my local uniques pool\r\n                        this.upgradeManager.removeUpgradeFromPool(gameData.upgradeId);\r\n                        console.log(`Unique upgrade ${gameData.upgradeId} taken by ${message.userId}`);\r\n                    }\r\n\r\n                    if (this.roundWinner === this.userId) { // I am the round winner - how many players have taken upgrades?\r\n                        this.upgradeManager.upgradesCompleted.add(message.userId);\r\n                        console.log(`${message.userId} completed upgrade. ${this.upgradeManager.upgradesCompleted.size}/${this.playerState.players.size} done`);\r\n\r\n                        // Check if all losers are done\r\n                        if (this.upgradeManager.upgradesCompleted.size >= this.playerState.players.size) {\r\n                            this.showWinnerContinueButton();\r\n                        }\r\n                    }\r\n                    break;\r\n                //\r\n                //\r\n                // [ Audio ]\r\n                //\r\n                case 'play-audio':\r\n                    if (message.userId !== this.userId) {\r\n                        this.audioManager.playAudio(gameData.params);\r\n                    }\r\n                    break;\r\n                //\r\n                //\r\n                // [ Visual ]\r\n                //\r\n                case 'add-decal':\r\n                    if (message.userId !== this.userId) {\r\n                        this.decalsManager.createDecalNetwork(gameData.params);\r\n                    }\r\n                    break;\r\n                case 'add-particles':\r\n                    if (message.userId !== this.userId) {\r\n                        this.particlesManager.createParticlesNetwork(gameData.params);\r\n                    }\r\n                    break;\r\n                case 'particle-emitter':\r\n                    if (message.userId !== this.userId) {\r\n                        const emission: EmitterParams = {\r\n                            id: gameData.id,\r\n                            interval: gameData.interval,\r\n                            lifetime: gameData.lifetime,\r\n                            offset: {\r\n                                x: gameData.offset.x,\r\n                                y: gameData.offset.y\r\n                            },\r\n                            particleType: gameData.particleType,\r\n                            playerId: gameData.playerId,\r\n                            pos: {\r\n                                x: gameData.pos.x,\r\n                                y: gameData.pos.y\r\n                            }\r\n                        }\r\n                        this.particlesManager.generateEmitter(emission);\r\n                    }\r\n                    break;\r\n                case 'character-animation':\r\n                    if (gameData.params.playerId !== this.userId) {\r\n                        this.animator.animateCharacterPartNetwork(gameData.params);\r\n                    }\r\n                    break;\r\n                case 'shrapnel-spawn':\r\n                    if (message.userId !== this.userId) {\r\n                        this.particlesManager.generateShrapnel(gameData.pieces);\r\n                    }\r\n                    break;\r\n                //\r\n                //\r\n            }\r\n        } catch (error) {\r\n            console.error('Error parsing game message:', error);\r\n        }\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Lobby ]\r\n    //\r\n    /**\r\n     * Return to the lobby for this room from the game.\r\n     * \r\n     * Called when game ends, or when you are the last player left in the game.\r\n     */\r\n    private returnToLobby(): void {\r\n        this.resetGameState('Lobby');\r\n\r\n        // Notify others and return to lobby\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'return-to-lobby',\r\n            reason: 'game-ended'\r\n        }));\r\n\r\n        this.lobbyManager.showLobbyControls({\r\n            lobby: this.lobbyManager,\r\n            lobbyOptions: {\r\n                maxPlayers: this.gameState.gameMaxPlayers,\r\n                maxWins: this.gameState.gameMaxWins,\r\n                isHost: this.playerState.isHost,\r\n                privateRoom: this.roomManager.isPrivateRoom,\r\n                upgradesEnabled: this.upgradeManager.isUpgradesEnabled\r\n            },\r\n            myPlayer: this.playerState.myPlayer,\r\n            roomId: this.roomManager.getCurrentRoom() || \"\",\r\n            userId: this.userId\r\n        });\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Round ]\r\n    //\r\n    /**\r\n     * Processes end of round logic.\r\n     */\r\n    private endRound(winnerId: string | null): void {\r\n        if (!this.isRoundInProgress) {\r\n            console.log('Ignoring endRound - round already ended');\r\n            return;\r\n        }\r\n\r\n        console.log(`Server confirmed round end. Winner: ${winnerId || 'No one'}`);\r\n\r\n        this.isRoundInProgress = false;\r\n        this.roundWinner = winnerId;\r\n\r\n        if (!winnerId) { // Everyone died somehow\r\n            console.log('Round ended with no survivors!');\r\n            if (this.playerState.isHost) {\r\n                this.utility.safeTimeout(() => {\r\n                    this.startNewRound();\r\n                }, GAME.ROUND_END_DELAY);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Increment win for the winner\r\n        if (winnerId && this.ui.leaderboard.has(winnerId)) {\r\n            const winnerEntry = this.ui.leaderboard.get(winnerId);\r\n            if (!winnerEntry) return;\r\n\r\n            winnerEntry.wins++;\r\n            console.log(`${winnerId} won the round! Total wins: ${winnerEntry.wins}`);\r\n\r\n            // Check if they've won the game - use dynamic max wins\r\n            if (winnerEntry.wins >= this.gameState.gameMaxWins) {\r\n                this.endGame(winnerId); // TODO: Maybe don't rely on leaderboard data to end the game but actual player data stored for the round\r\n                return; // Don't start a new round\r\n            }\r\n\r\n            // Update display to show new win count\r\n            this.ui.updateLeaderboardDisplay(this.userId);\r\n        }\r\n\r\n        this.utility.safeTimeout(() => {\r\n            this.pauseGame(); // Everybody pause locally\r\n        }, GAME.ROUND_END_DELAY / 6);\r\n\r\n        // We have a winner, start the upgrade phase after a delay\r\n        this.utility.safeTimeout(() => {\r\n            this.startUpgradePhase(winnerId);\r\n        }, GAME.ROUND_END_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Processes end of game logic.\r\n     */\r\n    private endGame(winnerId: string): void {\r\n        this.gameWinner = winnerId;\r\n        console.log(`${winnerId} won the game with ${this.gameState.gameMaxWins} wins!`);\r\n\r\n        // Send game end message\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'game-end',\r\n            winnerId: winnerId\r\n        }));\r\n\r\n        // Return to lobby after delay\r\n        this.utility.safeTimeout(() => {\r\n            this.returnToLobby();\r\n        }, GAME.GAME_END_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Starts a new round, keeping track of full player states.\r\n     */\r\n    private startNewRound(): void {\r\n        console.log('Starting new round...');\r\n\r\n        // Locally update all other players for the winner, their state should already be updated after taking upgrades\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        // TODO: Probably won't need this eventually due to player-state messages being sent when upgrades are taken, but need more testing to be sure\r\n        this.playerState.players.forEach((player: Player) => {\r\n            player.transform.rot = 0;\r\n            player.timestamp = player.timestamp || Date.now();\r\n            player.actions.dash.cooldown = player.actions.dash.cooldown || this.playerConfig.default.actions.dash.cooldown;\r\n            player.actions.dash.drain = player.actions.dash.drain || this.playerConfig.default.actions.dash.drain;\r\n            player.actions.dash.multiplier = player.actions.dash.multiplier || this.playerConfig.default.actions.dash.multiplier;\r\n            player.actions.dash.time = player.actions.dash.time || this.playerConfig.default.actions.dash.time;\r\n            player.actions.melee.cooldown = player.actions.melee.cooldown || this.playerConfig.default.actions.melee.cooldown;\r\n            player.actions.melee.damage = player.actions.melee.damage || this.playerConfig.default.actions.melee.damage;\r\n            player.actions.melee.duration = player.actions.melee.duration || this.playerConfig.default.actions.melee.duration;\r\n            player.actions.melee.range = player.actions.melee.range || this.playerConfig.default.actions.melee.range;\r\n            player.actions.melee.size = player.actions.melee.size || this.playerConfig.default.actions.melee.size;\r\n            player.actions.primary.buffer = player.actions.primary.buffer || this.playerConfig.default.actions.primary.buffer;\r\n            player.actions.primary.burst.amount = player.actions.primary.burst.amount || this.playerConfig.default.actions.primary.burst.amount;\r\n            player.actions.primary.burst.delay = player.actions.primary.burst.delay || this.playerConfig.default.actions.primary.burst.delay;\r\n            player.actions.primary.magazine.currentAmmo = player.actions.primary.magazine.currentAmmo || this.playerConfig.default.actions.primary.magazine.size;\r\n            player.actions.primary.magazine.currentReserve = player.actions.primary.magazine.currentReserve || this.playerConfig.default.actions.primary.magazine.startingReserve;\r\n            player.actions.primary.magazine.maxReserve = player.actions.primary.magazine.maxReserve || this.playerConfig.default.actions.primary.magazine.maxReserve;\r\n            player.actions.primary.magazine.size = player.actions.primary.magazine.size || this.playerConfig.default.actions.primary.magazine.size;\r\n            player.actions.primary.offset = player.actions.primary.offset || this.playerConfig.default.actions.primary.offset;\r\n            player.actions.primary.projectile.amount = player.actions.primary.projectile.amount || this.playerConfig.default.actions.primary.projectile.amount;\r\n            player.actions.primary.projectile.color = player.actions.primary.projectile.color || this.playerConfig.default.actions.primary.projectile.color;\r\n            player.actions.primary.projectile.damage = player.actions.primary.projectile.damage || this.playerConfig.default.actions.primary.projectile.damage;\r\n            player.actions.primary.projectile.length = player.actions.primary.projectile.length || this.playerConfig.default.actions.primary.projectile.length;\r\n            player.actions.primary.projectile.range = player.actions.primary.projectile.range || this.playerConfig.default.actions.primary.projectile.range;\r\n            player.actions.primary.projectile.size = player.actions.primary.projectile.size || this.playerConfig.default.actions.primary.projectile.size;\r\n            player.actions.primary.projectile.speed = player.actions.primary.projectile.speed || this.playerConfig.default.actions.primary.projectile.speed;\r\n            player.actions.primary.projectile.spread = player.actions.primary.projectile.spread || this.playerConfig.default.actions.primary.projectile.spread;\r\n            player.actions.primary.reload.time = player.actions.primary.reload.time || this.playerConfig.default.actions.primary.reload.time;\r\n            player.actions.sprint.drain = player.actions.sprint.drain || this.playerConfig.default.actions.sprint.drain;\r\n            player.actions.sprint.multiplier = player.actions.sprint.multiplier || this.playerConfig.default.actions.sprint.multiplier;\r\n            player.equipment = player.equipment || this.playerConfig.default.equipment;\r\n            player.flags.hidden = player.flags.hidden || this.playerConfig.default.flags.hidden;\r\n            player.flags.invulnerable = player.flags.invulnerable || this.playerConfig.default.flags.invulnerable;\r\n            player.inventory.primary = player.inventory.primary || this.playerConfig.default.inventory.primary;\r\n            player.inventory.melee = player.inventory.melee || this.playerConfig.default.inventory.melee;\r\n            player.physics.acceleration = player.physics.acceleration || this.playerConfig.default.physics.acceleration;\r\n            player.physics.friction = player.physics.friction || this.playerConfig.default.physics.friction;\r\n            player.rig.body = player.rig.body || this.playerConfig.default.rig.body;\r\n            player.rig.head = player.rig.head || this.playerConfig.default.rig.head;\r\n            player.rig.headwear = player.rig.headwear || this.playerConfig.default.rig.headwear;\r\n            player.rig.weapon = player.rig.weapon || this.playerConfig.default.rig.weapon;\r\n            player.stats.defense = player.stats.defense || this.playerConfig.default.stats.defense;\r\n            player.stats.health.max = player.stats.health.max || this.playerConfig.default.stats.health.max;\r\n            player.stats.health.value = player.stats.health.max || this.playerConfig.default.stats.health.max;\r\n            player.stats.luck = player.stats.luck || this.playerConfig.default.stats.luck;\r\n            player.stats.size = player.stats.size || this.playerConfig.default.stats.size;\r\n            player.stats.speed = player.stats.speed || this.playerConfig.default.stats.speed;\r\n            player.stats.stamina.max = player.stats.stamina.max || this.playerConfig.default.stats.stamina.max;\r\n            player.stats.stamina.recovery.delay = player.stats.stamina.recovery.delay || this.playerConfig.default.stats.stamina.recovery.delay;\r\n            player.stats.stamina.recovery.rate = player.stats.stamina.recovery.rate || this.playerConfig.default.stats.stamina.recovery.rate;\r\n            player.stats.stamina.value = player.stats.stamina.value || this.playerConfig.default.stats.stamina.max;\r\n            player.unique = player.unique || this.playerConfig.default.unique\r\n        });\r\n\r\n        // Send the spawn map to all other players\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'new-round',\r\n            reservedSpawn: {\r\n                x: Math.random() * (CANVAS.WIDTH - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN,\r\n                y: Math.random() * (CANVAS.HEIGHT - CANVAS.BORDER_MARGIN * 2) + CANVAS.BORDER_MARGIN\r\n            }\r\n        }));\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Game ]\r\n    //\r\n    /**\r\n     * Update the display with the game canvas via updateDisplay.\r\n     */\r\n    private showGameControls(roomId: string): void {\r\n        this.ui.updateDisplay(this.lobbyManager, \"game\", roomId);\r\n    }\r\n\r\n    /**\r\n     * Called by the host when the start button is pressed in the lobby.\r\n     * \r\n     * Starts game loop via executeStartGame or displays a warning before continuing if solo.\r\n     */\r\n    private startGame(): void {\r\n        if (!this.playerState.isHost) return;\r\n\r\n        // Check if solo and show warning if needed\r\n        if (this.lobbyManager.lobbyPlayers.size === 1) {\r\n            this.ui.soloGameWarning(() => this.executeStartGame());\r\n            return; // Don't continue, let the modal handle it\r\n        }\r\n\r\n        // If not solo, proceed normally\r\n        this.executeStartGame();\r\n    }\r\n\r\n    /**\r\n     * Executes the beginning of a game and broadcasts the start to all lobbyplayers.\r\n     */\r\n    private executeStartGame(): void {\r\n        // Send start game message to other players\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'start-game',\r\n            reservedSpawn: {\r\n                x: this.playerState.myPlayer.transform.pos.x,\r\n                y: this.playerState.myPlayer.transform.pos.y\r\n            }\r\n        }));\r\n\r\n        // Also start the game for myself as the host\r\n        this.showGameControls(this.roomManager.getCurrentRoom() || '');\r\n        this.startGameLoop();\r\n    }\r\n\r\n    /**\r\n     * Kicks of the game loop and initializes values to clean slate.\r\n     */\r\n    private startGameLoop(): void {\r\n        this.gameState.gameInProgress = true;\r\n        this.isRoundInProgress = true;\r\n\r\n        this.playerState.myPlayer.actions.primary.magazine.currentReserve = Math.floor(this.playerConfig.default.actions.primary.magazine.maxReserve / 2);\r\n        this.playerState.myPlayer.actions.primary.magazine.currentAmmo = this.playerState.myPlayer.actions.primary.magazine.size;\r\n        this.ui.ammoReservesUIController.spawnAmmoInReserveUI(this.playerState.myPlayer.actions.primary.magazine.currentReserve);\r\n        this.playerState.isReloading = false;\r\n\r\n        this.ui.createLeaderboard(this.lobbyManager, this.playerState.players, this.userId);\r\n\r\n        this.upgradeManager.resetUpgrades(this.playerState.myPlayer);\r\n\r\n        // Transfer rig from lobby to game player\r\n        const myLobbyPlayer = this.lobbyManager.lobbyPlayers.get(this.userId);\r\n        if (myLobbyPlayer) {\r\n            console.log(\"Found lobby rig for my player: \", myLobbyPlayer.rig);\r\n\r\n            this.playerState.myPlayer.rig.body = myLobbyPlayer.rig.body;\r\n            this.playerState.myPlayer.rig.head = myLobbyPlayer.rig.head;\r\n            this.playerState.myPlayer.rig.headwear = myLobbyPlayer.rig.headwear;\r\n            this.playerState.myPlayer.rig.weapon = myLobbyPlayer.rig.weapon;\r\n        }\r\n\r\n        // Send my player data\r\n        // TODO: You can maybe just call this.initializePlayer and use the returned player object, unsure yet.\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-state',\r\n            id: this.playerState.myPlayer.id,\r\n            timestamp: this.playerState.myPlayer.timestamp,\r\n            color: this.playerState.myPlayer.color,\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y,\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            actions: {\r\n                dash: {\r\n                    cooldown: this.playerState.myPlayer.actions.dash.cooldown,\r\n                    drain: this.playerState.myPlayer.actions.dash.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.dash.multiplier,\r\n                    time: this.playerState.myPlayer.actions.dash.time\r\n                },\r\n                melee: {\r\n                    cooldown: this.playerState.myPlayer.actions.melee.cooldown,\r\n                    damage: this.playerState.myPlayer.actions.melee.damage,\r\n                    duration: this.playerState.myPlayer.actions.melee.duration,\r\n                    range: this.playerState.myPlayer.actions.melee.range,\r\n                    size: this.playerState.myPlayer.actions.melee.size\r\n                },\r\n                primary: {\r\n                    buffer: this.playerState.myPlayer.actions.primary.buffer,\r\n                    burst: {\r\n                        amount: this.playerState.myPlayer.actions.primary.burst.amount,\r\n                        delay: this.playerState.myPlayer.actions.primary.burst.delay\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: this.playerState.myPlayer.actions.primary.magazine.currentAmmo,\r\n                        currentReserve: this.playerState.myPlayer.actions.primary.magazine.currentReserve,\r\n                        maxReserve: this.playerState.myPlayer.actions.primary.magazine.maxReserve,\r\n                        size: this.playerState.myPlayer.actions.primary.magazine.size\r\n                    },\r\n                    offset: this.playerState.myPlayer.actions.primary.offset,\r\n                    projectile: {\r\n                        amount: this.playerState.myPlayer.actions.primary.projectile.amount,\r\n                        color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                        damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                        length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                        range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                        size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                        speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                        spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                    },\r\n                    reload: {\r\n                        time: this.playerState.myPlayer.actions.primary.reload.time\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: this.playerState.myPlayer.actions.sprint.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.sprint.multiplier\r\n                }\r\n            },\r\n            equipment: this.playerState.myPlayer.equipment,\r\n            flags: {\r\n                hidden: this.playerState.myPlayer.flags.hidden,\r\n                invulnerable: this.playerState.myPlayer.flags.invulnerable\r\n            },\r\n            inventory: {\r\n                primary: this.playerState.myPlayer.inventory.primary,\r\n                melee: this.playerState.myPlayer.inventory.melee\r\n            },\r\n            physics: {\r\n                acceleration: this.playerState.myPlayer.physics.acceleration,\r\n                friction: this.playerState.myPlayer.physics.friction\r\n            },\r\n            rig: {\r\n                body: this.playerState.myPlayer.rig.body,\r\n                head: this.playerState.myPlayer.rig.head,\r\n                headwear: this.playerState.myPlayer.rig.headwear,\r\n                weapon: this.playerState.myPlayer.rig.weapon\r\n            },\r\n            stats: {\r\n                defense: this.playerState.myPlayer.stats.defense,\r\n                health: {\r\n                    max: this.playerState.myPlayer.stats.health.max,\r\n                    value: this.playerState.myPlayer.stats.health.value\r\n                },\r\n                luck: this.playerState.myPlayer.stats.luck,\r\n                size: this.playerState.myPlayer.stats.size,\r\n                speed: this.playerState.myPlayer.stats.speed,\r\n                stamina: {\r\n                    max: this.playerState.myPlayer.stats.stamina.max,\r\n                    recovery: {\r\n                        delay: this.playerState.myPlayer.stats.stamina.recovery.delay,\r\n                        rate: this.playerState.myPlayer.stats.stamina.recovery.rate\r\n                    },\r\n                    value: this.playerState.myPlayer.stats.stamina.value,\r\n                },\r\n            },\r\n            unique: this.playerState.myPlayer.unique\r\n        }));\r\n\r\n        this.gameLoop();\r\n\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const healthSliderParams: SetSliderParams = {\r\n            sliderId: 'healthBar',\r\n            targetValue: this.playerState.myPlayer.stats.health.value,\r\n            maxValue: this.playerState.myPlayer.stats.health.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n\r\n        const staminaSliderParams: SetSliderParams = {\r\n            sliderId: 'staminaBar',\r\n            targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n            maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n\r\n        this.utility.setSlider(healthSliderParams);\r\n        this.utility.setSlider(staminaSliderParams);\r\n    }\r\n\r\n    /**\r\n     * Core game processing function.\r\n     * \r\n     * Handles animation frame requests, update loops for all systems, and drawing functions.\r\n     */\r\n    private gameLoop(): void {\r\n        if (!this.gameState.gameInProgress || !this.ui.ctx || !this.ui.canvas || !this.ui.decalCtx || !this.ui.decalCanvas) return;\r\n\r\n        if (this.gameState.isPaused) { // Continue the loop but skip all updates\r\n            requestAnimationFrame(() => this.gameLoop());\r\n            return;\r\n        }\r\n\r\n        const dt = this.utility.deltaTime();\r\n\r\n        // Update\r\n        this.playerController.updatePlayerPosition(dt);\r\n        this.combatController.updateAttack(dt);\r\n        this.combatController.updateProjectiles(dt);\r\n        this.particlesManager.updateParticles(dt);\r\n        this.particlesManager.updateEmitters(dt);\r\n        this.particlesManager.updateShrapnel(dt);\r\n        this.animator.updateCharacterAnimations(dt);\r\n        this.staminaController.updateStamina(dt);\r\n        this.dashController.updateDash(dt);\r\n\r\n        this.collisionsManager.checkCollisions(dt);\r\n\r\n        const sliderLerpTime = 300; //TODO: Define UI lerping times globally\r\n        const staminaSliderParams: SetSliderParams = {\r\n            sliderId: 'staminaBar',\r\n            targetValue: this.playerState.myPlayer.stats.stamina.value,\r\n            maxValue: this.playerState.myPlayer.stats.stamina.max,\r\n            lerpTime: sliderLerpTime\r\n        }\r\n        this.utility.setSlider(staminaSliderParams);\r\n\r\n        this.renderingManager.clearCtx(this.ui.ctx);\r\n\r\n        this.ui.ctx.drawImage(this.ui.decalCanvas, 0, 0)\r\n\r\n        this.renderingManager.drawObjects();\r\n\r\n        // Draw projectiles\r\n        this.combatController.projectiles.forEach(projectile => {\r\n            this.renderingManager.drawProjectile(projectile);\r\n        });\r\n\r\n        // Draw other players\r\n        this.playerState.players.forEach((player: Player) => {\r\n            if (!this.ui.ctx) return;\r\n\r\n            const charRenderParams: RenderCharacterParams = { player, context: this.ui.ctx };\r\n            this.renderingManager.drawCharacter(charRenderParams);\r\n        });\r\n\r\n        const myRenderParams: RenderCharacterParams = { player: this.playerState.myPlayer, context: this.ui.ctx };\r\n        this.renderingManager.drawCharacter(myRenderParams);\r\n\r\n        this.particlesManager.drawParticles();\r\n        this.particlesManager.drawShrapnel();\r\n\r\n        // Continue game loop\r\n        requestAnimationFrame(() => this.gameLoop());\r\n    }\r\n\r\n    /**\r\n     * Pauses the game when called.\r\n     */\r\n    public pauseGame(): void {\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        this.gameState.isPaused = true;\r\n        console.log('Game paused');\r\n\r\n        this.controlsManager.clearActiveKeys();\r\n        this.playerState.isSprinting = false;\r\n        this.playerState.isDashing = false;\r\n        this.playerState.isBurstActive = false;\r\n        this.playerState.currentBurstShot = 0;\r\n    }\r\n\r\n    /**\r\n     * Resumes the game when called.\r\n     */\r\n    public resumeGame(): void {\r\n        if (!this.gameState.gameInProgress) return;\r\n\r\n        this.gameState.isPaused = false;\r\n        console.log('Game resumed');\r\n    }\r\n\r\n    /**\r\n     * Resets the game state to default.\r\n     */\r\n    private resetGameState(resetType: ResetType): void {\r\n        // Clear game flags\r\n        this.gameState.gameInProgress = false;\r\n        this.gameState.isPaused = false;\r\n        this.isRoundInProgress = false;\r\n        this.gameWinner = null;\r\n        this.roundWinner = null;\r\n\r\n        this.gameState.gameMaxWins = GAME.MAX_WINS;\r\n        this.gameState.gameMaxPlayers = GAME.MAX_PLAYERS;\r\n\r\n        if (resetType === 'Room') {\r\n            this.lobbyManager.inLobby = false;\r\n            this.playerState.isHost = false;\r\n        }\r\n\r\n        // Clear all collections\r\n        this.playerState.players.clear();\r\n        this.combatController.projectiles.clear();\r\n        this.objectsManager.ammoBoxes.clear();\r\n        this.decalsManager.dynamicDecals.clear();\r\n        this.particlesManager.particles.clear();\r\n        this.particlesManager.emitters.clear();\r\n        this.particlesManager.shrapnel.clear();\r\n        this.upgradeManager.upgradesCompleted.clear();\r\n\r\n        this.ui.ammoReservesUIController.reserveBulletParticles = [];\r\n\r\n        if (resetType === 'Room') {\r\n            this.lobbyManager.lobbyPlayers.clear();\r\n        }\r\n\r\n        // Reset UI and player\r\n        this.renderingManager.clearCtx();\r\n        this.chatManager.clearChat();\r\n        this.ui.clearLeaderboard();\r\n        this.playerState.resetPlayerState();\r\n        this.playerState.initPlayer(this.userId);\r\n        this.controlsManager.clearActiveKeys();\r\n        this.animator.clearAllAnimations();\r\n\r\n        this.utility.clearTimeoutCache();\r\n\r\n        // Reset upgrades and equipment\r\n        this.upgradeManager.resetUpgrades(this.playerState.myPlayer);\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Actions / Inputs ]\r\n    //\r\n    /**\r\n     * Provides polling for inputs and keybinds - checking for any actions assigned.\r\n     */\r\n    private watchForInputs(): void {\r\n        const poll = () => {\r\n            if (this.controlsManager.gamepadConnectionEnabled) {\r\n                this.controlsManager.pollGamepad();\r\n            }\r\n            this.checkActions();\r\n            requestAnimationFrame(poll);\r\n        };\r\n        poll();\r\n    }\r\n\r\n    /**\r\n     * Checks for keybinds and input actions during polling.\r\n     */\r\n    public checkActions(): void {\r\n        // TODO: MAYBE add menu navigation with keyboard/gamepad here\r\n\r\n        if (!this.gameState.gameInProgress || this.gameState.isPaused) return;\r\n\r\n        const keybinds = this.settingsManager.getSettings().controls.keybinds;\r\n\r\n        if (this.controlsManager.triggered(keybinds.dash)) {\r\n            this.dashController.startDash();\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.melee)) {\r\n            if (this.combatController.canMelee()) {\r\n                this.combatController.triggerAttack('melee');\r\n            }\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.reload)) {\r\n            this.combatController.startReload();\r\n        }\r\n\r\n        if (this.controlsManager.held(keybinds.sprint)) {\r\n            if (this.moveController.isMoving()) {\r\n                this.playerState.isSprinting = true;\r\n            }\r\n        } else {\r\n            this.playerState.isSprinting = false;\r\n        }\r\n\r\n        if (this.controlsManager.triggered(keybinds.attack)) {\r\n            if (this.playerState.canShoot && !this.playerState.isBurstActive && !this.playerState.isMelee) {\r\n                this.combatController.triggerAttack('ranged');\r\n            }\r\n        }\r\n\r\n        if (this.controlsManager.held(keybinds.attack) && this.playerState.canAutoFire) {\r\n            this.combatController.triggerAttack('ranged');\r\n        }\r\n\r\n        const gamepadRAxis = this.controlsManager.getGamepadRAxis();\r\n        if (gamepadRAxis !== null) {\r\n            this.animator.rotateCharacterPart(this.userId, gamepadRAxis);\r\n        }\r\n\r\n        this.controlsManager.updatePreviousKeys();\r\n    }\r\n    //\r\n    // #endregion\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // #region [ Upgrades ]\r\n    //\r\n    /**\r\n     * Start the upgrade phase by showing the relative UI for winners/losers.\r\n     */\r\n    private startUpgradePhase(winnerId: string | null): void {\r\n        console.log('Starting upgrade phase...');\r\n\r\n        this.upgradeManager.upgradesCompleted.clear(); // Reset upgrade tracking\r\n\r\n        const numUpgrades = 2; // TODO: This could change based on upgrades or other factors\r\n\r\n        // Show upgrade UI based on if I won or lost\r\n        if (winnerId === this.userId) {\r\n            this.showWinnerWaitScreen();\r\n        } else {\r\n            this.showUpgradeSelection(numUpgrades);\r\n        }\r\n    }\r\n\r\n    // [ Winner ]\r\n    //\r\n    /**\r\n     * Show the winner waiting screen.\r\n     * \r\n     * This screen will persist until all losers in the game finish picking upgrades.\r\n     */\r\n    private showWinnerWaitScreen(): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        const waitingDiv = document.createElement('div');\r\n        waitingDiv.className = 'upgrade_waiting';\r\n        waitingDiv.textContent = 'Waiting for other players...';\r\n\r\n        this.ui.upgradeContainer.appendChild(waitingDiv);\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    /**\r\n     * Update winner waiting screen to show the continue button, which will conclude the round-end upgrade process.\r\n     */\r\n    private showWinnerContinueButton(): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        const waitingDiv = document.createElement('div');\r\n        waitingDiv.className = 'upgrade_waiting';\r\n        waitingDiv.textContent = 'Upgrade phase complete.';\r\n\r\n        const continueBtn = document.createElement('button');\r\n        continueBtn.textContent = 'Continue';\r\n        continueBtn.onclick = () => {\r\n            if (!this.ui.upgradeContainer) return;\r\n            console.log(\"Winner pressed continue...\");\r\n\r\n            this.ui.upgradeContainer.style.display = 'none';\r\n\r\n            this.utility.safeTimeout(() => {\r\n                this.startNewRound();\r\n            }, GAME.NEW_ROUND_DELAY);\r\n        };\r\n\r\n        this.ui.upgradeContainer.appendChild(waitingDiv);\r\n        this.ui.upgradeContainer.appendChild(continueBtn);\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    // [ Losers ]\r\n    //\r\n    /**\r\n     * Displays the upgrade selection screen for losers during the upgrade phase.\r\n     */\r\n    private showUpgradeSelection(amount: number): void {\r\n        if (!this.ui.upgradeContainer) return;\r\n\r\n        this.ui.upgradeContainer.innerHTML = '';\r\n\r\n        // Get 3 random upgrades\r\n        const availableUpgrades = this.upgradeManager.getUpgrades(amount, this.playerState.myPlayer);\r\n\r\n        availableUpgrades.forEach(upgrade => {\r\n            const upgradeDiv = document.createElement('div');\r\n            upgradeDiv.className = 'upgrade_card container';\r\n            upgradeDiv.setAttribute('data-rarity', upgrade.rarity.toString());\r\n\r\n            // Create image element\r\n            const imageDiv = document.createElement('div');\r\n            imageDiv.className = 'upgrade_image';\r\n\r\n            const img = document.createElement('img');\r\n            img.src = upgrade.icon;\r\n            img.alt = upgrade.name;\r\n            img.className = 'upgrade_icon';\r\n\r\n            // Handle image load errors\r\n            img.onerror = () => {\r\n                console.warn(`Failed to load upgrade image: ${upgrade.icon}`);\r\n                img.style.display = 'none';\r\n            };\r\n\r\n            imageDiv.appendChild(img);\r\n\r\n            const nameDiv = document.createElement('div');\r\n            nameDiv.className = 'upgrade_name';\r\n            nameDiv.textContent = upgrade.name;\r\n\r\n            const subtitleDiv = document.createElement('div');\r\n            subtitleDiv.className = 'upgrade_subtitle';\r\n            subtitleDiv.textContent = upgrade.subtitle;\r\n\r\n            upgradeDiv.appendChild(imageDiv);\r\n            upgradeDiv.appendChild(nameDiv);\r\n            upgradeDiv.appendChild(subtitleDiv);\r\n\r\n            upgradeDiv.addEventListener('click', () => {\r\n                console.log(\"Selected upgrade: \", upgrade.name);\r\n                this.selectUpgrade(upgrade.id);\r\n            });\r\n\r\n            if (!this.ui.upgradeContainer) return;\r\n            this.ui.upgradeContainer.appendChild(upgradeDiv);\r\n        });\r\n\r\n        this.ui.upgradeContainer.style.display = 'flex';\r\n    }\r\n\r\n    /**\r\n     * Triggers on click when a loser selects an upgrade from their displayed options.\r\n     * \r\n     * Processes selection upgrade and sends a network message to inform others of the action.\r\n     */\r\n    private selectUpgrade(upgradeId: string): void {\r\n        const success = this.upgradeManager.applyUpgrade(upgradeId, this.playerState.myPlayer);\r\n        if (!success) {\r\n            console.error('Failed to apply upgrade'); // Maybe two people picked same one, (apply upgrade checks uniques)\r\n            return;\r\n        }\r\n\r\n        this.finishUpgrade(upgradeId);\r\n    }\r\n\r\n    /**\r\n     * Closes upgrade loop for loser once they have selected an upgrade.\r\n     */\r\n    private finishUpgrade(selectedUpgradeId: string): void {\r\n        if (this.ui.upgradeContainer) { // Hide upgrade UI\r\n            this.ui.upgradeContainer.style.display = 'none';\r\n        }\r\n\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'upgrade-taken',\r\n            upgradeId: selectedUpgradeId,\r\n            userId: this.userId,\r\n            isUnique: this.upgradeManager.upgrades.find(u => u.id === selectedUpgradeId)?.unique || false\r\n        }));\r\n\r\n        // [ IMPORTANT ] Keep full track of Player object here\r\n        this.roomManager.sendMessage(JSON.stringify({\r\n            type: 'player-state',\r\n            id: this.playerState.myPlayer.id,\r\n            timestamp: this.playerState.myPlayer.timestamp,\r\n            color: this.playerState.myPlayer.color,\r\n            transform: {\r\n                pos: {\r\n                    x: this.playerState.myPlayer.transform.pos.x,\r\n                    y: this.playerState.myPlayer.transform.pos.y,\r\n                },\r\n                rot: this.playerState.myPlayer.transform.rot\r\n            },\r\n            actions: {\r\n                dash: {\r\n                    cooldown: this.playerState.myPlayer.actions.dash.cooldown,\r\n                    drain: this.playerState.myPlayer.actions.dash.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.dash.multiplier,\r\n                    time: this.playerState.myPlayer.actions.dash.time\r\n                },\r\n                melee: {\r\n                    cooldown: this.playerState.myPlayer.actions.melee.cooldown,\r\n                    damage: this.playerState.myPlayer.actions.melee.damage,\r\n                    duration: this.playerState.myPlayer.actions.melee.duration,\r\n                    range: this.playerState.myPlayer.actions.melee.range,\r\n                    size: this.playerState.myPlayer.actions.melee.size\r\n                },\r\n                primary: {\r\n                    buffer: this.playerState.myPlayer.actions.primary.buffer,\r\n                    burst: {\r\n                        amount: this.playerState.myPlayer.actions.primary.burst.amount,\r\n                        delay: this.playerState.myPlayer.actions.primary.burst.delay\r\n                    },\r\n                    magazine: {\r\n                        currentAmmo: this.playerState.myPlayer.actions.primary.magazine.currentAmmo,\r\n                        currentReserve: this.playerState.myPlayer.actions.primary.magazine.currentReserve,\r\n                        maxReserve: this.playerState.myPlayer.actions.primary.magazine.maxReserve,\r\n                        size: this.playerState.myPlayer.actions.primary.magazine.size\r\n                    },\r\n                    offset: this.playerState.myPlayer.actions.primary.offset,\r\n                    projectile: {\r\n                        amount: this.playerState.myPlayer.actions.primary.projectile.amount,\r\n                        color: this.playerState.myPlayer.actions.primary.projectile.color,\r\n                        damage: this.playerState.myPlayer.actions.primary.projectile.damage,\r\n                        length: this.playerState.myPlayer.actions.primary.projectile.length,\r\n                        range: this.playerState.myPlayer.actions.primary.projectile.range,\r\n                        size: this.playerState.myPlayer.actions.primary.projectile.size,\r\n                        speed: this.playerState.myPlayer.actions.primary.projectile.speed,\r\n                        spread: this.playerState.myPlayer.actions.primary.projectile.spread\r\n                    },\r\n                    reload: {\r\n                        time: this.playerState.myPlayer.actions.primary.reload.time\r\n                    }\r\n                },\r\n                sprint: {\r\n                    drain: this.playerState.myPlayer.actions.sprint.drain,\r\n                    multiplier: this.playerState.myPlayer.actions.sprint.multiplier\r\n                }\r\n            },\r\n            equipment: this.playerState.myPlayer.equipment,\r\n            flags: {\r\n                hidden: this.playerState.myPlayer.flags.hidden,\r\n                invulnerable: this.playerState.myPlayer.flags.invulnerable\r\n            },\r\n            inventory: {\r\n                primary: this.playerState.myPlayer.inventory.primary,\r\n                melee: this.playerState.myPlayer.inventory.melee\r\n            },\r\n            physics: {\r\n                acceleration: this.playerState.myPlayer.physics.acceleration,\r\n                friction: this.playerState.myPlayer.physics.friction\r\n            },\r\n            rig: {\r\n                body: this.playerState.myPlayer.rig.body,\r\n                head: this.playerState.myPlayer.rig.head,\r\n                headwear: this.playerState.myPlayer.rig.headwear,\r\n                weapon: this.playerState.myPlayer.rig.weapon\r\n            },\r\n            stats: {\r\n                defense: this.playerState.myPlayer.stats.defense,\r\n                health: {\r\n                    max: this.playerState.myPlayer.stats.health.max,\r\n                    value: this.playerState.myPlayer.stats.health.max\r\n                },\r\n                luck: this.playerState.myPlayer.stats.luck,\r\n                size: this.playerState.myPlayer.stats.size,\r\n                speed: this.playerState.myPlayer.stats.speed,\r\n                stamina: {\r\n                    max: this.playerState.myPlayer.stats.stamina.max,\r\n                    recovery: {\r\n                        delay: this.playerState.myPlayer.stats.stamina.recovery.delay,\r\n                        rate: this.playerState.myPlayer.stats.stamina.recovery.rate\r\n                    },\r\n                    value: this.playerState.myPlayer.stats.stamina.max\r\n                }\r\n            },\r\n            unique: this.playerState.myPlayer.unique\r\n        }));\r\n\r\n        console.log('Upgrade selected, waiting for others...');\r\n    }\r\n    //\r\n    // #endregion\r\n}\r\n\r\n// Initialize the game client\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        new Client();\r\n    });\r\n} else {\r\n    new Client();\r\n}\r\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","create","params","name","subtitle","icon","type","UNIQUE","rarity","SUPERIOR","unique","func","player","includes","push","LEGENDARY","UpgradeRarity","UpgradeType","STAT","UNCOMMON","playerState","updateStat","stats","health","max","COMMON","speed","actions","dash","cooldown","RARE","SPECIAL","EXCEPTIONAL","time","stamina","recovery","rate","delay","primary","projectile","damage","buffer","EQUIPMENT","equipment","spread","RESOURCE","magazine","currentReserve","ui","ammoReservesUIController","spawnAmmoInReserveUI","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","OBJECT_DEFAULTS","SHRAPNEL","AMMO_BOX","BASE","BULLETS","LID","CANVAS","GAMEPAD_MAP","A","B","X","Y","LB","RB","LT","RT","SELECT","START","L_STICK","R_STICK","DPAD_UP","DPAD_DOWN","DPAD_LEFT","DPAD_RIGHT","HOME","AXES","LEFT_STICK_X","LEFT_STICK_Y","RIGHT_STICK_X","RIGHT_STICK_Y","GAME","CHARACTER_SIZE","CONNECTION_TIMEOUT","CONTROLS","KEYBINDS","MELEE","MOVE_UP","MOVE_LEFT","MOVE_DOWN","MOVE_RIGHT","RELOAD","SPRINT","ATTACK","DASH","GAMEPAD","DEADZONE","GAME_END_DELAY","GRAPHICS","PHYSICS","AMMORESERVES","STATIC_OVERLAY","BACKGROUND_PARTICLES","MAX_PLAYERS","MAX_WINS","RECONNECT_DELAY","ROUND_END_DELAY","NEW_ROUND_DELAY","ADMIN_KEYS","KEYS","REQUIRED_COUNT","Admin","constructor","cacheManager","adminKeysHeld","Set","this","initKeyListener","initConsoleKeybinds","window","addEventListener","add","checkAdminCombo","delete","every","has","size","clear","showAdminModal","modal","modalInput","modalConfirmButton","modalCancelButton","modalErrorDiv","modalText","classList","remove","style","display","textContent","focus","onclick","trim","command","split","executeAdminCommand","closeModal","console","log","onAdminCommand","document","getModifierState","preventDefault","clearCacheCommand","then","location","reload","Animator","roomManager","userId","characterAnimations","Map","characterOffsets","animateCharacterPart","generateCharacterAnimation","sendMessage","JSON","stringify","rotateCharacterPart","playerId","rotation","myPlayer","transform","rot","players","now","Date","Math","abs","lastSentRotation","lastSentRotationTime","animateCharacterPartNetwork","part","frames","duration","partIndex","animationId","set","startTime","originalOffset","x","y","updateCharacterAnimations","delta","animationsToRemove","currentTime","forEach","animation","progress","frameKeys","Number","sort","a","b","lerpedX","lerpedY","currentFrameIndex","i","length","frameProgress","nextFrameProgress","lastFrame","currentFrame","nextFrame","clearAllAnimations","AudioPool","poolSize","maxConcurrent","pools","activeAudio","createPool","src","pool","audio","Audio","preload","returnToPool","active","index","indexOf","splice","getAudio","pop","volume","playbackRate","loop","preloadSound","AudioManager","audioConfig","settingsManager","utility","audioPool","settings","playAudio","warn","min","random","blend","spatial","pos","dx","listener","dy","distance","sqrt","distanceVolume","rolloff","rolloffType","factor","maxDistance","referenceDistance","normalizedDistance","pow","outputGroup","output","toLowerCase","mixer","getSettings","master","pitch","delayMs","safeTimeout","play","catch","error","playAudioNetwork","preloadAudioAssets","sfx","extension","preloadSFX","Array","isArray","endsWith","CacheManager","dbName","dbVersion","db","initDB","Promise","reject","request","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","event","target","objectStoreNames","contains","createObjectStore","write","transaction","objectStore","put","read","CharacterConfig","weapon","glock","knife","empty","full","body","default","head","blondeAfro","headwear","fez","strawHat","trucker","upgrades","kineticBrain","characterDecals","blood","gore","CharacterManager","charConfig","getCharacterAsset","layer","variant","getUpgradeVisual","upgradeName","lowerName","ChatManager","sendChatMessage","chatInput","message","alert","timestamp","displayChatMessage","senderId","isOwn","chatMessages","messageDiv","createElement","className","senderSpan","contentSpan","appendChild","scrollTop","scrollHeight","children","removeChild","firstChild","clearChat","innerHTML","ControlsManager","activeKeys","gamepadKeys","previousKeys","mousePos","gamepadConnected","gamepadConnectionEnabled","gamepadRAxis","initGamepad","held","triggered","getActiveKeys","addKey","removeKey","clearActiveKeys","updatePreviousKeys","getMousePos","setMousePos","pollGamepad","gamepad","navigator","getGamepads","keybinds","controls","gamepadMap","deadzone","xAxis","axes","yAxis","moveRight","moveLeft","moveDown","moveUp","buttons","melee","pressed","attack","sprint","rightX","rightY","aimMagnitude","atan2","PI","getGamepadRAxis","CollisionsManager","objectsManager","checkCollisions","checkObjectCollisions","checkPlayersCollisions","collisionsEnabled","collisionRadius","getPlayerCollider","ammoBoxes","ammoBox","boxId","isOpen","maxReserve","actualAmmoAdded","ammoAmount","angle","lid","velocity","cos","sin","torque","ammoBoxId","boxState","dist","minDist","overlap","pushX","pushY","padding","col","flags","hidden","invulnerable","DecalsConfig","decals","radius","density","opacity","variation","colors","explosion","DecalsManager","dynamicDecals","staticDecalData","decalsConfig","createDecal","generateDecal","createDecalNetwork","decalCtx","parametric","generateParametricDecal","image","generateImageDecal","numPixels","floor","save","globalCompositeOperation","pixelX","pixelY","chosenColor","rgb","hexToRgb","pixelOpacity","clampedOpacity","fillStyle","g","fillRect","restore","Image","drawImage","complete","naturalWidth","translate","rotate","drawSize","scale","onload","bakeDecals","currentBaked","getImageData","data","alpha","newAlpha","oldAlpha","clearRect","renderBakedDecals","putImageData","spawnMagazineDecal","setTimeout","currentAmmo","magazineSrc","getRandomNum","decalParams","EventsManager","animator","chatManager","controlsManager","gameState","roomController","initEventListeners","canvas","hostButton","joinButton","quickplayButton","lobbyLeaveButton","lobbyCodeButton","gameLeaveButton","gameCodeButton","startGameBtn","chatSendBtn","hostRoom","joinRoom","quickPlay","leaveRoom","copyRoomCode","onStartButtonClick","shiftKey","canShoot","isSprinting","isDashing","isBurstActive","currentBurstShot","settingsButton","showSettingsPage","settingsCloseButton","hideSettingsPage","onKeyDown","onKeyUp","onMouseUp","onMouseMove","onMouseDown","switchSettingsPage","controlsTab","graphicsTab","soundTab","controlsBody","graphicsBody","soundBody","initSettingsAudioSliders","initSettingsInputListeners","initSettingsToggleListeners","activeElement","gameInProgress","isPaused","values","button","updateMouse","rect","getBoundingClientRect","clientX","left","clientY","top","CustomEvent","dispatchEvent","slider","masterSlider","fill","masterFill","masterValue","channel","interfaceSlider","interfaceFill","interfaceValue","musicSlider","musicFill","musicValue","sfxSlider","sfxFill","sfxValue","voiceSlider","voiceFill","voiceValue","handleMove","moveEvent","sliderValue","calculateSliderValue","updateSettingsSlider","updateSettings","handleUp","removeEventListener","input","deadzoneInput","settingPath","parse","parseFloat","rawValue","parsedValue","isNaN","pathParts","update","current","toggle","particleJSToggle","staticVfxToggle","ammoReservesPhysicsToggle","newValue","getAttribute","setAttribute","removeAttribute","initKeybindListeners","controlsSettings","initKeybindsInterface","action","newBinding","onBindingChange","element","getElementById","toUpperCase","buttonName","find","toString","GameState","gameMaxWins","gameMaxPlayers","LobbyManager","characterManager","playerConfig","inLobby","lobbyPlayers","charCustomizeHandlers","showLobbyControls","lobby","lobbyOptions","roomId","isHost","maxWins","privateRoom","upgradesEnabled","updateDisplay","centerX","charCustomizeCanvas","width","centerY","height","color","rig","setupLobbyOptions","winsInputParams","inputId","privateToggleParams","toggleId","upgradesToggleParams","setToggle","setInput","displayLobbyPlayers","updateHostDisplay","setupCharacterCustomization","setupLobbyToggle","val","setupLobbyInput","maxPlayers","elementProp","messageKey","getter","setter","handlerKey","handler","toggleParams","parseInt","inputParams","syncLobbyOptions","options","syncOption","bind","v","elementId","fn","label","format","displayValue","promotePlayer","targetPlayerId","kickPlayer","bodyArrowLeft","bodyArrowRight","headArrowLeft","headArrowRight","headwearArrowLeft","headwearArrowRight","addHandler","cycleRigVariant","rigProp","direction","myLobbyPlayer","allVariants","currentVariant","newIndex","ParticlesConfig","particles","drip","count","lifetime","noise","strength","sizeOverLifetime","collide","fade","paint","stain","spray","muzzle","smoke","flash","shell","sparks","ParticlesManager","collisionsManager","decalsManager","renderingManager","emitters","shrapnel","particlesConfig","createParticles","generateParticles","createParticlesNetwork","particleParams","noiseStrength","noiseScale","getRandomInArray","particle","age","hasCollided","initialSize","maxOpacity","updateParticles","particlesToRemove","noiseX","simplexNoise2D","noiseY","ageRatio","stampParticle","extendedLifeRatio","speedReduction","lifetimeExtension","drawParticles","ctx","globalAlpha","createEmitter","generateEmitter","interval","offset","particleType","offsetX","offsetY","emissionInterval","lastEmission","updateEmitters","emittersToRemove","emitter","emitterId","worldX","worldY","coneSpread","randomSpread","baseSpeed","speedVariation","finalSpeed","generateGore","gorePool","amount","goreAsset","goreDecal","decalId","ownerId","stampGore","bloodPool","bloodAsset","bloodDecal","characterImages","spawnShrapnel","pieces","piece","generateUID","images","rotationSpeed","generateShrapnel","updateShrapnel","shrapnelToRemove","actualDamage","defense","newHealth","shooterId","source","wasKill","detail","stampShrapnel","drawShrapnel","RenderingManager","charManager","lobbyManager","ammoBoxImages","clearCtx","customCtx","drawCharacter","context","renderUniqueEffects","font","textAlign","displayName","substring","fillText","idOffset","drawCharacterLayers","drawCharacterLayer","drawUpgradeLayers","assets","drawCharacterPart","assetPath","partType","renderLobbyPlayer","posX","posY","animationOffset","uniqueName","equipmentName","renderSpectralImage","staticGhosts","_spectralGhosts","lastHidden","flashes","wasHidden","isHidden","t","ghost","filter","ghostPlayer","getContext","drawObjects","layers","img","drawProjectile","dirX","dirY","frontX","frontY","backX","backY","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","RoomController","upgradeManager","wsManager","showRoomControls","getWebSocket","createRoom","isPrivateRoom","isUpgradesEnabled","connectWebSocket","showJoinRoomModal","joinRoomById","fetch","response","ok","json","modalContent","modalButtons","resetType","checkForRoomInURL","getRoomIdFromURL","URLSearchParams","search","roomIdDisplay","gameRoomIdDisplay","clipboard","writeText","RoomManager","currentRoom","ws","messageHandlers","setWebSocket","setupMessageHandler","readyState","WebSocket","OPEN","send","generateLink","history","pushState","origin","text","sendAdminCommand","getCurrentRoom","getRoomLink","param","onMessage","onmessage","plainMessage","SettingsManager","gameSettings","initSettings","interface","music","voice","graphics","physics","ammoReserves","renderBackgroundParticles","showStaticOverlay","merge","loadSettings","cached","upgradeFiles","resource","UpgradeManager","takenUniques","upgradesCompleted","rarityConfig","weight","MYTHICAL","ENLIGHTENED","HOLY","initUpgrades","filename","upgrade","getUpgrades","availableUpgrades","selected","totalWeight","reduce","sum","getRarityWeight","selectedUpgrade","applyUpgrade","upgradeId","u","hasEquipment","removeUpgradeFromPool","resetUpgrades","equipmentId","hasUnique","uniqueId","getRarityColor","AmmoReservesUIController","ammoReserveIcon","projectileIcon","reserveBulletParticles","initAmmoReserveCanvas","renderAmmoReserves","requestAnimationFrame","updateAmmoReservePhysics","ammoReservesCtx","physicsEnabled","collisionHeight","collisionWidth","collisionX","collisionY","getAmmoReserveCollisionZone","vx","vy","removeAmmoFromReserveUI","shift","ammoReservesCanvas","bullet","j","ax","ay","va","vb","avg","UserInterface","decalCanvas","gameContainer","gameOptionsContainer","lobbyContainer","roomControls","upgradeContainer","lobbyPlayersList","userIdDisplay","playersInput","privateToggle","upgradesToggle","winsInput","chatContainer","charCustomizeContainer","charCustomizeCtx","leaderboard","leaderboardBody","leaderboardContainer","settingsContainer","accuracyStat","damageStat","luckStat","rangeStat","shotSpeedStat","speedStat","initInterfaceListeners","initInterface","clearDisplay","gameRoomId","disabled","from","playerDiv","colorDiv","backgroundColor","nameDiv","controlsDiv","promoteBtn","kickBtn","onkeydown","onConfirm","url","URL","pathname","startsWith","replace","soloGameWarning","page","fillElement","valueElement","percentage","round","sliderElement","mouseX","position","initSoundSliders","audioSettings","initSettingsInputs","initSettingsToggles","showRebindModal","buttonValue","onRebind","duplicateWarnings","warningIndex","gamepads","some","gp","checkDuplicate","binding","entries","handleKeyPress","cleanup","newKey","handleMouseDown","stopPropagation","mouseKey","handleGamepadPress","createLeaderboard","allPlayers","_","wins","kills","deaths","updateLeaderboardDisplay","localPlayer","entryA","entryB","entry","row","nameCell","winsCell","killsCell","deathsCell","clearLeaderboard","animTime","steps","increaseColor","decreaseColor","timeout","onStatChange","oldValue","isIncrease","animateTextInElement","decimals","Utility","lastFrameTime","performance","simplexTable","generateSimplexTable","activeTimeouts","deepMerge","deltaTime","callback","clearTimeoutCache","clearTimeout","toFixed","getRandomInt","array","getShuffledArray","slice","getDotProduct","v1","v2","getReflection","normal","dot","forward","getDirection","targetPos","rootPos","getRandomDirection","degrees","randomAngle","getRandomColor","hexColor","mode","primaries","padStart","channels","dr","dg","lr","lg","lb","gray","hex","exec","table","Uint8Array","k","override","perm","F2","G2","s","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","grad3","t0","t1","t2","prefix","chars","base","inputElement","setSlider","sliderId","targetValue","maxValue","lerpTime","sliderContainer","sliderFill","querySelector","targetPercentage","currentWidthStr","currentPercentage","transition","setSpan","spanElement","spanId","increment","stepTime","currentStep","currentValue","setInterval","clearInterval","WebsocketManager","wsProtocol","protocol","wsHost","port","hostname","host","onopen","onclose","CombatController","audioManager","luckController","particlesManager","playerController","projectiles","triggerAttack","startMelee","startBurst","updateAttack","isReloading","reloadStartTime","finishReload","nextBurstShotTime","ammoNeeded","burst","targetDir","triggerBurstUniques","launchProjectile","canMelee","isMelee","lastMeleeTime","inventory","range","spawnOffset","spawnX","spawnY","meleeProjectile","distanceTraveled","lastShotTime","ammoToUse","resources","emptyBlend","blendVolume","dir","overrides","canTriggerUnique","projectileAmount","projectileColor","projectileDamage","projectileLength","projectileRange","projectileSize","projectileSpeed","projectileSpread","baseAngle","bulletSpawnX","bulletSpawnY","muzzleParams","smokeParams","shellParams","shuffledUniques","luckRoll","triggerUnique","updateProjectiles","projectilesToRemove","aim","lerpFactor","lx","ly","norm","frameDistance","playerCollider","reflected","projectileId","newOwnerId","playerHit","dx2","dy2","triggerCollisionUniques","sparksParams","sfxParams","impact","metal","toggleAutoFire","canAutoFire","cachedBuffer","angleOffset","dirA","dirB","baseParams","succeededUniques","canReload","startReload","start","magazineSpace","ammoToReload","end","DashController","combatController","moveController","staminaController","startDash","isMoving","lastDashTime","inputX","inputY","inputLength","getMoveInput","requestStamina","drain","dashStartTime","dashSpeed","multiplier","playerVelocityX","playerVelocityY","updateDash","newX","newY","moved","distanceFromLastSent","lastSentX","lastSentY","lastSentMoveTime","LuckController","effectiveLuck","luck","chance","tanh","MoveController","ObjectsManager","spawnObject","baseObject","spawnAmmoBox","PlayerController","setupEventListeners","updatePlayerPosition","currentSpeed","friction","targetVelocityX","targetVelocityY","acceleration","healthSliderParams","gruntParams","male","grunt","flesh","bloodDirection","emission","me","other","targetId","playerDeath","triggerUniques","resetPlayerState","PlayerState","isStaminaRecoveryBlocked","lastStaminaDrainTime","staminaRecoveryBlockedUntil","statListeners","initPlayer","startingReserve","statPath","notifyChange","lastProp","StaminaController","updateStamina","staminaRecoveryPerFrame","PlayerConfig","idLength","AudioConfig","preloadSounds","Client","isRoundInProgress","roundWinner","gameWinner","admin","dashController","eventsManager","initClient","ammo","initGlobalEvents","spanParams","watchForInputs","startGame","resetGameState","handleRoomMessage","handleGameMessage","gameData","reason","newHostId","sliderLerpTime","hitPlayer","shooter","box","spawnMap","showGameControls","startGameLoop","winnerId","endRound","staminaSliderParams","resumeGame","isUnique","showWinnerContinueButton","returnToLobby","startNewRound","winnerEntry","endGame","pauseGame","startUpgradePhase","reservedSpawn","executeStartGame","gameLoop","dt","charRenderParams","myRenderParams","poll","checkActions","showWinnerWaitScreen","showUpgradeSelection","waitingDiv","continueBtn","upgradeDiv","imageDiv","alt","subtitleDiv","selectUpgrade","finishUpgrade","selectedUpgradeId"],"sourceRoot":""}