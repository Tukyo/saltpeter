(()=>{"use strict";const t={AMOUNT:1,DELAY:75},e={SIZE:10},s={TIME:2e3},o=.85,a=.55,i=1,r="#fff5beff",n=25,h=15,l=450,d=1,c=20,y=.1,m=100,u=15,g=8,p=15,b=25,I=3,M={radius:8,density:.35,opacity:.25,variation:.215,color:"#000000"},C={radius:25,density:.125,opacity:.275,variation:.45,color:"#781414"},f=800,w=600,E={RECONNECT_DELAY:3e3,CONNECTION_TIMEOUT:1e3,CONTROLS:["w","a","s","d","r"],MAX_WINS:5,ROUND_END_DELAY:3e3,GAME_END_DELAY:5e3},x="#000";function P(){let t="";for(let e=0;e<12;e++)t+="0123456789abcdefghijklmnopqrstuvwxyz"[Math.floor(36*Math.random())];return t}function v(t){const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}class S{constructor(t){this.currentRoom=null,this.ws=null,this.messageHandlers=[],this.userId=t}setWebSocket(t){this.ws=t,this.setupMessageHandler()}createRoom(){const t=function(){let t="room_";for(let e=0;e<10;e++)t+="0123456789abcdefghijklmnopqrstuvwxyz"[Math.floor(36*Math.random())];return t}();return this.joinRoom(t,!0),t}joinRoom(t,e=!1){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return void console.error("WebSocket not connected");const s={type:e?"create-room":"join-room",roomId:t,userId:this.userId};this.ws.send(JSON.stringify(s)),this.currentRoom=t,function(t){const e=`${window.location.origin}?room=${t}`;window.history.pushState({roomId:t},"",e)}(t)}leaveRoom(){if(!this.currentRoom||!this.ws)return;const t={type:"leave-room",roomId:this.currentRoom,userId:this.userId};this.ws.send(JSON.stringify(t)),this.currentRoom=null,window.history.pushState({},"",window.location.origin)}sendMessage(t){if(!this.currentRoom||!this.ws)return;const e={type:"room-message",roomId:this.currentRoom,userId:this.userId,message:t};this.ws.send(JSON.stringify(e))}getCurrentRoom(){return this.currentRoom}getRoomLink(){return this.currentRoom?(t=this.currentRoom,`${window.location.origin}?room=${t}`):null;var t}onMessage(t){this.messageHandlers.push(t)}setupMessageHandler(){this.ws&&(this.ws.onmessage=t=>{try{const e=JSON.parse(t.data);this.messageHandlers.forEach(t=>t(e))}catch(e){const s={type:"room-message",userId:"server",message:t.data};this.messageHandlers.forEach(t=>t(s))}})}}class k{constructor(){this.ws=null,this.canvas=null,this.ctx=null,this.decalCanvas=null,this.decalCtx=null,this.roomControls=null,this.gameContainer=null,this.userIdDisplay=null,this.roomIdDisplay=null,this.lobbyContainer=null,this.lobbyPlayersList=null,this.startGameBtn=null,this.gameOptionsContainer=null,this.chatContainer=null,this.chatMessages=null,this.chatInput=null,this.chatSendBtn=null,this.playerVelocityX=0,this.playerVelocityY=0,this.lastSentX=0,this.lastSentY=0,this.players=new Map,this.lobbyPlayers=new Map,this.projectiles=new Map,this.decals=new Map,this.keys=new Set,this.gameRunning=!1,this.isHost=!1,this.inLobby=!1,this.canShoot=!0,this.mouseX=0,this.mouseY=0,this.currentBurstShot=0,this.burstInProgress=!1,this.nextBurstShotTime=0,this.projectileOffset=5,this.currentAmmo=e.SIZE,this.isReloading=!1,this.reloadStartTime=0,this.leaderboardContainer=null,this.leaderboardBody=null,this.leaderboard=new Map,this.roundInProgress=!1,this.roundWinner=null,this.gameWinner=null,this.alivePlayersCount=0,this.userId=P(),this.roomManager=new S(this.userId),this.myPlayer={id:this.userId,x:Math.random()*(f-2*p)+p,y:Math.random()*(w-2*p)+p,color:"#"+Math.floor(16777215*Math.random()).toString(16).padStart(6,"0"),health:m},"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{this.initializeElements(),this.setupEventListeners(),this.checkForRoomInURL()}):(this.initializeElements(),this.setupEventListeners(),this.checkForRoomInURL())}initializeElements(){this.canvas=document.getElementById("gameCanvas"),this.decalCanvas=document.createElement("canvas"),this.roomControls=document.getElementById("roomControls"),this.gameContainer=document.getElementById("gameContainer"),this.lobbyContainer=document.getElementById("lobbyContainer"),this.lobbyPlayersList=document.getElementById("lobbyPlayersList"),this.startGameBtn=document.getElementById("startGameBtn"),this.gameOptionsContainer=document.getElementById("gameOptionsContainer"),this.userIdDisplay=document.getElementById("userId"),this.roomIdDisplay=document.getElementById("roomId"),this.chatContainer=document.getElementById("chatContainer"),this.chatMessages=document.getElementById("chatMessages"),this.chatInput=document.getElementById("chatInput"),this.chatSendBtn=document.getElementById("chatSendBtn"),this.leaderboardContainer=document.getElementById("leaderboardContainer"),this.leaderboardBody=document.getElementById("leaderboardBody"),this.canvas&&this.decalCanvas&&this.roomControls&&this.gameContainer&&this.lobbyContainer&&this.userIdDisplay&&this.roomIdDisplay&&this.lobbyPlayersList&&this.startGameBtn&&this.gameOptionsContainer&&this.chatContainer&&this.chatMessages&&this.chatInput&&this.chatSendBtn&&this.leaderboardContainer&&this.leaderboardBody?(this.canvas.width=f,this.canvas.height=w,this.decalCanvas.width=f,this.decalCanvas.height=w,this.ctx=this.canvas.getContext("2d"),this.decalCtx=this.decalCanvas.getContext("2d"),this.ctx&&this.decalCtx?(this.userIdDisplay.textContent=this.userId,this.showRoomControls()):console.error("Could not get canvas context")):console.error("Some required DOM elements are missing")}connectWebSocket(){const t="https:"===location.protocol?"wss:":"ws:";this.ws=new WebSocket(`${t}//${location.host}`),this.ws.onopen=()=>{console.log("Connected to WebSocket"),this.roomManager.setWebSocket(this.ws)},this.ws.onclose=()=>{console.log("Disconnected from WebSocket"),this.gameRunning=!1,setTimeout(()=>this.connectWebSocket(),E.RECONNECT_DELAY)},this.ws.onerror=t=>{console.error("WebSocket error:",t)}}handleRoomMessage(t){switch(t.type){case"room-created":console.log("Room created");break;case"room-joined":console.log("Joined room - lobby"),this.isHost=!1,this.showLobbyControls(t.roomId||""),this.roomManager.sendMessage(JSON.stringify({type:"lobby-join",color:this.myPlayer.color})),this.lobbyPlayers.set(this.userId,{id:this.userId,color:this.myPlayer.color,isHost:this.isHost}),this.updateLobbyPlayersList(),this.updateHostDisplay();break;case"user-joined":console.log(`User ${t.userId} joined`),this.gameRunning&&!this.inLobby&&this.roomManager.sendMessage(JSON.stringify({type:"player-join",x:this.myPlayer.x,y:this.myPlayer.y,color:this.myPlayer.color,leaderboard:Array.from(this.leaderboard.entries())}));break;case"room-joined-game":console.log("Joined room - game in progress"),this.isHost=!1,this.showGameControls(t.roomId||""),this.startGameLoop();break;case"user-left":console.log(`User ${t.userId} left`),this.lobbyPlayers.delete(t.userId),this.players.delete(t.userId),this.leaderboard.delete(t.userId),this.updateLeaderboardDisplay(),console.log(`Removed ${t.userId} from leaderboard`),this.projectiles.forEach((e,s)=>{e.ownerId===t.userId&&this.projectiles.delete(s)}),this.updateLobbyPlayersList();break;case"room-message":this.handleGameMessage(t);break;case"room-error":alert(`Error: ${t.message}`)}}handleGameMessage(t){if(t.message)try{const e=JSON.parse(t.message);switch(e.type){case"lobby-join":this.lobbyPlayers.set(t.userId,{id:t.userId,color:e.color,isHost:!1}),this.updateLobbyPlayersList(),this.isHost&&this.roomManager.sendMessage(JSON.stringify({type:"lobby-state",players:Array.from(this.lobbyPlayers.values())}));break;case"lobby-state":this.lobbyPlayers.clear(),e.players.forEach(t=>{this.lobbyPlayers.set(t.id,t)}),this.updateLobbyPlayersList(),this.updateHostDisplay();break;case"promote-player":this.lobbyPlayers.forEach((t,s)=>{t.isHost=s===e.targetPlayerId}),this.isHost=e.targetPlayerId===this.userId,this.isHost&&"host-migration"===e.reason&&console.log("I am now the host due to host migration"),this.updateLobbyPlayersList(),this.updateHostDisplay();break;case"return-to-lobby":console.log("Returning to lobby - last player or game ended"),this.gameRunning=!1,e.newHostId===this.userId&&(this.isHost=!0,console.log("I am now the host as the last remaining player")),this.players.clear(),this.projectiles.clear(),this.showLobbyControls(this.roomManager.getCurrentRoom()||"");break;case"kick-player":e.targetPlayerId===this.userId&&(alert("You have been kicked from the lobby"),this.leaveRoom());break;case"chat_message":t.userId!==this.userId&&this.displayChatMessage(t.userId,e.message,!1);break;case"start-game":this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop();break;case"player-join":case"player-state":this.inLobby||this.players.set(t.userId,{id:t.userId,x:e.x,y:e.y,color:e.color,health:e.health||m}),e.leaderboard&&e.leaderboard.forEach(([t,e])=>{this.leaderboard.set(t,e)}),this.createLeaderboard();break;case"player-move":if(!this.inLobby&&this.players.has(t.userId)){const s=this.players.get(t.userId);s.x=e.x,s.y=e.y}break;case"player-hit":if(e.projectileId&&this.projectiles.delete(e.projectileId),e.targetId===this.userId)this.myPlayer.health=e.newHealth,this.myPlayer.health<=0&&(this.recordDeath(),this.checkRoundEnd());else if(this.players.has(e.targetId)){const t=this.players.get(e.targetId);t.health=e.newHealth,t.health<=0&&(console.log(`Player ${t.id} died`),this.checkRoundEnd())}e.wasKill&&(this.leaderboard.has(e.shooterId)&&this.leaderboard.get(e.shooterId).kills++,this.leaderboard.has(e.targetId)&&this.leaderboard.get(e.targetId).deaths++,this.updateLeaderboardDisplay());break;case"player-death":break;case"player-respawn":if(this.players.has(t.userId)){const s=this.players.get(t.userId);s.x=e.x,s.y=e.y,s.health=e.health,console.log(`Player ${s.id} respawned`)}break;case"projectile-launch":this.inLobby||t.userId===this.userId||this.projectiles.set(e.projectile.id,e.projectile);break;case"projectile-remove":this.inLobby||this.projectiles.delete(e.projectileId);break;case"round-end":console.log(`Round ended! Winner: ${e.winnerId||"No one"}`),this.roundInProgress=!1,this.roundWinner=e.winnerId;break;case"game-end":console.log(`Game ended! Winner: ${e.winnerId}`),this.gameWinner=e.winnerId;break;case"new-round":if(console.log("New round started! Everyone respawning..."),this.roundInProgress=!0,this.roundWinner=null,this.players.has(t.userId)){const s=this.players.get(t.userId);s.x=e.x,s.y=e.y,s.health=e.health}break;case"add-decal":t.userId!==this.userId&&this.applyDecal(e.x,e.y,e.decalId,e.params)}}catch(t){console.error("Error parsing game message:",t)}}showRoomControls(){this.updateDisplay("room")}hostRoom(){if(this.ws){const t=this.roomManager.createRoom();this.isHost=!0,this.showLobbyControls(t)}else this.connectWebSocket(),setTimeout(()=>{const t=this.roomManager.createRoom();this.isHost=!0,this.showLobbyControls(t)},E.CONNECTION_TIMEOUT)}joinRoom(){const t=prompt("Enter room code or link:");if(!t)return;let e=null;try{const s=new URL(t,window.location.origin);e=s.pathname.startsWith("/room_")?s.pathname.replace("/","").replace("/",""):new URLSearchParams(s.search).get("room")}catch{t.startsWith("room_")&&(e=t)}e?this.ws?this.roomManager.joinRoom(e):(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(e)},E.CONNECTION_TIMEOUT)):alert("Invalid room code or link")}quickPlay(){fetch("/quickplay").then(t=>{if(!t.ok)throw new Error("No available rooms");return t.json()}).then(t=>{this.ws?this.roomManager.joinRoom(t.roomId):(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t.roomId)},E.CONNECTION_TIMEOUT))}).catch(t=>{alert("No available games found. Try hosting a new session!"),console.log("Quickplay error:",t)})}leaveRoom(){this.roomManager.leaveRoom(),this.gameRunning=!1,this.inLobby=!1,this.isHost=!1,this.players.clear(),this.projectiles.clear(),this.lobbyPlayers.clear(),this.clearChat(),this.clearLeaderboard(),this.showRoomControls(),this.decals.clear(),this.decalCtx&&this.decalCtx.clearRect(0,0,f,w),this.ctx&&this.ctx.clearRect(0,0,f,w)}checkForRoomInURL(){const t=new URLSearchParams(window.location.search).get("room");t&&(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t)},E.CONNECTION_TIMEOUT))}copyRoomCode(){const t=this.inLobby?document.getElementById("roomId")?.textContent:document.getElementById("gameRoomId")?.textContent;t&&navigator.clipboard.writeText(t).then(()=>{alert("Room code copied!")}).catch(()=>{alert("Could not copy. Please copy manually.")})}showLobbyControls(t){this.updateDisplay("lobby",t),this.lobbyPlayers.set(this.userId,{id:this.userId,color:this.myPlayer.color,isHost:this.isHost}),this.updateLobbyPlayersList(),this.updateHostDisplay()}updateLobbyPlayersList(){this.lobbyPlayersList&&(this.lobbyPlayersList.innerHTML="",Array.from(this.lobbyPlayers.values()).sort((t,e)=>t.isHost&&!e.isHost?-1:!t.isHost&&e.isHost?1:0).forEach(t=>{const e=document.createElement("div");e.className="lobby_player";const s=document.createElement("div");s.className="player_color",s.style.backgroundColor=t.color;const o=document.createElement("div");o.className="player_name",o.textContent=`${t.id}${t.isHost?" (Host)":""}`;const a=document.createElement("div");if(a.className="player_controls",this.isHost&&t.id!==this.userId){const e=document.createElement("button");e.textContent="Promote",e.onclick=()=>this.promotePlayer(t.id);const s=document.createElement("button");s.textContent="Kick",s.className="danger",s.onclick=()=>this.kickPlayer(t.id),a.appendChild(e),a.appendChild(s)}e.appendChild(s),e.appendChild(o),e.appendChild(a),this.lobbyPlayersList&&this.lobbyPlayersList.appendChild(e)}))}promotePlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"promote-player",targetPlayerId:t}))}kickPlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"kick-player",targetPlayerId:t}))}returnToLobby(){this.gameRunning=!1,this.roundInProgress=!1,this.leaderboard.clear(),this.gameWinner=null,this.roundWinner=null,this.players.clear(),this.projectiles.clear(),this.decals.clear(),this.decalCtx&&this.decalCtx.clearRect(0,0,f,w),this.ctx&&this.ctx.clearRect(0,0,f,w),this.clearChat(),this.clearLeaderboard(),this.roomManager.sendMessage(JSON.stringify({type:"return-to-lobby",reason:"game-ended"})),this.showLobbyControls(this.roomManager.getCurrentRoom()||"")}checkRoundEnd(){if(!this.roundInProgress)return;let t=this.myPlayer.health>0?1:0,e=this.myPlayer.health>0?this.userId:null;this.players.forEach(s=>{s.health>0&&(t++,e=s.id)}),t<=1&&this.endRound(e)}endRound(t){if(this.roundInProgress){if(this.roundInProgress=!1,this.roundWinner=t,t&&this.leaderboard.has(t)){const e=this.leaderboard.get(t);if(e.wins++,console.log(`${t} won the round! Total wins: ${e.wins}`),e.wins>=E.MAX_WINS)return void this.endGame(t);this.updateLeaderboardDisplay()}setTimeout(()=>{this.startNewRound()},E.ROUND_END_DELAY)}}endGame(t){this.gameWinner=t,console.log(`${t} won the game with ${E.MAX_WINS} wins!`),this.roomManager.sendMessage(JSON.stringify({type:"game-end",winnerId:t})),setTimeout(()=>{this.returnToLobby()},E.GAME_END_DELAY)}startNewRound(){console.log("Starting new round..."),this.myPlayer.health=m,this.myPlayer.x=Math.random()*(f-2*p)+p,this.myPlayer.y=Math.random()*(w-2*p)+p,this.currentAmmo=e.SIZE,this.isReloading=!1,this.burstInProgress=!1,this.currentBurstShot=0,this.players.forEach(t=>{t.health=m,t.x=Math.random()*(f-2*p)+p,t.y=Math.random()*(w-2*p)+p}),this.roundInProgress=!0,this.roundWinner=null,this.roomManager.sendMessage(JSON.stringify({type:"new-round",x:this.myPlayer.x,y:this.myPlayer.y,health:this.myPlayer.health}))}sendChatMessage(){if(!this.chatInput||!this.chatInput.value.trim())return;const t=this.chatInput.value.trim();t.length>200?alert("Message too long! Max 200 characters."):(this.roomManager.sendMessage(JSON.stringify({type:"chat-message",message:t,timestamp:Date.now()})),this.displayChatMessage(this.userId,t,!0),this.chatInput.value="")}displayChatMessage(t,e,s=!1){if(!this.chatMessages)return;const o=document.createElement("div");o.className="chat_message "+(s?"own":"other");const a=document.createElement("span");a.className="sender",a.textContent=s?"You:":`${t}:`;const i=document.createElement("span");for(i.className="content",i.textContent=e,o.appendChild(a),o.appendChild(i),this.chatMessages.appendChild(o),this.chatMessages.scrollTop=this.chatMessages.scrollHeight;this.chatMessages.children.length>100;)this.chatMessages.removeChild(this.chatMessages.firstChild)}clearChat(){this.chatMessages&&(this.chatMessages.innerHTML=""),this.chatInput&&(this.chatInput.value="")}setupEventListeners(){document.getElementById("hostBtn")?.addEventListener("click",()=>this.hostRoom()),document.getElementById("joinBtn")?.addEventListener("click",()=>this.joinRoom()),document.getElementById("quickBtn")?.addEventListener("click",()=>this.quickPlay()),document.getElementById("lobbyLeaveBtn")?.addEventListener("click",()=>this.leaveRoom()),document.getElementById("lobbyCodeBtn")?.addEventListener("click",()=>this.copyRoomCode()),document.getElementById("gameLeaveBtn")?.addEventListener("click",()=>this.leaveRoom()),document.getElementById("gameCodeBtn")?.addEventListener("click",()=>this.copyRoomCode()),this.startGameBtn?.addEventListener("click",()=>this.startGame()),this.chatSendBtn?.addEventListener("click",()=>this.sendChatMessage()),this.chatInput?.addEventListener("keypress",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.sendChatMessage())}),this.chatInput?.addEventListener("focus",()=>{this.keys.clear(),this.canShoot=!1,this.burstInProgress=!1,this.currentBurstShot=0}),this.chatInput?.addEventListener("blur",()=>{this.keys.clear(),this.canShoot=!0}),document.addEventListener("keydown",t=>this.onKeyDown(t)),document.addEventListener("keyup",t=>this.onKeyUp(t)),this.canvas?.addEventListener("mousedown",t=>this.onMouseDown(t)),this.canvas?.addEventListener("mouseup",t=>this.onMouseUp(t)),this.canvas?.addEventListener("mousemove",t=>this.onMouseMove(t)),this.roomManager.onMessage(t=>this.handleRoomMessage(t))}onKeyDown(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning)return;const s=t.key.toLowerCase();E.CONTROLS.includes(s)&&(t.preventDefault(),this.keys.add(s),"r"===s&&!this.isReloading&&this.currentAmmo<e.SIZE&&this.startReload())}onKeyUp(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning)return;const e=t.key.toLowerCase();E.CONTROLS.includes(e)&&(t.preventDefault(),this.keys.delete(e))}onMouseDown(t){this.chatInput!==document.activeElement&&this.gameRunning&&this.canvas&&0===t.button&&this.canShoot&&!this.burstInProgress&&(this.updateMousePosition(t),this.startBurst(),this.canShoot=!1)}onMouseUp(t){this.chatInput!==document.activeElement&&this.gameRunning&&0===t.button&&(this.canShoot=!0)}onMouseMove(t){this.chatInput!==document.activeElement&&this.gameRunning&&this.updateMousePosition(t)}updateMousePosition(t){if(this.chatInput===document.activeElement)return;if(!this.canvas)return;const e=this.canvas.getBoundingClientRect();this.mouseX=t.clientX-e.left,this.mouseY=t.clientY-e.top}updateAttack(){if(!this.gameRunning||this.myPlayer.health<=0)return;const o=Date.now();if(this.isReloading)o>=this.reloadStartTime+s.TIME&&(this.isReloading=!1,this.currentAmmo=e.SIZE,console.log("Reload complete!"));else if(this.burstInProgress&&o>=this.nextBurstShotTime){const s=t.AMOUNT;this.currentAmmo>0&&this.currentBurstShot<s?(this.launchProjectile(),this.currentBurstShot++,this.currentAmmo--,console.log(`Burst shot ${this.currentBurstShot}! Ammo: ${this.currentAmmo}/${e.SIZE}`),this.currentBurstShot>=s||0===this.currentAmmo?(this.burstInProgress=!1,this.currentBurstShot=0):this.nextBurstShotTime=o+t.DELAY):(this.burstInProgress=!1,this.currentBurstShot=0)}}startBurst(){if(this.burstInProgress||this.myPlayer.health<=0||this.isReloading)return;const s=t.AMOUNT,o=Math.min(s,this.currentAmmo);0!==o&&(this.burstInProgress=!0,this.currentBurstShot=0,this.launchProjectile(),this.currentBurstShot++,this.currentAmmo--,t.AMOUNT>1&&this.currentAmmo>0&&this.currentBurstShot<o?this.nextBurstShotTime=Date.now()+t.DELAY:(this.burstInProgress=!1,this.currentBurstShot=0),console.log(`Fired shot! Ammo: ${this.currentAmmo}/${e.SIZE}`))}launchProjectile(){const t=this.mouseX-this.myPlayer.x,e=this.mouseY-this.myPlayer.y,s=Math.sqrt(t*t+e*e);if(0===s)return;const o=t/s,a=e/s,r=u+d+this.projectileOffset;for(let t=0;t<i;t++){const t=(Math.random()-.5)*y,e=Math.atan2(a,o)+t,s={id:P(),x:this.myPlayer.x+Math.cos(e)*r,y:this.myPlayer.y+Math.sin(e)*r,velocityX:Math.cos(e)*c,velocityY:Math.sin(e)*c,range:l,distanceTraveled:0,ownerId:this.userId,timestamp:Date.now()};this.projectiles.set(s.id,s),this.roomManager.sendMessage(JSON.stringify({type:"projectile-launch",projectile:s}))}}updateProjectiles(){const t=[];this.projectiles.forEach((e,s)=>{e.x+=e.velocityX,e.y+=e.velocityY;const o=Math.sqrt(e.velocityX*e.velocityX+e.velocityY*e.velocityY);if(e.distanceTraveled+=o,this.myPlayer.health>0){const o=e.x-this.myPlayer.x,a=e.y-this.myPlayer.y;Math.sqrt(o*o+a*a)<=u+d&&(this.myPlayer.health-=n,t.push(s),this.createDecal(e.x,e.y,`blood_${s}`,C),this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:this.userId,shooterId:e.ownerId,damage:n,newHealth:this.myPlayer.health,projectileId:s})),this.myPlayer.health<=0&&(this.recordDeath(),this.checkRoundEnd()))}e.ownerId===this.userId&&this.players.forEach((o,a)=>{if(o.health>0){const i=e.x-o.x,r=e.y-o.y;if(Math.sqrt(i*i+r*r)<=u+d){t.push(s);const i=Math.max(0,o.health-n);o.health=i,this.createDecal(e.x,e.y,`blood_${s}`,C),i<=0&&(console.log(`I killed ${a}!`),this.leaderboard.has(this.userId)&&this.leaderboard.get(this.userId).kills++,this.leaderboard.has(a)&&this.leaderboard.get(a).deaths++,this.updateLeaderboardDisplay()),this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:a,shooterId:this.userId,damage:n,newHealth:i,projectileId:s,wasKill:i<=0})),i<=0&&this.checkRoundEnd()}}}),(e.distanceTraveled>=e.range||e.x<0||e.x>f||e.y<0||e.y>w)&&(t.push(s),e.ownerId===this.userId&&(e.distanceTraveled>=e.range&&this.createDecal(e.x,e.y,`impact_${s}`,M),this.roomManager.sendMessage(JSON.stringify({type:"projectile-remove",projectileId:s}))))}),t.forEach(t=>{this.projectiles.delete(t)})}startReload(){this.isReloading||this.currentAmmo>=e.SIZE||(console.log("Reloading..."),this.isReloading=!0,this.reloadStartTime=Date.now(),this.burstInProgress=!1,this.currentBurstShot=0)}updatePlayerPosition(){if(!this.gameRunning||this.myPlayer.health<=0)return;let t=0,e=0;this.keys.has("w")&&(e-=1),this.keys.has("s")&&(e+=1),this.keys.has("a")&&(t-=1),this.keys.has("d")&&(t+=1);const s=Math.sqrt(t*t+e*e);s>0&&(t/=s,e/=s);const i=t*g,r=e*g;this.playerVelocityX+=(i-this.playerVelocityX)*a,this.playerVelocityY+=(r-this.playerVelocityY)*a,0===s&&(this.playerVelocityX*=o,this.playerVelocityY*=o);let n=this.myPlayer.x+this.playerVelocityX,h=this.myPlayer.y+this.playerVelocityY,l=!1;n>=p&&n<=f-p?(this.myPlayer.x=n,l=!0):this.playerVelocityX=0,h>=p&&h<=w-p?(this.myPlayer.y=h,l=!0):this.playerVelocityY=0;const d=Math.sqrt((this.myPlayer.x-this.lastSentX)**2+(this.myPlayer.y-this.lastSentY)**2);l&&d>2&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",x:this.myPlayer.x,y:this.myPlayer.y})),this.lastSentX=this.myPlayer.x,this.lastSentY=this.myPlayer.y),Math.abs(this.playerVelocityX)<.01&&(this.playerVelocityX=0),Math.abs(this.playerVelocityY)<.01&&(this.playerVelocityY=0)}recordDeath(){console.log("I died! Waiting for round to end..."),this.roomManager.sendMessage(JSON.stringify({type:"player-death",playerId:this.userId}))}showGameControls(t){this.updateDisplay("game",t)}startGame(){this.isHost&&(this.roomManager.sendMessage(JSON.stringify({type:"start-game"})),this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop())}startGameLoop(){this.gameRunning=!0,this.roundInProgress=!0,this.currentAmmo=e.SIZE,this.isReloading=!1,this.createLeaderboard(),this.roomManager.sendMessage(JSON.stringify({type:"player-join",x:this.myPlayer.x,y:this.myPlayer.y,color:this.myPlayer.color,health:this.myPlayer.health})),this.gameLoop()}gameLoop(){this.gameRunning&&this.ctx&&this.canvas&&this.decalCtx&&this.decalCanvas&&(this.updatePlayerPosition(),this.updateAttack(),this.updateProjectiles(),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.decalCanvas&&this.ctx.drawImage(this.decalCanvas,0,0),this.ctx.strokeStyle="#333",this.ctx.lineWidth=2,this.ctx.strokeRect(0,0,this.canvas.width,this.canvas.height),this.projectiles.forEach(t=>{this.drawProjectile(t)}),this.players.forEach(t=>{this.drawPlayer(t)}),this.drawPlayer(this.myPlayer,!0),requestAnimationFrame(()=>this.gameLoop()))}createLeaderboard(){console.log("Creating/updating leaderboard for all players");const t=new Set;t.add(this.userId),this.players.forEach((e,s)=>{t.add(s)}),this.lobbyPlayers.forEach((e,s)=>{t.add(s)}),t.forEach(t=>{this.leaderboard.has(t)||(this.leaderboard.set(t,{playerId:t,wins:0,kills:0,deaths:0}),console.log(`Created leaderboard entry for ${t}`))}),this.updateLeaderboardDisplay(),console.log("Leaderboard created/updated:",Array.from(this.leaderboard.entries()))}updateLeaderboardDisplay(){this.leaderboardBody&&(this.leaderboardBody.innerHTML="",Array.from(this.leaderboard.entries()).sort((t,e)=>{const[,s]=t,[,o]=e;return o.wins!==s.wins?o.wins-s.wins:o.kills-s.kills}).forEach(([t,e])=>{const s=document.createElement("tr");s.className="leaderboard_row",t===this.userId&&s.classList.add("current-player");const o=document.createElement("td");o.textContent=t===this.userId?"You":t.substring(0,8),o.className="player_name",s.appendChild(o);const a=document.createElement("td");a.textContent=e.wins.toString(),a.className="wins",s.appendChild(a);const i=document.createElement("td");i.textContent=e.kills.toString(),i.className="kills",s.appendChild(i);const r=document.createElement("td");r.textContent=e.deaths.toString(),r.className="deaths",s.appendChild(r),this.leaderboardBody&&this.leaderboardBody.appendChild(s)}))}clearLeaderboard(){this.leaderboard.clear(),this.leaderboardBody&&(this.leaderboardBody.innerHTML="")}drawPlayer(t,e=!1){if(!this.ctx)return;if(t.health<=0)return;this.ctx.beginPath(),this.ctx.arc(t.x,t.y,u,0,2*Math.PI),this.ctx.fillStyle=t.color,this.ctx.fill(),e&&(this.ctx.strokeStyle=x,this.ctx.lineWidth=I,this.ctx.stroke()),this.ctx.fillStyle=x,this.ctx.font="12px Arial",this.ctx.textAlign="center";const s=e?"You":t.id.substring(0,6);this.ctx.fillText(s,t.x,t.y-b)}drawProjectile(t){if(!this.ctx)return;const e=Math.sqrt(t.velocityX*t.velocityX+t.velocityY*t.velocityY),s=t.velocityX/e,o=t.velocityY/e,a=t.x+s*(h/2),i=t.y+o*(h/2),n=t.x-s*(h/2),l=t.y-o*(h/2);this.ctx.fillStyle=r,this.ctx.strokeStyle=r,this.ctx.lineWidth=2*d,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(n,l),this.ctx.lineTo(a,i),this.ctx.stroke()}createDecal(t,e,s,o=M){if(!this.decalCtx)return;if(t<0||t>f||e<0||e>w)return;const a=Math.floor(o.radius*o.radius*Math.PI*o.density),i=v(o.color);if(i){this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over";for(let s=0;s<a;s++){const s=Math.random()*Math.PI*2,a=Math.random()*o.radius,r=t+Math.cos(s)*a,n=e+Math.sin(s)*a;if(r<0||r>=f||n<0||n>=w)continue;const h=o.opacity+(Math.random()-.5)*o.variation,l=Math.max(.05,Math.min(.6,h));this.decalCtx.fillStyle=`rgba(${i.r}, ${i.g}, ${i.b}, ${l})`,this.decalCtx.fillRect(Math.floor(r),Math.floor(n),1,1)}this.decalCtx.restore(),this.decals.set(s,{x:t,y:e,params:o}),this.roomManager.sendMessage(JSON.stringify({type:"add-decal",decalId:s,x:t,y:e,params:o}))}else console.error(`Invalid hex color: ${o.color}`)}applyDecal(t,e,s,o){if(!this.decalCtx)return;if(this.decals.has(s))return;if(t<0||t>f||e<0||e>w)return;const a=Math.floor(o.radius*o.radius*Math.PI*o.density),i=v(o.color);if(i){this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over";for(let s=0;s<a;s++){const s=Math.random()*Math.PI*2,a=Math.random()*o.radius,r=t+Math.cos(s)*a,n=e+Math.sin(s)*a;if(r<0||r>=f||n<0||n>=w)continue;const h=o.opacity+(Math.random()-.5)*o.variation,l=Math.max(.05,Math.min(.6,h));this.decalCtx.fillStyle=`rgba(${i.r}, ${i.g}, ${i.b}, ${l})`,this.decalCtx.fillRect(Math.floor(r),Math.floor(n),1,1)}this.decalCtx.restore(),this.decals.set(s,{x:t,y:e,params:o})}else console.error(`Invalid hex color: ${o.color}`)}updateDisplay(t,e){if(this.roomControls&&this.lobbyContainer&&this.gameContainer&&this.chatContainer&&this.leaderboardContainer)switch(this.roomControls.style.display="none",this.lobbyContainer.style.display="none",this.gameContainer.style.display="none",this.chatContainer.style.display="none",this.leaderboardContainer.style.display="none",t){case"lobby":this.lobbyContainer.style.display="flex",this.chatContainer.style.display="flex",e&&this.roomIdDisplay&&(this.roomIdDisplay.textContent=e),this.inLobby=!0;break;case"room":this.roomControls.style.display="flex";break;case"game":if(this.gameContainer.style.display="flex",this.chatContainer.style.display="flex",this.leaderboardContainer.style.display="flex",e){const t=document.getElementById("gameRoomId");t&&(t.textContent=e)}this.inLobby=!1}}updateHostDisplay(){this.startGameBtn&&(this.startGameBtn.style.display=this.isHost?"block":"none",this.startGameBtn.disabled=this.lobbyPlayers.size<1,this.gameOptionsContainer&&(this.gameOptionsContainer.style.display=this.isHost?"flex":"none"))}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{new k}):new k})();