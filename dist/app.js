(()=>{"use strict";const t={ATTACK:{BURST:{AMOUNT:1,DELAY:75},MAGAZINE:{SIZE:10},RELOAD:{TIME:750}},DASH:{TIME:150,COOLDOWN:1e3,MULTIPLIER:3,DRAIN:40},INVENTORY:{AMMO:0,MAX_AMMO:50},PHYSICS:{FRICTION:.85,ACCELERATION:.55},PROJECTILE:{AMOUNT:1,COLOR:"#fff5beff",DAMAGE:25,LENGTH:15,RANGE:5,SIZE:1,SPEED:30,SPREAD:.1},STATS:{LUCK:1,MAX_HEALTH:100,MAX_STAMINA:100,SPEED:6},SPRINT:{MULTIPLIER:1.75,DRAIN:5},STAMINA:{RECOVER_DELAY:1e3,RECOVER_RATE:25},VISUAL:{BORDER_MARGIN:15,ID_DISPLAY_OFFSET:25,SIZE:15,STROKE_WIDTH:3}},e={RADIUS:{MIN:4,MAX:8},DENSITY:{MIN:.175,MAX:.35},OPACITY:{MIN:.15,MAX:.25},VARIATION:.215,COLOR:"#000000"},s={RADIUS:{MIN:5,MAX:17.5},DENSITY:{MIN:.1,MAX:.175},OPACITY:{MIN:.275,MAX:.315},VARIATION:.5,COLOR:"#781414"},i={COUNT:{MIN:8,MAX:15},LIFETIME:{MIN:150,MAX:300},OPACITY:{MIN:.4,MAX:.8},SPEED:{MIN:4,MAX:10},SIZE:{MIN:1,MAX:3},TORQUE:{MIN:0,MAX:0},COLLIDE:!1,FADE:!0,PAINT:!1,SPREAD:.6,STAIN:!1,COLOR:"#ffaa00"},a={COUNT:{MIN:4,MAX:12},LIFETIME:{MIN:150,MAX:500},OPACITY:{MIN:.225,MAX:.775},SPEED:{MIN:3,MAX:7},SIZE:{MIN:.75,MAX:3},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!1,PAINT:!0,SPREAD:.425,STAIN:!0,COLOR:"#8b1a1a"},o={COUNT:{MIN:1,MAX:1},LIFETIME:{MIN:250,MAX:550},OPACITY:{MIN:1,MAX:1},SPEED:{MIN:5,MAX:8},SIZE:{MIN:2,MAX:2},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!1,PAINT:!0,SPREAD:.4,STAIN:!1,COLOR:"#d4af37"},r=800,n=600,h=1e3,l={MOVE_UP:"w",MOVE_LEFT:"a",MOVE_DOWN:"s",MOVE_RIGHT:"d",RELOAD:"r",SPRINT:"shift",ATTACK:"mouse1",DASH:" "},c="#000";function d(){let t="";for(let e=0;e<12;e++)t+="0123456789abcdefghijklmnopqrstuvwxyz"[Math.floor(36*Math.random())];return t}function y(t){const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}function m(t,e,s=100,i=300){const a=document.getElementById(t),o=a?.querySelector("div");if(!a||!o)return void console.warn(`Slider not found: ${t}`);const r=Math.max(0,Math.min(s,e))/s*100,n=o.style.width||"100%",h=parseFloat(n.replace("%",""));Math.abs(h-r)<.1||(o.style.transition=`width ${i}ms ease-out`,o.style.width=`${r}%`,setTimeout(()=>{o&&(o.style.transition="")},i))}function u(t,e){const s=document.getElementById(t);s&&(e?(s.setAttribute("checked","true"),s.setAttribute("aria-checked","true")):(s.removeAttribute("checked"),s.setAttribute("aria-checked","false")))}function g(t,e){const s=document.getElementById(t);s&&(s.value=e.toString())}class p{constructor(t){this.currentRoom=null,this.ws=null,this.messageHandlers=[],this.userId=t}setWebSocket(t){this.ws=t,this.setupMessageHandler()}createRoom(){const t=function(){let t="room_";for(let e=0;e<10;e++)t+="0123456789abcdefghijklmnopqrstuvwxyz"[Math.floor(36*Math.random())];return t}();return this.joinRoom(t,!0),t}joinRoom(t,e=!1){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return void console.error("WebSocket not connected");const s={type:e?"create-room":"join-room",roomId:t,userId:this.userId};this.ws.send(JSON.stringify(s)),this.currentRoom=t,function(t){const e=`${window.location.origin}?room=${t}`;window.history.pushState({roomId:t},"",e)}(t)}leaveRoom(){if(!this.currentRoom||!this.ws)return;const t={type:"leave-room",roomId:this.currentRoom,userId:this.userId};this.ws.send(JSON.stringify(t)),this.currentRoom=null,window.history.pushState({},"",window.location.origin)}sendMessage(t){if(!this.currentRoom||!this.ws)return;const e={type:"room-message",roomId:this.currentRoom,userId:this.userId,message:t};this.ws.send(JSON.stringify(e))}getCurrentRoom(){return this.currentRoom}getRoomLink(){return this.currentRoom?(t=this.currentRoom,`${window.location.origin}?room=${t}`):null;var t}onMessage(t){this.messageHandlers.push(t)}setupMessageHandler(){this.ws&&(this.ws.onmessage=t=>{try{const e=JSON.parse(t.data);this.messageHandlers.forEach(t=>t(e))}catch(e){const s={type:"room-message",userId:"server",message:t.data};this.messageHandlers.forEach(t=>t(s))}})}}const I=new Set,M=new Set;var E,A;!function(t){t[t.COMMON=0]="COMMON",t[t.UNCOMMON=1]="UNCOMMON",t[t.RARE=2]="RARE",t[t.EPIC=3]="EPIC",t[t.LEGENDARY=4]="LEGENDARY"}(E||(E={})),function(t){t.STAT="stat",t.UNIQUE="unique",t.EQUIPMENT="equipment"}(A||(A={}));const S={[E.COMMON]:{weight:70,color:"#ffffff"},[E.UNCOMMON]:{weight:20,color:"#1eff00"},[E.RARE]:{weight:7,color:"#0099ff"},[E.EPIC]:{weight:2,color:"#9d00ff"},[E.LEGENDARY]:{weight:1,color:"#ff9500"}},b=[{id:"bigger_is_better",name:"Bigger is Better",subtitle:"Have my bullets always been this big?",type:A.STAT,rarity:E.COMMON,unique:!1,func:()=>{t.PROJECTILE.SIZE*=1.1,t.PROJECTILE.DAMAGE*=1.05,t.PROJECTILE.SPREAD*=1.025,console.log("Upgrade taken: Bigger is Better")}},{id:"bigger_is_worse",name:"Bigger is Worse?",subtitle:"Big boned.",type:A.STAT,rarity:E.COMMON,unique:!1,func:()=>{}},{id:"smaller_is_better",name:"Smaller is Better",subtitle:"Have I always been this small?",type:A.STAT,rarity:E.COMMON,unique:!1,func:()=>{t.VISUAL.SIZE*=.9,t.STATS.MAX_HEALTH=Math.max(1,Math.floor(.95*t.STATS.MAX_HEALTH)),console.log("Upgrade taken: Smaller is Better")}}];function R(){I.clear(),M.clear()}class P{constructor(){this.ws=null,this.canvas=null,this.ctx=null,this.decalCanvas=null,this.decalCtx=null,this.roomControls=null,this.gameContainer=null,this.userIdDisplay=null,this.roomIdDisplay=null,this.gameRoomIdDisplay=null,this.lobbyContainer=null,this.lobbyPlayersList=null,this.startGameBtn=null,this.gameOptionsContainer=null,this.chatContainer=null,this.chatMessages=null,this.chatInput=null,this.chatSendBtn=null,this.privateToggle=null,this.winsInput=null,this.playerVelocityX=0,this.playerVelocityY=0,this.lastSentX=0,this.lastSentY=0,this.defaultPlayerConfig=JSON.parse(JSON.stringify(t)),this.players=new Map,this.lobbyPlayers=new Map,this.projectiles=new Map,this.decals=new Map,this.particles=new Map,this.keys=new Set,this.gamePaused=!1,this.gameRunning=!1,this.pausedPlayers=new Set,this.isHost=!1,this.inLobby=!1,this.isPrivateRoom=!1,this.gameMaxWins=5,this.canShoot=!0,this.mouseX=0,this.mouseY=0,this.currentBurstShot=0,this.burstInProgress=!1,this.nextBurstShotTime=0,this.projectileOffset=5,this.inventoryAmmo=Math.floor(t.INVENTORY.MAX_AMMO/2),this.currentAmmo=t.ATTACK.MAGAZINE.SIZE,this.isReloading=!1,this.reloadStartTime=0,this.isSprinting=!1,this.isDashing=!1,this.dashStartTime=0,this.lastDashTime=0,this.currentStamina=t.STATS.MAX_STAMINA,this.lastStaminaDrainTime=0,this.staminaRecoveryBlocked=!1,this.staminaRecoveryBlockedUntil=0,this.leaderboardContainer=null,this.leaderboardBody=null,this.completedUpgrades=new Set,this.leaderboard=new Map,this.roundInProgress=!1,this.roundWinner=null,this.gameWinner=null,this.alivePlayersCount=0,this.userId=d(),this.roomManager=new p(this.userId),this.myPlayer={id:this.userId,x:Math.random()*(r-2*t.VISUAL.BORDER_MARGIN)+t.VISUAL.BORDER_MARGIN,y:Math.random()*(n-2*t.VISUAL.BORDER_MARGIN)+t.VISUAL.BORDER_MARGIN,color:"#"+Math.floor(16777215*Math.random()).toString(16).padStart(6,"0"),health:t.STATS.MAX_HEALTH},"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{this.initializeElements(),this.setupEventListeners(),this.checkForRoomInURL()}):(this.initializeElements(),this.setupEventListeners(),this.checkForRoomInURL())}initializeElements(){this.canvas=document.getElementById("gameCanvas"),this.decalCanvas=document.createElement("canvas"),this.roomControls=document.getElementById("roomControls"),this.gameContainer=document.getElementById("gameContainer"),this.lobbyContainer=document.getElementById("lobbyContainer"),this.lobbyPlayersList=document.getElementById("lobbyPlayersList"),this.startGameBtn=document.getElementById("startGameBtn"),this.gameOptionsContainer=document.getElementById("gameOptionsContainer"),this.userIdDisplay=document.getElementById("userId"),this.roomIdDisplay=document.getElementById("roomId"),this.gameRoomIdDisplay=document.getElementById("gameRoomId"),this.chatContainer=document.getElementById("chatContainer"),this.chatMessages=document.getElementById("chatMessages"),this.chatInput=document.getElementById("chatInput"),this.chatSendBtn=document.getElementById("chatSendBtn"),this.privateToggle=document.getElementById("privateToggle"),this.winsInput=document.getElementById("winsInput"),this.leaderboardContainer=document.getElementById("leaderboardContainer"),this.leaderboardBody=document.getElementById("leaderboardBody"),this.canvas&&this.decalCanvas&&this.roomControls&&this.gameContainer&&this.lobbyContainer&&this.userIdDisplay&&this.roomIdDisplay&&this.lobbyPlayersList&&this.startGameBtn&&this.gameOptionsContainer&&this.chatContainer&&this.chatMessages&&this.chatInput&&this.chatSendBtn&&this.leaderboardContainer&&this.leaderboardBody?(this.canvas.width=r,this.canvas.height=n,this.decalCanvas.width=r,this.decalCanvas.height=n,this.ctx=this.canvas.getContext("2d"),this.decalCtx=this.decalCanvas.getContext("2d"),this.ctx&&this.decalCtx?(this.userIdDisplay.textContent=this.userId,this.showRoomControls()):console.error("Could not get canvas context")):console.error("Some required DOM elements are missing")}connectWebSocket(){const t="https:"===location.protocol?"wss:":"ws:";this.ws=new WebSocket(`${t}//${location.host}`),this.ws.onopen=()=>{console.log("Connected to WebSocket"),this.roomManager.setWebSocket(this.ws)},this.ws.onclose=()=>{console.log("Disconnected from WebSocket"),this.gameRunning=!1,setTimeout(()=>this.connectWebSocket(),3e3)},this.ws.onerror=t=>{console.error("WebSocket error:",t)}}handleRoomMessage(t){switch(t.type){case"room-created":console.log("Room created");break;case"room-joined":console.log("Joined room - lobby"),this.isHost=!1,this.showLobbyControls(t.roomId||""),this.roomManager.sendMessage(JSON.stringify({type:"lobby-join",color:this.myPlayer.color})),this.lobbyPlayers.set(this.userId,{id:this.userId,color:this.myPlayer.color,isHost:this.isHost}),this.updateLobbyPlayersList(),this.updateHostDisplay();break;case"user-joined":console.log(`User ${t.userId} joined`),this.gameRunning&&!this.inLobby&&this.roomManager.sendMessage(JSON.stringify({type:"player-join",x:this.myPlayer.x,y:this.myPlayer.y,color:this.myPlayer.color,leaderboard:Array.from(this.leaderboard.entries())}));break;case"room-joined-game":console.log("Joined room - game in progress"),this.isHost=!1,this.showGameControls(t.roomId||""),this.startGameLoop();break;case"user-left":console.log(`User ${t.userId} left`),this.lobbyPlayers.delete(t.userId),this.players.delete(t.userId),this.leaderboard.delete(t.userId),this.updateLeaderboardDisplay(),console.log(`Removed ${t.userId} from leaderboard`),this.projectiles.forEach((e,s)=>{e.ownerId===t.userId&&this.projectiles.delete(s)}),this.updateLobbyPlayersList();break;case"room-message":this.handleGameMessage(t);break;case"room-error":alert(`Error: ${t.message}`)}}handleGameMessage(e){var s;if(e.message)try{const i=JSON.parse(e.message);switch(i.type){case"lobby-join":this.lobbyPlayers.set(e.userId,{id:e.userId,color:i.color,isHost:!1}),this.updateLobbyPlayersList(),this.isHost&&this.roomManager.sendMessage(JSON.stringify({type:"lobby-state",players:Array.from(this.lobbyPlayers.values()),options:{privateRoom:this.isPrivateRoom,maxWins:this.gameMaxWins}}));break;case"lobby-state":this.lobbyPlayers.clear(),i.players.forEach(t=>{this.lobbyPlayers.set(t.id,t)}),this.updateLobbyPlayersList(),this.updateHostDisplay(),i.options&&this.syncLobbyOptions(i.options);break;case"lobby-options":this.syncLobbyOptions(i);break;case"promote-player":this.lobbyPlayers.forEach((t,e)=>{t.isHost=e===i.targetPlayerId}),this.isHost=i.targetPlayerId===this.userId,this.isHost&&"host-migration"===i.reason&&console.log("I am now the host due to host migration"),this.updateLobbyPlayersList(),this.updateHostDisplay();break;case"return-to-lobby":console.log("Returning to lobby - last player or game ended"),this.gameRunning=!1,i.newHostId===this.userId&&(this.isHost=!0,console.log("I am now the host as the last remaining player")),this.players.clear(),this.projectiles.clear(),this.showLobbyControls(this.roomManager.getCurrentRoom()||"");break;case"kick-player":i.targetPlayerId===this.userId&&(alert("You have been kicked from the lobby"),this.leaveRoom());break;case"chat-message":e.userId!==this.userId&&this.displayChatMessage(e.userId,i.message,!1);break;case"player-join":case"player-state":this.inLobby||this.players.set(e.userId,{id:e.userId,x:i.x,y:i.y,color:i.color,health:i.health||t.STATS.MAX_HEALTH}),i.leaderboard&&i.leaderboard.forEach(([t,e])=>{this.leaderboard.set(t,e)}),this.createLeaderboard();break;case"player-move":if(!this.inLobby&&this.players.has(e.userId)){const t=this.players.get(e.userId);t.x=i.x,t.y=i.y}break;case"player-hit":if(i.projectileId&&this.projectiles.delete(i.projectileId),i.targetId===this.userId)this.myPlayer.health=i.newHealth,m("healthBar",this.myPlayer.health,t.STATS.MAX_HEALTH),this.myPlayer.health<=0&&(this.recordDeath(),this.checkRoundEnd());else if(this.players.has(i.targetId)){const t=this.players.get(i.targetId);t.health=i.newHealth,t.health<=0&&(console.log(`Player ${t.id} died`),this.checkRoundEnd())}i.wasKill&&(this.leaderboard.has(i.shooterId)&&this.leaderboard.get(i.shooterId).kills++,this.leaderboard.has(i.targetId)&&this.leaderboard.get(i.targetId).deaths++,this.updateLeaderboardDisplay());break;case"player-death":break;case"player-respawn":if(this.players.has(e.userId)){const t=this.players.get(e.userId);t.x=i.x,t.y=i.y,t.health=i.health,console.log(`Player ${t.id} respawned`)}break;case"player-pause":this.pausedPlayers.add(i.userId),this.updatePauseState(),console.log(`${i.userId} paused the game`);break;case"player-unpause":this.pausedPlayers.delete(i.userId),this.updatePauseState(),console.log(`${i.userId} unpaused`);break;case"projectile-launch":this.inLobby||e.userId===this.userId||this.projectiles.set(i.projectile.id,i.projectile);break;case"projectile-remove":this.inLobby||this.projectiles.delete(i.projectileId);break;case"start-game":this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop();break;case"game-end":console.log(`Game ended! Winner: ${i.winnerId}`),this.gameWinner=i.winnerId;break;case"round-end":console.log(`Round ended! Winner: ${i.winnerId||"No one"}`),this.roundInProgress=!1,this.roundWinner=i.winnerId;break;case"new-round":if(console.log("New round started! Everyone respawning..."),this.roundInProgress=!0,this.roundWinner=null,this.players.has(e.userId)){const t=this.players.get(e.userId);t.x=i.x,t.y=i.y,t.health=i.health}break;case"upgrade-taken":i.upgradeId&&i.isUnique&&(s=i.upgradeId,I.add(s),console.log(`Unique upgrade ${i.upgradeId} taken by ${e.userId}`));break;case"upgrade-complete":this.togglePause(),0===this.pausedPlayers.size&&setTimeout(()=>{this.startNewRound()},500);break;case"add-decal":e.userId!==this.userId&&this.applyDecal(i.x,i.y,i.decalId,i.params);break;case"add-particles":e.userId!==this.userId&&this.applyParticles(i.x,i.y,i.particleId,i.particleData,i.color,i.collide,i.fade);break;case"particle-stamp":e.userId!==this.userId&&this.applyParticleStamp(i.x,i.y,i.stampId,i.color,i.opacity,i.size,i.rotation,i.torque)}}catch(t){console.error("Error parsing game message:",t)}}showRoomControls(){this.updateDisplay("room")}hostRoom(){if(this.ws){const t=this.roomManager.createRoom();this.isHost=!0,this.showLobbyControls(t)}else this.connectWebSocket(),setTimeout(()=>{const t=this.roomManager.createRoom();this.isHost=!0,this.showLobbyControls(t)},h)}joinRoom(){const t=prompt("Enter room code or link:");if(!t)return;let e=null;try{const s=new URL(t,window.location.origin);e=s.pathname.startsWith("/room_")?s.pathname.replace("/","").replace("/",""):new URLSearchParams(s.search).get("room")}catch{t.startsWith("room_")&&(e=t)}e?this.ws?this.roomManager.joinRoom(e):(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(e)},h)):alert("Invalid room code or link")}quickPlay(){fetch("/quickplay").then(t=>{if(!t.ok)throw new Error("No available rooms");return t.json()}).then(t=>{this.ws?this.roomManager.joinRoom(t.roomId):(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t.roomId)},h))}).catch(t=>{alert("No available games found. Try hosting a new session!"),console.log("Quickplay error:",t)})}leaveRoom(){this.roomManager.leaveRoom(),this.gameRunning=!1,this.inLobby=!1,this.isHost=!1,this.players.clear(),this.projectiles.clear(),this.lobbyPlayers.clear(),this.clearChat(),this.clearLeaderboard(),this.showRoomControls(),this.resetPlayerConfig(),this.decals.clear(),this.decalCtx&&this.decalCtx.clearRect(0,0,r,n),this.ctx&&this.ctx.clearRect(0,0,r,n)}checkForRoomInURL(){const t=new URLSearchParams(window.location.search).get("room");t&&(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t)},h))}copyRoomCode(){const t=this.inLobby?this.roomIdDisplay?.textContent:this.gameRoomIdDisplay?.textContent;t&&navigator.clipboard.writeText(t).then(()=>{alert("Room code copied!")}).catch(()=>{alert("Could not copy. Please copy manually.")})}showLobbyControls(t){this.updateDisplay("lobby",t),this.lobbyPlayers.set(this.userId,{id:this.userId,color:this.myPlayer.color,isHost:this.isHost}),this.setupLobbyOptions(),u("privateToggle",this.isPrivateRoom),g("winsInput",this.gameMaxWins),this.updateLobbyPlayersList(),this.updateHostDisplay()}setupLobbyOptions(){this.privateToggle&&this.privateToggle.addEventListener("click",()=>{this.isHost&&(this.isPrivateRoom=!this.isPrivateRoom,u("privateToggle",this.isPrivateRoom),this.roomManager.sendMessage(JSON.stringify({type:"lobby-options",privateRoom:this.isPrivateRoom})),console.log("Room privacy changed to: "+(this.isPrivateRoom?"Private":"Public")))}),this.winsInput&&this.winsInput.addEventListener("change",()=>{if(!this.isHost)return;if(!this.winsInput)return;const t=parseInt(this.winsInput.value);isNaN(t)||t<1?this.winsInput.value=this.gameMaxWins.toString():(this.gameMaxWins=t,g("winsInput",this.gameMaxWins),this.roomManager.sendMessage(JSON.stringify({type:"lobby-options",maxWins:this.gameMaxWins})),console.log(`Game max wins changed to: ${this.gameMaxWins}`))})}syncLobbyOptions(t){void 0!==t.privateRoom&&(this.isPrivateRoom=t.privateRoom,u("privateToggle",this.isPrivateRoom),console.log("Lobby privacy synced to: "+(this.isPrivateRoom?"Private":"Public"))),void 0!==t.maxWins&&(this.gameMaxWins=t.maxWins,g("winsInput",this.gameMaxWins),console.log(`Game max wins synced to: ${this.gameMaxWins}`))}updateLobbyPlayersList(){this.lobbyPlayersList&&(this.lobbyPlayersList.innerHTML="",Array.from(this.lobbyPlayers.values()).sort((t,e)=>t.isHost&&!e.isHost?-1:!t.isHost&&e.isHost?1:0).forEach(t=>{const e=document.createElement("div");e.className="lobby_player";const s=document.createElement("div");s.className="player_color",s.style.backgroundColor=t.color;const i=document.createElement("div");i.className="player_name",i.textContent=`${t.id}${t.isHost?" (Host)":""}`;const a=document.createElement("div");if(a.className="player_controls",this.isHost&&t.id!==this.userId){const e=document.createElement("button");e.textContent="Promote",e.onclick=()=>this.promotePlayer(t.id);const s=document.createElement("button");s.textContent="Kick",s.className="danger",s.onclick=()=>this.kickPlayer(t.id),a.appendChild(e),a.appendChild(s)}e.appendChild(s),e.appendChild(i),e.appendChild(a),this.lobbyPlayersList&&this.lobbyPlayersList.appendChild(e)}))}promotePlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"promote-player",targetPlayerId:t}))}kickPlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"kick-player",targetPlayerId:t}))}returnToLobby(){this.gameRunning=!1,this.roundInProgress=!1,this.leaderboard.clear(),this.gameWinner=null,this.roundWinner=null,this.players.clear(),this.projectiles.clear(),this.decals.clear(),this.decalCtx&&this.decalCtx.clearRect(0,0,r,n),this.ctx&&this.ctx.clearRect(0,0,r,n),this.clearChat(),this.clearLeaderboard(),this.resetPlayerConfig(),R(),this.roomManager.sendMessage(JSON.stringify({type:"return-to-lobby",reason:"game-ended"})),this.showLobbyControls(this.roomManager.getCurrentRoom()||"")}checkRoundEnd(){if(!this.roundInProgress)return;let t=this.myPlayer.health>0?1:0,e=this.myPlayer.health>0?this.userId:null;this.players.forEach(s=>{s.health>0&&(t++,e=s.id)}),t<=1&&this.endRound(e)}endRound(t){if(this.roundInProgress){if(this.roundInProgress=!1,this.roundWinner=t,t&&this.leaderboard.has(t)){const e=this.leaderboard.get(t);if(e.wins++,console.log(`${t} won the round! Total wins: ${e.wins}`),e.wins>=this.gameMaxWins)return void this.endGame(t);this.updateLeaderboardDisplay()}setTimeout(()=>{this.startUpgradePhase(t)},3e3)}}endGame(t){this.gameWinner=t,console.log(`${t} won the game with ${this.gameMaxWins} wins!`),this.resetPlayerConfig(),this.pausedPlayers.clear(),R(),this.roomManager.sendMessage(JSON.stringify({type:"game-end",winnerId:t})),setTimeout(()=>{this.returnToLobby()},5e3)}startNewRound(){console.log("Starting new round..."),this.myPlayer.health=t.STATS.MAX_HEALTH,this.myPlayer.x=Math.random()*(r-2*t.VISUAL.BORDER_MARGIN)+t.VISUAL.BORDER_MARGIN,this.myPlayer.y=Math.random()*(n-2*t.VISUAL.BORDER_MARGIN)+t.VISUAL.BORDER_MARGIN,this.currentAmmo=t.ATTACK.MAGAZINE.SIZE,this.isReloading=!1,this.burstInProgress=!1,this.currentBurstShot=0,this.players.forEach(e=>{e.health=t.STATS.MAX_HEALTH,e.x=Math.random()*(r-2*t.VISUAL.BORDER_MARGIN)+t.VISUAL.BORDER_MARGIN,e.y=Math.random()*(n-2*t.VISUAL.BORDER_MARGIN)+t.VISUAL.BORDER_MARGIN}),this.roundInProgress=!0,this.roundWinner=null,this.roomManager.sendMessage(JSON.stringify({type:"new-round",x:this.myPlayer.x,y:this.myPlayer.y,health:this.myPlayer.health})),m("healthBar",this.myPlayer.health,t.STATS.MAX_HEALTH),m("staminaBar",this.currentStamina,t.STATS.MAX_STAMINA)}sendChatMessage(){if(!this.chatInput||!this.chatInput.value.trim())return;const t=this.chatInput.value.trim();t.length>200?alert("Message too long! Max 200 characters."):(this.roomManager.sendMessage(JSON.stringify({type:"chat-message",message:t,timestamp:Date.now()})),this.displayChatMessage(this.userId,t,!0),this.chatInput.value="")}displayChatMessage(t,e,s=!1){if(!this.chatMessages)return;const i=document.createElement("div");i.className="chat_message "+(s?"own":"other");const a=document.createElement("span");a.className="sender",a.textContent=s?"You:":`${t}:`;const o=document.createElement("span");for(o.className="content",o.textContent=e,i.appendChild(a),i.appendChild(o),this.chatMessages.appendChild(i),this.chatMessages.scrollTop=this.chatMessages.scrollHeight;this.chatMessages.children.length>100;)this.chatMessages.removeChild(this.chatMessages.firstChild)}clearChat(){this.chatMessages&&(this.chatMessages.innerHTML=""),this.chatInput&&(this.chatInput.value="")}setupEventListeners(){document.getElementById("hostBtn")?.addEventListener("click",()=>this.hostRoom()),document.getElementById("joinBtn")?.addEventListener("click",()=>this.joinRoom()),document.getElementById("quickBtn")?.addEventListener("click",()=>this.quickPlay()),document.getElementById("lobbyLeaveBtn")?.addEventListener("click",()=>this.leaveRoom()),document.getElementById("lobbyCodeBtn")?.addEventListener("click",()=>this.copyRoomCode()),document.getElementById("gameLeaveBtn")?.addEventListener("click",()=>this.leaveRoom()),document.getElementById("gameCodeBtn")?.addEventListener("click",()=>this.copyRoomCode()),this.startGameBtn?.addEventListener("click",()=>this.startGame()),this.chatSendBtn?.addEventListener("click",()=>this.sendChatMessage()),this.chatInput?.addEventListener("keypress",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.sendChatMessage())}),this.chatInput?.addEventListener("focus",()=>{this.keys.clear(),this.canShoot=!1,this.isSprinting=!1,this.isDashing=!1,this.burstInProgress=!1,this.currentBurstShot=0}),this.chatInput?.addEventListener("blur",()=>{this.keys.clear(),this.canShoot=!0,this.isSprinting=!1,this.isDashing=!1}),document.addEventListener("keydown",t=>this.onKeyDown(t)),document.addEventListener("keyup",t=>this.onKeyUp(t)),document.addEventListener("keydown",t=>{"Escape"===t.key&&this.gameRunning&&!this.inLobby&&(t.preventDefault(),this.togglePause())}),this.canvas?.addEventListener("mousedown",t=>this.onMouseDown(t)),this.canvas?.addEventListener("mouseup",t=>this.onMouseUp(t)),this.canvas?.addEventListener("mousemove",t=>this.onMouseMove(t)),this.roomManager.onMessage(t=>this.handleRoomMessage(t))}onKeyDown(e){if(this.chatInput===document.activeElement)return;if(!this.gameRunning||this.gamePaused)return;const s=e.key.toLowerCase(),i=l;Object.values(i).includes(s)&&(e.preventDefault(),this.keys.add(s),s===i.RELOAD&&!this.isReloading&&this.currentAmmo<t.ATTACK.MAGAZINE.SIZE&&this.inventoryAmmo>0&&this.startReload(),s===i.SPRINT&&(this.isSprinting=!0),s!==i.DASH||this.isDashing||this.startDash())}onKeyUp(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning)return;const e=t.key.toLowerCase(),s=l;Object.values(s).includes(e)&&(t.preventDefault(),this.keys.delete(e),e===s.SPRINT&&(this.isSprinting=!1))}onMouseDown(t){this.chatInput!==document.activeElement&&this.gameRunning&&!this.gamePaused&&this.canvas&&0===t.button&&this.canShoot&&!this.burstInProgress&&(this.updateMousePosition(t),this.startBurst(),this.canShoot=!1)}onMouseUp(t){this.chatInput!==document.activeElement&&this.gameRunning&&0===t.button&&(this.canShoot=!0)}onMouseMove(t){this.chatInput!==document.activeElement&&this.gameRunning&&!this.gamePaused&&this.updateMousePosition(t)}updateMousePosition(t){if(this.chatInput===document.activeElement)return;if(!this.canvas)return;const e=this.canvas.getBoundingClientRect();this.mouseX=t.clientX-e.left,this.mouseY=t.clientY-e.top}updateAttack(){if(!this.gameRunning||this.myPlayer.health<=0)return;const e=Date.now();if(this.isReloading){if(e>=this.reloadStartTime+t.ATTACK.RELOAD.TIME){const e=t.ATTACK.MAGAZINE.SIZE-this.currentAmmo,s=Math.min(e,this.inventoryAmmo);this.currentAmmo+=s,this.inventoryAmmo-=s,this.isReloading=!1,console.log(`Reload complete! Magazine: ${this.currentAmmo}/${t.ATTACK.MAGAZINE.SIZE}, Inventory: ${this.inventoryAmmo}/${t.INVENTORY.MAX_AMMO}`)}}else if(this.burstInProgress&&e>=this.nextBurstShotTime){const s=t.ATTACK.BURST.AMOUNT;this.currentAmmo>0&&this.currentBurstShot<s?(this.launchProjectile(),this.currentBurstShot++,this.currentAmmo--,console.log(`Burst shot ${this.currentBurstShot}! Magazine: ${this.currentAmmo}/${t.ATTACK.MAGAZINE.SIZE}, Inventory: ${this.inventoryAmmo}/${t.INVENTORY.MAX_AMMO}`),this.currentBurstShot>=s||0===this.currentAmmo?(this.burstInProgress=!1,this.currentBurstShot=0):this.nextBurstShotTime=e+t.ATTACK.BURST.DELAY):(this.burstInProgress=!1,this.currentBurstShot=0)}}startBurst(){if(this.burstInProgress||this.myPlayer.health<=0||this.isReloading)return;const e=t.ATTACK.BURST.AMOUNT,s=Math.min(e,this.currentAmmo);0!==s?(this.burstInProgress=!0,this.currentBurstShot=0,this.launchProjectile(),this.currentBurstShot++,this.currentAmmo--,t.ATTACK.BURST.AMOUNT>1&&this.currentAmmo>0&&this.currentBurstShot<s?this.nextBurstShotTime=Date.now()+t.ATTACK.BURST.DELAY:(this.burstInProgress=!1,this.currentBurstShot=0),console.log(`Fired shot! Magazine: ${this.currentAmmo}/${t.ATTACK.MAGAZINE.SIZE}, Inventory: ${this.inventoryAmmo}/${t.INVENTORY.MAX_AMMO}`)):console.log("Out of ammo! Magazine empty.")}launchProjectile(){const e=this.mouseX-this.myPlayer.x,s=this.mouseY-this.myPlayer.y,a=Math.sqrt(e*e+s*s);if(0===a)return;const r=e/a,n=s/a;this.createParticles(this.myPlayer.x+r*(t.VISUAL.SIZE+5),this.myPlayer.y+n*(t.VISUAL.SIZE+5),`muzzle_${Date.now()}`,i,{x:r,y:n});const h=t.VISUAL.SIZE+t.PROJECTILE.SIZE+this.projectileOffset,l=this.myPlayer.x+r*h,c=this.myPlayer.y+n*h,y=-n,m=r;this.createParticles(l,c,`shell_${Date.now()}`,o,{x:.8*y+-.2*r,y:.8*m+-.2*n});for(let e=0;e<t.PROJECTILE.AMOUNT;e++){const e=(Math.random()-.5)*t.PROJECTILE.SPREAD,s=Math.atan2(n,r)+e,i={id:d(),x:this.myPlayer.x+Math.cos(s)*h,y:this.myPlayer.y+Math.sin(s)*h,velocityX:Math.cos(s)*t.PROJECTILE.SPEED,velocityY:Math.sin(s)*t.PROJECTILE.SPEED,range:100*t.PROJECTILE.RANGE,distanceTraveled:0,ownerId:this.userId,timestamp:Date.now()};this.projectiles.set(i.id,i),this.roomManager.sendMessage(JSON.stringify({type:"projectile-launch",projectile:i}))}}updateProjectiles(){const i=[];this.projectiles.forEach((o,h)=>{o.x+=o.velocityX,o.y+=o.velocityY;const l=Math.sqrt(o.velocityX*o.velocityX+o.velocityY*o.velocityY);if(o.distanceTraveled+=l,this.myPlayer.health>0){const e=o.x-this.myPlayer.x,r=o.y-this.myPlayer.y;if(Math.sqrt(e*e+r*r)<=t.VISUAL.SIZE+t.PROJECTILE.SIZE){this.myPlayer.health-=t.PROJECTILE.DAMAGE,m("healthBar",this.myPlayer.health,t.STATS.MAX_HEALTH),i.push(h),this.createDecal(o.x,o.y,`blood_${h}`,s);const e={x:-o.velocityX/Math.sqrt(o.velocityX**2+o.velocityY**2),y:-o.velocityY/Math.sqrt(o.velocityX**2+o.velocityY**2)};this.createParticles(o.x,o.y,`blood_${h}`,a,e),this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:this.userId,shooterId:o.ownerId,damage:t.PROJECTILE.DAMAGE,newHealth:this.myPlayer.health,projectileId:h})),this.myPlayer.health<=0&&(this.recordDeath(),this.checkRoundEnd())}}o.ownerId===this.userId&&this.players.forEach((e,r)=>{if(e.health>0){const n=o.x-e.x,l=o.y-e.y;if(Math.sqrt(n*n+l*l)<=t.VISUAL.SIZE+t.PROJECTILE.SIZE){i.push(h);const n=Math.max(0,e.health-t.PROJECTILE.DAMAGE);e.health=n,this.createDecal(o.x,o.y,`blood_${h}`,s);const l={x:-o.velocityX/Math.sqrt(o.velocityX**2+o.velocityY**2),y:-o.velocityY/Math.sqrt(o.velocityX**2+o.velocityY**2)};this.createParticles(o.x,o.y,`blood_${h}`,a,l),n<=0&&(console.log(`I killed ${r}!`),this.leaderboard.has(this.userId)&&this.leaderboard.get(this.userId).kills++,this.leaderboard.has(r)&&this.leaderboard.get(r).deaths++,this.updateLeaderboardDisplay()),this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:r,shooterId:this.userId,damage:t.PROJECTILE.DAMAGE,newHealth:n,projectileId:h,wasKill:n<=0})),n<=0&&this.checkRoundEnd()}}}),(o.distanceTraveled>=o.range||o.x<0||o.x>r||o.y<0||o.y>n)&&(i.push(h),o.ownerId===this.userId&&(o.distanceTraveled>=o.range&&this.createDecal(o.x,o.y,`impact_${h}`,e),this.roomManager.sendMessage(JSON.stringify({type:"projectile-remove",projectileId:h}))))}),i.forEach(t=>{this.projectiles.delete(t)})}startReload(){this.isReloading||this.currentAmmo>=t.ATTACK.MAGAZINE.SIZE||this.inventoryAmmo<=0||(console.log(`Starting reload - Current ammo: ${this.currentAmmo}, Inventory: ${this.inventoryAmmo}`),this.isReloading=!0,this.reloadStartTime=Date.now(),this.burstInProgress=!1,this.currentBurstShot=0)}updatePlayerPosition(){if(!this.gameRunning||this.myPlayer.health<=0)return;if(this.updateStamina(),this.updateDash(),this.isDashing){let e=this.myPlayer.x+this.playerVelocityX,s=this.myPlayer.y+this.playerVelocityY,i=!1;e>=t.VISUAL.BORDER_MARGIN&&e<=r-t.VISUAL.BORDER_MARGIN?(this.myPlayer.x=e,i=!0):(this.isDashing=!1,this.playerVelocityX=0),s>=t.VISUAL.BORDER_MARGIN&&s<=n-t.VISUAL.BORDER_MARGIN?(this.myPlayer.y=s,i=!0):(this.isDashing=!1,this.playerVelocityY=0);const a=Math.sqrt((this.myPlayer.x-this.lastSentX)**2+(this.myPlayer.y-this.lastSentY)**2);return void(i&&a>2&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",x:this.myPlayer.x,y:this.myPlayer.y})),this.lastSentX=this.myPlayer.x,this.lastSentY=this.myPlayer.y))}const e=l;let s=0,i=0;this.keys.has(e.MOVE_UP)&&(i-=1),this.keys.has(e.MOVE_DOWN)&&(i+=1),this.keys.has(e.MOVE_LEFT)&&(s-=1),this.keys.has(e.MOVE_RIGHT)&&(s+=1);const a=Math.sqrt(s*s+i*i);a>0&&(s/=a,i/=a);const o=this.isSprinting&&this.currentStamina>0?t.STATS.SPEED*t.SPRINT.MULTIPLIER:t.STATS.SPEED;this.isSprinting&&this.currentStamina<=0&&(this.isSprinting=!1,console.log("Out of stamina, stopped sprinting"));const h=s*o,c=i*o;this.playerVelocityX+=(h-this.playerVelocityX)*t.PHYSICS.ACCELERATION,this.playerVelocityY+=(c-this.playerVelocityY)*t.PHYSICS.ACCELERATION,0===a&&(this.playerVelocityX*=t.PHYSICS.FRICTION,this.playerVelocityY*=t.PHYSICS.FRICTION);let d=this.myPlayer.x+this.playerVelocityX,y=this.myPlayer.y+this.playerVelocityY,m=!1;d>=t.VISUAL.BORDER_MARGIN&&d<=r-t.VISUAL.BORDER_MARGIN?(this.myPlayer.x=d,m=!0):this.playerVelocityX=0,y>=t.VISUAL.BORDER_MARGIN&&y<=n-t.VISUAL.BORDER_MARGIN?(this.myPlayer.y=y,m=!0):this.playerVelocityY=0;const u=Math.sqrt((this.myPlayer.x-this.lastSentX)**2+(this.myPlayer.y-this.lastSentY)**2);m&&u>2&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",x:this.myPlayer.x,y:this.myPlayer.y})),this.lastSentX=this.myPlayer.x,this.lastSentY=this.myPlayer.y),Math.abs(this.playerVelocityX)<.01&&(this.playerVelocityX=0),Math.abs(this.playerVelocityY)<.01&&(this.playerVelocityY=0)}recordDeath(){console.log("I died! Waiting for round to end..."),this.roomManager.sendMessage(JSON.stringify({type:"player-death",playerId:this.userId}))}resetPlayerConfig(){Object.assign(t,JSON.parse(JSON.stringify(this.defaultPlayerConfig))),console.log("Player config reset to defaults")}requestStamina(e){return this.currentStamina<e?(console.log(`Insufficient stamina! Need: ${e}, Have: ${this.currentStamina}`),!1):(this.currentStamina-=e,this.staminaRecoveryBlocked=!0,this.staminaRecoveryBlockedUntil=Date.now()+t.STAMINA.RECOVER_DELAY,console.log(`Stamina drained: -${e}, Remaining: ${this.currentStamina}`),!0)}updateStamina(){const e=Date.now();if(this.isSprinting&&e>=this.lastStaminaDrainTime+100&&(this.requestStamina(t.SPRINT.DRAIN)||(this.isSprinting=!1,console.log("Out of stamina, stopped sprinting")),this.lastStaminaDrainTime=e),(!this.staminaRecoveryBlocked||e>=this.staminaRecoveryBlockedUntil)&&(this.staminaRecoveryBlocked=!1,this.currentStamina<t.STATS.MAX_STAMINA&&!this.isSprinting)){const e=t.STAMINA.RECOVER_RATE/1e3*16;this.currentStamina=Math.min(t.STATS.MAX_STAMINA,this.currentStamina+e)}}startDash(){if(this.isDashing||this.myPlayer.health<=0)return;console.log("Starting dash...");const e=Date.now();if(e<this.lastDashTime+t.DASH.COOLDOWN)return void console.log("Dash on cooldown");if(!this.requestStamina(t.DASH.DRAIN))return void console.log("Not enough stamina to dash");const s=l;let i=0,a=0;this.keys.has(s.MOVE_UP)&&(a-=1),this.keys.has(s.MOVE_DOWN)&&(a+=1),this.keys.has(s.MOVE_LEFT)&&(i-=1),this.keys.has(s.MOVE_RIGHT)&&(i+=1);const o=Math.sqrt(i*i+a*a);if(0===o)return void console.log("No movement input for dash");i/=o,a/=o,this.isDashing=!0,this.dashStartTime=e,this.lastDashTime=e;const r=t.STATS.SPEED*t.DASH.MULTIPLIER;this.playerVelocityX=i*r,this.playerVelocityY=a*r,console.log(`Dashing! Speed: ${r}`)}updateDash(){this.isDashing&&Date.now()>=this.dashStartTime+t.DASH.TIME&&(this.isDashing=!1,console.log("Dash ended"))}showGameControls(t){this.updateDisplay("game",t)}startGame(){this.isHost&&(this.roomManager.sendMessage(JSON.stringify({type:"start-game"})),this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop())}startGameLoop(){this.gameRunning=!0,this.roundInProgress=!0,this.inventoryAmmo=Math.floor(t.INVENTORY.MAX_AMMO/2),this.currentAmmo=t.ATTACK.MAGAZINE.SIZE,this.isReloading=!1,this.createLeaderboard(),this.resetPlayerConfig(),R(),this.roomManager.sendMessage(JSON.stringify({type:"player-join",x:this.myPlayer.x,y:this.myPlayer.y,color:this.myPlayer.color,health:this.myPlayer.health})),this.gameLoop(),m("healthBar",this.myPlayer.health,t.STATS.MAX_HEALTH),m("staminaBar",this.currentStamina,t.STATS.MAX_STAMINA)}gameLoop(){this.gameRunning&&this.ctx&&this.canvas&&this.decalCtx&&this.decalCanvas&&(this.gamePaused||(this.updatePlayerPosition(),this.updateAttack(),this.updateProjectiles(),this.updateParticles(),m("staminaBar",this.currentStamina,t.STATS.MAX_STAMINA),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.decalCanvas&&this.ctx.drawImage(this.decalCanvas,0,0),this.ctx.strokeStyle="#333",this.ctx.lineWidth=2,this.ctx.strokeRect(0,0,this.canvas.width,this.canvas.height),this.projectiles.forEach(t=>{this.drawProjectile(t)}),this.players.forEach(t=>{this.drawPlayer(t)}),this.drawPlayer(this.myPlayer,!0),this.drawParticles()),requestAnimationFrame(()=>this.gameLoop()))}pauseGame(){this.gameRunning&&(this.gamePaused=!0,console.log("Game paused"),this.keys.clear(),this.isSprinting=!1,this.isDashing=!1,this.burstInProgress=!1,this.currentBurstShot=0)}resumeGame(){this.gameRunning&&(this.gamePaused=!1,console.log("Game resumed"))}togglePause(){this.gameRunning&&(this.pausedPlayers.has(this.userId)?(this.pausedPlayers.delete(this.userId),this.roomManager.sendMessage(JSON.stringify({type:"player-unpause",userId:this.userId})),console.log("Requesting unpause...")):(this.pausedPlayers.add(this.userId),this.roomManager.sendMessage(JSON.stringify({type:"player-pause",userId:this.userId})),console.log("Requesting pause...")),this.updatePauseState())}updatePauseState(){const t=this.pausedPlayers.size>0;t&&!this.gamePaused?(this.pauseGame(),console.log(`Game paused. ${this.pausedPlayers.size} player(s) paused.`)):!t&&this.gamePaused&&(this.resumeGame(),console.log("Game resumed. All players unpaused."))}startUpgradePhase(t){console.log("Starting upgrade phase..."),this.pausedPlayers.add(this.userId),this.roomManager.sendMessage(JSON.stringify({type:"player-pause",userId:this.userId})),this.updatePauseState(),t===this.userId?this.showWinnerWaitScreen():this.showUpgradeSelection()}showWinnerWaitScreen(){const t=document.getElementById("upgradeContainer");if(!t)return;t.innerHTML="";const e=document.createElement("div");e.className="upgrade_waiting",e.textContent="You won! Other players are selecting upgrades...";const s=document.createElement("button");s.textContent="Continue to Next Round",s.onclick=()=>{console.log("Winner pressed continue..."),t.style.display="none",this.roomManager.sendMessage(JSON.stringify({type:"upgrade-complete",userId:this.userId}))},t.appendChild(e),t.appendChild(s),t.style.display="flex"}showUpgradeSelection(){const t=document.getElementById("upgradeContainer");t&&(t.innerHTML="",function(){const t=b.filter(t=>!(t.unique&&I.has(t.id)||t.type===A.EQUIPMENT&&M.has(t.id))),e=[];for(let s=0;s<Math.min(3,t.length)&&0!==t.length;s++){const s=t.reduce((t,e)=>t+S[e.rarity].weight,0);let i=Math.random()*s,a=null;for(const e of t)if(i-=S[e.rarity].weight,i<=0){a=e;break}if(a){e.push(a);const s=t.indexOf(a);t.splice(s,1)}}return e}().forEach(e=>{const s=document.createElement("div");s.className="upgrade_card",s.setAttribute("data-rarity",e.rarity.toString());const i=document.createElement("div");i.className="upgrade_name",i.textContent=e.name;const a=document.createElement("div");a.className="upgrade_subtitle",a.textContent=e.subtitle,s.appendChild(i),s.appendChild(a),s.addEventListener("click",()=>{this.selectUpgrade(e.id)}),t.appendChild(s)}),t.style.display="flex")}selectUpgrade(t){const e=function(t){const e=b.find(e=>e.id===t);return!(!e||e.unique&&I.has(t)||e.type===A.EQUIPMENT&&M.has(t)||(e.type===A.EQUIPMENT&&M.add(t),e.unique&&I.add(t),e.func(),0))}(t);if(!e)return void console.error("Failed to apply upgrade");this.roomManager.sendMessage(JSON.stringify({type:"upgrade-taken",upgradeId:t,userId:this.userId,isUnique:b.find(e=>e.id===t)?.unique||!1}));const s=document.getElementById("upgradeContainer");s&&(s.style.display="none"),this.roomManager.sendMessage(JSON.stringify({type:"upgrade-complete",userId:this.userId})),console.log("Upgrade selected, waiting for others...")}createLeaderboard(){console.log("Creating/updating leaderboard for all players");const t=new Set;t.add(this.userId),this.players.forEach((e,s)=>{t.add(s)}),this.lobbyPlayers.forEach((e,s)=>{t.add(s)}),t.forEach(t=>{this.leaderboard.has(t)||(this.leaderboard.set(t,{playerId:t,wins:0,kills:0,deaths:0}),console.log(`Created leaderboard entry for ${t}`))}),this.updateLeaderboardDisplay(),console.log("Leaderboard created/updated:",Array.from(this.leaderboard.entries()))}updateLeaderboardDisplay(){this.leaderboardBody&&(this.leaderboardBody.innerHTML="",Array.from(this.leaderboard.entries()).sort((t,e)=>{const[,s]=t,[,i]=e;return i.wins!==s.wins?i.wins-s.wins:i.kills-s.kills}).forEach(([t,e])=>{const s=document.createElement("tr");s.className="leaderboard_row",t===this.userId&&s.classList.add("current-player");const i=document.createElement("td");i.textContent=t===this.userId?"You":t.substring(0,8),i.className="player_name",s.appendChild(i);const a=document.createElement("td");a.textContent=e.wins.toString(),a.className="wins",s.appendChild(a);const o=document.createElement("td");o.textContent=e.kills.toString(),o.className="kills",s.appendChild(o);const r=document.createElement("td");r.textContent=e.deaths.toString(),r.className="deaths",s.appendChild(r),this.leaderboardBody&&this.leaderboardBody.appendChild(s)}))}clearLeaderboard(){this.leaderboard.clear(),this.leaderboardBody&&(this.leaderboardBody.innerHTML="")}drawPlayer(e,s=!1){if(!this.ctx)return;if(e.health<=0)return;this.ctx.beginPath(),this.ctx.arc(e.x,e.y,t.VISUAL.SIZE,0,2*Math.PI),this.ctx.fillStyle=e.color,this.ctx.fill(),s&&(this.ctx.strokeStyle=c,this.ctx.lineWidth=t.VISUAL.STROKE_WIDTH,this.ctx.stroke()),this.ctx.fillStyle=c,this.ctx.font="12px Arial",this.ctx.textAlign="center";const i=s?"You":e.id.substring(0,6);this.ctx.fillText(i,e.x,e.y-t.VISUAL.ID_DISPLAY_OFFSET)}drawProjectile(e){if(!this.ctx)return;const s=Math.sqrt(e.velocityX*e.velocityX+e.velocityY*e.velocityY),i=e.velocityX/s,a=e.velocityY/s,o=e.x+i*(t.PROJECTILE.LENGTH/2),r=e.y+a*(t.PROJECTILE.LENGTH/2),n=e.x-i*(t.PROJECTILE.LENGTH/2),h=e.y-a*(t.PROJECTILE.LENGTH/2);this.ctx.fillStyle=t.PROJECTILE.COLOR,this.ctx.strokeStyle=t.PROJECTILE.COLOR,this.ctx.lineWidth=2*t.PROJECTILE.SIZE,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(n,h),this.ctx.lineTo(o,r),this.ctx.stroke()}drawParticles(){this.ctx&&this.particles.forEach(t=>{const e=y(t.color);e&&this.ctx&&(this.ctx.save(),this.ctx.globalAlpha=t.opacity,0!==t.torque?(this.ctx.translate(t.x+t.size/2,t.y+t.size/2),this.ctx.rotate(t.rotation),this.ctx.fillStyle=`rgb(${e.r}, ${e.g}, ${e.b})`,this.ctx.fillRect(-t.size/2,-t.size/2,t.size,t.size)):(this.ctx.fillStyle=`rgb(${e.r}, ${e.g}, ${e.b})`,this.ctx.fillRect(Math.floor(t.x),Math.floor(t.y),t.size,t.size)),this.ctx.restore())})}createDecal(t,s,i,a=e){if(!this.decalCtx)return;if(t<0||t>r||s<0||s>n)return;const o=a.RADIUS.MIN+Math.random()*(a.RADIUS.MAX-a.RADIUS.MIN),h=a.DENSITY.MIN+Math.random()*(a.DENSITY.MAX-a.DENSITY.MIN),l=a.OPACITY.MIN+Math.random()*(a.OPACITY.MAX-a.OPACITY.MIN),c=Math.floor(o*o*Math.PI*h),d=y(a.COLOR);if(d){this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over";for(let e=0;e<c;e++){const e=Math.random()*Math.PI*2,i=Math.random()*o,h=t+Math.cos(e)*i,c=s+Math.sin(e)*i;if(h<0||h>=r||c<0||c>=n)continue;const y=l+(Math.random()-.5)*a.VARIATION,m=Math.max(.05,Math.min(.6,y));this.decalCtx.fillStyle=`rgba(${d.r}, ${d.g}, ${d.b}, ${m})`,this.decalCtx.fillRect(Math.floor(h),Math.floor(c),1,1)}this.decalCtx.restore(),this.decals.set(i,{x:t,y:s,params:a}),this.roomManager.sendMessage(JSON.stringify({type:"add-decal",decalId:i,x:t,y:s,params:a}))}else console.error(`Invalid hex color: ${a.COLOR}`)}applyDecal(t,e,s,i){if(!this.decalCtx)return;if(this.decals.has(s))return;if(t<0||t>r||e<0||e>n)return;const a=i.RADIUS.MIN+Math.random()*(i.RADIUS.MAX-i.RADIUS.MIN),o=i.DENSITY.MIN+Math.random()*(i.DENSITY.MAX-i.DENSITY.MIN),h=i.OPACITY.MIN+Math.random()*(i.OPACITY.MAX-i.OPACITY.MIN),l=Math.floor(a*a*Math.PI*o),c=y(i.COLOR);if(c){this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over";for(let s=0;s<l;s++){const s=Math.random()*Math.PI*2,o=Math.random()*a,l=t+Math.cos(s)*o,d=e+Math.sin(s)*o;if(l<0||l>=r||d<0||d>=n)continue;const y=h+(Math.random()-.5)*i.VARIATION,m=Math.max(.05,Math.min(.6,y));this.decalCtx.fillStyle=`rgba(${c.r}, ${c.g}, ${c.b}, ${m})`,this.decalCtx.fillRect(Math.floor(l),Math.floor(d),1,1)}this.decalCtx.restore(),this.decals.set(s,{x:t,y:e,params:i})}else console.error(`Invalid hex color: ${i.COLOR}`)}createParticles(t,e,s,i,a){const o=Math.floor(i.COUNT.MIN+Math.random()*(i.COUNT.MAX-i.COUNT.MIN)),r=[];for(let n=0;n<o;n++){const o=i.LIFETIME.MIN+Math.random()*(i.LIFETIME.MAX-i.LIFETIME.MIN),h=i.SPEED.MIN+Math.random()*(i.SPEED.MAX-i.SPEED.MIN),l=i.SIZE.MIN+Math.random()*(i.SIZE.MAX-i.SIZE.MIN),c=i.OPACITY.MIN+Math.random()*(i.OPACITY.MAX-i.OPACITY.MIN),d=i.TORQUE.MIN+Math.random()*(i.TORQUE.MAX-i.TORQUE.MIN);let y;y=a?Math.atan2(a.y,a.x)+(Math.random()-.5)*i.SPREAD:Math.random()*Math.PI*2;const m={lifetime:o,speed:h,size:l,opacity:c,torque:d,angle:y,velocityX:Math.cos(y)*h,velocityY:Math.sin(y)*h,rotation:Math.random()*Math.PI*2},u={id:`${s}_${n}`,x:t,y:e,velocityX:m.velocityX,velocityY:m.velocityY,size:m.size,opacity:m.opacity,maxOpacity:m.opacity,color:i.COLOR,lifetime:m.lifetime,age:0,collide:i.COLLIDE,fade:i.FADE,paint:i.PAINT,stain:i.STAIN,torque:m.torque,rotation:m.rotation,hasCollided:!1};this.particles.set(u.id,u),r.push(m)}this.roomManager.sendMessage(JSON.stringify({type:"add-particles",particleId:s,x:t,y:e,particleData:r,color:i.COLOR,collide:i.COLLIDE,fade:i.FADE}))}applyParticles(t,e,s,i,a,o,r){i.forEach((i,n)=>{const h={id:`${s}_${n}`,x:t,y:e,velocityX:i.velocityX,velocityY:i.velocityY,size:i.size,opacity:i.opacity,maxOpacity:i.opacity,color:a,lifetime:i.lifetime,age:0,collide:o,fade:r,paint:!1,stain:i.stain,torque:i.torque,rotation:i.rotation,hasCollided:!1};this.particles.set(h.id,h)})}updateParticles(){const t=[];this.particles.forEach((e,s)=>{if(e.x+=e.velocityX,e.y+=e.velocityY,e.age+=16,e.rotation+=e.torque*Math.PI/180/60,e.fade){const t=e.age/e.lifetime;e.opacity=e.maxOpacity*(1-t)}if(e.hasCollided&&e.stain){this.stampParticle(e.x,e.y,`stain_${s}_${Date.now()}`,e);const t=(e.age-(e.lifetime-.5*e.lifetime))/(.5*e.lifetime);t>0&&(e.size=Math.max(.5,e.size*(1-.1*t)),e.opacity=e.opacity*(1-t))}if(e.age>=e.lifetime||e.x<-10||e.x>810||e.y<-10||e.y>610){if(e.collide&&e.age>=e.lifetime&&e.x>=0&&e.x<=r&&e.y>=0&&e.y<=n&&!e.hasCollided){e.hasCollided=!0;const t=.875+.1*Math.random();e.velocityX*=1-t,e.velocityY*=1-t;const s=.5*e.lifetime;return void(e.lifetime+=s)}e.paint&&!e.stain&&e.age>=e.lifetime&&e.x>=0&&e.x<=r&&e.y>=0&&e.y<=n&&this.stampParticle(e.x,e.y,`stamp_${s}`,e),t.push(s)}}),t.forEach(t=>this.particles.delete(t))}stampParticle(t,e,s,i){if(!this.decalCtx)return;const a=y(i.color);a&&(this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over",0!==i.torque?(this.decalCtx.translate(i.x+i.size/2,i.y+i.size/2),this.decalCtx.rotate(i.rotation),this.decalCtx.fillStyle=`rgba(${a.r}, ${a.g}, ${a.b}, ${i.opacity})`,this.decalCtx.fillRect(-i.size/2,-i.size/2,i.size,i.size)):(this.decalCtx.fillStyle=`rgba(${a.r}, ${a.g}, ${a.b}, ${i.opacity})`,this.decalCtx.fillRect(Math.floor(i.x),Math.floor(i.y),i.size,i.size)),this.decalCtx.restore(),this.decals.set(s,{x:i.x,y:i.y,params:null}),this.roomManager.sendMessage(JSON.stringify({type:"particle-stamp",stampId:s,x:i.x,y:i.y,color:i.color,opacity:i.opacity,size:i.size,rotation:i.rotation,torque:i.torque})))}applyParticleStamp(t,e,s,i,a,o,r,n){if(!this.decalCtx)return;if(this.decals.has(s))return;const h=y(i);h&&(this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over",void 0!==r&&void 0!==n&&0!==n?(this.decalCtx.translate(t+o/2,e+o/2),this.decalCtx.rotate(r),this.decalCtx.fillStyle=`rgba(${h.r}, ${h.g}, ${h.b}, ${a})`,this.decalCtx.fillRect(-o/2,-o/2,o,o)):(this.decalCtx.fillStyle=`rgba(${h.r}, ${h.g}, ${h.b}, ${a})`,this.decalCtx.fillRect(Math.floor(t),Math.floor(e),o,o)),this.decalCtx.restore(),this.decals.set(s,{x:t,y:e,params:null}))}updateDisplay(t,e){if(this.roomControls&&this.lobbyContainer&&this.gameContainer&&this.chatContainer&&this.leaderboardContainer)switch(this.roomControls.style.display="none",this.lobbyContainer.style.display="none",this.gameContainer.style.display="none",this.chatContainer.style.display="none",this.leaderboardContainer.style.display="none",t){case"lobby":this.lobbyContainer.style.display="flex",this.chatContainer.style.display="flex",e&&this.roomIdDisplay&&(this.roomIdDisplay.textContent=e),this.inLobby=!0;break;case"room":this.roomControls.style.display="flex";break;case"game":if(this.gameContainer.style.display="flex",this.chatContainer.style.display="flex",this.leaderboardContainer.style.display="flex",e){const t=this.gameRoomIdDisplay;t&&(t.textContent=e)}this.inLobby=!1}}updateHostDisplay(){this.startGameBtn&&(this.startGameBtn.style.display=this.isHost?"block":"none",this.startGameBtn.disabled=this.lobbyPlayers.size<1,this.gameOptionsContainer&&(this.gameOptionsContainer.style.display=this.isHost?"flex":"none"))}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{new P}):new P})();