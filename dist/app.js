(()=>{"use strict";const t={ACTIONS:{DASH:{COOLDOWN:1e3,DRAIN:40,MULTIPLIER:3,TIME:150},MELEE:{COOLDOWN:250,DAMAGE:10,DURATION:100,RANGE:10,SIZE:2},PRIMARY:{BUFFER:250,BURST:{AMOUNT:1,DELAY:75},MAGAZINE:{SIZE:10,STARTING_RESERVE:20,MAX_RESERVE:50},OFFSET:10,PROJECTILE:{AMOUNT:1,COLOR:"#fff5beff",DAMAGE:25,LENGTH:15,RANGE:5,SIZE:1,SPEED:35,SPREAD:10,UNIQUE:[]},RELOAD:{TIME:750}},SPRINT:{DRAIN:5,MULTIPLIER:1.75}},DATA:{ID_LENGTH:12},EQUIPMENT:[],FLAGS:{HIDDEN:!1,INVULNERABLE:!1},PHYSICS:{ACCELERATION:.55,FRICTION:.85},RIG:{BODY:"DEFAULT",HEAD:"DEFAULT",HEADWEAR:"DEFAULT",WEAPON:"GLOCK"},STATS:{DEFENSE:0,HEALTH:{MAX:100},LUCK:1,SIZE:100,SPEED:6,STAMINA:{MAX:100,RECOVERY:{DELAY:1e3,RATE:25}}},UNIQUE:[],VISUAL:{ID_DISPLAY_OFFSET:25}},e=8,a={RADIUS:{MIN:4,MAX:8},DENSITY:{MIN:.175,MAX:.35},OPACITY:{MIN:.15,MAX:.25},VARIATION:.215,COLOR:"#000000"},s={RADIUS:{MIN:5,MAX:17.5},DENSITY:{MIN:.1,MAX:.175},OPACITY:{MIN:.275,MAX:.315},VARIATION:.5,COLOR:"#781414"},i={COUNT:{MIN:1,MAX:4},LIFETIME:{MIN:800,MAX:1e3},NOISE:{STRENGTH:{MIN:0,MAX:0},SCALE:{MIN:0,MAX:0}},OPACITY:{MIN:.25,MAX:.75},SPEED:{MIN:.25,MAX:.75},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},SIZE:{MIN:.125,MAX:2.275},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!0,PAINT:!1,SPREAD:.25,STAIN:!0,COLOR:"#8b1a1a"},r={COUNT:{MIN:4,MAX:12},LIFETIME:{MIN:150,MAX:1200},NOISE:{STRENGTH:{MIN:0,MAX:0},SCALE:{MIN:0,MAX:0}},OPACITY:{MIN:.425,MAX:.775},SPEED:{MIN:1.5,MAX:4.75},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},SIZE:{MIN:.75,MAX:3.5},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!1,PAINT:!0,SPREAD:.425,STAIN:!0,COLOR:"#8b1a1a"},o={COUNT:{MIN:8,MAX:15},LIFETIME:{MIN:150,MAX:300},NOISE:{STRENGTH:{MIN:0,MAX:0},SCALE:{MIN:0,MAX:0}},OPACITY:{MIN:.4,MAX:.8},SPEED:{MIN:4,MAX:10},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},SIZE:{MIN:1,MAX:3},TORQUE:{MIN:0,MAX:0},COLLIDE:!1,FADE:!0,PAINT:!1,SPREAD:.6,STAIN:!1,COLOR:"#ffaa00"},n={COUNT:{MIN:1,MAX:1},LIFETIME:{MIN:250,MAX:550},NOISE:{STRENGTH:{MIN:0,MAX:0},SCALE:{MIN:0,MAX:0}},OPACITY:{MIN:1,MAX:1},SPEED:{MIN:5,MAX:8},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},SIZE:{MIN:2,MAX:2},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!1,PAINT:!0,SPREAD:.4,STAIN:!1,COLOR:"#d4af37"},l={COUNT:{MIN:3,MAX:6},LIFETIME:{MIN:800,MAX:1400},NOISE:{STRENGTH:{MIN:.1,MAX:.3},SCALE:{MIN:40,MAX:80}},OPACITY:{MIN:.15,MAX:.35},SPEED:{MIN:.5,MAX:1.5},SIZE:{MIN:4,MAX:8},SIZE_OVER_LIFETIME:{MIN:2,MAX:3},TORQUE:{MIN:-180,MAX:180},COLLIDE:!1,FADE:!0,PAINT:!1,SPREAD:.4,STAIN:!1,COLOR:"#5a5a5a"},h={COUNT:{MIN:8,MAX:16},LIFETIME:{MIN:150,MAX:300},NOISE:{STRENGTH:{MIN:.25,MAX:5},SCALE:{MIN:.25,MAX:1.5}},OPACITY:{MIN:.4,MAX:.8},SPEED:{MIN:4,MAX:10},SIZE:{MIN:1,MAX:3},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},TORQUE:{MIN:-720,MAX:720},COLLIDE:!1,FADE:!0,PAINT:!1,SPREAD:.6,STAIN:!1,COLOR:"#ffaa00"},m=["/assets/img/effects/shrapnel/shrapnel_00.png","/assets/img/effects/shrapnel/shrapnel_01.png","/assets/img/effects/shrapnel/shrapnel_02.png","/assets/img/effects/shrapnel/shrapnel_03.png","/assets/img/effects/shrapnel/shrapnel_04.png","/assets/img/effects/shrapnel/shrapnel_05.png"],c={BASE:"/assets/img/object/ammobox/base.png",BULLETS:"/assets/img/object/ammobox/bullets.png",LID:"/assets/img/object/ammobox/lid.png"},d=800,y=600,p=15,u={A:0,B:1,X:2,Y:3,LB:4,RB:5,LT:6,RT:7,SELECT:8,START:9,L_STICK:10,R_STICK:11,DPAD_UP:12,DPAD_DOWN:13,DPAD_LEFT:14,DPAD_RIGHT:15,HOME:16,AXES:{LEFT_STICK_X:0,LEFT_STICK_Y:1,RIGHT_STICK_X:2,RIGHT_STICK_Y:3}},g={CHARACTER_SIZE:650,CONNECTION_TIMEOUT:1e3,CONTROLS:{KEYBINDS:{MELEE:"mouse2",MOVE_UP:"w",MOVE_LEFT:"a",MOVE_DOWN:"s",MOVE_RIGHT:"d",RELOAD:"r",SPRINT:"shift",ATTACK:"mouse1",DASH:" "},GAMEPAD:{MELEE:u.RB,DASH:u.LB,RELOAD:u.A,SPRINT:u.LT,ATTACK:u.RT}},GAME_END_DELAY:5e3,MAX_PLAYERS:4,MAX_WINS:5,RECONNECT_DELAY:3e3,ROUND_END_DELAY:3e3,NEW_ROUND_DELAY:500},S=1,I=.85,M=.75,f=.9,E=1,C=5,P=10,A=!0,b={IMPACT:{FLESH:{BULLET:["/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_00.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_01.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_02.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_03.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_04.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_05.ogg"]},METAL:{BULLET:["/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_00.ogg","/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_01.ogg","/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_02.ogg","/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_03.ogg","/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_04.ogg"]}},WEAPON:{GLOCK:{ATTACK:["/assets/audio/sfx/weapons/glock/glock_attack_00.ogg","/assets/audio/sfx/weapons/glock/glock_attack_01.ogg","/assets/audio/sfx/weapons/glock/glock_attack_02.ogg","/assets/audio/sfx/weapons/glock/glock_attack_03.ogg","/assets/audio/sfx/weapons/glock/glock_attack_04.ogg","/assets/audio/sfx/weapons/glock/glock_attack_05.ogg"],SHELL:["/assets/audio/sfx/weapons/glock/glock_shell_00.ogg","/assets/audio/sfx/weapons/glock/glock_shell_01.ogg","/assets/audio/sfx/weapons/glock/glock_shell_02.ogg","/assets/audio/sfx/weapons/glock/glock_shell_03.ogg","/assets/audio/sfx/weapons/glock/glock_shell_04.ogg","/assets/audio/sfx/weapons/glock/glock_shell_05.ogg","/assets/audio/sfx/weapons/glock/glock_shell_06.ogg","/assets/audio/sfx/weapons/glock/glock_shell_07.ogg","/assets/audio/sfx/weapons/glock/glock_shell_08.ogg","/assets/audio/sfx/weapons/glock/glock_shell_09.ogg","/assets/audio/sfx/weapons/glock/glock_shell_10.ogg","/assets/audio/sfx/weapons/glock/glock_shell_11.ogg","/assets/audio/sfx/weapons/glock/glock_shell_12.ogg","/assets/audio/sfx/weapons/glock/glock_shell_13.ogg","/assets/audio/sfx/weapons/glock/glock_shell_14.ogg"],EMPTY:["/assets/audio/sfx/weapons/glock/glock_empty_00.ogg"]}}};class x{constructor(t,e,a){this.playerState=t,this.roomManager=e,this.userId=a,this.characterAnimations=new Map,this.characterOffsets=new Map}animateCharacterPart(t){this.generateCharacterAnimation(t),this.roomManager.sendMessage(JSON.stringify({type:"character-animation",params:t}))}rotateCharacterPart(t,e){if(t===this.userId)this.playerState.myPlayer.transform.rot=e;else{const a=this.playerState.players.get(t);if(!a)return;a.transform.rot=e}const a=Date.now();Math.abs(e-this.playerState.lastSentRotation)>.1&&a-this.playerState.lastSentRotationTime>=25&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{rot:this.playerState.myPlayer.transform.rot}})),this.playerState.lastSentRotation=e,this.playerState.lastSentRotationTime=a)}animateCharacterPartNetwork(t){this.generateCharacterAnimation(t)}generateCharacterAnimation(t){const{playerId:e,part:a,frames:s,duration:i,partIndex:r}=t,o=`${e}_${a}_${r||0}`;this.characterAnimations.set(o,{playerId:e,part:a,partIndex:r,frames:s,duration:i,startTime:Date.now(),originalOffset:{x:0,y:0}})}updateCharacterAnimations(t){const e=[],a=Date.now();this.characterAnimations.forEach((t,s)=>{const i=(a-t.startTime)/t.duration;if(0!==t.duration&&i>=1)return void e.push(s);const r=Object.keys(t.frames).map(Number).sort((t,e)=>t-e);let o,n,l=0;for(let t=0;t<r.length-1;t++){const e=r[t],a=r[t+1];if(i>=e&&i<a){l=t;break}}if(i>=1){const e=t.frames[r[r.length-1]];o=e.x,n=e.y}else{const e=t.frames[r[l]],a=t.frames[r[l+1]]||e,s=(i-r[l])/(r[l+1]-r[l])||0;o=e.x+(a.x-e.x)*s,n=e.y+(a.y-e.y)*s}this.characterOffsets.set(s,{x:o,y:n})}),e.forEach(t=>{this.characterAnimations.delete(t),this.characterOffsets&&this.characterOffsets.delete(t)})}clearAllAnimations(){this.characterAnimations.clear(),this.characterOffsets.clear()}}class v{constructor(t=10,e=5){this.poolSize=t,this.maxConcurrent=e,this.pools=new Map,this.activeAudio=new Map}createPool(t){const e=[];for(let a=0;a<this.poolSize;a++){const a=new Audio(t);a.preload="auto",a.addEventListener("ended",()=>this.returnToPool(t,a)),a.addEventListener("pause",()=>this.returnToPool(t,a)),e.push(a)}return e}returnToPool(t,e){const a=this.activeAudio.get(t);if(a){const t=a.indexOf(e);t>-1&&a.splice(t,1)}const s=this.pools.get(t);s&&!s.includes(e)&&s.push(e)}getAudio(t){const e=this.activeAudio.get(t)||[];if(e.length>=this.maxConcurrent)return null;let a=this.pools.get(t);a||(a=this.createPool(t),this.pools.set(t,a),this.activeAudio.set(t,[]));const s=a.pop();return s?(s.currentTime=0,s.volume=1,s.playbackRate=1,s.loop=!1,e.push(s),s):null}preloadSound(t){if(!this.pools.has(t)){const e=this.createPool(t);this.pools.set(t,e),this.activeAudio.set(t,[])}}}class R{constructor(t,e){this.roomManager=t,this.settingsManager=e,this.audioPool=new v(P,C)}playAudio(t){const e=this.audioPool.getAudio(t.src);if(!e)return void console.warn(`Audio pool exhausted or max concurrent reached for: ${t.src}`);let a=1;t.volume&&(a=t.volume.min+Math.random()*(t.volume.max-t.volume.min));const s=t.spatial?.blend??0;if(s>0&&t.spatial?.pos){const e=t.spatial.pos.x-t.listener.x,i=t.spatial.pos.y-t.listener.y,r=Math.sqrt(e*e+i*i);let o;if(t.spatial.rolloff){const e=t.spatial.rolloff.type||"linear",a=t.spatial.rolloff.factor,s=t.spatial.rolloff.distance;if("logarithmic"===e){const t=s*a;if(r<t)o=1;else{const e=(r-t)/(s-t);o=Math.max(0,1-Math.pow(e,.5))}}else o=Math.max(0,1-r/s*a)}else{const t=Math.max(d,y);o=Math.max(0,1-r/t)}a*=1-s+o*s}const i=t.output?.toLowerCase()||null,r=this.settingsManager.getSettings().audio.mixer;if(i&&void 0!==r[i]&&(a*=r[i]),a*=this.settingsManager.getSettings().audio.mixer.master,e.volume=Math.max(0,Math.min(1,a)),t.pitch){const a=t.pitch.min+Math.random()*(t.pitch.max-t.pitch.min);e.playbackRate=Math.max(.25,Math.min(4,a))}void 0!==t.loop&&(e.loop=t.loop);let o=0;t.delay&&(o=1e3*(t.delay.min+Math.random()*(t.delay.max-t.delay.min))),setTimeout(()=>{e.play().catch(t=>{console.warn("Audio play failed:",t)})},o)}playAudioNetwork(t){this.playAudio(t),this.roomManager.sendMessage(JSON.stringify({type:"play-audio",params:t}))}preloadAudioAssets(t,e){this.preloadSFX(t,e)}preloadSFX(t,e){for(const a in t){const s=t[a];Array.isArray(s)?s.forEach(t=>{"string"==typeof t&&t.endsWith(e)&&this.audioPool.preloadSound(t)}):"object"==typeof s&&null!==s&&this.preloadSFX(s,e)}}}class T{constructor(){this.WEAPON={GLOCK:["/assets/img/weapon/glock/body.png","/assets/img/weapon/glock/slide.png"],KNIFE:["/assets/img/weapon/melee/knife_00.png"]},this.BODY={DEFAULT:"/assets/img/char/default/body.png"},this.HEAD={DEFAULT:"/assets/img/char/default/head.png"},this.HEADWEAR={DEFAULT:"/assets/img/char/default/headwear.png"},this.UPGRADES={KINETIC_BRAIN:"/assets/img/char/upgrades/kineticbrain.png"},this.CHARACTER_DECALS={DEFAULT:{BLOOD:["/assets/img/effects/blood/blood_00.png","/assets/img/effects/blood/blood_01.png","/assets/img/effects/blood/blood_02.png","/assets/img/effects/blood/blood_03.png","/assets/img/effects/blood/blood_04.png"],GORE:["/assets/img/effects/gore/gore_00.png","/assets/img/effects/gore/gore_01.png","/assets/img/effects/gore/gore_02.png","/assets/img/effects/gore/gore_03.png","/assets/img/effects/gore/gore_04.png","/assets/img/effects/gore/gore_05.png","/assets/img/effects/gore/gore_06.png","/assets/img/effects/gore/gore_07.png","/assets/img/effects/gore/gore_08.png","/assets/img/effects/gore/gore_09.png","/assets/img/effects/gore/gore_10.png","/assets/img/effects/gore/gore_11.png","/assets/img/effects/gore/gore_12.png","/assets/img/effects/gore/gore_13.png"]}}}}class w{constructor(t){this.charConfig=t}getCharacterAsset(t,e){switch(t){case"BODY":return this.charConfig.BODY[e]||this.charConfig.BODY.DEFAULT;case"WEAPON":return this.charConfig.WEAPON[e]||this.charConfig.WEAPON.GLOCK;case"HEAD":return this.charConfig.HEAD[e]||this.charConfig.HEAD.DEFAULT;case"HEADWEAR":return this.charConfig.HEADWEAR[e]||this.charConfig.HEADWEAR.DEFAULT;case"UPGRADES":return e;default:throw new Error(`Unknown character layer: ${t}`)}}getUpgradeVisual(t){const e=t.toUpperCase();return this.charConfig.UPGRADES[e]||null}}class N{constructor(t,e){this.roomManager=t,this.ui=e}sendChatMessage(t){if(!this.ui.chatInput||!this.ui.chatInput.value.trim())return;const e=this.ui.chatInput.value.trim();e.length>200?alert("Message too long! Max 200 characters."):(this.roomManager.sendMessage(JSON.stringify({type:"chat-message",message:e,timestamp:Date.now()})),this.displayChatMessage(t,e,!0),this.ui.chatInput.value="")}displayChatMessage(t,e,a=!1){if(!this.ui.chatMessages)return;const s=document.createElement("div");s.className="chat_message "+(a?"own":"other");const i=document.createElement("span");i.className="sender",i.textContent=a?"You:":`${t}:`;const r=document.createElement("span");for(r.className="content",r.textContent=e,s.appendChild(i),s.appendChild(r),this.ui.chatMessages.appendChild(s),this.ui.chatMessages.scrollTop=this.ui.chatMessages.scrollHeight;this.ui.chatMessages.children.length>100;)this.ui.chatMessages.removeChild(this.ui.chatMessages.firstChild)}clearChat(){this.ui.chatMessages&&(this.ui.chatMessages.innerHTML=""),this.ui.chatInput&&(this.ui.chatInput.value="")}}class O{constructor(t){this.settingsManager=t,this.activeKeys=new Set,this.gamepadKeys=new Set,this.previousKeys=new Set,this.mousePos={x:0,y:0},this.gamepadConnected=!1,this.gamepadConnectionEnabled=!0,this.gamepadRAxis=null,this.initGamepad()}held(t){return this.activeKeys.has(t)}triggered(t){return this.activeKeys.has(t)&&!this.previousKeys.has(t)}getActiveKeys(){return this.activeKeys}addKey(t){this.activeKeys.add(t)}removeKey(t){this.activeKeys.delete(t)}clearActiveKeys(){this.activeKeys.clear()}updatePreviousKeys(){this.previousKeys=new Set(this.activeKeys)}getMousePos(){return this.mousePos}setMousePos(t){this.mousePos.x=t.x,this.mousePos.y=t.y}initGamepad(){window.addEventListener("gamepadconnected",()=>{console.log("Gamepad connected!"),this.gamepadConnected=!0}),window.addEventListener("gamepaddisconnected",()=>{console.log("Gamepad disconnected!"),this.gamepadConnected=!1})}pollGamepad(){if(!this.gamepadConnected)return;const t=navigator.getGamepads()[0];if(!t)return;const e=this.settingsManager.getSettings().controls.keybinds,a=this.settingsManager.getSettings().controls.gamepad;this.gamepadKeys.forEach(t=>this.activeKeys.delete(t)),this.gamepadKeys.clear();const s=t.axes[0],i=t.axes[1];s>.2&&(this.activeKeys.add(e.moveRight),this.gamepadKeys.add(e.moveRight)),s<-.2&&(this.activeKeys.add(e.moveLeft),this.gamepadKeys.add(e.moveLeft)),i>.2&&(this.activeKeys.add(e.moveDown),this.gamepadKeys.add(e.moveDown)),i<-.2&&(this.activeKeys.add(e.moveUp),this.gamepadKeys.add(e.moveUp)),t.buttons[a.melee].pressed&&(this.activeKeys.add(e.melee),this.gamepadKeys.add(e.melee)),t.buttons[a.dash].pressed&&(this.activeKeys.add(e.dash),this.gamepadKeys.add(e.dash)),t.buttons[a.reload].pressed&&(this.activeKeys.add(e.reload),this.gamepadKeys.add(e.reload)),t.buttons[a.attack].pressed&&(this.activeKeys.add(e.attack),this.gamepadKeys.add(e.attack)),t.buttons[a.sprint].pressed&&(this.activeKeys.add(e.sprint),this.gamepadKeys.add(e.sprint));const r=t.axes[2],o=t.axes[3],n=Math.sqrt(r*r+o*o);this.gamepadRAxis=n>.2?Math.atan2(o,r)+Math.PI/2:null}getGamepadRAxis(){return this.gamepadRAxis}}class L{constructor(t,e,a,s,i){this.ammoReservesUIController=t,this.objectsManager=e,this.playerState=a,this.roomManager=s,this.userId=i}checkCollisions(t){this.playerState.myPlayer.transform.pos.x=Math.max(15,Math.min(785,this.playerState.myPlayer.transform.pos.x)),this.playerState.myPlayer.transform.pos.y=Math.max(15,Math.min(585,this.playerState.myPlayer.transform.pos.y)),this.checkObjectCollisions(t),this.checkPlayersCollisions(t)}checkObjectCollisions(t){if(!this.collisionsEnabled(this.playerState.myPlayer))return;const e=this.getPlayerCollider(this.playerState.myPlayer,5);this.objectsManager.ammoBoxes.forEach((t,a)=>{if(t.isOpen)return;const s=this.playerState.myPlayer.transform.pos.x-t.transform.pos.x,i=this.playerState.myPlayer.transform.pos.y-t.transform.pos.y;if(Math.sqrt(s*s+i*i)<=e){const e=this.playerState.myPlayer.actions.primary.magazine.currentReserve,s=this.playerState.myPlayer.actions.primary.magazine.maxReserve,i=Math.min(t.ammoAmount,s-e);if(i>0){this.playerState.myPlayer.actions.primary.magazine.currentReserve+=i,this.ammoReservesUIController.spawnAmmoInReserveUI(i),console.log(`Picked up ammo box! +${i} bullets. Inventory: ${this.playerState.myPlayer.actions.primary.magazine.currentReserve}/${this.playerState.myPlayer.actions.primary.magazine.maxReserve}`);const e=Math.random()*Math.PI*2,s=2+3*Math.random();t.isOpen=!0,t.lid.velocity={x:Math.cos(e)*s,y:Math.sin(e)*s},t.lid.torque=.3*(Math.random()-.5),this.roomManager.sendMessage(JSON.stringify({type:"ammo-pickup",ammoBoxId:a,playerId:this.userId,boxState:{isOpen:!0,lid:t.lid}}))}}})}checkPlayersCollisions(t){this.collisionsEnabled(this.playerState.myPlayer)&&this.playerState.players.forEach(t=>{if(!this.collisionsEnabled(t))return;const e=this.playerState.myPlayer.transform.pos.x-t.transform.pos.x,a=this.playerState.myPlayer.transform.pos.y-t.transform.pos.y,s=Math.sqrt(e*e+a*a),i=this.getPlayerCollider(this.playerState.myPlayer)+this.getPlayerCollider(t);if(s<i&&s>.01){const t=i-s,r=e/s*t,o=a/s*t;this.playerState.myPlayer.transform.pos.x+=r,this.playerState.myPlayer.transform.pos.y+=o}})}getPlayerCollider(t,e){let a=t.stats.size/4;return e&&e>0&&(a=t.stats.size/4+e),a}collisionsEnabled(t){return!(t.stats.health.value<=0||t.flags.hidden&&t.flags.invulnerable)}}class B{constructor(t,e,a){this.roomManager=t,this.ui=e,this.utility=a,this.decals=new Map}createDecal(t,e,s,i=a){this.generateDecal(t,e,s,i),this.roomManager.sendMessage(JSON.stringify({type:"add-decal",decalId:s,x:t,y:e,params:i}))}createDecalNetwork(t,e,a,s){this.decals.has(a)||this.generateDecal(t,e,a,s)}generateDecal(t,e,a,s){if(!this.ui.decalCtx)return;if(t<0||t>d||e<0||e>y)return;const i=s.RADIUS.MIN+Math.random()*(s.RADIUS.MAX-s.RADIUS.MIN),r=s.DENSITY.MIN+Math.random()*(s.DENSITY.MAX-s.DENSITY.MIN),o=s.OPACITY.MIN+Math.random()*(s.OPACITY.MAX-s.OPACITY.MIN),n=Math.floor(i*i*Math.PI*r),l=this.utility.hexToRgb(s.COLOR);if(l){this.ui.decalCtx.save(),this.ui.decalCtx.globalCompositeOperation="source-over";for(let a=0;a<n;a++){const a=Math.random()*Math.PI*2,r=Math.random()*i,n=t+Math.cos(a)*r,h=e+Math.sin(a)*r;if(n<0||n>=d||h<0||h>=y)continue;const m=o+(Math.random()-.5)*s.VARIATION,c=Math.max(.05,Math.min(.6,m));this.ui.decalCtx.fillStyle=`rgba(${l.r}, ${l.g}, ${l.b}, ${c})`,this.ui.decalCtx.fillRect(Math.floor(n),Math.floor(h),1,1)}this.ui.decalCtx.restore(),this.decals.set(a,{params:s,pos:{x:t,y:e}})}else console.error(`Invalid hex color: ${s.COLOR}`)}}class D{constructor(t,e,a,s,i,r,o,n,l,h){this.animator=t,this.chatManager=e,this.controlsManager=a,this.gameState=s,this.lobbyManager=i,this.roomController=r,this.playerState=o,this.settingsManager=n,this.ui=l,this.userId=h}initEventListeners(){this.ui.canvas&&this.ui.hostButton&&this.ui.joinButton&&this.ui.quickplayButton&&this.ui.lobbyLeaveButton&&this.ui.lobbyCodeButton&&this.ui.gameLeaveButton&&this.ui.gameCodeButton&&this.ui.startGameBtn&&this.ui.chatSendBtn&&this.ui.chatInput&&(this.ui.hostButton.addEventListener("click",()=>this.roomController.hostRoom()),this.ui.joinButton.addEventListener("click",()=>this.roomController.joinRoom()),this.ui.quickplayButton.addEventListener("click",()=>this.roomController.quickPlay()),this.ui.lobbyLeaveButton.addEventListener("click",()=>this.roomController.leaveRoom()),this.ui.lobbyCodeButton.addEventListener("click",()=>this.roomController.copyRoomCode()),this.ui.gameLeaveButton.addEventListener("click",()=>this.roomController.leaveRoom()),this.ui.gameCodeButton.addEventListener("click",()=>this.roomController.copyRoomCode()),this.ui.startGameBtn.addEventListener("click",()=>this.onStartButtonClick()),this.ui.chatSendBtn.addEventListener("click",()=>this.chatManager.sendChatMessage(this.userId)),this.ui.chatInput.addEventListener("keypress",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.chatManager.sendChatMessage(this.userId))}),this.ui.chatInput.addEventListener("focus",()=>{this.controlsManager.clearActiveKeys(),this.playerState.canShoot=!1,this.playerState.isSprinting=!1,this.playerState.isDashing=!1,this.playerState.isBurstActive=!1,this.playerState.currentBurstShot=0}),this.ui.chatInput.addEventListener("blur",()=>{this.controlsManager.clearActiveKeys(),this.playerState.canShoot=!0,this.playerState.isSprinting=!1,this.playerState.isDashing=!1}),this.ui.settingsButton?.addEventListener("click",()=>{this.ui.showSettingsPage()}),this.ui.settingsCloseButton?.addEventListener("click",()=>{this.ui.hideSettingsPage()}),window.addEventListener("contextmenu",t=>{t.preventDefault()}),document.addEventListener("keydown",t=>this.onKeyDown(t)),document.addEventListener("keyup",t=>this.onKeyUp(t)),document.addEventListener("mouseup",t=>this.onMouseUp(t)),document.addEventListener("mousemove",t=>this.onMouseMove(t)),this.ui.canvas.addEventListener("mousedown",t=>this.onMouseDown(t)),this.ui.switchSettingsPage("sound"),this.ui.controlsTab?.addEventListener("click",()=>{this.ui.switchSettingsPage("controls")}),this.ui.graphicsTab?.addEventListener("click",()=>{this.ui.switchSettingsPage("graphics")}),this.ui.soundTab?.addEventListener("click",()=>{this.ui.switchSettingsPage("sound")}),this.ui.controlsBody?.addEventListener("click",()=>{this.ui.controlsBody?.classList.contains("settings_page_hidden")&&this.ui.switchSettingsPage("controls")}),this.ui.graphicsBody?.addEventListener("click",()=>{this.ui.graphicsBody?.classList.contains("settings_page_hidden")&&this.ui.switchSettingsPage("graphics")}),this.ui.soundBody?.addEventListener("click",()=>{this.ui.soundBody?.classList.contains("settings_page_hidden")&&this.ui.switchSettingsPage("sound")}),this.initAudioSliders())}onKeyDown(t){if(this.ui.chatInput===document.activeElement)return;if(!this.gameState.gameInProgress||this.gameState.isPaused)return;const e=t.key.toLowerCase(),a=this.settingsManager.getSettings().controls.keybinds;Object.values(a).includes(e)&&(t.preventDefault(),this.controlsManager.addKey(e))}onKeyUp(t){if(this.ui.chatInput===document.activeElement)return;if(!this.gameState.gameInProgress)return;const e=t.key.toLowerCase(),a=this.settingsManager.getSettings().controls.keybinds;Object.values(a).includes(e)&&(t.preventDefault(),this.controlsManager.removeKey(e))}onMouseDown(t){this.ui.chatInput!==document.activeElement&&this.gameState.gameInProgress&&!this.gameState.isPaused&&this.ui.canvas&&(0===t.button?(this.updateMouse(t),this.controlsManager.addKey("mouse1")):1===t.button?this.controlsManager.addKey("mouse3"):2===t.button&&(this.updateMouse(t),this.controlsManager.addKey("mouse2")))}onMouseUp(t){this.ui.chatInput!==document.activeElement&&this.gameState.gameInProgress&&(0===t.button?this.controlsManager.removeKey("mouse1"):1===t.button?this.controlsManager.addKey("mouse3"):2===t.button&&this.controlsManager.removeKey("mouse2"))}onMouseMove(t){if(this.ui.chatInput===document.activeElement)return;if(!this.gameState.gameInProgress||this.gameState.isPaused)return;this.updateMouse(t);const e=this.controlsManager.getMousePos(),a=e.x-this.playerState.myPlayer.transform.pos.x,s=e.y-this.playerState.myPlayer.transform.pos.y,i=Math.atan2(s,a)+Math.PI/2;this.animator.rotateCharacterPart(this.userId,i)}updateMouse(t){if(this.ui.chatInput===document.activeElement)return;if(!this.ui.canvas)return;const e=this.ui.canvas.getBoundingClientRect(),a=t.clientX-e.left,s=t.clientY-e.top;this.controlsManager.setMousePos({x:a,y:s})}onStartButtonClick(){const t=new CustomEvent("customEvent_startGame");window.dispatchEvent(t)}initAudioSliders(){[{slider:this.ui.masterSlider,fill:this.ui.masterFill,value:this.ui.masterValue,channel:"master"},{slider:this.ui.interfaceSlider,fill:this.ui.interfaceFill,value:this.ui.interfaceValue,channel:"interface"},{slider:this.ui.musicSlider,fill:this.ui.musicFill,value:this.ui.musicValue,channel:"music"},{slider:this.ui.sfxSlider,fill:this.ui.sfxFill,value:this.ui.sfxValue,channel:"sfx"},{slider:this.ui.voiceSlider,fill:this.ui.voiceFill,value:this.ui.voiceValue,channel:"voice"}].forEach(({slider:t,fill:e,value:a,channel:s})=>{t&&e&&a&&t.addEventListener("mousedown",i=>{const r=i=>{const r=this.ui.calculateSliderValue(t,i.clientX);this.ui.updateSettingsSlider(e,a,r),this.settingsManager.updateSettings({audio:{mixer:{[s]:r}}})},o=()=>{document.removeEventListener("mousemove",r),document.removeEventListener("mouseup",o)};r(i),document.addEventListener("mousemove",r),document.addEventListener("mouseup",o),i.preventDefault()})})}initKeybindListeners(){const t=this.settingsManager.getSettings().controls;this.ui.initKeybindsInterface(t,(t,e,a)=>this.onKeybindChange(t,e,a))}onKeybindChange(t,e,a){if("keybind"===e){this.settingsManager.updateSettings({controls:{keybinds:{[t]:a}}});const e=document.getElementById(`${t}Keybind`);e&&(e.textContent=" "===a?"SPACE":a.toUpperCase())}else{this.settingsManager.updateSettings({controls:{gamepad:{[t]:a}}});const e=document.getElementById(`${t}Gamepad`);if(e){const t=Object.keys(u).find(t=>"number"==typeof u[t]&&u[t]===a);e.textContent=t||a.toString()}}}}class k{constructor(){this.isPaused=!1,this.gameInProgress=!1,this.gameMaxWins=g.MAX_WINS,this.gameMaxPlayers=g.MAX_PLAYERS}}class _{constructor(t,e,a){this.utility=t,this.ui=e,this.roomManager=a,this.inLobby=!1,this.lobbyPlayers=new Map}showLobbyControls(t,e,a,s,i,r,o,n,l){this.ui.updateDisplay(r,"lobby",n),this.lobbyPlayers.set(l,{id:l,color:o.color,isHost:a}),this.setupLobbyOptions(t,e,a,s,i);const h={inputId:"winsInput",value:e},m={toggleId:"privateToggle",value:s},c={toggleId:"upgradesToggle",value:i};this.utility.setToggle(m),this.utility.setToggle(c),this.utility.setInput(h),this.ui.displayLobbyPlayers(a,r,l),this.ui.updateHostDisplay(a,r)}setupLobbyOptions(t,e,a,s,i){this.setupLobbyToggle("privateToggle",a,"privateRoom",()=>s,t=>s=t),this.setupLobbyToggle("upgradesToggle",a,"upgradesEnabled",()=>i,t=>i=t),this.setupLobbyInput("winsInput",a,"maxWins",()=>e,t=>e=t),this.setupLobbyInput("playersInput",a,"maxPlayers",()=>t,e=>t=e)}setupLobbyToggle(t,e,a,s,i){const r=this.ui[t];if(!r)return;const o=`${t}Handler`;this[o]&&r.removeEventListener("click",this[o]);const n=()=>{if(!e)return;const r=!s();i(r);const o={toggleId:t,value:r};this.utility.setToggle(o),this.roomManager.sendMessage(JSON.stringify({type:"lobby-options",[a]:r})),console.log(`${a} changed to: ${r}`)};this[o]=n,r.addEventListener("click",n)}setupLobbyInput(t,e,a,s,i){const r=this.ui[t];if(!r)return;const o=`${t}Handler`;this[o]&&r.removeEventListener("change",this[o]);const n=()=>{if(!e)return;const o=parseInt(r.value);if(isNaN(o)||o<1)return void(r.value=s().toString());i(o);const n={inputId:t,value:o};this.utility.setInput(n),this.roomManager.sendMessage(JSON.stringify({type:"lobby-options",[a]:o})),console.log(`${a} changed to: ${o}`)};this[o]=n,r.addEventListener("change",n)}syncLobbyOptions(t){this.syncOption(t,"privateRoom","isPrivateRoom","privateToggle",this.utility.setToggle.bind(this.utility),"Lobby privacy",t=>t?"Private":"Public"),this.syncOption(t,"maxWins","gameMaxWins","winsInput",this.utility.setInput.bind(this.utility),"Game max wins"),this.syncOption(t,"maxPlayers","gameMaxPlayers","playersInput",this.utility.setInput.bind(this.utility),"Game max players"),this.syncOption(t,"upgradesEnabled","isUpgradesEnabled","upgradesToggle",this.utility.setToggle.bind(this.utility),"Game upgrades toggled")}syncOption(t,e,a,s,i,r,o){if(void 0===t[e])return;this[a]=t[e],i(s.includes("Input")?{inputId:s,value:t[e]}:{toggleId:s,value:t[e]});const n=o?o(t[e]):t[e];console.log(`${r} synced to: ${n}`)}promotePlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"promote-player",targetPlayerId:t}))}kickPlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"kick-player",targetPlayerId:t}))}}class U{constructor(t,e,a,s,i,r,o,n,l){this.charConfig=t,this.collisionsManager=e,this.decalsManager=a,this.playerState=s,this.renderingManager=i,this.roomManager=r,this.ui=o,this.userId=n,this.utility=l,this.particles=new Map,this.emitters=new Map,this.shrapnel=new Map}createParticles(t,e,a,s,i){this.generateParticles(t,e,a,s,i),this.roomManager.sendMessage(JSON.stringify({type:"add-particles",particleId:a,x:t,y:e,params:s,direction:i}))}generateParticles(t,e,a,s,i){const r=Math.floor(s.COUNT.MIN+Math.random()*(s.COUNT.MAX-s.COUNT.MIN));for(let o=0;o<r;o++){const r=s.LIFETIME.MIN+Math.random()*(s.LIFETIME.MAX-s.LIFETIME.MIN),n=s.SPEED.MIN+Math.random()*(s.SPEED.MAX-s.SPEED.MIN),l=s.SIZE.MIN+Math.random()*(s.SIZE.MAX-s.SIZE.MIN),h=s.OPACITY.MIN+Math.random()*(s.OPACITY.MAX-s.OPACITY.MIN),m=s.TORQUE.MIN+Math.random()*(s.TORQUE.MAX-s.TORQUE.MIN),c=s.NOISE?s.NOISE.STRENGTH.MIN+Math.random()*(s.NOISE.STRENGTH.MAX-s.NOISE.STRENGTH.MIN):0,d=s.NOISE?s.NOISE.SCALE.MIN+Math.random()*(s.NOISE.SCALE.MAX-s.NOISE.SCALE.MIN):0,y=s.SIZE_OVER_LIFETIME?s.SIZE_OVER_LIFETIME.MIN+Math.random()*(s.SIZE_OVER_LIFETIME.MAX-s.SIZE_OVER_LIFETIME.MIN):0;let p;p=i?Math.atan2(i.y,i.x)+(Math.random()-.5)*s.SPREAD:Math.random()*Math.PI*2;const u={age:0,collide:s.COLLIDE,color:s.COLOR,fade:s.FADE,hasCollided:!1,id:`${a}_${o}`,initialSize:l,lifetime:r,maxOpacity:h,noiseScale:d,noiseStrength:c,opacity:h,paint:s.PAINT,pos:{x:t,y:e},size:l,stain:s.STAIN,torque:m,rotation:Math.random()*Math.PI*2,sizeOverLifetime:y,velocity:{x:Math.cos(p)*n,y:Math.sin(p)*n}};this.particles.set(u.id,u)}}updateParticles(t){const e=[];this.particles.forEach((a,s)=>{if(a.noiseStrength>0&&a.noiseScale>0){const e=.001*Date.now(),s=this.utility.simplexNoise2D(a.pos.x/a.noiseScale,e),i=this.utility.simplexNoise2D(a.pos.y/a.noiseScale,e+100);a.velocity.x+=s*a.noiseStrength*t,a.velocity.y+=i*a.noiseStrength*t}if(a.sizeOverLifetime>0){const t=a.age/a.lifetime;a.size=a.initialSize*(1+t*a.sizeOverLifetime)}if(a.pos.x+=a.velocity.x*t,a.pos.y+=a.velocity.y*t,a.age+=16.67*t,a.rotation+=a.torque*Math.PI/180*t,a.fade){const t=a.age/a.lifetime;a.opacity=a.maxOpacity*(1-t)}if(a.hasCollided&&a.stain){this.stampParticle(a);const t=(a.age-(a.lifetime-.5*a.lifetime))/(.5*a.lifetime);t>0&&(a.size=Math.max(.5,a.size*(1-.1*t)),a.opacity=a.opacity*(1-t))}if(a.age>=a.lifetime||a.pos.x<-10||a.pos.x>810||a.pos.y<-10||a.pos.y>610){if(a.collide&&a.age>=a.lifetime&&a.pos.x>=0&&a.pos.x<=d&&a.pos.y>=0&&a.pos.y<=y&&!a.hasCollided){a.hasCollided=!0;const t=.875+.1*Math.random();a.velocity.x*=1-t,a.velocity.y*=1-t;const e=.5*a.lifetime;return void(a.lifetime+=e)}a.paint&&!a.stain&&a.age>=a.lifetime&&a.pos.x>=0&&a.pos.x<=d&&a.pos.y>=0&&a.pos.y<=y&&this.stampParticle(a),e.push(s)}}),e.forEach(t=>this.particles.delete(t))}drawParticles(){this.ui.ctx&&this.particles.forEach(t=>{const e=this.utility.hexToRgb(t.color);e&&this.ui.ctx&&(this.ui.ctx.save(),this.ui.ctx.globalAlpha=t.opacity,0!==t.torque?(this.ui.ctx.translate(t.pos.x+t.size/2,t.pos.y+t.size/2),this.ui.ctx.rotate(t.rotation),this.ui.ctx.fillStyle=`rgb(${e.r}, ${e.g}, ${e.b})`,this.ui.ctx.fillRect(-t.size/2,-t.size/2,t.size,t.size)):(this.ui.ctx.fillStyle=`rgb(${e.r}, ${e.g}, ${e.b})`,this.ui.ctx.fillRect(Math.floor(t.pos.x),Math.floor(t.pos.y),t.size,t.size)),this.ui.ctx.restore())})}stampParticle(t){if(!this.ui.decalCtx)return;const e=this.utility.hexToRgb(t.color);if(!e)return;this.ui.decalCtx.save(),this.ui.decalCtx.globalCompositeOperation="source-over",0!==t.torque?(this.ui.decalCtx.translate(t.pos.x+t.size/2,t.pos.y+t.size/2),this.ui.decalCtx.rotate(t.rotation),this.ui.decalCtx.fillStyle=`rgba(${e.r}, ${e.g}, ${e.b}, ${t.opacity})`,this.ui.decalCtx.fillRect(-t.size/2,-t.size/2,t.size,t.size)):(this.ui.decalCtx.fillStyle=`rgba(${e.r}, ${e.g}, ${e.b}, ${t.opacity})`,this.ui.decalCtx.fillRect(Math.floor(t.pos.x),Math.floor(t.pos.y),t.size,t.size)),this.ui.decalCtx.restore();const a=`stamp_${Date.now()}`;this.decalsManager.decals.set(a,{params:null,pos:{x:t.pos.x,y:t.pos.y}})}createEmitter(t){this.generateEmitter(t);const e={id:t.id,interval:t.interval,lifetime:t.lifetime,offset:{x:t.offset.x,y:t.offset.y},pos:{x:t.pos.x,y:t.pos.y},playerId:t.playerId};this.roomManager.sendMessage(JSON.stringify(e)),console.log(`Emitter created on ${t.playerId} for ${t.lifetime}ms`)}generateEmitter(t){const e=t.pos.x-t.offset.x,a=t.pos.y-t.offset.y,s=Math.atan2(a,e);this.emitters.set(t.id,{age:0,direction:s,emissionInterval:t.interval,lastEmission:0,lifetime:t.lifetime,offset:{x:e,y:a},playerId:t.playerId})}updateEmitters(t){const e=[];this.emitters.forEach((a,r)=>{a.age+=16.67*t;const o=a.playerId===this.userId?this.playerState.myPlayer:this.playerState.players.get(a.playerId);if(!o||o.stats.health.value<=0)return void e.push(r);const n=o.transform.pos.x+a.offset.x,l=o.transform.pos.y+a.offset.y;if(a.age>=a.lastEmission+a.emissionInterval){const t=.6*Math.PI,e=(Math.random()-.5)*t,s=a.direction+e,o=3,h=4*(Math.random()-.5),m=Math.max(.5,o+h);this.generateParticles(n+8*(Math.random()-.5),l+8*(Math.random()-.5),`emitter_particles_${r}_${a.age}`,i,{x:Math.cos(s)*m,y:Math.sin(s)*m}),a.lastEmission=a.age,a.emissionInterval=120+180*Math.random()}a.age>=a.lifetime&&(this.decalsManager.generateDecal(n,l,`emitter_decal_${r}`,s),e.push(r))}),e.forEach(t=>this.emitters.delete(t))}generateGore(t){const e=[...this.charConfig.CHARACTER_DECALS.DEFAULT.GORE];for(let a=0;a<t.gore.amount&&e.length>0;a++){const s=this.utility.getRandomInArray(e);e.splice(e.indexOf(s),1);const i=this.utility.getRandomNum(0,2*Math.PI),r=this.utility.getRandomNum(0,t.radius),o={type:"gore",src:s,transform:{pos:{x:t.pos.x+Math.cos(i)*r,y:t.pos.y+Math.sin(i)*r},rot:this.utility.getRandomNum(0,2*Math.PI)},scale:this.utility.getRandomNum(.65,1.05)},n=`death_gore_${t.ownerId}_${Date.now()}_${a}`;this.stampGore(o),this.decalsManager.decals.set(n,{params:null,pos:{x:o.transform.pos.x,y:o.transform.pos.y}})}const a=[...this.charConfig.CHARACTER_DECALS.DEFAULT.BLOOD];for(let e=0;e<t.blood.amount&&a.length>0;e++){const s=this.utility.getRandomInArray(a);a.splice(a.indexOf(s),1);const i=this.utility.getRandomNum(0,2*Math.PI),r=this.utility.getRandomNum(0,.7*t.radius),o={type:"blood",src:s,transform:{pos:{x:t.pos.x+Math.cos(i)*r,y:t.pos.y+Math.sin(i)*r},rot:this.utility.getRandomNum(0,2*Math.PI)},scale:this.utility.getRandomNum(1.25,1.45)},n=`death_blood_${t.ownerId}_${Date.now()}_${e}`;this.stampGore(o),this.decalsManager.decals.set(n,{params:null,pos:{x:o.transform.pos.x,y:o.transform.pos.y}})}}stampGore(t){if(!this.ui.decalCtx)return;let e=this.renderingManager.characterImages.get(t.src);if(!e&&(e=new Image,e.src=t.src,this.renderingManager.characterImages.set(t.src,e),!e.complete))return void(e.onload=()=>{this.stampGore(t)});if(!e.complete||0===e.naturalWidth)return;this.ui.decalCtx.save(),this.ui.decalCtx.translate(t.transform.pos.x,t.transform.pos.y),this.ui.decalCtx.rotate(t.transform.rot);const a=32*t.scale;this.ui.decalCtx.drawImage(e,-a/2,-a/2,a,a),this.ui.decalCtx.restore()}spawnShrapnel(t){const a=[];for(let s=0;s<t.amount;s++){const i=this.utility.getRandomNum(0,2*Math.PI),r=this.utility.getRandomNum(t.speed.min,t.speed.max),o=this.utility.getRandomNum(t.lifetime.min,t.lifetime.max),n=this.utility.getRandomNum(t.size.min,t.size.max),l=this.utility.getRandomNum(t.torque.min,t.torque.max)*(Math.PI/180),h={id:this.utility.generateUID(e),image:t.images[s],pos:{x:t.pos.x,y:t.pos.y},velocity:{x:Math.cos(i)*r,y:Math.sin(i)*r},rotation:this.utility.getRandomNum(0,2*Math.PI),rotationSpeed:l,size:n,age:0,lifetime:o,ownerId:this.userId,damage:t.damage};a.push(h),this.shrapnel.set(h.id,h)}this.roomManager.sendMessage(JSON.stringify({type:"shrapnel-spawn",pieces:a})),console.log(`Spawned ${a.length} shrapnel pieces`)}generateShrapnel(t){t.forEach(t=>{this.shrapnel.set(t.id,t)}),console.log(`Received ${t.length} shrapnel pieces from network`)}updateShrapnel(t){if(0===this.shrapnel.size)return;const e=[];this.shrapnel.forEach((a,s)=>{a.pos.x+=a.velocity.x*t,a.pos.y+=a.velocity.y*t,a.rotation+=a.rotationSpeed*t,a.age+=16.67*t,a.velocity.x*=.98,a.velocity.y*=.98,a.ownerId===this.userId&&this.playerState.players.forEach((t,i)=>{if(t.stats.health.value>0){const o=a.pos.x-t.transform.pos.x,n=a.pos.y-t.transform.pos.y;if(Math.sqrt(o*o+n*n)<=this.collisionsManager.getPlayerCollider(t,a.size)){const o=Math.max(0,t.stats.health.value-a.damage);if(t.stats.health.value=o,o<=0){const t=this.ui.leaderboard.get(this.userId);t&&t.kills++;const e=this.ui.leaderboard.get(i);e&&e.deaths++,this.ui.updateLeaderboardDisplay(this.userId),window.dispatchEvent(new CustomEvent("customEvent_checkRoundEnd"))}e.push(s),console.log(`Shrapnel hit ${i} for ${a.damage} damage`);const n={x:-a.velocity.x/Math.sqrt(a.velocity.x**2+a.velocity.y**2),y:-a.velocity.y/Math.sqrt(a.velocity.x**2+a.velocity.y**2)};this.createParticles(a.pos.x,a.pos.y,`blood_${s}`,r,n),this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:i,shooterId:this.userId,damage:a.damage,newHealth:o,wasKill:o<=0}))}}}),(a.age>=a.lifetime||a.pos.x<0||a.pos.x>d||a.pos.y<0||a.pos.y>y)&&(a.pos.x>=0&&a.pos.x<=d&&a.pos.y>=0&&a.pos.y<=y&&this.stampShrapnel(a),e.push(s))}),e.forEach(t=>this.shrapnel.delete(t))}drawShrapnel(){this.ui.ctx&&0!==this.shrapnel.size&&this.shrapnel.forEach(t=>{if(!this.ui.ctx)return;let e=this.renderingManager.characterImages.get(t.image);(e||(e=new Image,e.src=t.image,this.renderingManager.characterImages.set(t.image,e),e.complete))&&e.complete&&0!==e.naturalWidth&&(this.ui.ctx.save(),this.ui.ctx.translate(t.pos.x,t.pos.y),this.ui.ctx.rotate(t.rotation),this.ui.ctx.drawImage(e,-t.size/2,-t.size/2,t.size,t.size),this.ui.ctx.restore())})}stampShrapnel(t){if(!this.ui.decalCtx)return;let e=this.renderingManager.characterImages.get(t.image);e&&e.complete&&0!==e.naturalWidth&&(this.ui.decalCtx.save(),this.ui.decalCtx.translate(t.pos.x,t.pos.y),this.ui.decalCtx.rotate(t.rotation),this.ui.decalCtx.drawImage(e,-t.size/2,-t.size/2,t.size,t.size),this.ui.decalCtx.restore(),this.decalsManager.decals.set(`shrapnel_${t.id}`,{params:null,pos:{x:t.pos.x,y:t.pos.y}}))}}class j{constructor(t,e,a,s){this.animator=t,this.charManager=e,this.objectsManager=a,this.ui=s,this.characterImages=new Map,this.ammoBoxImages={}}clearCtx(t){t?t.clearRect(0,0,d,y):this.ui.decalCtx&&this.ui.ctx&&(this.ui.ctx.clearRect(0,0,d,y),this.ui.decalCtx.clearRect(0,0,d,y))}drawCharacter(e,a=!1){if(!this.ui.ctx)return;if(e.stats.health.value<=0)return;const s=this._spectralGhosts??(this._spectralGhosts={lastHidden:new Map,flashes:[]}),i=Date.now(),r=s.lastHidden.get(e.id)??!1,o=e.flags.hidden,n=e.unique.includes("spectral_image");!r&&o&&n&&s.flashes.push({x:e.transform.pos.x,y:e.transform.pos.y,t:i,type:"start",playerId:e.id}),r&&!o&&n&&s.flashes.push({x:e.transform.pos.x,y:e.transform.pos.y,t:i,type:"end",playerId:e.id}),s.lastHidden.set(e.id,o);for(const t of s.flashes){if(t.playerId!==e.id)continue;const a=i-t.t;if(a>e.actions.dash.time)continue;const s="start"===t.type?1-a/e.actions.dash.time:a/e.actions.dash.time;this.ui.ctx.save(),this.ui.ctx.globalAlpha=.8*s,this.ui.ctx.globalCompositeOperation="difference",this.ui.ctx.filter="saturate(100) contrast(2)";const r={...e,transform:{...e.transform,pos:{x:t.x,y:t.y}}};this.drawCharacterLayers(r),this.ui.ctx.restore()}if(o)return;this.drawCharacterLayers(e),this.ui.ctx.fillStyle="#fff",this.ui.ctx.font="12px Arial",this.ui.ctx.textAlign="center";const l=a?"You":e.id.substring(0,6);this.ui.ctx.fillText(l,e.transform.pos.x,e.transform.pos.y-t.VISUAL.ID_DISPLAY_OFFSET)}drawCharacterLayers(t){this.drawCharacterLayer(t,"BODY",t.rig.body),this.drawCharacterLayer(t,"WEAPON",t.rig.weapon),this.drawCharacterLayer(t,"HEAD",t.rig.head),this.drawCharacterLayer(t,"HEADWEAR",t.rig.headwear),this.drawUpgradeLayers(t)}drawCharacterLayer(t,e,a){if(!this.ui.ctx)return;const s=this.charManager.getCharacterAsset(e,a);"string"==typeof s?this.drawCharacterPart(t,s,e):Array.isArray(s)&&s.forEach((a,s)=>{this.drawCharacterPart(t,a,e,s)})}drawCharacterPart(t,e,a,s){if(!this.ui.ctx)return;let i=this.characterImages.get(e);if(!i&&(i=new Image,i.src=e,this.characterImages.set(e,i),!i.complete))return;if(!i.complete||0===i.naturalWidth)return;const r=g.CHARACTER_SIZE*(t.stats.size/g.CHARACTER_SIZE),o=`${t.id}_${a}_${s||0}`,n=this.animator.characterOffsets?.get(o)||{x:0,y:0};this.ui.ctx.save(),void 0!==t.transform.rot?(this.ui.ctx.translate(t.transform.pos.x,t.transform.pos.y),this.ui.ctx.rotate(t.transform.rot),this.ui.ctx.translate(n.x,n.y),this.ui.ctx.drawImage(i,-r/2,-r/2,r,r)):this.ui.ctx.drawImage(i,t.transform.pos.x-r/2+n.x,t.transform.pos.y-r/2+n.y,r,r),this.ui.ctx.restore()}drawUpgradeLayers(t){t.unique.forEach(e=>{const a=this.charManager.getUpgradeVisual(e);a&&this.drawCharacterPart(t,a,"UPGRADES")}),t.equipment.forEach(e=>{const a=this.charManager.getUpgradeVisual(e);a&&this.drawCharacterPart(t,a,"UPGRADES")})}drawObjects(){this.ui.ctx&&this.objectsManager.ammoBoxes.forEach(t=>{if(!this.ui.ctx)return;this.ammoBoxImages||(this.ammoBoxImages={});const e=["BASE","BULLETS","LID"];if(e.forEach(t=>{if(!this.ammoBoxImages[t]){const e=new Image;e.src=c[t],this.ammoBoxImages[t]=e}}),!e.every(t=>this.ammoBoxImages[t]?.complete&&this.ammoBoxImages[t]?.naturalWidth>0))return;const a=35,s=t.transform.pos.x,i=t.transform.pos.y;t.isOpen&&(t.lid.velocity.x*=.85,t.lid.velocity.y*=.85,t.lid.torque*=.85,t.lid.pos.x+=t.lid.velocity.x,t.lid.pos.y+=t.lid.velocity.y,t.lid.rot+=t.lid.torque),this.ui.ctx.save(),this.ui.ctx.translate(s,i),this.ui.ctx.rotate(t.transform.rot||0),this.ui.ctx.drawImage(this.ammoBoxImages.BASE,-17.5,-17.5,a,a),t.isOpen||(this.ui.ctx.drawImage(this.ammoBoxImages.BULLETS,-17.5,-17.5,a,a),this.ui.ctx.drawImage(this.ammoBoxImages.LID,-17.5,-17.5,a,a)),this.ui.ctx.restore(),t.isOpen&&(this.ui.ctx.save(),this.ui.ctx.translate(s+t.lid.pos.x,i+t.lid.pos.y),this.ui.ctx.rotate((t.transform.rot||0)+t.lid.rot),this.ui.ctx.drawImage(this.ammoBoxImages.LID,-17.5,-17.5,a,a),this.ui.ctx.restore())})}drawProjectile(t){if(!this.ui.ctx)return;const e=Math.sqrt(t.velocity.x*t.velocity.x+t.velocity.y*t.velocity.y),a=t.velocity.x/e,s=t.velocity.y/e,i=t.transform.pos.x+a*(t.length/2),r=t.transform.pos.y+s*(t.length/2),o=t.transform.pos.x-a*(t.length/2),n=t.transform.pos.y-s*(t.length/2);this.ui.ctx.fillStyle=t.color,this.ui.ctx.strokeStyle=t.color,this.ui.ctx.lineWidth=t.size,this.ui.ctx.lineCap="round",this.ui.ctx.beginPath(),this.ui.ctx.moveTo(o,n),this.ui.ctx.lineTo(i,r),this.ui.ctx.stroke()}}class F{constructor(t,e,a,s,i,r,o,n){this.gameState=t,this.lobbyManager=e,this.playerState=a,this.roomManager=s,this.ui=i,this.upgradeManager=r,this.userId=o,this.wsManager=n}showRoomControls(){this.ui.updateDisplay(this.lobbyManager,"room")}hostRoom(){if(this.wsManager.getWebSocket()){const t=this.roomManager.createRoom();this.playerState.isHost=!0,this.lobbyManager.showLobbyControls(this.gameState.gameMaxPlayers,this.gameState.gameMaxWins,this.playerState.isHost,this.roomManager.isPrivateRoom,this.upgradeManager.isUpgradesEnabled,this.lobbyManager,this.playerState.myPlayer,t,this.userId)}else this.wsManager.connectWebSocket(),setTimeout(()=>{const t=this.roomManager.createRoom();this.playerState.isHost=!0,this.lobbyManager.showLobbyControls(this.gameState.gameMaxPlayers,this.gameState.gameMaxWins,this.playerState.isHost,this.roomManager.isPrivateRoom,this.upgradeManager.isUpgradesEnabled,this.lobbyManager,this.playerState.myPlayer,t,this.userId)},g.CONNECTION_TIMEOUT)}joinRoom(){this.ui.showJoinRoomModal(t=>{this.joinRoomById(t)})}joinRoomById(t){t&&(this.wsManager.getWebSocket()?this.roomManager.joinRoom(t):(this.wsManager.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t)},g.CONNECTION_TIMEOUT)))}quickPlay(){fetch("/quickplay").then(t=>{if(!t.ok)throw new Error("No available rooms");return t.json()}).then(t=>{this.wsManager.getWebSocket()?this.roomManager.joinRoom(t.roomId):(this.wsManager.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t.roomId)},g.CONNECTION_TIMEOUT))}).catch(t=>{this.ui.modal&&this.ui.modalConfirmButton&&this.ui.modalCancelButton&&this.ui.modalContent&&this.ui.modalText&&this.ui.modalInput&&this.ui.modalErrorDiv&&this.ui.modalButtons&&(this.ui.modal.classList.remove("hidden"),this.ui.modalInput.style.display="none",this.ui.modalErrorDiv.textContent=" ",this.ui.modalButtons.style.display="flex",this.ui.modalCancelButton.style.display="none",this.ui.modalText.textContent="No available games found.",this.ui.modalConfirmButton.textContent="Confirm",this.ui.modalConfirmButton.onclick=()=>{this.ui.modal&&this.ui.modalInput&&this.ui.modalCancelButton&&this.ui.modalText&&this.ui.modalConfirmButton&&(this.ui.modal.classList.add("hidden"),this.ui.modalInput.style.display="flex",this.ui.modalText.textContent="Join Room",this.ui.modalCancelButton.style.display="flex",this.ui.modalConfirmButton.onclick=null)})})}leaveRoom(){this.roomManager.leaveRoom(),window.dispatchEvent(new CustomEvent("customEvent_resetGameState",{detail:{resetType:"Room"}})),this.showRoomControls()}checkForRoomInURL(){const t=this.getRoomIdFromURL();t&&(this.wsManager.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t)},g.CONNECTION_TIMEOUT))}getRoomIdFromURL(){return new URLSearchParams(window.location.search).get("room")}copyRoomCode(){const t=this.lobbyManager.inLobby?this.ui.roomIdDisplay?.textContent:this.ui.gameRoomIdDisplay?.textContent;t&&navigator.clipboard.writeText(t).then(()=>{if(!(this.ui.modal&&this.ui.modalConfirmButton&&this.ui.modalCancelButton&&this.ui.modalContent&&this.ui.modalText&&this.ui.modalInput&&this.ui.modalErrorDiv&&this.ui.modalButtons))return;this.ui.modal.classList.remove("hidden"),this.ui.modalInput.style.display="none",this.ui.modalErrorDiv.textContent=" ",this.ui.modalButtons.style.display="flex",this.ui.modalCancelButton.style.display="none",this.ui.modalText.textContent="Room code copied!",this.ui.modalConfirmButton.textContent="Confirm";const t=()=>{this.ui.modal&&this.ui.modalInput&&this.ui.modalCancelButton&&this.ui.modalText&&this.ui.modalConfirmButton&&(this.ui.modal.classList.add("hidden"),this.ui.modalInput.style.display="flex",this.ui.modalText.textContent="Join Room",this.ui.modalCancelButton.style.display="flex",this.ui.modalConfirmButton.onclick=null)};this.ui.modalConfirmButton.onclick=t,setTimeout(()=>{this.ui.modal&&!this.ui.modal.classList.contains("hidden")&&t()},3e3)}).catch(()=>{alert("Could not copy. Please copy manually.")})}}class z{constructor(t,e){this.userId=t,this.utility=e,this.currentRoom=null,this.ws=null,this.messageHandlers=[],this.isPrivateRoom=!1}setWebSocket(t){this.ws=t,this.setupMessageHandler()}createRoom(){const t=this.utility.generateUID(10,"room_");return this.joinRoom(t,!0),t}joinRoom(t,e=!1){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return void console.error("WebSocket not connected");const a={type:e?"create-room":"join-room",roomId:t,userId:this.userId};this.ws.send(JSON.stringify(a)),this.currentRoom=t,this.utility.generateLink(t,"room")}leaveRoom(){if(!this.currentRoom||!this.ws)return;const t={type:"leave-room",roomId:this.currentRoom,userId:this.userId};this.ws.send(JSON.stringify(t)),this.currentRoom=null,window.history.pushState({},"",window.location.origin)}sendMessage(t){if(!this.currentRoom||!this.ws)return;const e={type:"room-message",roomId:this.currentRoom,userId:this.userId,message:t};this.ws.send(JSON.stringify(e))}sendAdminCommand(t,e){if(!this.ws)return;const a={type:"admin-command",id:t,key:e,userId:this.userId};this.ws.send(JSON.stringify(a))}getCurrentRoom(){return this.currentRoom}getRoomLink(t){return this.currentRoom?this.utility.generateLink(this.currentRoom,t):null}onMessage(t){this.messageHandlers.push(t)}setupMessageHandler(){this.ws&&(this.ws.onmessage=t=>{try{const e=JSON.parse(t.data);this.messageHandlers.forEach(t=>t(e))}catch(e){const a={type:"room-message",userId:"server",message:t.data};this.messageHandlers.forEach(t=>t(a))}})}}class H{constructor(t){this.cacheManager=t,this.gameSettings=this.initSettings()}initSettings(){return{audio:{mixer:{master:S,interface:I,music:M,sfx:f,voice:E}},controls:{keybinds:{attack:g.CONTROLS.KEYBINDS.ATTACK,dash:g.CONTROLS.KEYBINDS.DASH,melee:g.CONTROLS.KEYBINDS.MELEE,moveDown:g.CONTROLS.KEYBINDS.MOVE_DOWN,moveLeft:g.CONTROLS.KEYBINDS.MOVE_LEFT,moveRight:g.CONTROLS.KEYBINDS.MOVE_RIGHT,moveUp:g.CONTROLS.KEYBINDS.MOVE_UP,reload:g.CONTROLS.KEYBINDS.RELOAD,sprint:g.CONTROLS.KEYBINDS.SPRINT},gamepad:{attack:g.CONTROLS.GAMEPAD.ATTACK,dash:g.CONTROLS.GAMEPAD.DASH,melee:g.CONTROLS.GAMEPAD.MELEE,reload:g.CONTROLS.GAMEPAD.RELOAD,sprint:g.CONTROLS.GAMEPAD.SPRINT}}}}getSettings(){return this.gameSettings}updateSettings(t){const e=(t,a)=>{for(const s in a)a[s]&&"object"==typeof a[s]&&!Array.isArray(a[s])?(t[s]||(t[s]={}),e(t[s],a[s])):t[s]=a[s]};e(this.gameSettings,t),this.cacheManager.write("gameSettings",this.gameSettings)}async loadSettings(){const t=await this.cacheManager.read("gameSettings");t&&(this.gameSettings=t)}}var G,Y;!function(t){t[t.COMMON=0]="COMMON",t[t.UNCOMMON=1]="UNCOMMON",t[t.SPECIAL=2]="SPECIAL",t[t.SUPERIOR=3]="SUPERIOR",t[t.RARE=4]="RARE",t[t.EXCEPTIONAL=5]="EXCEPTIONAL",t[t.LEGENDARY=6]="LEGENDARY",t[t.MYTHICAL=7]="MYTHICAL",t[t.ENLIGHTENED=8]="ENLIGHTENED",t[t.HOLY=9]="HOLY"}(G||(G={})),function(t){t.EQUIPMENT="equipment",t.RESOURCE="resource",t.STAT="stat",t.UNIQUE="unique"}(Y||(Y={}));class q{constructor(t,e,a){this.ammoReservesUI=t,this.playerState=e,this.utility=a,this.takenUniques=new Set,this.upgradesCompleted=new Set,this.isUpgradesEnabled=!0,this.rarityConfig={[G.COMMON]:{weight:35,color:"#8E8B88"},[G.UNCOMMON]:{weight:20,color:"#FF0000"},[G.SPECIAL]:{weight:15,color:"#FF8C19"},[G.SUPERIOR]:{weight:12,color:"#E0FF33"},[G.RARE]:{weight:8,color:"#86FF15"},[G.EXCEPTIONAL]:{weight:5,color:"#00FF91"},[G.LEGENDARY]:{weight:2.5,color:"#00B3FF"},[G.MYTHICAL]:{weight:1.5,color:"#0004FF"},[G.ENLIGHTENED]:{weight:.9,color:"#A64DFF"},[G.HOLY]:{weight:.1,color:"#FF00EE"}},this.upgrades=[{id:"switch",name:"Switch",subtitle:"Completely legal and completely functional.",icon:"/assets/img/icon/upgrades/switch.png",type:Y.EQUIPMENT,rarity:G.RARE,unique:!1,func:t=>{t.equipment.includes("switch")||(t.equipment.push("switch"),this.playerState.updateStat("actions.primary.projectile.spread",t.actions.primary.projectile.spread*=1.15))}},{id:"care_package",name:"Care Package",subtitle:"These are hard to come by.",icon:"/assets/img/icon/upgrades/carepackage.png",type:Y.RESOURCE,rarity:G.COMMON,unique:!1,func:t=>{t.actions.primary.magazine.currentReserve+=20,this.ammoReservesUI.spawnAmmoInReserveUI(20)}},{id:"bioregulator",name:"Bioregulator",subtitle:"Increases energy regulation efficiency, with a small boot overhead.",icon:"/assets/img/icon/upgrades/bioregulator.png",type:Y.STAT,rarity:G.COMMON,unique:!1,func:t=>{this.playerState.updateStat("stats.stamina.max",1.1*t.stats.stamina.max),this.playerState.updateStat("stats.stamina.recovery.rate",t.stats.stamina.recovery.rate+1),this.playerState.updateStat("stats.stamina.recovery.delay",1.25*t.stats.stamina.recovery.delay)}},{id:"damage_buffer",name:"Damage Buffer",subtitle:"Type D125 buffer, which improves damage at a small cost. ",icon:"/assets/img/icon/upgrades/damagebuffer.png",type:Y.STAT,rarity:G.UNCOMMON,unique:!1,func:t=>{this.playerState.updateStat("actions.primary.projectile.damage",1.1*t.actions.primary.projectile.damage),this.playerState.updateStat("actions.primary.buffer",1.1*t.actions.primary.buffer)}},{id:"hemoglobin_saturator",name:"Hemoglobin Saturator",subtitle:"Increases red blood cell density for extended durability.",icon:"/assets/img/icon/upgrades/hemoglobinsaturator.png",type:Y.RESOURCE,rarity:G.UNCOMMON,unique:!1,func:t=>{this.playerState.updateStat("stats.health.max",t.stats.health.max+10),this.playerState.updateStat("stats.health.value",t.stats.health.max)}},{id:"locomotion_module",name:"Locomotion Module",subtitle:"Primitave locomotion module installed on the user's footwear.",icon:"/assets/img/icon/upgrades/locomotionmodule.png",type:Y.STAT,rarity:G.COMMON,unique:!1,func:t=>{this.playerState.updateStat("stats.speed",t.stats.speed+1),this.playerState.updateStat("actions.dash.cooldown",1.5*t.actions.dash.cooldown)}},{id:"cluster_module",name:"Cluster Module",subtitle:"Cluster enhancement module for primary attacks.",icon:"/assets/img/icon/upgrades/clustermodule.png",type:Y.UNIQUE,rarity:G.RARE,unique:!0,func:t=>{t.unique.includes("cluster_module")||t.unique.push("cluster_module")}},{id:"kinetic_brain",name:"Kinetic Brain",subtitle:"Cerebral kinetic stem implant, unable to function at maximum capacity.",icon:"/assets/img/icon/upgrades/kineticbrain.png",type:Y.UNIQUE,rarity:G.EXCEPTIONAL,unique:!0,func:t=>{t.unique.includes("kinetic_brain")||t.unique.push("kinetic_brain")}},{id:"muzzle_spliter",name:"Muzzle Spliiter",subtitle:"Muzzle modification for primary attacks, requires certain skillset.",icon:"/assets/img/icon/upgrades/kineticbrain.png",type:Y.UNIQUE,rarity:G.SPECIAL,unique:!0,func:t=>{t.unique.includes("muzzle_spliter")||t.unique.push("muzzle_spliter")}},{id:"phoenix_module",name:"Phoenix Module",subtitle:"Does its best to keep you alive.",icon:"/assets/img/icon/upgrades/phoenixmodule.png",type:Y.UNIQUE,rarity:G.LEGENDARY,unique:!0,func:t=>{t.unique.includes("phoenix_module")||t.unique.push("phoenix_module")}},{id:"projectile_array",name:"Projectile Array",subtitle:"Chance to fire an array of extra projectiles.",icon:"/assets/img/icon/upgrades/projectilearray.png",type:Y.UNIQUE,rarity:G.RARE,unique:!0,func:t=>{t.unique.includes("projectile_array")||t.unique.push("projectile_array")}},{id:"spatial_targeting",name:"Spatial Targeting",subtitle:"Projectile upgrade that syncs its spatial awareness with the user.",icon:"/assets/img/icon/upgrades/spatialtargeting.png",type:Y.UNIQUE,rarity:G.SUPERIOR,unique:!0,func:t=>{t.unique.includes("spatial_targeting")||t.unique.push("spatial_targeting")}},{id:"spectral_image",name:"Spectral Image",subtitle:"Forward imaging coordinate transponder.",icon:"/assets/img/icon/upgrades/spectralimage.png",type:Y.UNIQUE,rarity:G.EXCEPTIONAL,unique:!0,func:t=>{t.unique.includes("spectral_image")||(t.unique.push("spectral_image"),this.playerState.updateStat("actions.dash.time",t.actions.dash.time+50))}}]}getUpgrades(t,e){const a=this.upgrades.filter(t=>!(t.unique&&this.takenUniques.has(t.id)||t.type===Y.EQUIPMENT&&e.equipment.includes(t.id))),s=[];for(let e=0;e<Math.min(t,a.length)&&0!==a.length;e++){const t=a.reduce((t,e)=>t+this.getRarityWeight(e.rarity),0);let e=Math.random()*t,i=null;for(const t of a)if(e-=this.getRarityWeight(t.rarity),e<=0){i=t;break}if(i){s.push(i);const t=a.indexOf(i);a.splice(t,1)}}return s}applyUpgrade(t,e){const a=this.upgrades.find(e=>e.id===t);return!(!a||(a.unique&&this.takenUniques.has(t)?(console.warn(`Unique upgrade ${t} already taken globally`),1):a.type===Y.EQUIPMENT&&this.hasEquipment(e,t)?(console.warn(`Equipment ${t} already owned by player`),1):(a.unique&&this.takenUniques.add(t),a.func(e),0)))}removeUpgradeFromPool(t){this.takenUniques.add(t)}resetUpgrades(e){this.takenUniques.clear(),e.equipment=t.EQUIPMENT,e.unique=t.UNIQUE}hasEquipment(t,e){return t.equipment.includes(e)}hasUnique(t,e){return t.unique.includes(e)}getRarityColor(t){return this.rarityConfig[t].color}getRarityWeight(t){return this.rarityConfig[t].weight}toggleEquipment(t){this.hasEquipment(this.playerState.myPlayer,t)&&("test_id"===t||console.warn(`Unknown equipment: ${t}`))}}class ${constructor(t,e){this.playerState=t,this.settingsManager=e,this.ammoReservesCanvas=null,this.ammoReservesCtx=null,this.canvas=null,this.ctx=null,this.decalCanvas=null,this.decalCtx=null,this.gameContainer=null,this.gameOptionsContainer=null,this.lobbyContainer=null,this.roomControls=null,this.upgradeContainer=null,this.gameRoomIdDisplay=null,this.lobbyPlayersList=null,this.roomIdDisplay=null,this.userIdDisplay=null,this.gameCodeButton=null,this.gameLeaveButton=null,this.hostButton=null,this.joinButton=null,this.lobbyCodeButton=null,this.lobbyLeaveButton=null,this.quickplayButton=null,this.startGameBtn=null,this.playersInput=null,this.privateToggle=null,this.upgradesToggle=null,this.winsInput=null,this.chatContainer=null,this.chatInput=null,this.chatMessages=null,this.chatSendBtn=null,this.modal=null,this.modalButtons=null,this.modalCancelButton=null,this.modalConfirmButton=null,this.modalContent=null,this.modalErrorDiv=null,this.modalInput=null,this.modalText=null,this.leaderboard=new Map,this.leaderboardBody=null,this.leaderboardContainer=null,this.settingsContainer=null,this.settingsButton=null,this.settingsCloseButton=null,this.controlsTab=null,this.graphicsTab=null,this.soundTab=null,this.controlsBody=null,this.graphicsBody=null,this.soundBody=null,this.masterSlider=null,this.masterFill=null,this.masterValue=null,this.interfaceSlider=null,this.interfaceFill=null,this.interfaceValue=null,this.musicSlider=null,this.musicFill=null,this.musicValue=null,this.sfxSlider=null,this.sfxFill=null,this.sfxValue=null,this.voiceSlider=null,this.voiceFill=null,this.voiceValue=null,this.accuracyStat=null,this.damageStat=null,this.luckStat=null,this.rangeStat=null,this.shotSpeedStat=null,this.speedStat=null,this.initInterfaceListeners()}initInterface(){if(this.canvas=document.getElementById("gameCanvas"),this.decalCanvas=document.createElement("canvas"),this.ammoReservesCanvas=document.getElementById("ammoReservesCanvas"),this.roomControls=document.getElementById("roomControls"),this.gameContainer=document.getElementById("gameContainer"),this.lobbyContainer=document.getElementById("lobbyContainer"),this.lobbyPlayersList=document.getElementById("lobbyPlayersList"),this.startGameBtn=document.getElementById("startGameBtn"),this.gameOptionsContainer=document.getElementById("gameOptionsContainer"),this.userIdDisplay=document.getElementById("userId"),this.roomIdDisplay=document.getElementById("roomId"),this.gameRoomIdDisplay=document.getElementById("gameRoomId"),this.chatContainer=document.getElementById("chatContainer"),this.chatMessages=document.getElementById("chatMessages"),this.chatInput=document.getElementById("chatInput"),this.chatSendBtn=document.getElementById("chatSendBtn"),this.privateToggle=document.getElementById("privateToggle"),this.upgradesToggle=document.getElementById("upgradesToggle"),this.winsInput=document.getElementById("winsInput"),this.playersInput=document.getElementById("playersInput"),this.upgradeContainer=document.getElementById("upgradeContainer"),this.leaderboardContainer=document.getElementById("leaderboardContainer"),this.leaderboardBody=document.getElementById("leaderboardBody"),this.hostButton=document.getElementById("atomHost"),this.joinButton=document.getElementById("atomJoin"),this.quickplayButton=document.getElementById("atomQuickplay"),this.lobbyLeaveButton=document.getElementById("lobbyLeaveBtn"),this.lobbyCodeButton=document.getElementById("lobbyCodeBtn"),this.gameLeaveButton=document.getElementById("gameLeaveBtn"),this.gameCodeButton=document.getElementById("gameCodeBtn"),this.modal=document.getElementById("modal"),this.modalInput=document.getElementById("joinRoomInput"),this.modalButtons=document.getElementById("modalButtons"),this.modalConfirmButton=document.getElementById("joinRoomConfirmBtn"),this.modalCancelButton=document.getElementById("joinRoomCancelBtn"),this.modalErrorDiv=document.getElementById("joinRoomError"),this.modalContent=document.getElementById("modalContent"),this.modalText=document.getElementById("modalText"),this.settingsContainer=document.getElementById("settingsContainer"),this.settingsButton=document.getElementById("atomSettings"),this.settingsCloseButton=document.getElementById("settingsCloseButton"),this.controlsTab=document.getElementById("controlsTab"),this.graphicsTab=document.getElementById("graphicsTab"),this.soundTab=document.getElementById("soundTab"),this.controlsBody=document.getElementById("controlsBody"),this.graphicsBody=document.getElementById("graphicsBody"),this.soundBody=document.getElementById("soundBody"),this.masterSlider=document.getElementById("masterSlider"),this.masterFill=document.getElementById("masterFill"),this.masterValue=document.getElementById("masterValue"),this.interfaceSlider=document.getElementById("interfaceSlider"),this.interfaceFill=document.getElementById("interfaceFill"),this.interfaceValue=document.getElementById("interfaceValue"),this.musicSlider=document.getElementById("musicSlider"),this.musicFill=document.getElementById("musicFill"),this.musicValue=document.getElementById("musicValue"),this.sfxSlider=document.getElementById("sfxSlider"),this.sfxFill=document.getElementById("sfxFill"),this.sfxValue=document.getElementById("sfxValue"),this.voiceSlider=document.getElementById("voiceSlider"),this.voiceFill=document.getElementById("voiceFill"),this.voiceValue=document.getElementById("voiceValue"),this.accuracyStat=document.getElementById("accuracyValue"),this.damageStat=document.getElementById("damageValue"),this.luckStat=document.getElementById("luckValue"),this.rangeStat=document.getElementById("rangeValue"),this.shotSpeedStat=document.getElementById("shotSpeedValue"),this.speedStat=document.getElementById("speedValue"),!(this.canvas&&this.decalCanvas&&this.ammoReservesCanvas&&this.roomControls&&this.gameContainer&&this.lobbyContainer&&this.userIdDisplay&&this.roomIdDisplay&&this.gameRoomIdDisplay&&this.lobbyPlayersList&&this.startGameBtn&&this.gameOptionsContainer&&this.chatContainer&&this.chatMessages&&this.chatInput&&this.chatSendBtn&&this.privateToggle&&this.upgradesToggle&&this.winsInput&&this.playersInput&&this.upgradeContainer&&this.leaderboardContainer&&this.leaderboardBody&&this.hostButton&&this.joinButton&&this.quickplayButton&&this.lobbyLeaveButton&&this.lobbyCodeButton&&this.gameLeaveButton&&this.gameCodeButton&&this.settingsButton&&this.settingsCloseButton&&this.settingsContainer&&this.controlsTab&&this.graphicsTab&&this.soundTab&&this.controlsBody&&this.graphicsBody&&this.soundBody&&this.masterSlider&&this.masterFill&&this.interfaceSlider&&this.interfaceFill&&this.musicSlider&&this.musicFill&&this.sfxSlider&&this.sfxFill&&this.voiceSlider&&this.voiceFill&&this.masterValue&&this.interfaceValue&&this.musicValue&&this.sfxValue&&this.voiceValue&&this.accuracyStat&&this.damageStat&&this.luckStat&&this.rangeStat&&this.shotSpeedStat&&this.speedStat))throw alert("Failed to load game. Please refresh the page."),new Error("Critical error: Required DOM elements are missing.");if(this.canvas.width=d,this.canvas.height=y,this.decalCanvas.width=d,this.decalCanvas.height=y,this.ammoReservesCanvas.width=100,this.ammoReservesCanvas.height=64,this.ctx=this.canvas.getContext("2d"),this.decalCtx=this.decalCanvas.getContext("2d"),this.ammoReservesCtx=this.ammoReservesCanvas.getContext("2d"),!this.ctx||!this.decalCtx||!this.ammoReservesCtx)throw alert("Failed to load game. Please refresh the page."),new Error("Could not get canvas context")}updateDisplay(t,e,a){if(this.roomControls&&this.lobbyContainer&&this.gameContainer&&this.chatContainer&&this.leaderboardContainer)switch(this.clearDisplay(),e){case"lobby":this.lobbyContainer.style.display="flex",this.chatContainer.style.display="flex",a&&this.roomIdDisplay&&(this.roomIdDisplay.textContent=a),t.inLobby=!0;break;case"room":this.roomControls.style.display="flex";break;case"game":if(this.gameContainer.style.display="flex",this.chatContainer.style.display="flex",this.leaderboardContainer.style.display="flex",a){const t=this.gameRoomIdDisplay;t&&(t.textContent=a)}t.inLobby=!1}}updateHostDisplay(t,e){this.startGameBtn&&this.gameOptionsContainer&&(this.startGameBtn.style.display=t?"block":"none",this.startGameBtn.disabled=e.lobbyPlayers.size<1,this.gameOptionsContainer.style.display=t?"flex":"none")}displayLobbyPlayers(t,e,a){this.lobbyPlayersList&&(this.lobbyPlayersList.innerHTML="",Array.from(e.lobbyPlayers.values()).sort((t,e)=>t.isHost&&!e.isHost?-1:!t.isHost&&e.isHost?1:0).forEach(s=>{const i=document.createElement("div");i.className="lobby_player";const r=document.createElement("div");r.className="player_color",r.style.backgroundColor=s.color;const o=document.createElement("div");o.className="player_name",o.textContent=`${s.id}${s.isHost?" (Host)":""}`;const n=document.createElement("div");if(n.className="player_controls",t&&s.id!==a){const t=document.createElement("button");t.textContent="Promote",t.onclick=()=>e.promotePlayer(s.id);const a=document.createElement("button");a.textContent="Kick",a.className="danger",a.onclick=()=>e.kickPlayer(s.id),n.appendChild(t),n.appendChild(a)}i.appendChild(r),i.appendChild(o),i.appendChild(n),this.lobbyPlayersList&&this.lobbyPlayersList.appendChild(i)}))}clearDisplay(){this.roomControls&&this.lobbyContainer&&this.gameContainer&&this.chatContainer&&this.leaderboardContainer&&this.upgradeContainer&&(this.roomControls.style.display="none",this.lobbyContainer.style.display="none",this.gameContainer.style.display="none",this.chatContainer.style.display="none",this.leaderboardContainer.style.display="none",this.upgradeContainer.style.display="none")}showJoinRoomModal(t){this.modal&&this.modalInput&&this.modalConfirmButton&&this.modalCancelButton&&this.modalErrorDiv&&(this.modal.classList.remove("hidden"),this.modalConfirmButton.classList.remove("hidden"),this.modalInput.value="",this.modalErrorDiv.textContent="",this.modalConfirmButton.textContent="Join",this.modalInput.focus(),this.modalConfirmButton.onclick=()=>{if(!this.modalInput||!this.modalErrorDiv)return;const e=this.modalInput.value.trim();if(!e)return void(this.modalErrorDiv.textContent="Invalid code...");let a=null;try{const t=new URL(e,window.location.origin);a=t.pathname.startsWith("/room_")?t.pathname.replace("/",""):new URLSearchParams(t.search).get("room")}catch{e.startsWith("room_")&&(a=e)}a?(this.closeModal(),t(a)):this.modalErrorDiv.textContent="Invalid code..."},this.modalCancelButton.onclick=()=>this.closeModal())}soloGameWarning(t){this.modal&&this.modalConfirmButton&&this.modalCancelButton&&this.modalContent&&this.modalText&&this.modalInput&&this.modalErrorDiv&&this.modalButtons&&(this.modal.classList.remove("hidden"),this.modalConfirmButton.classList.remove("hidden"),this.modalInput.style.display="none",this.modalErrorDiv.textContent=" ",this.modalButtons.style.display="flex",this.modalCancelButton.style.display="flex",this.modalText.textContent="Start game as only player? Other players will be unable to join until you return to the lobby.",this.modalConfirmButton.textContent="Start Game",this.modalCancelButton.textContent="Cancel",this.modalConfirmButton.onclick=()=>{this.closeModal(),t()},this.modalCancelButton.onclick=()=>this.closeModal())}showSettingsPage(){this.settingsContainer&&this.settingsContainer.classList.remove("hidden")}hideSettingsPage(){this.settingsContainer&&this.settingsContainer.classList.add("hidden")}switchSettingsPage(t){if(this.controlsBody&&this.graphicsBody&&this.soundBody&&this.controlsTab&&this.graphicsTab&&this.soundTab)switch(this.controlsTab.classList.remove("settings_tab_active"),this.graphicsTab.classList.remove("settings_tab_active"),this.soundTab.classList.remove("settings_tab_active"),this.controlsBody.classList.remove("settings_page_hidden"),this.graphicsBody.classList.remove("settings_page_hidden"),this.soundBody.classList.remove("settings_page_hidden"),t){case"controls":this.controlsTab.classList.add("settings_tab_active"),this.graphicsBody.classList.add("settings_page_hidden"),this.soundBody.classList.add("settings_page_hidden");break;case"graphics":this.graphicsTab.classList.add("settings_tab_active"),this.controlsBody.classList.add("settings_page_hidden"),this.soundBody.classList.add("settings_page_hidden");break;case"sound":this.soundTab.classList.add("settings_tab_active"),this.controlsBody.classList.add("settings_page_hidden"),this.graphicsBody.classList.add("settings_page_hidden")}}updateSettingsSlider(t,e,a){const s=Math.max(0,Math.min(100,100*a));t.style.width=`${s}%`,e.textContent=`${Math.round(s)}%`}initSoundSliders(t){this.masterFill&&this.masterValue&&this.updateSettingsSlider(this.masterFill,this.masterValue,t.master),this.interfaceFill&&this.interfaceValue&&this.updateSettingsSlider(this.interfaceFill,this.interfaceValue,t.interface),this.musicFill&&this.musicValue&&this.updateSettingsSlider(this.musicFill,this.musicValue,t.music),this.sfxFill&&this.sfxValue&&this.updateSettingsSlider(this.sfxFill,this.sfxValue,t.sfx),this.voiceFill&&this.voiceValue&&this.updateSettingsSlider(this.voiceFill,this.voiceValue,t.voice)}calculateSliderValue(t,e){const a=t.getBoundingClientRect(),s=e-a.left,i=a.width;return Math.max(0,Math.min(1,s/i))}initKeybindsInterface(t,e){Object.keys(t.keybinds).forEach(a=>{const s=`${a}Keybind`,i=document.getElementById(s);if(i){const s=t.keybinds[a];i.textContent=" "===s?"SPACE":s.toUpperCase(),i.addEventListener("click",()=>{this.showRebindModal(a,"keybind",t=>{e(a,"keybind",t)})})}}),Object.keys(t.gamepad).forEach(a=>{const s=`${a}Gamepad`,i=document.getElementById(s);if(i&&void 0!==t.gamepad[a]){const s=t.gamepad[a],r=Object.keys(u).find(t=>"number"==typeof u[t]&&u[t]===s);i.textContent=r||s.toString(),i.addEventListener("click",()=>{this.showRebindModal(a,"gamepad",t=>{e(a,"gamepad",t)})})}})}showRebindModal(t,e,a){if(!(this.modal&&this.modalText&&this.modalInput&&this.modalConfirmButton&&this.modalCancelButton&&this.modalErrorDiv))return;const s=["Binding already assigned!","Binding already in use!","That binding is assigned already!","Binding already being used!","Already bound to another action!"];let i=0;if("gamepad"===e){const t=navigator.getGamepads();if(!Array.from(t).some(t=>null!==t))return this.modal.classList.remove("hidden"),this.modalErrorDiv.textContent="",this.modalText.textContent="No gamepad detected",this.modalInput.style.display="none",this.modalConfirmButton.classList.add("hidden"),this.modalCancelButton.textContent="Close",this.modalCancelButton.onclick=()=>this.closeModal(),void setTimeout(()=>{this.closeModal()},3e3)}this.modal.classList.remove("hidden"),this.modalErrorDiv.textContent="",this.modalInput.style.display="none",this.modalText.textContent=`Press any ${"keybind"===e?"key":"button"} for ${t.toUpperCase()}`,this.modalConfirmButton.classList.add("hidden"),this.modalCancelButton.textContent="Cancel";const r=a=>"keybind"===e?Object.entries(this.settingsManager?.getSettings().controls.keybinds||{}).some(([e,s])=>e!==t&&s===a):Object.entries(this.settingsManager?.getSettings().controls.gamepad||{}).some(([e,s])=>e!==t&&s===a),o=t=>{if(t.preventDefault(),"Escape"===t.key)return h(),void this.closeModal();const e=t.key.toLowerCase();if(r(e)){if(!this.modalErrorDiv)return;return this.modalErrorDiv.textContent=s[i%s.length],void i++}h(),a(e),this.closeModal()},n=t=>{if(t.target===this.modalCancelButton||this.modalCancelButton?.contains(t.target))return;t.preventDefault(),t.stopPropagation();let e="";if(0===t.button?e="mouse1":1===t.button?e="mouse3":2===t.button&&(e="mouse2"),e){if(r(e)){if(!this.modalErrorDiv)return;return this.modalErrorDiv.textContent=s[i%s.length],void i++}h(),a(e),this.closeModal()}},l=()=>{const t=navigator.getGamepads();for(const e of t)if(e)for(let t=0;t<e.buttons.length;t++)if(e.buttons[t].pressed){if(r(t)){if(!this.modalErrorDiv)return;return this.modalErrorDiv.textContent=s[i%s.length],i++,void requestAnimationFrame(l)}return h(),a(t),void this.closeModal()}requestAnimationFrame(l)},h=()=>{"keybind"===e&&(document.removeEventListener("keydown",o),document.removeEventListener("mousedown",n)),this.modalCancelButton.onclick=null};"keybind"===e?(document.addEventListener("keydown",o),document.addEventListener("mousedown",n)):requestAnimationFrame(l),this.modalCancelButton.onclick=()=>{h(),this.closeModal()}}closeModal(){this.modal&&this.modalInput&&this.modalConfirmButton&&this.modalCancelButton&&this.modalText&&(this.modal.classList.add("hidden"),this.modalInput.style.display="flex",this.modalText.textContent="Join Room",this.modalConfirmButton.onclick=null,this.modalCancelButton.onclick=null,this.modalInput.onkeydown=null)}createLeaderboard(t,e,a){const s=new Set;s.add(a),e.forEach((t,e)=>{s.add(e)}),t.lobbyPlayers.forEach((t,e)=>{s.add(e)}),s.forEach(t=>{this.leaderboard.has(t)||(this.leaderboard.set(t,{playerId:t,wins:0,kills:0,deaths:0}),console.log(`Created leaderboard entry for ${t}`))}),this.updateLeaderboardDisplay(a),console.log("Leaderboard created/updated:",Array.from(this.leaderboard.entries()))}updateLeaderboardDisplay(t){this.leaderboardBody&&(this.leaderboardBody.innerHTML="",Array.from(this.leaderboard.entries()).sort((t,e)=>{const[,a]=t,[,s]=e;return s.wins!==a.wins?s.wins-a.wins:s.kills-a.kills}).forEach(([e,a])=>{const s=document.createElement("tr");s.className="leaderboard_row",e===t&&s.classList.add("current-player");const i=document.createElement("td");i.textContent=e===t?"You":e.substring(0,8),i.className="player_name",s.appendChild(i);const r=document.createElement("td");r.textContent=a.wins.toString(),r.className="wins",s.appendChild(r);const o=document.createElement("td");o.textContent=a.kills.toString(),o.className="kills",s.appendChild(o);const n=document.createElement("td");n.textContent=a.deaths.toString(),n.className="deaths",s.appendChild(n),this.leaderboardBody&&this.leaderboardBody.appendChild(s)}))}clearLeaderboard(){this.leaderboard.clear(),this.leaderboardBody&&(this.leaderboardBody.innerHTML="")}initInterfaceListeners(){this.playerState.onStatChange("stats.speed",t=>{this.speedStat&&(this.speedStat.textContent=t.toString())}),this.playerState.onStatChange("actions.primary.projectile.damage",t=>{this.damageStat&&(this.damageStat.textContent=Math.round(t).toString())}),this.playerState.onStatChange("actions.primary.projectile.range",t=>{this.rangeStat&&(this.rangeStat.textContent=t.toString())}),this.playerState.onStatChange("actions.primary.projectile.speed",t=>{this.shotSpeedStat&&(this.shotSpeedStat.textContent=t.toString())}),this.playerState.onStatChange("stats.luck",t=>{this.luckStat&&(this.luckStat.textContent=t.toString())}),this.playerState.onStatChange("actions.primary.projectile.spread",t=>{if(this.accuracyStat){const e=Math.max(1,Math.round(100-2*t));this.accuracyStat.textContent=e.toString()}})}}class V{constructor(){this.lastFrameTime=performance.now(),this.simplexTable=this.generateSimplexTable()}deepMerge(t,e){for(const a in e)null===e[a]||"object"!=typeof e[a]||Array.isArray(e[a])?t[a]=e[a]:(t[a]||(t[a]={}),this.deepMerge(t[a],e[a]))}deltaTime(){const t=performance.now(),e=t-this.lastFrameTime;return this.lastFrameTime=t,Math.min(e,100)/16.67}getRandomNum(t,e){return Math.random()*(e-t)+t}getRandomInt(t,e){return Math.floor(Math.random()*(e-t+1))+t}getRandomInArray(t){return t[Math.floor(Math.random()*t.length)]}getShuffledArray(t){return t.slice().sort(()=>Math.random()-.5)}getDotProduct(t,e){return t.x*e.x+t.y*e.y}getReflection(t,e){const a=this.getDotProduct(t,e);return{x:t.x-2*a*e.x,y:t.y-2*a*e.y}}forward(t){return{x:Math.cos(t),y:Math.sin(t)}}getDirection(t){const e=t.targetPos.x-t.rootPos.x,a=t.targetPos.y-t.rootPos.y,s=Math.sqrt(e*e+a*a);return 0===s?{x:0,y:0}:{x:e/s,y:a/s}}getRandomDirection(t){const e=Math.random()*(t*Math.PI/180);return{x:Math.cos(e),y:Math.sin(e)}}getRandomColor(t){const e=t?.format??"hex";let a;switch(t?.mode??"any"){case"primary":const t=["#FF0000","#00FF00","#0000FF","#FFFF00","#00FFFF","#FF00FF"];a=this.getRandomInArray(t);break;case"pastel":const e=this.getRandomInt(127,254),s=this.getRandomInt(127,254),i=this.getRandomInt(127,254);a=`#${e.toString(16).padStart(2,"0")}${s.toString(16).padStart(2,"0")}${i.toString(16).padStart(2,"0")}`;break;case"vibrant":const r=[255,this.getRandomInt(0,255),this.getRandomInt(0,255)];r.sort(()=>Math.random()-.5),a=`#${r[0].toString(16).padStart(2,"0")}${r[1].toString(16).padStart(2,"0")}${r[2].toString(16).padStart(2,"0")}`;break;case"dark":const o=this.getRandomInt(0,127),n=this.getRandomInt(0,127),l=this.getRandomInt(0,127);a=`#${o.toString(16).padStart(2,"0")}${n.toString(16).padStart(2,"0")}${l.toString(16).padStart(2,"0")}`;break;case"light":const h=this.getRandomInt(128,255),m=this.getRandomInt(128,255),c=this.getRandomInt(128,255);a=`#${h.toString(16).padStart(2,"0")}${m.toString(16).padStart(2,"0")}${c.toString(16).padStart(2,"0")}`;break;case"grayscale":const d=this.getRandomInt(0,255);a=`#${d.toString(16).padStart(2,"0")}${d.toString(16).padStart(2,"0")}${d.toString(16).padStart(2,"0")}`;break;default:a="#"+this.getRandomInt(0,16777215).toString(16).padStart(6,"0")}if("rgb"===e){const t=this.hexToRgb(a);return t?`rgb(${t.r}, ${t.g}, ${t.b})`:a}return a}hexToRgb(t){const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}generateSimplexTable(){const t=new Uint8Array(512);for(let e=0;e<256;e++)t[e]=e;for(let e=0;e<256;e++){const a=e+this.getRandomInt(0,255-e);[t[e],t[a]]=[t[a],t[e]]}for(let e=0;e<256;e++)t[256+e]=t[e];return t}simplexNoise2D(t,e,a=!1){a&&(this.simplexTable=this.generateSimplexTable());const s=this.simplexTable,i=.5*(Math.sqrt(3)-1),r=(3-Math.sqrt(3))/6,o=(t+e)*i,n=Math.floor(t+o),l=Math.floor(e+o),h=(n+l)*r,m=t-(n-h),c=e-(l-h),d=m>c?1:0,y=m>c?0:1,p=m-d+r,u=c-y+r,g=m-1+2*r,S=c-1+2*r,I=255&n,M=255&l,f=s[I+s[M]]%12,E=s[I+d+s[M+y]]%12,C=s[I+1+s[M+1]]%12,P=[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]],A=(t,e,a)=>t[0]*e+t[1]*a;let b=.5-m*m-c*c,x=.5-p*p-u*u,v=.5-g*g-S*S;return 70*((b<0?0:Math.pow(b,4)*A(P[f],m,c))+(x<0?0:Math.pow(x,4)*A(P[E],p,u))+(v<0?0:Math.pow(v,4)*A(P[C],g,S)))}generateUID(t,e){let a=e??"";for(let e=0;e<t;e++)a+="0123456789abcdefghijklmnopqrstuvwxyz"[this.getRandomInt(0,35)];return a}generateLink(t,e){const a=window.location.origin;return e?`${a}?${e}=${t}`:`${a}?${t}`}setInput(t){const e=document.getElementById(t.inputId);e&&(e.value=t.value.toString())}setSlider(t){const{sliderId:e,targetValue:a,maxValue:s,lerpTime:i=0}=t,r=document.getElementById(e),o=r?.querySelector("div");if(!r||!o)return void console.warn(`Slider not found: ${e}...`);if(0===s)return void console.warn("maxValue cannot be 0...");const n=Math.max(0,Math.min(s,a))/s*100,l=o.style.width||"100%",h=parseFloat(l.replace("%",""));if(!(Math.abs(h-n)<.1)){if(i<=0)return o.style.transition="none",void(o.style.width=`${n}%`);o.style.transition=`width ${i}ms ease-out`,o.style.width=`${n}%`,setTimeout(()=>{o&&(o.style.transition="")},i)}}setSpan(t){const e=document.getElementById(t.spanId);e?e.textContent=t.value.toString():console.warn(`Span not found: ${t.spanId}`)}setToggle(t){const e=document.getElementById(t.toggleId);e&&(t.value?(e.setAttribute("checked","true"),e.setAttribute("aria-checked","true")):(e.removeAttribute("checked"),e.setAttribute("aria-checked","false")))}}class X{constructor(t,e){this.gameState=t,this.roomManager=e,this.ws=null}connectWebSocket(){const t="https:"===location.protocol?"wss:":"ws:";this.ws=new WebSocket(`${t}//${location.host}`),this.ws.onopen=()=>{console.log("Connected to WebSocket"),this.roomManager.setWebSocket(this.ws)},this.ws.onclose=()=>{console.log("Disconnected from WebSocket"),this.gameState.gameInProgress=!1,setTimeout(()=>this.connectWebSocket(),g.RECONNECT_DELAY)},this.ws.onerror=t=>{console.error("WebSocket error:",t)}}getWebSocket(){return this.ws}}class K{constructor(t){this.ui=t,this.ammoReserveIcon=null,this.projectileIcon=null,this.reserveBulletParticles=[]}initAmmoReserveCanvas(){this.ammoReserveIcon=new Image,this.ammoReserveIcon.src="/assets/img/icon/inventory/ammobox.png",this.ammoReserveIcon.onload=()=>{this.renderAmmoReserves()},this.projectileIcon=new Image,this.projectileIcon.src="/assets/img/icon/inventory/9mm.png",requestAnimationFrame(()=>this.updateAmmoReservePhysics())}spawnAmmoInReserveUI(t=1){if(!this.ui.ammoReservesCtx||!this.projectileIcon)return;const{collisionHeight:e,collisionWidth:a,collisionX:s,collisionY:i}=this.getAmmoReserveCollisionZone(),r=s+a,o=i+e/2;for(let e=0;e<t;e++)setTimeout(()=>{const t=2+8*Math.random(),e=(Math.random()-.5)*(Math.PI/3),a=Math.cos(e)*t,s=Math.sin(e)*t,i=Math.random()*Math.PI*2,n=.1*(Math.random()-.5);this.reserveBulletParticles.push({transform:{pos:{x:r,y:o},rot:i},velocity:{x:a,y:s},torque:n,width:2.75,height:7})},100*e)}removeAmmoFromReserveUI(t=1){for(let e=0;e<t;e++)setTimeout(()=>{this.reserveBulletParticles.length>0&&this.reserveBulletParticles.shift()},100*e)}updateAmmoReservePhysics(){if(!this.ui.ammoReservesCtx||!this.ammoReserveIcon)return;const{collisionHeight:t,collisionWidth:e,collisionX:a,collisionY:s}=this.getAmmoReserveCollisionZone();this.ui.ammoReservesCtx.clearRect(0,0,this.ui.ammoReservesCanvas.width,this.ui.ammoReservesCanvas.height),this.ui.ammoReservesCtx.drawImage(this.ammoReserveIcon,0,0,this.ui.ammoReservesCanvas.width,this.ui.ammoReservesCanvas.height);for(let i of this.reserveBulletParticles)i.transform.pos.x+=i.velocity.x,i.transform.pos.y+=i.velocity.y,i.transform.rot+=i.torque,i.velocity.x*=.9,i.velocity.y*=.9,i.torque*=.9,i.transform.pos.x-i.width/2<a&&(i.transform.pos.x=a+i.width/2,i.velocity.x*=-.5),i.transform.pos.x+i.width/2>a+e&&(i.transform.pos.x=a+e-i.width/2,i.velocity.x*=-.5),i.transform.pos.y-i.height/2<s&&(i.transform.pos.y=s+i.height/2,i.velocity.y*=-.5),i.transform.pos.y+i.height/2>s+t&&(i.transform.pos.y=s+t-i.height/2,i.velocity.y*=-.5);for(let t=0;t<this.reserveBulletParticles.length;t++)for(let e=t+1;e<this.reserveBulletParticles.length;e++){const a=this.reserveBulletParticles[t],s=this.reserveBulletParticles[e],i=a.transform.pos.x-s.transform.pos.x,r=a.transform.pos.y-s.transform.pos.y,o=Math.sqrt(i*i+r*r),n=(a.width+s.width)/2;if(o<n){const t=Math.atan2(r,i),e=n-o,l=Math.cos(t)*e/2,h=Math.sin(t)*e/2;a.transform.pos.x+=l,a.transform.pos.y+=h,s.transform.pos.x-=l,s.transform.pos.y-=h;const m=a.velocity.x*Math.cos(t)+a.velocity.y*Math.sin(t),c=s.velocity.x*Math.cos(t)+s.velocity.y*Math.sin(t),d=(m+c)/2;a.velocity.x+=.5*(d-m),s.velocity.x+=.5*(d-c)}}for(let t of this.reserveBulletParticles)this.ui.ammoReservesCtx.save(),this.ui.ammoReservesCtx.translate(t.transform.pos.x,t.transform.pos.y),this.ui.ammoReservesCtx.rotate(t.transform.rot),this.ui.ammoReservesCtx.drawImage(this.projectileIcon,-t.width/2,-t.height/2,t.width,t.height),this.ui.ammoReservesCtx.restore();requestAnimationFrame(()=>this.updateAmmoReservePhysics())}renderAmmoReserves(){this.ui.ammoReservesCtx&&this.ammoReserveIcon&&this.ammoReserveIcon.complete&&(this.ui.ammoReservesCtx.clearRect(0,0,this.ui.ammoReservesCanvas.width,this.ui.ammoReservesCanvas.height),this.ui.ammoReservesCtx.drawImage(this.ammoReserveIcon,0,0,this.ui.ammoReservesCanvas.width,this.ui.ammoReservesCanvas.height))}getAmmoReserveCollisionZone(){return{collisionHeight:27,collisionWidth:63,collisionX:(this.ui.ammoReservesCanvas.width-63)/2-3,collisionY:(this.ui.ammoReservesCanvas.height-27)/2-1}}}class W{constructor(t,e,a,s,i,r,o,n,l,h,m,c,d){this.ammoReservesUIController=t,this.animator=e,this.audioManager=a,this.collisionsManager=s,this.decalsManager=i,this.gameState=r,this.luckController=o,this.particlesManager=n,this.playerState=l,this.roomManager=h,this.ui=m,this.userId=c,this.utility=d,this.projectiles=new Map,this.autoFireEndTime=0}triggerAttack(t){switch(t){case"melee":this.startMelee();break;case"ranged":this.startBurst();break;default:console.warn(`Unknown attack type: ${t}`)}}updateAttack(t){if(!this.gameState.gameInProgress||this.playerState.myPlayer.stats.health.value<=0)return;const e=Date.now();if(this.playerState.isReloading)e>=this.playerState.reloadStartTime+this.playerState.myPlayer.actions.primary.reload.time&&this.finishReload();else if(this.playerState.isBurstActive&&e>=this.playerState.nextBurstShotTime){const t=this.playerState.myPlayer.actions.primary.burst.amount;if(this.playerState.myPlayer.actions.primary.magazine.currentAmmo>0&&this.playerState.currentBurstShot<t){const a=this.playerState.myPlayer.transform.rot-Math.PI/2,s={x:Math.cos(a),y:Math.sin(a)};0===this.triggerBurstUniques().length&&this.launchProjectile(s),this.playerState.currentBurstShot++,this.playerState.myPlayer.actions.primary.magazine.currentAmmo--,console.log(`Burst shot ${this.playerState.currentBurstShot}! Magazine: ${this.playerState.myPlayer.actions.primary.magazine.currentAmmo}/${this.playerState.myPlayer.actions.primary.magazine.size}, Inventory: ${this.playerState.myPlayer.actions.primary.magazine.currentReserve}/${this.playerState.myPlayer.actions.primary.magazine.maxReserve}`),this.playerState.currentBurstShot>=t||0===this.playerState.myPlayer.actions.primary.magazine.currentAmmo?(this.playerState.isBurstActive=!1,this.playerState.currentBurstShot=0):this.playerState.nextBurstShotTime=e+this.playerState.myPlayer.actions.primary.burst.delay}else this.playerState.isBurstActive=!1,this.playerState.currentBurstShot=0}}canMelee(){const t=Date.now();return!this.playerState.isMelee&&t>=this.playerState.lastMeleeTime+this.playerState.myPlayer.actions.melee.cooldown&&this.collisionsManager.collisionsEnabled(this.playerState.myPlayer)&&!this.playerState.isBurstActive&&!this.playerState.isReloading}startMelee(){this.playerState.isMelee=!0,this.playerState.lastMeleeTime=Date.now(),this.playerState.myPlayer.rig.weapon="KNIFE",this.roomManager.sendMessage(JSON.stringify({type:"weapon-change",playerId:this.userId,weapon:"KNIFE"}));const t=this.playerState.myPlayer.transform.rot,a=this.playerState.myPlayer.actions.melee.range,s=this.playerState.myPlayer.actions.melee.size,i=this.collisionsManager.getPlayerCollider(this.playerState.myPlayer)+this.playerState.myPlayer.actions.primary.projectile.size+this.playerState.myPlayer.actions.primary.offset,r=this.playerState.myPlayer.transform.pos.x+Math.cos(t-Math.PI/2)*i,o=this.playerState.myPlayer.transform.pos.y+Math.sin(t-Math.PI/2)*i,n={x:Math.cos(t-Math.PI/2)*a,y:Math.sin(t-Math.PI/2)*a},l={id:this.utility.generateUID(e),transform:{pos:{x:r,y:o},rot:t},timestamp:Date.now(),color:"rgba(255, 255, 255, 0)",damage:this.playerState.myPlayer.actions.melee.damage,distanceTraveled:0,length:s,ownerId:this.userId,range:a,size:s,velocity:n};this.projectiles.set(l.id,l),this.roomManager.sendMessage(JSON.stringify({type:"projectile-launch",projectile:l})),setTimeout(()=>{this.projectiles.delete(l.id),this.playerState.isMelee=!1,this.playerState.myPlayer.rig.weapon="GLOCK",this.roomManager.sendMessage(JSON.stringify({type:"weapon-change",playerId:this.userId,weapon:"GLOCK"}))},this.playerState.myPlayer.actions.melee.duration)}toggleAutoFire(t){this.autoFireEndTime=t,this.playerState.canAutoFire=!0;const e=this.playerState.myPlayer.actions.primary.buffer;this.playerState.myPlayer.actions.primary.buffer*=.5,console.log(`Auto-fire enabled until ${t}`),setTimeout(()=>{this.playerState.canAutoFire=!1,this.playerState.myPlayer.actions.primary.buffer=e,console.log("Auto-fire disabled.")},t-Date.now())}startBurst(){if(this.playerState.isBurstActive||!this.collisionsManager.collisionsEnabled(this.playerState.myPlayer)||this.playerState.isReloading)return;const t=Date.now();if(t<this.playerState.lastShotTime+this.playerState.myPlayer.actions.primary.buffer)return;this.playerState.lastShotTime=t;const e=this.playerState.myPlayer.actions.primary.burst.amount,a=Math.min(e,this.playerState.myPlayer.actions.primary.magazine.currentAmmo);if(0===a)return console.log("Out of ammo! Magazine empty."),this.animator.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:8}},duration:0,partIndex:1}),void this.audioManager.playAudioNetwork({src:this.utility.getRandomInArray(b.WEAPON.GLOCK.EMPTY),listener:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},output:"sfx",pitch:{min:.975,max:1.05},spatial:{blend:1,pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y}},volume:{min:.985,max:1}});this.playerState.isBurstActive=!0,this.playerState.currentBurstShot=0;const s=this.playerState.myPlayer.transform.rot-Math.PI/2,i={x:Math.cos(s),y:Math.sin(s)};0===this.triggerBurstUniques().length&&this.launchProjectile(i),this.playerState.currentBurstShot++,this.playerState.myPlayer.actions.primary.magazine.currentAmmo--;const r=1-this.playerState.myPlayer.actions.primary.magazine.currentAmmo/this.playerState.myPlayer.actions.primary.magazine.size;if(r>.5){const t=2*(r-.5)*.5;this.audioManager.playAudio({src:this.utility.getRandomInArray(b.WEAPON.GLOCK.EMPTY),listener:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},output:"sfx",pitch:{min:.975,max:1.05},volume:{min:t,max:t}})}this.playerState.myPlayer.actions.primary.burst.amount>1&&this.playerState.myPlayer.actions.primary.magazine.currentAmmo>0&&this.playerState.currentBurstShot<a?this.playerState.nextBurstShotTime=Date.now()+this.playerState.myPlayer.actions.primary.burst.delay:(this.playerState.isBurstActive=!1,this.playerState.currentBurstShot=0,0===this.playerState.myPlayer.actions.primary.magazine.currentAmmo&&this.animator.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:8}},duration:0,partIndex:1}))}launchProjectile(t,a){console.log("Fired shot!");const s=Math.sqrt(t.x*t.x+t.y*t.y);if(0===s)return;const i=t.x/s,r=t.y/s;this.animator.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:0},.5:{x:0,y:20},1:{x:0,y:0}},duration:175,partIndex:1});const h=a?.canTriggerUnique??!0,m=a?.amount??this.playerState.myPlayer.actions.primary.projectile.amount,c=a?.color??this.playerState.myPlayer.actions.primary.projectile.color,p=a?.damage??this.playerState.myPlayer.actions.primary.projectile.damage,u=a?.length??this.playerState.myPlayer.actions.primary.projectile.length,g=a?.range??this.playerState.myPlayer.actions.primary.projectile.range,S=a?.size??this.playerState.myPlayer.actions.primary.projectile.size,I=a?.speed??this.playerState.myPlayer.actions.primary.projectile.speed,M=a?.spread??this.playerState.myPlayer.actions.primary.projectile.spread,f=this.collisionsManager.getPlayerCollider(this.playerState.myPlayer)+S+this.playerState.myPlayer.actions.primary.offset,E=this.playerState.myPlayer.transform.pos.x+i*f,C=this.playerState.myPlayer.transform.pos.y+r*f,P=-r,A=i;this.particlesManager.createParticles(E,C,`muzzle_${Date.now()}`,o,{x:i,y:r}),this.particlesManager.createParticles(E,C,`smoke_${Date.now()}`,l,{x:.3*i,y:.3*r}),this.particlesManager.createParticles(E-5,C-5,`shell_${Date.now()}`,n,{x:.8*P+-.2*i,y:.8*A+-.2*r}),this.audioManager.playAudioNetwork({src:this.utility.getRandomInArray(b.WEAPON.GLOCK.ATTACK),listener:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},output:"sfx",pitch:{min:.95,max:1.125},spatial:{blend:1,pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},rolloff:{distance:2*Math.max(d,y),factor:.5,type:"logarithmic"}},volume:{min:.965,max:1}}),this.audioManager.playAudioNetwork({src:this.utility.getRandomInArray(b.WEAPON.GLOCK.SHELL),delay:{min:.25,max:.5},listener:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},output:"sfx",pitch:{min:.95,max:1.125},spatial:{blend:1,pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y}},volume:{min:.375,max:.85}});for(let t=0;t<m;t++){if(this.playerState.myPlayer.unique.length>0&&h){const t=this.utility.getShuffledArray(this.playerState.myPlayer.unique);for(const e of t)if(this.luckController.luckRoll()){this.triggerUnique(e);break}}const t=(Math.random()-.5)*(M/100),a=Math.atan2(r,i)+t,s=this.utility.forward(a),o={id:this.utility.generateUID(e),transform:{pos:{x:this.playerState.myPlayer.transform.pos.x+Math.cos(a)*f,y:this.playerState.myPlayer.transform.pos.y+Math.sin(a)*f},rot:a},timestamp:Date.now(),color:c,damage:p,distanceTraveled:0,length:u,ownerId:this.userId,range:100*g,size:S,velocity:{x:s.x*I,y:s.y*I}};this.projectiles.set(o.id,o),this.roomManager.sendMessage(JSON.stringify({type:"projectile-launch",projectile:o}))}}updateProjectiles(t){const e=[];this.projectiles.forEach((i,o)=>{if(i.ownerId===this.userId&&this.playerState.myPlayer.unique.includes("spatial_targeting")){const t=this.playerState.myPlayer.transform.rot-Math.PI/2,e=Math.cos(t),a=Math.sin(t),s=Math.sqrt(i.velocity.x**2+i.velocity.y**2),r=i.velocity.x/s,o=i.velocity.y/s,n=.05,l=r+(e-r)*n,h=o+(a-o)*n,m=Math.sqrt(l**2+h**2);i.velocity.x=l/m*s,i.velocity.y=h/m*s,i.transform.rot=Math.atan2(i.velocity.y,i.velocity.x)}i.transform.pos.x+=i.velocity.x*t,i.transform.pos.y+=i.velocity.y*t;const n=Math.sqrt(i.velocity.x*i.velocity.x+i.velocity.y*i.velocity.y)*t;if(i.distanceTraveled+=n,this.collisionsManager.collisionsEnabled(this.playerState.myPlayer)){const t=i.transform.pos.x-this.playerState.myPlayer.transform.pos.x,a=i.transform.pos.y-this.playerState.myPlayer.transform.pos.y,s=Math.sqrt(t*t+a*a),r=this.collisionsManager.getPlayerCollider(this.playerState.myPlayer);if(this.playerState.myPlayer.unique.includes("kinetic_brain")&&s<=4*r&&s>r+i.size&&i.ownerId!==this.userId&&this.luckController.luckRoll()){console.log("Kinetic Brain activated! Deflecting projectile.");const t={x:(i.transform.pos.x-this.playerState.myPlayer.transform.pos.x)/s,y:(i.transform.pos.y-this.playerState.myPlayer.transform.pos.y)/s},e=this.utility.getRandomNum(.85,.95),a=this.utility.getReflection(i.velocity,t);return i.velocity.x=a.x*e,i.velocity.y=.85*a.y,i.ownerId=this.userId,i.color=this.playerState.myPlayer.actions.primary.projectile.color,i.transform.rot=Math.atan2(i.velocity.y,i.velocity.x),void this.roomManager.sendMessage(JSON.stringify({type:"projectile-deflect",projectileId:i.id,newOwnerId:this.userId,velocity:i.velocity,color:i.color}))}if(s<=r+i.size){e.push(o);const t=Math.max(0,i.damage-this.playerState.myPlayer.stats.defense);this.playerState.myPlayer.stats.health.value-=t;const a=300,s={sliderId:"healthBar",targetValue:this.playerState.myPlayer.stats.health.value,maxValue:this.playerState.myPlayer.stats.health.max,lerpTime:a};this.utility.setSlider(s),this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:this.userId,shooterId:i.ownerId,damage:i.damage,newHealth:this.playerState.myPlayer.stats.health.value,projectileId:o}))}}i.ownerId===this.userId&&this.playerState.players.forEach((t,a)=>{if(this.collisionsManager.collisionsEnabled(t)){const n=i.transform.pos.x-t.transform.pos.x,l=i.transform.pos.y-t.transform.pos.y;if(Math.sqrt(n*n+l*l)<=this.collisionsManager.getPlayerCollider(t)+i.size){e.push(o);const n=Math.max(0,i.damage-t.stats.defense),l=Math.max(0,t.stats.health.value-n);t.stats.health.value=l;const h={x:-i.velocity.x/Math.sqrt(i.velocity.x**2+i.velocity.y**2),y:-i.velocity.y/Math.sqrt(i.velocity.x**2+i.velocity.y**2)};this.decalsManager.createDecal(i.transform.pos.x,i.transform.pos.y,`blood_${o}`,s),this.particlesManager.createParticles(i.transform.pos.x,i.transform.pos.y,`blood_${o}`,r,h);const m={id:`particle_emitter_${a}_${Date.now()}`,interval:this.utility.getRandomNum(200,400),lifetime:this.utility.getRandomNum(1e3,3e3),offset:{x:t.transform.pos.x,y:t.transform.pos.y},playerId:a,pos:{x:i.transform.pos.x,y:i.transform.pos.y}};if(this.particlesManager.createEmitter(m),this.audioManager.playAudioNetwork({src:this.utility.getRandomInArray(b.IMPACT.FLESH.BULLET),listener:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},output:"sfx",pitch:{min:.925,max:1.15},spatial:{blend:1,pos:{x:i.transform.pos.x,y:i.transform.pos.y}},volume:{min:.95,max:1}}),l<=0){console.log(`I killed ${a}!`);const t=this.ui.leaderboard.get(this.userId);t&&t.kills++;const e=this.ui.leaderboard.get(a);e&&e.deaths++,this.ui.updateLeaderboardDisplay(this.userId),window.dispatchEvent(new CustomEvent("customEvent_checkRoundEnd"))}this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:a,shooterId:this.userId,damage:i.damage,newHealth:l,projectileId:o,wasKill:l<=0}))}}}),(i.distanceTraveled>=i.range||i.transform.pos.x<0||i.transform.pos.x>d||i.transform.pos.y<0||i.transform.pos.y>y)&&(e.push(o),i.ownerId===this.userId)&&(this.triggerCollisionUniques(i.transform.pos),i.distanceTraveled>=i.range&&this.decalsManager.createDecal(i.transform.pos.x,i.transform.pos.y,`impact_${o}`,a),this.particlesManager.createParticles(i.transform.pos.x,i.transform.pos.y,`sparks_${o}`,h),this.audioManager.playAudioNetwork({src:this.utility.getRandomInArray(b.IMPACT.METAL.BULLET),listener:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},output:"sfx",pitch:{min:.95,max:1.125},spatial:{blend:1,pos:{x:i.transform.pos.x,y:i.transform.pos.y}},volume:{min:.965,max:1}}),this.roomManager.sendMessage(JSON.stringify({type:"projectile-remove",projectileId:o})))}),e.forEach(t=>{this.projectiles.delete(t)})}triggerUnique(t,e){if("cluster_module"===t&&e){const t=this.utility.getRandomInt(3,6),a=[];for(let e=0;e<t;e++)a.push(this.utility.getRandomInArray(m));const s={amount:t,damage:1,images:a,lifetime:{min:100,max:500},pos:{x:e.x,y:e.y},size:{min:8,max:14},speed:{min:10,max:15},torque:{min:-360,max:360}};this.particlesManager.spawnShrapnel(s)}if("projectile_array"===t){const t=this.utility.getRandomInt(1,3);for(let e=0;e<t;e++){const t=this.utility.getRandomDirection(360),e={canTriggerUnique:!1,damage:this.playerState.myPlayer.actions.primary.projectile.damage/2,range:this.utility.getRandomNum(this.playerState.myPlayer.actions.primary.projectile.range/2,this.playerState.myPlayer.actions.primary.projectile.range),spread:this.utility.getRandomNum(this.playerState.myPlayer.actions.primary.projectile.spread,2*this.playerState.myPlayer.actions.primary.projectile.spread)};this.launchProjectile(t,e)}}console.log(`Triggered Unique: ${t}`)}triggerBurstUniques(){const t=[];if(this.playerState.myPlayer.unique.includes("muzzle_spliter")&&this.luckController.luckRoll()){const e=this.playerState.myPlayer.transform.rot-Math.PI/2,a=Math.PI/180*10,s={x:Math.cos(e-a),y:Math.sin(e-a)},i={x:Math.cos(e+a),y:Math.sin(e+a)},r={canTriggerUnique:!1,damage:this.playerState.myPlayer.actions.primary.projectile.damage,range:this.playerState.myPlayer.actions.primary.projectile.range,size:this.playerState.myPlayer.actions.primary.projectile.size,speed:this.playerState.myPlayer.actions.primary.projectile.speed,color:this.playerState.myPlayer.actions.primary.projectile.color,length:this.playerState.myPlayer.actions.primary.projectile.length,spread:this.playerState.myPlayer.actions.primary.projectile.spread};this.launchProjectile(s,r),this.launchProjectile(i,r),console.log("Triggered burst unique: muzzle_spliter"),t.push("muzzle_spliter")}return t}triggerCollisionUniques(t){if(0===this.playerState.myPlayer.unique.length)return[];const e=[];for(const a of this.playerState.myPlayer.unique)"cluster_module"===a&&this.luckController.luckRoll()&&(this.triggerUnique(a,t),e.push("cluster_module"));return e}canReload(){return!this.playerState.isReloading&&this.playerState.myPlayer.actions.primary.magazine.currentAmmo<this.playerState.myPlayer.actions.primary.magazine.size&&this.playerState.myPlayer.actions.primary.magazine.currentReserve>0&&!this.playerState.isMelee}startReload(){this.canReload()&&(console.log("Reloading..."),this.playerState.isReloading=!0,this.playerState.reloadStartTime=Date.now(),this.playerState.isBurstActive=!1,this.playerState.currentBurstShot=0,this.animator.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:8}},duration:0,partIndex:1}))}finishReload(){const t=this.playerState.myPlayer.actions.primary.magazine.size-this.playerState.myPlayer.actions.primary.magazine.currentAmmo,e=Math.min(t,this.playerState.myPlayer.actions.primary.magazine.currentReserve);this.playerState.myPlayer.actions.primary.magazine.currentAmmo+=e,this.playerState.myPlayer.actions.primary.magazine.currentReserve-=e,this.playerState.isReloading=!1,this.ammoReservesUIController.removeAmmoFromReserveUI(e),this.animator.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:20},1:{x:0,y:0}},duration:175,partIndex:1}),console.log("Reload complete...")}}class J{constructor(t,e,a,s,i,r,o){this.collisionsManager=t,this.combatController=e,this.moveController=a,this.playerState=s,this.roomManager=i,this.staminaController=r,this.userId=o}startDash(){if(this.playerState.isDashing||!this.collisionsManager.collisionsEnabled(this.playerState.myPlayer)||!this.moveController.isMoving())return;const t=Date.now();if(t<this.playerState.lastDashTime+this.playerState.myPlayer.actions.dash.cooldown)return void console.log("Dash on cooldown");let{inputX:e,inputY:a,inputLength:s}=this.moveController.getMoveInput();if(!this.moveController.isMoving())return void console.log("No movement input for dash");if(e/=s,a/=s,!this.staminaController.requestStamina(this.playerState.myPlayer.actions.dash.drain))return void console.log("Not enough stamina to dash");this.playerState.myPlayer.unique.includes("spectral_image")&&(this.playerState.myPlayer.flags.hidden=!0,this.playerState.myPlayer.flags.invulnerable=!0,this.roomManager.sendMessage(JSON.stringify({type:"partial-state",userId:this.userId,flags:{hidden:!0,invulnerable:!0}}))),this.playerState.isDashing=!0,this.playerState.dashStartTime=t,this.playerState.lastDashTime=t;const i=this.playerState.myPlayer.stats.speed*this.playerState.myPlayer.actions.dash.multiplier;this.playerState.playerVelocityX=e*i,this.playerState.playerVelocityY=a*i,console.log(`Dashing! Speed: ${i}`)}updateDash(t){if(!this.playerState.isDashing)return;const e=Date.now();let a=this.playerState.myPlayer.transform.pos.x+this.playerState.playerVelocityX*t,s=this.playerState.myPlayer.transform.pos.y+this.playerState.playerVelocityY*t;this.playerState.myPlayer.transform.pos.x=a,this.playerState.myPlayer.transform.pos.y=s;let i=0!==this.playerState.playerVelocityX||0!==this.playerState.playerVelocityY;const r=Math.sqrt((this.playerState.myPlayer.transform.pos.x-this.playerState.lastSentX)**2+(this.playerState.myPlayer.transform.pos.y-this.playerState.lastSentY)**2);i&&r>2&&e-this.playerState.lastSentMoveTime>=10&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y}}})),this.playerState.lastSentX=this.playerState.myPlayer.transform.pos.x,this.playerState.lastSentY=this.playerState.myPlayer.transform.pos.y,this.playerState.lastSentMoveTime=e),e>=this.playerState.dashStartTime+this.playerState.myPlayer.actions.dash.time&&(this.playerState.myPlayer.unique.includes("spectral_image")&&(this.playerState.myPlayer.flags.hidden=!1,this.playerState.myPlayer.flags.invulnerable=!1,this.roomManager.sendMessage(JSON.stringify({type:"partial-state",userId:this.userId,flags:{hidden:!1,invulnerable:!1}}))),this.playerState.isDashing=!1,this.playerState.myPlayer.equipment.includes("switch")&&this.combatController.toggleAutoFire(Date.now()+this.playerState.myPlayer.actions.dash.cooldown),console.log("Dash ended"))}}class Z{constructor(t){this.playerState=t}luckRoll(t=1){const e=this.playerState.myPlayer.stats.luck*t,a=.1+.35*Math.tanh(e/10);return Math.random()<a}}class Q{constructor(t,e){this.controlsManager=t,this.settingsManager=e}getMoveInput(){let t=0,e=0;this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveUp)&&(e-=1),this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveDown)&&(e+=1),this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveLeft)&&(t-=1),this.controlsManager.getActiveKeys().has(this.settingsManager.getSettings().controls.keybinds.moveRight)&&(t+=1);const a=Math.sqrt(t*t+e*e);return a>0&&(t/=a,e/=a),{inputX:t,inputY:e,inputLength:a}}isMoving(){return this.getMoveInput().inputLength>0}}class tt{constructor(t,e){this.playerState=t,this.utility=e,this.ammoBoxes=new Map}spawnObject(t){const a={id:this.utility.generateUID(e),transform:t.transform,timestamp:Date.now()};if("AmmoBox"===t.type)return{id:a.id,transform:a.transform,timestamp:a.timestamp,ammoAmount:t.data?.amount||10,isOpen:!1,lid:{pos:{x:0,y:0},rot:0,velocity:{x:0,y:0},torque:0}};throw new Error(`Unknown object type: ${t.type}`)}spawnAmmoBox(t){return this.spawnObject({type:"AmmoBox",transform:{pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},rot:this.playerState.myPlayer.transform.rot},data:{amount:t}})}}class et{constructor(t,e,a,s,i,r,o,n,l){this.gameState=t,this.luckController=e,this.moveController=a,this.objectsManager=s,this.particlesManager=i,this.playerState=r,this.roomManager=o,this.userId=n,this.utility=l}updatePlayerPosition(t){if(!this.gameState.gameInProgress||this.playerState.myPlayer.stats.health.value<=0||this.playerState.isDashing)return;const e=Date.now(),{inputX:a,inputY:s}=this.moveController.getMoveInput(),i=this.playerState.isSprinting&&this.playerState.myPlayer.stats.stamina.value>0&&this.moveController.isMoving()?this.playerState.myPlayer.stats.speed*this.playerState.myPlayer.actions.sprint.multiplier:this.playerState.myPlayer.stats.speed;this.playerState.isSprinting&&this.playerState.myPlayer.stats.stamina.value<=0&&(this.playerState.isSprinting=!1,console.log("Out of stamina, stopped sprinting"));const r=a*i,o=s*i;this.playerState.playerVelocityX+=(r-this.playerState.playerVelocityX)*this.playerState.myPlayer.physics.acceleration*t,this.playerState.playerVelocityY+=(o-this.playerState.playerVelocityY)*this.playerState.myPlayer.physics.acceleration*t,this.moveController.isMoving()||(this.playerState.playerVelocityX*=Math.pow(this.playerState.myPlayer.physics.friction,t),this.playerState.playerVelocityY*=Math.pow(this.playerState.myPlayer.physics.friction,t));let n=this.playerState.myPlayer.transform.pos.x+this.playerState.playerVelocityX*t,l=this.playerState.myPlayer.transform.pos.y+this.playerState.playerVelocityY*t;this.playerState.myPlayer.transform.pos.x=n,this.playerState.myPlayer.transform.pos.y=l;let h=0!==this.playerState.playerVelocityX||0!==this.playerState.playerVelocityY;const m=Math.sqrt((this.playerState.myPlayer.transform.pos.x-this.playerState.lastSentX)**2+(this.playerState.myPlayer.transform.pos.y-this.playerState.lastSentY)**2);h&&m>2&&e-this.playerState.lastSentMoveTime>=10&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y}}})),this.playerState.lastSentX=this.playerState.myPlayer.transform.pos.x,this.playerState.lastSentY=this.playerState.myPlayer.transform.pos.y,this.playerState.lastSentMoveTime=e),Math.abs(this.playerState.playerVelocityX)<.01&&(this.playerState.playerVelocityX=0),Math.abs(this.playerState.playerVelocityY)<.01&&(this.playerState.playerVelocityY=0)}playerDeath(){if(this.triggerUniques().includes("phoenix_module"))return console.log("Death prevented."),!1;console.log("I died! Waiting for round to end..."),this.playerState.resetPlayerState();const t=this.objectsManager.spawnAmmoBox(10);this.objectsManager.ammoBoxes.set(t.id,t);const e={gore:{amount:this.utility.getRandomInt(2,5)},blood:{amount:this.utility.getRandomInt(1,3)},ownerId:this.userId,pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},radius:this.playerState.myPlayer.stats.size};return this.particlesManager.generateGore(e),this.roomManager.sendMessage(JSON.stringify({type:"player-death",playerId:this.userId,x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y,size:this.playerState.myPlayer.stats.size,ammoBox:t})),!0}triggerUniques(){if(0===this.playerState.myPlayer.unique.length)return[];const t=[];for(const e of this.playerState.myPlayer.unique)if("phoenix_module"===e&&this.luckController.luckRoll(1.5)){console.log("Phoenix Module activated! Preventing death and applying damage boost.");const e={sliderId:"healthBar",targetValue:this.playerState.myPlayer.stats.health.value,maxValue:this.playerState.myPlayer.stats.health.max,lerpTime:300};this.utility.setSlider(e),this.playerState.myPlayer.stats.health.value=.05*this.playerState.myPlayer.stats.health.max,this.playerState.myPlayer.actions.primary.projectile.damage*=2;const a=this.playerState.myPlayer.unique.indexOf("phoenix_module");a>-1&&this.playerState.myPlayer.unique.splice(a,1),t.push("phoenix_module")}return t}}class at{constructor(t,e){this.utility=e,this.players=new Map,this.isHost=!1,this.canShoot=!0,this.canAutoFire=!1,this.isBurstActive=!1,this.isReloading=!1,this.isMelee=!1,this.isSprinting=!1,this.isDashing=!1,this.isStaminaRecoveryBlocked=!1,this.lastSentX=0,this.lastSentY=0,this.lastSentRotation=0,this.lastSentRotationTime=0,this.lastSentMoveTime=0,this.playerVelocityX=0,this.playerVelocityY=0,this.dashStartTime=0,this.lastDashTime=0,this.reloadStartTime=0,this.lastShotTime=0,this.lastMeleeTime=0,this.nextBurstShotTime=0,this.currentBurstShot=0,this.lastStaminaDrainTime=0,this.staminaRecoveryBlockedUntil=0,this.statListeners=new Map,this.myPlayer=this.initPlayer(t)}initPlayer(e){return this.myPlayer={id:e,transform:{pos:{x:770*Math.random()+p,y:570*Math.random()+p},rot:0},timestamp:Date.now(),color:this.utility.getRandomColor(),actions:{dash:{cooldown:t.ACTIONS.DASH.COOLDOWN,drain:t.ACTIONS.DASH.DRAIN,multiplier:t.ACTIONS.DASH.MULTIPLIER,time:t.ACTIONS.DASH.TIME},melee:{cooldown:t.ACTIONS.MELEE.COOLDOWN,damage:t.ACTIONS.MELEE.DAMAGE,duration:t.ACTIONS.MELEE.DURATION,range:t.ACTIONS.MELEE.RANGE,size:t.ACTIONS.MELEE.SIZE},primary:{buffer:t.ACTIONS.PRIMARY.BUFFER,burst:{amount:t.ACTIONS.PRIMARY.BURST.AMOUNT,delay:t.ACTIONS.PRIMARY.BURST.DELAY},magazine:{currentAmmo:t.ACTIONS.PRIMARY.MAGAZINE.SIZE,currentReserve:t.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE,maxReserve:t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE,size:t.ACTIONS.PRIMARY.MAGAZINE.SIZE},offset:t.ACTIONS.PRIMARY.OFFSET,projectile:{amount:t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,color:t.ACTIONS.PRIMARY.PROJECTILE.COLOR,damage:t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,length:t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,range:t.ACTIONS.PRIMARY.PROJECTILE.RANGE,size:t.ACTIONS.PRIMARY.PROJECTILE.SIZE,speed:t.ACTIONS.PRIMARY.PROJECTILE.SPEED,spread:t.ACTIONS.PRIMARY.PROJECTILE.SPREAD},reload:{time:t.ACTIONS.PRIMARY.RELOAD.TIME}},sprint:{drain:t.ACTIONS.SPRINT.DRAIN,multiplier:t.ACTIONS.SPRINT.MULTIPLIER}},equipment:t.EQUIPMENT,flags:{hidden:t.FLAGS.HIDDEN,invulnerable:t.FLAGS.INVULNERABLE},physics:{acceleration:t.PHYSICS.ACCELERATION,friction:t.PHYSICS.FRICTION},rig:{body:t.RIG.BODY,head:t.RIG.HEAD,headwear:t.RIG.HEADWEAR,weapon:t.RIG.WEAPON},stats:{defense:t.STATS.DEFENSE,health:{max:t.STATS.HEALTH.MAX,value:t.STATS.HEALTH.MAX},luck:t.STATS.LUCK,size:t.STATS.SIZE,speed:t.STATS.SPEED,stamina:{max:t.STATS.STAMINA.MAX,recovery:{delay:t.STATS.STAMINA.RECOVERY.DELAY,rate:t.STATS.STAMINA.RECOVERY.RATE},value:t.STATS.STAMINA.MAX}},unique:t.UNIQUE}}resetPlayerState(){this.canShoot=!0,this.isBurstActive=!1,this.isReloading=!1,this.isMelee=!1,this.isSprinting=!1,this.isDashing=!1,this.isStaminaRecoveryBlocked=!1,this.playerVelocityX=0,this.playerVelocityY=0,this.dashStartTime=0,this.lastDashTime=0,this.reloadStartTime=0,this.lastMeleeTime=0,this.lastShotTime=0,this.nextBurstShotTime=0,this.currentBurstShot=0,this.lastStaminaDrainTime=0,this.staminaRecoveryBlockedUntil=0,this.lastSentX=0,this.lastSentY=0,this.lastSentRotation=0,this.lastSentRotationTime=0,this.lastSentMoveTime=0}onStatChange(t,e){this.statListeners.set(t,e)}notifyChange(t,e){const a=this.statListeners.get(t);a&&a(e)}updateStat(t,e){const a=t.split(".");let s=this.myPlayer;for(let t=0;t<a.length-1;t++)s=s[a[t]];const i=a[a.length-1];s[i]=e,console.log(`${i}: ${e}`),this.notifyChange(t,e)}}class st{constructor(t){this.playerState=t}requestStamina(t){return this.playerState.myPlayer.stats.stamina.value<t?(console.log(`Insufficient stamina! Need: ${t}, Have: ${this.playerState.myPlayer.stats.stamina}`),!1):(this.playerState.myPlayer.stats.stamina.value-=t,this.playerState.isStaminaRecoveryBlocked=!0,this.playerState.staminaRecoveryBlockedUntil=Date.now()+this.playerState.myPlayer.stats.stamina.recovery.delay,console.log(`Stamina drained: -${t}, Remaining: ${this.playerState.myPlayer.stats.stamina}`),!0)}updateStamina(t){const e=Date.now();if(this.playerState.isSprinting&&e>=this.playerState.lastStaminaDrainTime+100&&(this.requestStamina(this.playerState.myPlayer.actions.sprint.drain)||(this.playerState.isSprinting=!1,console.log("Out of stamina, stopped sprinting")),this.playerState.lastStaminaDrainTime=e),(!this.playerState.isStaminaRecoveryBlocked||e>=this.playerState.staminaRecoveryBlockedUntil)&&(this.playerState.isStaminaRecoveryBlocked=!1,this.playerState.myPlayer.stats.stamina.value<this.playerState.myPlayer.stats.stamina.max&&!this.playerState.isSprinting)){const e=this.playerState.myPlayer.stats.stamina.recovery.rate/1e3*16.67*t;this.playerState.myPlayer.stats.stamina.value=Math.min(this.playerState.myPlayer.stats.stamina.max,this.playerState.myPlayer.stats.stamina.value+e)}}}class it{constructor(){this.dbName="SaltpeterCache",this.dbVersion=1,this.db=null,this.initDB()}async initDB(){return new Promise((t,e)=>{const a=indexedDB.open(this.dbName,this.dbVersion);a.onerror=()=>e(a.error),a.onsuccess=()=>{this.db=a.result,t()},a.onupgradeneeded=t=>{const e=t.target.result;e.objectStoreNames.contains("settings")||e.createObjectStore("settings")}})}async write(t,e){return this.db||await this.initDB(),new Promise((a,s)=>{const i=this.db.transaction(["settings"],"readwrite").objectStore("settings").put(e,t);i.onerror=()=>s(i.error),i.onsuccess=()=>a()})}async read(t){return this.db||await this.initDB(),new Promise((e,a)=>{const s=this.db.transaction(["settings"],"readonly").objectStore("settings").get(t);s.onerror=()=>a(s.error),s.onsuccess=()=>e(s.result)})}async delete(t){return this.db||await this.initDB(),new Promise((e,a)=>{const s=this.db.transaction(["settings"],"readwrite").objectStore("settings").delete(t);s.onerror=()=>a(s.error),s.onsuccess=()=>e()})}async clear(){return this.db||await this.initDB(),new Promise((t,e)=>{const a=this.db.transaction(["settings"],"readwrite").objectStore("settings").clear();a.onerror=()=>e(a.error),a.onsuccess=()=>t()})}}const rt={KEYS:["Control","Shift","Alt","-","+"],REQUIRED_COUNT:5};class ot{constructor(t,e){this.cacheManager=t,this.ui=e,this.adminKeysHeld=new Set,this.initKeyListener(),this.initConsoleKeybinds()}initKeyListener(){window.addEventListener("keydown",t=>{this.adminKeysHeld.add(t.key),this.checkAdminCombo()}),window.addEventListener("keyup",t=>{this.adminKeysHeld.delete(t.key)})}checkAdminCombo(){rt.KEYS.every(t=>this.adminKeysHeld.has(t))&&this.adminKeysHeld.size===rt.REQUIRED_COUNT&&(this.adminKeysHeld.clear(),this.showAdminModal())}showAdminModal(){this.ui.modal&&this.ui.modalInput&&this.ui.modalConfirmButton&&this.ui.modalCancelButton&&this.ui.modalErrorDiv&&this.ui.modalText&&(this.ui.modal.classList.remove("hidden"),this.ui.modalConfirmButton.classList.remove("hidden"),this.ui.modalInput.value="",this.ui.modalInput.style.display="block",this.ui.modalErrorDiv.textContent="",this.ui.modalText.textContent="Enter Admin Command.",this.ui.modalConfirmButton.textContent="Execute",this.ui.modalCancelButton.textContent="Cancel",this.ui.modalInput.focus(),this.ui.modalConfirmButton.onclick=()=>{if(!this.ui.modalInput||!this.ui.modalErrorDiv)return;const t=this.ui.modalInput.value.trim();if(!t.includes(":"))return void(this.ui.modalErrorDiv.textContent="Invalid format.");const[e,a]=t.split(":");e&&a?(this.executeAdminCommand(e.trim(),a.trim()),this.ui.closeModal()):this.ui.modalErrorDiv.textContent="Invalid format."},this.ui.modalCancelButton.onclick=()=>this.ui.closeModal())}executeAdminCommand(t,e){console.log(`Admin command: ${t} with key: ${e}`),this.onAdminCommand?.(t,e)}initConsoleKeybinds(){document.addEventListener("keydown",t=>{t.getModifierState("Control")&&"`"===t.key&&(t.preventDefault(),this.clearCacheCommand())})}clearCacheCommand(){this.cacheManager.clear().then(()=>{console.log("Cache cleared! Reload the page."),location.reload()})}}class nt{constructor(){this.isRoundInProgress=!1,this.roundWinner=null,this.gameWinner=null,this.cacheManager=new it,this.utility=new V,this.gameState=new k,this.settingsManager=new H(this.cacheManager),this.controlsManager=new O(this.settingsManager),this.charConfig=new T,this.charManager=new w(this.charConfig),this.userId=this.utility.generateUID(t.DATA.ID_LENGTH),this.playerState=new at(this.userId,this.utility),this.ui=new $(this.playerState,this.settingsManager),this.ammoReservesUIController=new K(this.ui),this.upgradeManager=new q(this.ammoReservesUIController,this.playerState,this.utility),this.admin=new ot(this.cacheManager,this.ui),this.objectsManager=new tt(this.playerState,this.utility),this.roomManager=new z(this.userId,this.utility),this.lobbyManager=new _(this.utility,this.ui,this.roomManager),this.wsManager=new X(this.gameState,this.roomManager),this.roomController=new F(this.gameState,this.lobbyManager,this.playerState,this.roomManager,this.ui,this.upgradeManager,this.userId,this.wsManager),this.chatManager=new N(this.roomManager,this.ui),this.collisionsManager=new L(this.ammoReservesUIController,this.objectsManager,this.playerState,this.roomManager,this.userId),this.moveController=new Q(this.controlsManager,this.settingsManager),this.staminaController=new st(this.playerState),this.luckController=new Z(this.playerState),this.audioManager=new R(this.roomManager,this.settingsManager),this.animator=new x(this.playerState,this.roomManager,this.userId),this.renderingManager=new j(this.animator,this.charManager,this.objectsManager,this.ui),this.decalsManager=new B(this.roomManager,this.ui,this.utility),this.particlesManager=new U(this.charConfig,this.collisionsManager,this.decalsManager,this.playerState,this.renderingManager,this.roomManager,this.ui,this.userId,this.utility),this.playerController=new et(this.gameState,this.luckController,this.moveController,this.objectsManager,this.particlesManager,this.playerState,this.roomManager,this.userId,this.utility),this.combatController=new W(this.ammoReservesUIController,this.animator,this.audioManager,this.collisionsManager,this.decalsManager,this.gameState,this.luckController,this.particlesManager,this.playerState,this.roomManager,this.ui,this.userId,this.utility),this.dashController=new J(this.collisionsManager,this.combatController,this.moveController,this.playerState,this.roomManager,this.staminaController,this.userId),this.eventsManager=new D(this.animator,this.chatManager,this.controlsManager,this.gameState,this.lobbyManager,this.roomController,this.playerState,this.settingsManager,this.ui,this.userId),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{this.initClient()}):this.initClient(),document.addEventListener("keydown",t=>{if("Escape"===t.key&&this.gameState.gameInProgress&&!this.lobbyManager.inLobby){t.preventDefault();const e=20;this.playerState.myPlayer.actions.primary.magazine.currentReserve+=e,this.ammoReservesUIController.spawnAmmoInReserveUI(e)}})}async initClient(){this.ui.initInterface(),this.eventsManager.initEventListeners(),this.initGlobalEvents(),this.roomController.checkForRoomInURL(),this.ammoReservesUIController.initAmmoReserveCanvas(),this.roomController.showRoomControls();const t={spanId:"userId",value:this.userId};this.utility.setSpan(t),await this.settingsManager.loadSettings();const e=this.settingsManager.getSettings().audio.mixer;this.ui.initSoundSliders(e),this.eventsManager.initKeybindListeners(),A&&this.audioManager.preloadAudioAssets(b,".ogg"),this.watchForInputs(),this.admin.onAdminCommand=(t,e)=>{this.roomManager.sendAdminCommand(t,e)}}initGlobalEvents(){window.addEventListener("customEvent_startGame",()=>this.startGame()),window.addEventListener("customEvent_resetGameState",t=>{const e=t;this.resetGameState(e.detail.resetType)}),window.addEventListener("customEvent_checkRoundEnd",()=>this.checkRoundEnd()),this.roomManager.onMessage(t=>this.handleRoomMessage(t))}handleRoomMessage(t){switch(t.type){case"room-created":console.log("Room created");break;case"room-joined":console.log("Joined room - lobby"),this.playerState.isHost=!1,this.lobbyManager.showLobbyControls(this.gameState.gameMaxPlayers,this.gameState.gameMaxWins,this.playerState.isHost,this.roomManager.isPrivateRoom,this.upgradeManager.isUpgradesEnabled,this.lobbyManager,this.playerState.myPlayer,this.roomManager.getCurrentRoom()||"",this.userId),this.roomManager.sendMessage(JSON.stringify({type:"lobby-join",color:this.playerState.myPlayer.color})),this.lobbyManager.lobbyPlayers.set(this.userId,{id:this.userId,color:this.playerState.myPlayer.color,isHost:this.playerState.isHost}),this.ui.displayLobbyPlayers(this.playerState.isHost,this.lobbyManager,this.userId),this.ui.updateHostDisplay(this.playerState.isHost,this.lobbyManager),0===this.lobbyManager.lobbyPlayers.size&&(this.playerState.isHost=!0,this.lobbyManager.lobbyPlayers.get(this.userId).isHost=!0,this.ui.updateHostDisplay(this.playerState.isHost,this.lobbyManager),console.log("I am the only player in the room..."));break;case"user-left":console.log(`User ${t.userId} left`),this.lobbyManager.lobbyPlayers.delete(t.userId),this.playerState.players.delete(t.userId),this.ui.leaderboard.delete(t.userId),this.ui.updateLeaderboardDisplay(this.userId),console.log(`Removed ${t.userId} from leaderboard`),this.combatController.projectiles.forEach((e,a)=>{e.ownerId===t.userId&&this.combatController.projectiles.delete(a)}),this.ui.displayLobbyPlayers(this.playerState.isHost,this.lobbyManager,this.userId);break;case"room-message":this.handleGameMessage(t);break;case"room-error":alert(`Error: ${t.message}`)}}handleGameMessage(e){if(e.message)try{const a=JSON.parse(e.message);switch(a.type){case"lobby-join":this.lobbyManager.lobbyPlayers.set(e.userId,{id:e.userId,color:a.color,isHost:!1}),this.ui.displayLobbyPlayers(this.playerState.isHost,this.lobbyManager,this.userId),this.playerState.isHost&&this.roomManager.sendMessage(JSON.stringify({type:"lobby-state",players:Array.from(this.lobbyManager.lobbyPlayers.values()),options:{privateRoom:this.roomManager.isPrivateRoom,maxPlayers:this.gameState.gameMaxPlayers,maxWins:this.gameState.gameMaxWins,upgradesEnabled:this.upgradeManager.isUpgradesEnabled}}));break;case"lobby-state":this.lobbyManager.lobbyPlayers.clear(),a.players.forEach(t=>{this.lobbyManager.lobbyPlayers.set(t.id,t)}),this.ui.displayLobbyPlayers(this.playerState.isHost,this.lobbyManager,this.userId),this.ui.updateHostDisplay(this.playerState.isHost,this.lobbyManager),a.options&&this.lobbyManager.syncLobbyOptions(a.options);break;case"lobby-options":this.lobbyManager.syncLobbyOptions(a);break;case"promote-player":this.lobbyManager.lobbyPlayers.forEach((t,e)=>{t.isHost=e===a.targetPlayerId}),this.playerState.isHost=a.targetPlayerId===this.userId,this.playerState.isHost&&"host-migration"===a.reason&&console.log("I am now the host due to host migration"),this.lobbyManager.setupLobbyOptions(this.gameState.gameMaxPlayers,this.gameState.gameMaxWins,this.playerState.isHost,this.roomManager.isPrivateRoom,this.upgradeManager.isUpgradesEnabled),this.ui.displayLobbyPlayers(this.playerState.isHost,this.lobbyManager,this.userId),this.ui.updateHostDisplay(this.playerState.isHost,this.lobbyManager);break;case"return-to-lobby":console.log("Returning to lobby - last player or game ended"),a.newHostId===this.userId&&(this.playerState.isHost=!0,console.log("I am now the host as the last remaining player")),this.resetGameState("Lobby"),this.lobbyManager.showLobbyControls(this.gameState.gameMaxPlayers,this.gameState.gameMaxWins,this.playerState.isHost,this.roomManager.isPrivateRoom,this.upgradeManager.isUpgradesEnabled,this.lobbyManager,this.playerState.myPlayer,this.roomManager.getCurrentRoom()||"",this.userId);break;case"kick-player":a.targetPlayerId===this.userId&&(alert("You have been kicked from the lobby"),this.roomController.leaveRoom());break;case"chat-message":e.userId!==this.userId&&this.chatManager.displayChatMessage(e.userId,a.message,!1);break;case"player-state":console.log("Player State for player",a.id,":",a),this.lobbyManager.inLobby||this.playerState.players.set(e.userId,{id:e.userId,transform:{pos:{x:a.transform?.pos.x,y:a.transform?.pos.y},rot:a.transform?.rot},timestamp:a.timestamp,color:a.color,actions:{dash:{cooldown:a.actions?.dash.cooldown||t.ACTIONS.DASH.COOLDOWN,drain:a.actions?.dash.drain||t.ACTIONS.DASH.DRAIN,multiplier:a.actions?.dash.multiplier||t.ACTIONS.DASH.MULTIPLIER,time:a.actions?.dash.time||t.ACTIONS.DASH.TIME},melee:{cooldown:a.actions?.melee.cooldown||t.ACTIONS.MELEE.COOLDOWN,damage:a.actions?.melee.damage||t.ACTIONS.MELEE.DAMAGE,duration:a.actions?.melee.duration||t.ACTIONS.MELEE.DURATION,range:a.actions?.melee.range||t.ACTIONS.MELEE.RANGE,size:a.actions?.melee.size||t.ACTIONS.MELEE.SIZE},primary:{buffer:a.actions?.primary.buffer||t.ACTIONS.PRIMARY.BUFFER,burst:{amount:a.actions?.primary.burst.amount||t.ACTIONS.PRIMARY.BURST.AMOUNT,delay:a.actions?.primary.burst.delay||t.ACTIONS.PRIMARY.BURST.DELAY},magazine:{currentAmmo:a.actions?.primary.magazine.currentAmmo,currentReserve:a.actions?.primary.magazine.currentReserve,maxReserve:a.actions?.primary.magazine.maxReserve,size:a.actions?.primary.magazine.size||t.ACTIONS.PRIMARY.MAGAZINE.SIZE},offset:a.actions?.primary.offset||t.ACTIONS.PRIMARY.OFFSET,projectile:{amount:a.actions?.primary.projectile.amount||t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,color:a.actions?.primary.projectile.color||t.ACTIONS.PRIMARY.PROJECTILE.COLOR,damage:a.actions?.primary.projectile.damage||t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,length:a.actions?.primary.projectile.length||t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,range:a.actions?.primary.projectile.range||t.ACTIONS.PRIMARY.PROJECTILE.RANGE,size:a.actions?.primary.projectile.size||t.ACTIONS.PRIMARY.PROJECTILE.SIZE,speed:a.actions?.primary.projectile.speed||t.ACTIONS.PRIMARY.PROJECTILE.SPEED,spread:a.actions?.primary.projectile.spread||t.ACTIONS.PRIMARY.PROJECTILE.SPREAD},reload:{time:a.actions?.primary.reload.time||t.ACTIONS.PRIMARY.RELOAD.TIME}},sprint:{drain:a.actions?.sprint.drain||t.ACTIONS.SPRINT.DRAIN,multiplier:a.actions?.sprint.multiplier||t.ACTIONS.SPRINT.MULTIPLIER}},equipment:a.equipment||t.EQUIPMENT,flags:{hidden:a.flags.hidden||t.FLAGS.HIDDEN,invulnerable:a.flags.invulnerable||t.FLAGS.INVULNERABLE},physics:{acceleration:a.physics?.acceleration||t.PHYSICS.ACCELERATION,friction:a.physics?.friction||t.PHYSICS.FRICTION},rig:{body:a.rig?.body||t.RIG.BODY,head:a.rig?.head||t.RIG.HEAD,headwear:a.rig?.headwear||t.RIG.HEADWEAR,weapon:a.rig?.weapon||t.RIG.WEAPON},stats:{defense:a.stats?.defense||t.STATS.DEFENSE,health:{max:a.stats?.health.max||t.STATS.HEALTH.MAX,value:a.stats?.health.value||t.STATS.HEALTH.MAX},luck:a.stats?.luck||t.STATS.LUCK,size:a.stats?.size||t.STATS.SIZE,speed:a.stats?.speed||t.STATS.SPEED,stamina:{max:a.stats?.stamina.max||t.STATS.STAMINA.MAX,recovery:{delay:a.stats?.stamina.recovery.delay||t.STATS.STAMINA.RECOVERY.DELAY,rate:a.stats?.stamina.recovery.rate||t.STATS.STAMINA.RECOVERY.RATE},value:a.stats?.stamina.value||t.STATS.STAMINA.MAX}},unique:a.unique||t.UNIQUE}),a.leaderboard&&a.leaderboard.forEach(([t,e])=>{this.ui.leaderboard.set(t,e)}),this.ui.createLeaderboard(this.lobbyManager,this.playerState.players,this.userId);break;case"partial-state":{if(e.userId===this.userId)return;const t=this.playerState.players.get(e.userId);if(!t)break;console.log("Partial State update for player",e.userId,":",a),this.utility.deepMerge(t,a);break}case"player-move":if(!this.lobbyManager.inLobby&&this.playerState.players.has(e.userId)){const t=this.playerState.players.get(e.userId);a.transform.pos&&(t.transform.pos.x=a.transform.pos.x,t.transform.pos.y=a.transform.pos.y),void 0!==a.transform.rot&&(t.transform.rot=a.transform.rot)}break;case"player-hit":if(a.projectileId&&this.combatController.projectiles.delete(a.projectileId),a.targetId===this.userId){this.playerState.myPlayer.stats.health.value=a.newHealth;const t=300,e={sliderId:"healthBar",targetValue:this.playerState.myPlayer.stats.health.value,maxValue:this.playerState.myPlayer.stats.health.max,lerpTime:t};this.utility.setSlider(e),this.playerState.myPlayer.stats.health.value<=0&&this.playerController.playerDeath()&&this.checkRoundEnd()}else if(this.playerState.players.has(a.targetId)){const t=this.playerState.players.get(a.targetId);t.stats.health.value=a.newHealth,t.stats.health.value<=0&&(console.log(`Player ${t.id} died`),this.checkRoundEnd())}if(a.wasKill){const t=this.ui.leaderboard.get(a.shooterId);t&&t.kills++;const e=this.ui.leaderboard.get(a.targetId);e&&e.deaths++,this.ui.updateLeaderboardDisplay(this.userId)}break;case"player-death":e.userId!==this.userId&&a.ammoBox&&(this.objectsManager.ammoBoxes.set(a.ammoBox.id,a.ammoBox),console.log(`Ammo box spawned at death of ${e.userId}`));const s={gore:{amount:this.utility.getRandomInt(2,5)},blood:{amount:this.utility.getRandomInt(1,3)},ownerId:e.userId,pos:{x:a.x,y:a.y},radius:a.size};this.particlesManager.generateGore(s),console.log(`Generated gore for ${e.userId}`);break;case"ammo-pickup":if(a.playerId===this.userId)break;if(this.objectsManager.ammoBoxes.has(a.ammoBoxId)){const t=this.objectsManager.ammoBoxes.get(a.ammoBoxId);t.isOpen=a.boxState.isOpen,t.lid=a.boxState.lid,console.log(`Ammo box opened by ${a.playerId}`)}break;case"weapon-change":e.userId!==this.userId&&this.playerState.players.has(e.userId)&&(this.playerState.players.get(e.userId).rig.weapon=a.weapon,console.log(`${e.userId} switched to ${a.weapon}`));break;case"projectile-launch":this.lobbyManager.inLobby||e.userId===this.userId||this.combatController.projectiles.set(a.projectile.id,a.projectile);break;case"projectile-remove":this.lobbyManager.inLobby||this.combatController.projectiles.delete(a.projectileId);break;case"projectile-deflect":if(!this.lobbyManager.inLobby&&this.combatController.projectiles.has(a.projectileId)){const t=this.combatController.projectiles.get(a.projectileId);t.ownerId=a.newOwnerId,t.velocity=a.velocity,t.color=a.color,t.transform.rot=Math.atan2(t.velocity.y,t.velocity.x),console.log(`Projectile ${a.projectileId} deflected by ${a.newOwnerId}`)}break;case"start-game":a.spawnMap&&a.spawnMap[this.userId]&&(this.playerState.myPlayer.transform.pos.x=a.spawnMap[this.userId].x,this.playerState.myPlayer.transform.pos.y=a.spawnMap[this.userId].y,console.log("My Player Spawn:",a.spawnMap[this.userId].x,a.spawnMap[this.userId].y)),a.spawnMap&&this.playerState.players.forEach((t,e)=>{a.spawnMap[e]&&(t.transform.pos.x=a.spawnMap[e].x,t.transform.pos.y=a.spawnMap[e].y,console.log(`Player ${e} spawn:`,a.spawnMap[e].x,a.spawnMap[e].y))}),this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop();break;case"game-end":console.log(`Game ended! Winner: ${a.winnerId}`),this.gameWinner=a.winnerId;break;case"round-end":console.log(`Round ended! Winner: ${a.winnerId||"No one"}`),this.isRoundInProgress=!1,this.roundWinner=a.winnerId;break;case"new-round":if(!a.spawnMap)return;console.log(a.spawnMap),this.ui.upgradeContainer&&(this.ui.upgradeContainer.style.display="none"),console.log("New round started! Everyone respawning..."),this.isRoundInProgress=!0,this.roundWinner=null,this.playerState.myPlayer.stats.health.value=this.playerState.myPlayer.stats.health.max;const i=300,r={sliderId:"healthBar",targetValue:this.playerState.myPlayer.stats.health.value,maxValue:this.playerState.myPlayer.stats.health.max,lerpTime:i},o={sliderId:"staminaBar",targetValue:this.playerState.myPlayer.stats.stamina.value,maxValue:this.playerState.myPlayer.stats.stamina.max,lerpTime:i};this.utility.setSlider(r),this.utility.setSlider(o),this.playerState.myPlayer.transform.pos.x=a.spawnMap[this.userId].x,this.playerState.myPlayer.transform.pos.y=a.spawnMap[this.userId].y,this.resumeGame(),this.playerState.players.forEach((t,e)=>{a.spawnMap[e]&&(t.transform.pos.x=a.spawnMap[t.id].x,t.transform.pos.y=a.spawnMap[t.id].y,t.transform.rot=0,t.stats.health.value=t.stats.health.max,t.stats.stamina.value=t.stats.stamina.max)});break;case"upgrade-taken":a.upgradeId&&a.isUnique&&(this.upgradeManager.removeUpgradeFromPool(a.upgradeId),console.log(`Unique upgrade ${a.upgradeId} taken by ${e.userId}`)),this.roundWinner===this.userId&&(this.upgradeManager.upgradesCompleted.add(e.userId),console.log(`${e.userId} completed upgrade. ${this.upgradeManager.upgradesCompleted.size}/${this.playerState.players.size} done`),this.upgradeManager.upgradesCompleted.size>=this.playerState.players.size&&this.showWinnerContinueButton());break;case"play-audio":e.userId!==this.userId&&this.audioManager.playAudio(a.params);break;case"add-decal":e.userId!==this.userId&&this.decalsManager.createDecalNetwork(a.x,a.y,a.decalId,a.params);break;case"add-particles":e.userId!==this.userId&&this.particlesManager.generateParticles(a.x,a.y,a.particleId,a.params,a.direction);break;case"particle-emitter":if(e.userId!==this.userId){const t={id:a.emitterId,interval:a.interval,lifetime:a.lifetime,offset:{x:a.offset.x,y:a.offset.y},playerId:a.playerId,pos:{x:a.pos.x,y:a.pos.y}};this.particlesManager.generateEmitter(t)}break;case"character-animation":a.params.playerId!==this.userId&&this.animator.animateCharacterPartNetwork(a.params);break;case"shrapnel-spawn":e.userId!==this.userId&&this.particlesManager.generateShrapnel(a.pieces)}}catch(t){console.error("Error parsing game message:",t)}}returnToLobby(){this.resetGameState("Lobby"),this.roomManager.sendMessage(JSON.stringify({type:"return-to-lobby",reason:"game-ended"})),this.lobbyManager.showLobbyControls(this.gameState.gameMaxPlayers,this.gameState.gameMaxWins,this.playerState.isHost,this.roomManager.isPrivateRoom,this.upgradeManager.isUpgradesEnabled,this.lobbyManager,this.playerState.myPlayer,this.roomManager.getCurrentRoom()||"",this.userId)}checkRoundEnd(){if(!this.isRoundInProgress)return;let t=this.playerState.myPlayer.stats.health.value>0?1:0,e=this.playerState.myPlayer.stats.health.value>0?this.userId:null;this.playerState.players.forEach(a=>{a.stats.health.value>0&&(t++,e=a.id)}),t<=1&&this.endRound(e)}endRound(t){if(this.isRoundInProgress){if(this.isRoundInProgress=!1,this.roundWinner=t,!t)return console.log("Round ended with no survivors!"),void setTimeout(()=>{this.startNewRound()},g.ROUND_END_DELAY);if(this.ui.leaderboard.has(t)){const e=this.ui.leaderboard.get(t);if(e.wins++,console.log(`${t} won the round! Total wins: ${e.wins}`),e.wins>=this.gameState.gameMaxWins)return void this.endGame(t);this.ui.updateLeaderboardDisplay(this.userId)}setTimeout(()=>{this.pauseGame()},g.ROUND_END_DELAY/6),setTimeout(()=>{this.startUpgradePhase(t)},g.ROUND_END_DELAY)}}endGame(t){this.gameWinner=t,console.log(`${t} won the game with ${this.gameState.gameMaxWins} wins!`),this.roomManager.sendMessage(JSON.stringify({type:"game-end",winnerId:t})),setTimeout(()=>{this.returnToLobby()},g.GAME_END_DELAY)}startNewRound(){console.log("Starting new round..."),this.resumeGame(),this.isRoundInProgress=!0,this.roundWinner=null,this.playerState.myPlayer.stats.health.value=this.playerState.myPlayer.stats.health.max;const e={sliderId:"healthBar",targetValue:this.playerState.myPlayer.stats.health.value,maxValue:this.playerState.myPlayer.stats.health.max,lerpTime:300},a={sliderId:"staminaBar",targetValue:this.playerState.myPlayer.stats.stamina.value,maxValue:this.playerState.myPlayer.stats.stamina.max,lerpTime:300};this.utility.setSlider(e),this.utility.setSlider(a),this.playerState.myPlayer.transform.pos.x=770*Math.random()+p,this.playerState.myPlayer.transform.pos.y=570*Math.random()+p;const s=this.getSpawnMap(120);this.playerState.players.forEach(e=>{const a=s[e.id];e.transform.pos.x=a.x,e.transform.pos.y=a.y,e.transform.rot=e.transform.rot||0,e.timestamp=e.timestamp||Date.now(),e.actions.dash.cooldown=e.actions.dash.cooldown||t.ACTIONS.DASH.COOLDOWN,e.actions.dash.drain=e.actions.dash.drain||t.ACTIONS.DASH.DRAIN,e.actions.dash.multiplier=e.actions.dash.multiplier||t.ACTIONS.DASH.MULTIPLIER,e.actions.dash.time=e.actions.dash.time||t.ACTIONS.DASH.TIME,e.actions.melee.cooldown=e.actions.melee.cooldown||t.ACTIONS.MELEE.COOLDOWN,e.actions.melee.damage=e.actions.melee.damage||t.ACTIONS.MELEE.DAMAGE,e.actions.melee.duration=e.actions.melee.duration||t.ACTIONS.MELEE.DURATION,e.actions.melee.range=e.actions.melee.range||t.ACTIONS.MELEE.RANGE,e.actions.melee.size=e.actions.melee.size||t.ACTIONS.MELEE.SIZE,e.actions.primary.buffer=e.actions.primary.buffer||t.ACTIONS.PRIMARY.BUFFER,e.actions.primary.burst.amount=e.actions.primary.burst.amount||t.ACTIONS.PRIMARY.BURST.AMOUNT,e.actions.primary.burst.delay=e.actions.primary.burst.delay||t.ACTIONS.PRIMARY.BURST.DELAY,e.actions.primary.magazine.currentAmmo=e.actions.primary.magazine.currentAmmo||t.ACTIONS.PRIMARY.MAGAZINE.SIZE,e.actions.primary.magazine.currentReserve=e.actions.primary.magazine.currentReserve||t.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE,e.actions.primary.magazine.maxReserve=e.actions.primary.magazine.maxReserve||t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE,e.actions.primary.magazine.size=e.actions.primary.magazine.size||t.ACTIONS.PRIMARY.MAGAZINE.SIZE,e.actions.primary.offset=e.actions.primary.offset||t.ACTIONS.PRIMARY.OFFSET,e.actions.primary.projectile.amount=e.actions.primary.projectile.amount||t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,e.actions.primary.projectile.color=e.actions.primary.projectile.color||t.ACTIONS.PRIMARY.PROJECTILE.COLOR,e.actions.primary.projectile.damage=e.actions.primary.projectile.damage||t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,e.actions.primary.projectile.length=e.actions.primary.projectile.length||t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,e.actions.primary.projectile.range=e.actions.primary.projectile.range||t.ACTIONS.PRIMARY.PROJECTILE.RANGE,e.actions.primary.projectile.size=e.actions.primary.projectile.size||t.ACTIONS.PRIMARY.PROJECTILE.SIZE,e.actions.primary.projectile.speed=e.actions.primary.projectile.speed||t.ACTIONS.PRIMARY.PROJECTILE.SPEED,e.actions.primary.projectile.spread=e.actions.primary.projectile.spread||t.ACTIONS.PRIMARY.PROJECTILE.SPREAD,e.actions.primary.reload.time=e.actions.primary.reload.time||t.ACTIONS.PRIMARY.RELOAD.TIME,e.actions.sprint.drain=e.actions.sprint.drain||t.ACTIONS.SPRINT.DRAIN,e.actions.sprint.multiplier=e.actions.sprint.multiplier||t.ACTIONS.SPRINT.MULTIPLIER,e.equipment=e.equipment||t.EQUIPMENT,e.flags.hidden=e.flags.hidden||t.FLAGS.HIDDEN,e.flags.invulnerable=e.flags.invulnerable||t.FLAGS.INVULNERABLE,e.physics.acceleration=e.physics.acceleration||t.PHYSICS.ACCELERATION,e.physics.friction=e.physics.friction||t.PHYSICS.FRICTION,e.rig.body=e.rig.body||t.RIG.BODY,e.rig.head=e.rig.head||t.RIG.HEAD,e.rig.headwear=e.rig.headwear||t.RIG.HEADWEAR,e.rig.weapon=e.rig.weapon||t.RIG.WEAPON,e.stats.defense=e.stats.defense||t.STATS.DEFENSE,e.stats.health.max=e.stats.health.max||t.STATS.HEALTH.MAX,e.stats.health.value=e.stats.health.max||t.STATS.HEALTH.MAX,e.stats.luck=e.stats.luck||t.STATS.LUCK,e.stats.size=e.stats.size||t.STATS.SIZE,e.stats.speed=e.stats.speed||t.STATS.SPEED,e.stats.stamina.max=e.stats.stamina.max||t.STATS.STAMINA.MAX,e.stats.stamina.recovery.delay=e.stats.stamina.recovery.delay||t.STATS.STAMINA.RECOVERY.DELAY,e.stats.stamina.recovery.rate=e.stats.stamina.recovery.rate||t.STATS.STAMINA.RECOVERY.RATE,e.stats.stamina.value=e.stats.stamina.value||t.STATS.STAMINA.MAX,e.unique=e.unique||t.UNIQUE}),this.roomManager.sendMessage(JSON.stringify({type:"new-round",spawnMap:s}))}getSpawnMap(t){const e={},a=[];return e[this.userId]={x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},a.push(e[this.userId]),this.playerState.players.forEach(s=>{let i,r=0;do{i={x:770*Math.random()+p,y:570*Math.random()+p},r++}while(a.some(e=>Math.hypot(e.x-i.x,e.y-i.y)<t)&&r<1e3);a.push(i),e[s.id]=i}),e}showGameControls(t){this.ui.updateDisplay(this.lobbyManager,"game",t)}startGame(){this.playerState.isHost&&(1!==this.lobbyManager.lobbyPlayers.size?this.executeStartGame():this.ui.soloGameWarning(()=>this.executeStartGame()))}executeStartGame(){this.roomManager.sendMessage(JSON.stringify({type:"start-game",hostSpawn:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y}})),this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop()}startGameLoop(){this.gameState.gameInProgress=!0,this.isRoundInProgress=!0,this.playerState.myPlayer.actions.primary.magazine.currentReserve=Math.floor(t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE/2),this.playerState.myPlayer.actions.primary.magazine.currentAmmo=this.playerState.myPlayer.actions.primary.magazine.size,this.ammoReservesUIController.spawnAmmoInReserveUI(this.playerState.myPlayer.actions.primary.magazine.currentReserve),this.playerState.isReloading=!1,this.ui.createLeaderboard(this.lobbyManager,this.playerState.players,this.userId),this.upgradeManager.resetUpgrades(this.playerState.myPlayer),this.roomManager.sendMessage(JSON.stringify({type:"player-state",id:this.playerState.myPlayer.id,timestamp:this.playerState.myPlayer.timestamp,color:this.playerState.myPlayer.color,transform:{pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},rot:this.playerState.myPlayer.transform.rot},actions:{dash:{cooldown:this.playerState.myPlayer.actions.dash.cooldown,drain:this.playerState.myPlayer.actions.dash.drain,multiplier:this.playerState.myPlayer.actions.dash.multiplier,time:this.playerState.myPlayer.actions.dash.time},melee:{cooldown:this.playerState.myPlayer.actions.melee.cooldown,damage:this.playerState.myPlayer.actions.melee.damage,duration:this.playerState.myPlayer.actions.melee.duration,range:this.playerState.myPlayer.actions.melee.range,size:this.playerState.myPlayer.actions.melee.size},primary:{buffer:this.playerState.myPlayer.actions.primary.buffer,burst:{amount:this.playerState.myPlayer.actions.primary.burst.amount,delay:this.playerState.myPlayer.actions.primary.burst.delay},magazine:{currentAmmo:this.playerState.myPlayer.actions.primary.magazine.currentAmmo,currentReserve:this.playerState.myPlayer.actions.primary.magazine.currentReserve,maxReserve:this.playerState.myPlayer.actions.primary.magazine.maxReserve,size:this.playerState.myPlayer.actions.primary.magazine.size},offset:this.playerState.myPlayer.actions.primary.offset,projectile:{amount:this.playerState.myPlayer.actions.primary.projectile.amount,color:this.playerState.myPlayer.actions.primary.projectile.color,damage:this.playerState.myPlayer.actions.primary.projectile.damage,length:this.playerState.myPlayer.actions.primary.projectile.length,range:this.playerState.myPlayer.actions.primary.projectile.range,size:this.playerState.myPlayer.actions.primary.projectile.size,speed:this.playerState.myPlayer.actions.primary.projectile.speed,spread:this.playerState.myPlayer.actions.primary.projectile.spread},reload:{time:this.playerState.myPlayer.actions.primary.reload.time}},sprint:{drain:this.playerState.myPlayer.actions.sprint.drain,multiplier:this.playerState.myPlayer.actions.sprint.multiplier}},equipment:this.playerState.myPlayer.equipment,flags:{hidden:this.playerState.myPlayer.flags.hidden,invulnerable:this.playerState.myPlayer.flags.invulnerable},physics:{acceleration:this.playerState.myPlayer.physics.acceleration,friction:this.playerState.myPlayer.physics.friction},rig:{body:this.playerState.myPlayer.rig.body,head:this.playerState.myPlayer.rig.head,headwear:this.playerState.myPlayer.rig.headwear,weapon:this.playerState.myPlayer.rig.weapon},stats:{defense:this.playerState.myPlayer.stats.defense,health:{max:this.playerState.myPlayer.stats.health.max,value:this.playerState.myPlayer.stats.health.value},luck:this.playerState.myPlayer.stats.luck,size:this.playerState.myPlayer.stats.size,speed:this.playerState.myPlayer.stats.speed,stamina:{max:this.playerState.myPlayer.stats.stamina.max,recovery:{delay:this.playerState.myPlayer.stats.stamina.recovery.delay,rate:this.playerState.myPlayer.stats.stamina.recovery.rate},value:this.playerState.myPlayer.stats.stamina.value}},unique:this.playerState.myPlayer.unique})),this.gameLoop();const e={sliderId:"healthBar",targetValue:this.playerState.myPlayer.stats.health.value,maxValue:this.playerState.myPlayer.stats.health.max,lerpTime:300},a={sliderId:"staminaBar",targetValue:this.playerState.myPlayer.stats.stamina.value,maxValue:this.playerState.myPlayer.stats.stamina.max,lerpTime:300};this.utility.setSlider(e),this.utility.setSlider(a)}gameLoop(){if(!(this.gameState.gameInProgress&&this.ui.ctx&&this.ui.canvas&&this.ui.decalCtx&&this.ui.decalCanvas))return;if(this.gameState.isPaused)return void requestAnimationFrame(()=>this.gameLoop());const t=this.utility.deltaTime();this.playerController.updatePlayerPosition(t),this.combatController.updateAttack(t),this.combatController.updateProjectiles(t),this.particlesManager.updateParticles(t),this.particlesManager.updateEmitters(t),this.particlesManager.updateShrapnel(t),this.animator.updateCharacterAnimations(t),this.staminaController.updateStamina(t),this.dashController.updateDash(t),this.collisionsManager.checkCollisions(t);const e={sliderId:"staminaBar",targetValue:this.playerState.myPlayer.stats.stamina.value,maxValue:this.playerState.myPlayer.stats.stamina.max,lerpTime:300};this.utility.setSlider(e),this.renderingManager.clearCtx(this.ui.ctx),this.ui.ctx.drawImage(this.ui.decalCanvas,0,0),this.renderingManager.drawObjects(),this.combatController.projectiles.forEach(t=>{this.renderingManager.drawProjectile(t)}),this.playerState.players.forEach(t=>{this.renderingManager.drawCharacter(t)}),this.renderingManager.drawCharacter(this.playerState.myPlayer,!0),this.particlesManager.drawParticles(),this.particlesManager.drawShrapnel(),requestAnimationFrame(()=>this.gameLoop())}pauseGame(){this.gameState.gameInProgress&&(this.gameState.isPaused=!0,console.log("Game paused"),this.controlsManager.clearActiveKeys(),this.playerState.isSprinting=!1,this.playerState.isDashing=!1,this.playerState.isBurstActive=!1,this.playerState.currentBurstShot=0)}resumeGame(){this.gameState.gameInProgress&&(this.gameState.isPaused=!1,console.log("Game resumed"))}resetGameState(t){this.gameState.gameInProgress=!1,this.gameState.isPaused=!1,this.isRoundInProgress=!1,this.gameWinner=null,this.roundWinner=null,this.gameState.gameMaxWins=g.MAX_WINS,this.gameState.gameMaxPlayers=g.MAX_PLAYERS,"Room"===t&&(this.lobbyManager.inLobby=!1,this.playerState.isHost=!1),this.playerState.players.clear(),this.combatController.projectiles.clear(),this.objectsManager.ammoBoxes.clear(),this.decalsManager.decals.clear(),this.particlesManager.particles.clear(),this.particlesManager.emitters.clear(),this.particlesManager.shrapnel.clear(),this.upgradeManager.upgradesCompleted.clear(),this.ammoReservesUIController.reserveBulletParticles=[],"Room"===t&&this.lobbyManager.lobbyPlayers.clear(),this.renderingManager.clearCtx(),this.chatManager.clearChat(),this.ui.clearLeaderboard(),this.playerState.resetPlayerState(),this.playerState.initPlayer(this.userId),this.controlsManager.clearActiveKeys(),this.animator.clearAllAnimations(),this.upgradeManager.resetUpgrades(this.playerState.myPlayer)}watchForInputs(){const t=()=>{this.controlsManager.gamepadConnectionEnabled&&this.controlsManager.pollGamepad(),this.checkActions(),requestAnimationFrame(t)};t()}checkActions(){if(!this.gameState.gameInProgress||this.gameState.isPaused)return;const t=this.settingsManager.getSettings().controls.keybinds;this.controlsManager.triggered(t.dash)&&this.dashController.startDash(),this.controlsManager.triggered(t.melee)&&this.combatController.canMelee()&&this.combatController.triggerAttack("melee"),this.controlsManager.triggered(t.reload)&&this.combatController.startReload(),this.controlsManager.held(t.sprint)?this.moveController.isMoving()&&(this.playerState.isSprinting=!0):this.playerState.isSprinting=!1,this.controlsManager.triggered(t.attack)&&(!this.playerState.canShoot||this.playerState.isBurstActive||this.playerState.isMelee||this.combatController.triggerAttack("ranged")),this.controlsManager.held(t.attack)&&this.playerState.canAutoFire&&this.combatController.triggerAttack("ranged");const e=this.controlsManager.getGamepadRAxis();null!==e&&this.animator.rotateCharacterPart(this.userId,e),this.controlsManager.updatePreviousKeys()}startUpgradePhase(t){console.log("Starting upgrade phase..."),this.upgradeManager.upgradesCompleted.clear(),t===this.userId?this.showWinnerWaitScreen():this.showUpgradeSelection()}showWinnerWaitScreen(){if(!this.ui.upgradeContainer)return;this.ui.upgradeContainer.innerHTML="";const t=document.createElement("div");t.className="upgrade_waiting",t.textContent="Waiting for other players...",this.ui.upgradeContainer.appendChild(t),this.ui.upgradeContainer.style.display="flex"}showWinnerContinueButton(){if(!this.ui.upgradeContainer)return;this.ui.upgradeContainer.innerHTML="";const t=document.createElement("div");t.className="upgrade_waiting",t.textContent="Upgrade phase complete.";const e=document.createElement("button");e.textContent="Continue",e.onclick=()=>{this.ui.upgradeContainer&&(console.log("Winner pressed continue..."),this.ui.upgradeContainer.style.display="none",setTimeout(()=>{this.startNewRound()},g.NEW_ROUND_DELAY))},this.ui.upgradeContainer.appendChild(t),this.ui.upgradeContainer.appendChild(e),this.ui.upgradeContainer.style.display="flex"}showUpgradeSelection(){this.ui.upgradeContainer&&(this.ui.upgradeContainer.innerHTML="",this.upgradeManager.getUpgrades(3,this.playerState.myPlayer).forEach(t=>{const e=document.createElement("div");e.className="upgrade_card container",e.setAttribute("data-rarity",t.rarity.toString());const a=document.createElement("div");a.className="upgrade_image";const s=document.createElement("img");s.src=t.icon,s.alt=t.name,s.className="upgrade_icon",s.onerror=()=>{console.warn(`Failed to load upgrade image: ${t.icon}`),s.style.display="none"},a.appendChild(s);const i=document.createElement("div");i.className="upgrade_name",i.textContent=t.name;const r=document.createElement("div");r.className="upgrade_subtitle",r.textContent=t.subtitle,e.appendChild(a),e.appendChild(i),e.appendChild(r),e.addEventListener("click",()=>{console.log("Selected upgrade: ",t.name),this.selectUpgrade(t.id)}),this.ui.upgradeContainer&&this.ui.upgradeContainer.appendChild(e)}),this.ui.upgradeContainer.style.display="flex")}selectUpgrade(t){this.upgradeManager.applyUpgrade(t,this.playerState.myPlayer)?this.finishUpgrade(t):console.error("Failed to apply upgrade")}finishUpgrade(t){this.ui.upgradeContainer&&(this.ui.upgradeContainer.style.display="none"),this.roomManager.sendMessage(JSON.stringify({type:"upgrade-taken",upgradeId:t,userId:this.userId,isUnique:this.upgradeManager.upgrades.find(e=>e.id===t)?.unique||!1})),this.roomManager.sendMessage(JSON.stringify({type:"player-state",id:this.playerState.myPlayer.id,timestamp:this.playerState.myPlayer.timestamp,color:this.playerState.myPlayer.color,transform:{pos:{x:this.playerState.myPlayer.transform.pos.x,y:this.playerState.myPlayer.transform.pos.y},rot:this.playerState.myPlayer.transform.rot},actions:{dash:{cooldown:this.playerState.myPlayer.actions.dash.cooldown,drain:this.playerState.myPlayer.actions.dash.drain,multiplier:this.playerState.myPlayer.actions.dash.multiplier,time:this.playerState.myPlayer.actions.dash.time},melee:{cooldown:this.playerState.myPlayer.actions.melee.cooldown,damage:this.playerState.myPlayer.actions.melee.damage,duration:this.playerState.myPlayer.actions.melee.duration,range:this.playerState.myPlayer.actions.melee.range,size:this.playerState.myPlayer.actions.melee.size},primary:{buffer:this.playerState.myPlayer.actions.primary.buffer,burst:{amount:this.playerState.myPlayer.actions.primary.burst.amount,delay:this.playerState.myPlayer.actions.primary.burst.delay},magazine:{currentAmmo:this.playerState.myPlayer.actions.primary.magazine.currentAmmo,currentReserve:this.playerState.myPlayer.actions.primary.magazine.currentReserve,maxReserve:this.playerState.myPlayer.actions.primary.magazine.maxReserve,size:this.playerState.myPlayer.actions.primary.magazine.size},offset:this.playerState.myPlayer.actions.primary.offset,projectile:{amount:this.playerState.myPlayer.actions.primary.projectile.amount,color:this.playerState.myPlayer.actions.primary.projectile.color,damage:this.playerState.myPlayer.actions.primary.projectile.damage,length:this.playerState.myPlayer.actions.primary.projectile.length,range:this.playerState.myPlayer.actions.primary.projectile.range,size:this.playerState.myPlayer.actions.primary.projectile.size,speed:this.playerState.myPlayer.actions.primary.projectile.speed,spread:this.playerState.myPlayer.actions.primary.projectile.spread},reload:{time:this.playerState.myPlayer.actions.primary.reload.time}},sprint:{drain:this.playerState.myPlayer.actions.sprint.drain,multiplier:this.playerState.myPlayer.actions.sprint.multiplier}},equipment:this.playerState.myPlayer.equipment,flags:{hidden:this.playerState.myPlayer.flags.hidden,invulnerable:this.playerState.myPlayer.flags.invulnerable},physics:{acceleration:this.playerState.myPlayer.physics.acceleration,friction:this.playerState.myPlayer.physics.friction},rig:{body:this.playerState.myPlayer.rig.body,head:this.playerState.myPlayer.rig.head,headwear:this.playerState.myPlayer.rig.headwear,weapon:this.playerState.myPlayer.rig.weapon},stats:{defense:this.playerState.myPlayer.stats.defense,health:{max:this.playerState.myPlayer.stats.health.max,value:this.playerState.myPlayer.stats.health.max},luck:this.playerState.myPlayer.stats.luck,size:this.playerState.myPlayer.stats.size,speed:this.playerState.myPlayer.stats.speed,stamina:{max:this.playerState.myPlayer.stats.stamina.max,recovery:{delay:this.playerState.myPlayer.stats.stamina.recovery.delay,rate:this.playerState.myPlayer.stats.stamina.recovery.rate},value:this.playerState.myPlayer.stats.stamina.max}},unique:this.playerState.myPlayer.unique})),console.log("Upgrade selected, waiting for others...")}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{new nt}):new nt})();