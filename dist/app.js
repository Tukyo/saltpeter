(()=>{"use strict";const t={ACTIONS:{DASH:{COOLDOWN:1e3,DRAIN:40,MULTIPLIER:3,TIME:150},MELEE:{COOLDOWN:250,DAMAGE:10,DURATION:100,RANGE:10,SIZE:2},PRIMARY:{BUFFER:100,BURST:{AMOUNT:1,DELAY:75},MAGAZINE:{SIZE:10,STARTING_RESERVE:20,MAX_RESERVE:50},OFFSET:10,PROJECTILE:{AMOUNT:1,COLOR:"#fff5beff",DAMAGE:25,LENGTH:15,RANGE:5,SIZE:1,SPEED:35,SPREAD:10,UNIQUE:[]},RELOAD:{TIME:750}},SPRINT:{DRAIN:5,MULTIPLIER:1.75}},DATA:{ID_LENGTH:12},EQUIPMENT:[],PHYSICS:{ACCELERATION:.55,FRICTION:.85},RIG:{BODY:"DEFAULT",HEAD:"DEFAULT",HEADWEAR:"DEFAULT",WEAPON:"GLOCK"},STATS:{HEALTH:{MAX:100},LUCK:1,SIZE:100,SPEED:6,STAMINA:{MAX:100,RECOVERY:{DELAY:1e3,RATE:25}}},UNIQUE:[],VISUAL:{ID_DISPLAY_OFFSET:25}},e={RADIUS:{MIN:4,MAX:8},DENSITY:{MIN:.175,MAX:.35},OPACITY:{MIN:.15,MAX:.25},VARIATION:.215,COLOR:"#000000"},s={RADIUS:{MIN:5,MAX:17.5},DENSITY:{MIN:.1,MAX:.175},OPACITY:{MIN:.275,MAX:.315},VARIATION:.5,COLOR:"#781414"},a={COUNT:{MIN:1,MAX:4},LIFETIME:{MIN:800,MAX:1e3},NOISE:{STRENGTH:{MIN:0,MAX:0},SCALE:{MIN:0,MAX:0}},OPACITY:{MIN:.25,MAX:.75},SPEED:{MIN:.25,MAX:.75},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},SIZE:{MIN:.125,MAX:2.275},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!0,PAINT:!1,SPREAD:.25,STAIN:!0,COLOR:"#8b1a1a"},i={COUNT:{MIN:4,MAX:12},LIFETIME:{MIN:150,MAX:1200},NOISE:{STRENGTH:{MIN:0,MAX:0},SCALE:{MIN:0,MAX:0}},OPACITY:{MIN:.425,MAX:.775},SPEED:{MIN:1.5,MAX:4.75},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},SIZE:{MIN:.75,MAX:3.5},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!1,PAINT:!0,SPREAD:.425,STAIN:!0,COLOR:"#8b1a1a"},o={COUNT:{MIN:8,MAX:15},LIFETIME:{MIN:150,MAX:300},NOISE:{STRENGTH:{MIN:0,MAX:0},SCALE:{MIN:0,MAX:0}},OPACITY:{MIN:.4,MAX:.8},SPEED:{MIN:4,MAX:10},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},SIZE:{MIN:1,MAX:3},TORQUE:{MIN:0,MAX:0},COLLIDE:!1,FADE:!0,PAINT:!1,SPREAD:.6,STAIN:!1,COLOR:"#ffaa00"},r={COUNT:{MIN:1,MAX:1},LIFETIME:{MIN:250,MAX:550},NOISE:{STRENGTH:{MIN:0,MAX:0},SCALE:{MIN:0,MAX:0}},OPACITY:{MIN:1,MAX:1},SPEED:{MIN:5,MAX:8},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},SIZE:{MIN:2,MAX:2},TORQUE:{MIN:-720,MAX:720},COLLIDE:!0,FADE:!1,PAINT:!0,SPREAD:.4,STAIN:!1,COLOR:"#d4af37"},n={COUNT:{MIN:3,MAX:6},LIFETIME:{MIN:800,MAX:1400},NOISE:{STRENGTH:{MIN:.1,MAX:.3},SCALE:{MIN:40,MAX:80}},OPACITY:{MIN:.15,MAX:.35},SPEED:{MIN:.5,MAX:1.5},SIZE:{MIN:4,MAX:8},SIZE_OVER_LIFETIME:{MIN:2,MAX:3},TORQUE:{MIN:-180,MAX:180},COLLIDE:!1,FADE:!0,PAINT:!1,SPREAD:.4,STAIN:!1,COLOR:"#5a5a5a"},l={COUNT:{MIN:8,MAX:16},LIFETIME:{MIN:150,MAX:300},NOISE:{STRENGTH:{MIN:.25,MAX:5},SCALE:{MIN:.25,MAX:1.5}},OPACITY:{MIN:.4,MAX:.8},SPEED:{MIN:4,MAX:10},SIZE:{MIN:1,MAX:3},SIZE_OVER_LIFETIME:{MIN:0,MAX:0},TORQUE:{MIN:-720,MAX:720},COLLIDE:!1,FADE:!0,PAINT:!1,SPREAD:.6,STAIN:!1,COLOR:"#ffaa00"},h={BASE:"/assets/img/object/ammobox/base.png",BULLETS:"/assets/img/object/ammobox/bullets.png",LID:"/assets/img/object/ammobox/lid.png"},m=800,c=600,d=15,y=1e3,p={MELEE:"f",MOVE_UP:"w",MOVE_LEFT:"a",MOVE_DOWN:"s",MOVE_RIGHT:"d",RELOAD:"r",SPRINT:"shift",ATTACK:"mouse1",DASH:" "},u=3e3,g=1,I=.5,f=5,M=10,E=!0,P={IMPACT:{FLESH:{BULLET:["/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_00.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_01.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_02.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_03.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_04.ogg","/assets/audio/sfx/impact/flesh/bullet/impact_flesh_bullet_05.ogg"]},METAL:{BULLET:["/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_00.ogg","/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_01.ogg","/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_02.ogg","/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_03.ogg","/assets/audio/sfx/impact/metal/bullet/impact_metal_bullet_04.ogg"]}},WEAPON:{GLOCK:{ATTACK:["/assets/audio/sfx/weapons/glock/glock_attack_00.ogg","/assets/audio/sfx/weapons/glock/glock_attack_01.ogg","/assets/audio/sfx/weapons/glock/glock_attack_02.ogg","/assets/audio/sfx/weapons/glock/glock_attack_03.ogg","/assets/audio/sfx/weapons/glock/glock_attack_04.ogg","/assets/audio/sfx/weapons/glock/glock_attack_05.ogg"],SHELL:["/assets/audio/sfx/weapons/glock/glock_shell_00.ogg","/assets/audio/sfx/weapons/glock/glock_shell_01.ogg","/assets/audio/sfx/weapons/glock/glock_shell_02.ogg","/assets/audio/sfx/weapons/glock/glock_shell_03.ogg","/assets/audio/sfx/weapons/glock/glock_shell_04.ogg","/assets/audio/sfx/weapons/glock/glock_shell_05.ogg","/assets/audio/sfx/weapons/glock/glock_shell_06.ogg","/assets/audio/sfx/weapons/glock/glock_shell_07.ogg","/assets/audio/sfx/weapons/glock/glock_shell_08.ogg","/assets/audio/sfx/weapons/glock/glock_shell_09.ogg","/assets/audio/sfx/weapons/glock/glock_shell_10.ogg","/assets/audio/sfx/weapons/glock/glock_shell_11.ogg","/assets/audio/sfx/weapons/glock/glock_shell_12.ogg","/assets/audio/sfx/weapons/glock/glock_shell_13.ogg","/assets/audio/sfx/weapons/glock/glock_shell_14.ogg"],EMPTY:["/assets/audio/sfx/weapons/glock/glock_empty_00.ogg"]}}};function A(){let e="";for(let s=0;s<t.DATA.ID_LENGTH;s++)e+="0123456789abcdefghijklmnopqrstuvwxyz"[Math.floor(36*Math.random())];return e}function C(t){return t[Math.floor(Math.random()*t.length)]}function x(t){const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}function R(t){return{x:Math.cos(t),y:Math.sin(t)}}function S(t,e,s=100,a=300){const i=document.getElementById(t),o=i?.querySelector("div");if(!i||!o)return void console.warn(`Slider not found: ${t}`);const r=Math.max(0,Math.min(s,e))/s*100,n=o.style.width||"100%",l=parseFloat(n.replace("%",""));Math.abs(l-r)<.1||(o.style.transition=`width ${a}ms ease-out`,o.style.width=`${r}%`,setTimeout(()=>{o&&(o.style.transition="")},a))}function v(t,e){const s=document.getElementById(t);s&&(e?(s.setAttribute("checked","true"),s.setAttribute("aria-checked","true")):(s.removeAttribute("checked"),s.setAttribute("aria-checked","false")))}function T(t,e){const s=document.getElementById(t);s&&(s.value=e.toString())}class b{constructor(t){this.currentRoom=null,this.ws=null,this.messageHandlers=[],this.userId=t}setWebSocket(t){this.ws=t,this.setupMessageHandler()}createRoom(){const t=function(){let t="room_";for(let e=0;e<10;e++)t+="0123456789abcdefghijklmnopqrstuvwxyz"[Math.floor(36*Math.random())];return t}();return this.joinRoom(t,!0),t}joinRoom(t,e=!1){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)return void console.error("WebSocket not connected");const s={type:e?"create-room":"join-room",roomId:t,userId:this.userId};this.ws.send(JSON.stringify(s)),this.currentRoom=t,function(t){const e=`${window.location.origin}?room=${t}`;window.history.pushState({roomId:t},"",e)}(t)}leaveRoom(){if(!this.currentRoom||!this.ws)return;const t={type:"leave-room",roomId:this.currentRoom,userId:this.userId};this.ws.send(JSON.stringify(t)),this.currentRoom=null,window.history.pushState({},"",window.location.origin)}sendMessage(t){if(!this.currentRoom||!this.ws)return;const e={type:"room-message",roomId:this.currentRoom,userId:this.userId,message:t};this.ws.send(JSON.stringify(e))}getCurrentRoom(){return this.currentRoom}getRoomLink(){return this.currentRoom?(t=this.currentRoom,`${window.location.origin}?room=${t}`):null;var t}onMessage(t){this.messageHandlers.push(t)}setupMessageHandler(){this.ws&&(this.ws.onmessage=t=>{try{const e=JSON.parse(t.data);this.messageHandlers.forEach(t=>t(e))}catch(e){const s={type:"room-message",userId:"server",message:t.data};this.messageHandlers.forEach(t=>t(s))}})}}const N=new Set;var O,w;!function(t){t[t.COMMON=0]="COMMON",t[t.UNCOMMON=1]="UNCOMMON",t[t.RARE=2]="RARE",t[t.EPIC=3]="EPIC",t[t.LEGENDARY=4]="LEGENDARY"}(O||(O={})),function(t){t.STAT="stat",t.UNIQUE="unique",t.EQUIPMENT="equipment"}(w||(w={}));const L={[O.COMMON]:{weight:70,color:"#ffffff"},[O.UNCOMMON]:{weight:20,color:"#1eff00"},[O.RARE]:{weight:7,color:"#0099ff"},[O.EPIC]:{weight:2,color:"#9d00ff"},[O.LEGENDARY]:{weight:1,color:"#ff9500"}},D=[{id:"damage_buffer",name:"Damage Buffer",subtitle:"Type D14 buffer, which improves the damage at a small cost. ",icon:"/assets/img/icon/upgrades/damageup.png",type:w.STAT,rarity:O.COMMON,unique:!1,func:t=>{t.actions.primary.projectile.damage*=1.25,t.actions.primary.buffer*=1.1,console.log(`Damage Buffer installed. New damage: ${t.actions.primary.projectile.damage} - New Buffer: ${t.actions.primary.buffer}`)}},{id:"locomotion_module",name:"Locomotion Module",subtitle:"Primitave locomotion module installed on the user's footwear.",icon:"/assets/img/icon/upgrades/speedup.png",type:w.STAT,rarity:O.COMMON,unique:!1,func:t=>{t.stats.speed+=1,t.actions.dash.cooldown*=1.5,console.log(`Locomotion Module installed. New Speed: ${t.stats.speed} - New Dash Cooldown: ${t.actions.dash.cooldown}`)}},{id:"projectile_array",name:"Projectile Array",subtitle:"Chance to fire an array of extra projectiles.",icon:"/assets/img/icon/upgrades/projectilearray.png",type:w.UNIQUE,rarity:O.UNCOMMON,unique:!0,func:t=>{t.unique.includes("projectile_array")||t.unique.push("projectile_array")}}];function B(t){N.clear(),t.equipment=[]}const k={GLOCK:["/assets/img/weapon/glock/body.png","/assets/img/weapon/glock/slide.png"],KNIFE:["/assets/img/weapon/melee/knife_00.png"]},_={DEFAULT:"/assets/img/char/default/body.png"},z={DEFAULT:"/assets/img/char/default/head.png"},U={DEFAULT:"/assets/img/char/default/headwear.png"},j={BLOOD:["/assets/img/effects/blood/blood_00.png","/assets/img/effects/blood/blood_01.png","/assets/img/effects/blood/blood_02.png","/assets/img/effects/blood/blood_03.png","/assets/img/effects/blood/blood_04.png"],GORE:["/assets/img/effects/gore/gore_00.png","/assets/img/effects/gore/gore_01.png","/assets/img/effects/gore/gore_02.png","/assets/img/effects/gore/gore_03.png","/assets/img/effects/gore/gore_04.png","/assets/img/effects/gore/gore_05.png","/assets/img/effects/gore/gore_06.png","/assets/img/effects/gore/gore_07.png","/assets/img/effects/gore/gore_08.png","/assets/img/effects/gore/gore_09.png","/assets/img/effects/gore/gore_10.png","/assets/img/effects/gore/gore_11.png","/assets/img/effects/gore/gore_12.png","/assets/img/effects/gore/gore_13.png"]};class Y{constructor(){this.ws=null,this.canvas=null,this.ctx=null,this.decalCanvas=null,this.decalCtx=null,this.ammoReservesCanvas=null,this.ammoReservesCtx=null,this.roomControls=null,this.gameContainer=null,this.userIdDisplay=null,this.roomIdDisplay=null,this.gameRoomIdDisplay=null,this.lobbyContainer=null,this.lobbyPlayersList=null,this.startGameBtn=null,this.gameOptionsContainer=null,this.chatContainer=null,this.chatMessages=null,this.chatInput=null,this.chatSendBtn=null,this.privateToggle=null,this.upgradesToggle=null,this.winsInput=null,this.playersInput=null,this.upgradeContainer=null,this.leaderboardContainer=null,this.leaderboardBody=null,this.modal=null,this.modalInput=null,this.modalButtons=null,this.modalConfirmButton=null,this.modalCancelButton=null,this.modalErrorDiv=null,this.modalContent=null,this.modalText=null,this.hostButton=null,this.joinButton=null,this.quickplayButton=null,this.lobbyLeaveButton=null,this.lobbyCodeButton=null,this.gameLeaveButton=null,this.gameCodeButton=null,this.players=new Map,this.lobbyPlayers=new Map,this.characterImages=new Map,this.ammoBoxImages={},this.ammoReserveIcon=null,this.projectileIcon=null,this.reserveBullets=[],this.characterOffsets=new Map,this.characterAnimations=new Map,this.decals=new Map,this.particles=new Map,this.emitters=new Map,this.projectiles=new Map,this.ammoBoxes=new Map,this.audioPool=new G(M,f),this.gamePaused=!1,this.gameRunning=!1,this.lastFrameTime=performance.now(),this.isHost=!1,this.inLobby=!1,this.isPrivateRoom=!1,this.isUpgradesEnabled=!0,this.isRoundInProgress=!1,this.gameMaxWins=5,this.gameMaxPlayers=4,this.roundWinner=null,this.gameWinner=null,this.leaderboard=new Map,this.upgradesCompleted=new Set,this.keys=new Set,this.canShoot=!0,this.isBurstActive=!1,this.isReloading=!1,this.isMelee=!1,this.isSprinting=!1,this.isDashing=!1,this.isStaminaRecoveryBlocked=!1,this.mouseX=0,this.mouseY=0,this.lastSentX=0,this.lastSentY=0,this.lastSentRotation=0,this.lastSentRotationTime=0,this.lastSentMoveTime=0,this.playerVelocityX=0,this.playerVelocityY=0,this.dashStartTime=0,this.lastDashTime=0,this.reloadStartTime=0,this.lastShotTime=0,this.lastMeleeTime=0,this.nextBurstShotTime=0,this.currentBurstShot=0,this.lastStaminaDrainTime=0,this.staminaRecoveryBlockedUntil=0,this.userId=A(),this.roomManager=new b(this.userId),this.myPlayer=this.initializePlayer(),this.myGameOptions=this.initializeGameOptions(),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{this.initializeElements(),this.setupEventListeners(),this.checkForRoomInURL()}):(this.initializeElements(),this.setupEventListeners(),this.checkForRoomInURL())}initializeElements(){if(this.canvas=document.getElementById("gameCanvas"),this.decalCanvas=document.createElement("canvas"),this.ammoReservesCanvas=document.getElementById("ammoReservesCanvas"),this.roomControls=document.getElementById("roomControls"),this.gameContainer=document.getElementById("gameContainer"),this.lobbyContainer=document.getElementById("lobbyContainer"),this.lobbyPlayersList=document.getElementById("lobbyPlayersList"),this.startGameBtn=document.getElementById("startGameBtn"),this.gameOptionsContainer=document.getElementById("gameOptionsContainer"),this.userIdDisplay=document.getElementById("userId"),this.roomIdDisplay=document.getElementById("roomId"),this.gameRoomIdDisplay=document.getElementById("gameRoomId"),this.chatContainer=document.getElementById("chatContainer"),this.chatMessages=document.getElementById("chatMessages"),this.chatInput=document.getElementById("chatInput"),this.chatSendBtn=document.getElementById("chatSendBtn"),this.privateToggle=document.getElementById("privateToggle"),this.upgradesToggle=document.getElementById("upgradesToggle"),this.winsInput=document.getElementById("winsInput"),this.playersInput=document.getElementById("playersInput"),this.upgradeContainer=document.getElementById("upgradeContainer"),this.leaderboardContainer=document.getElementById("leaderboardContainer"),this.leaderboardBody=document.getElementById("leaderboardBody"),this.hostButton=document.getElementById("atomHost"),this.joinButton=document.getElementById("atomJoin"),this.quickplayButton=document.getElementById("atomQuickplay"),this.lobbyLeaveButton=document.getElementById("lobbyLeaveBtn"),this.lobbyCodeButton=document.getElementById("lobbyCodeBtn"),this.gameLeaveButton=document.getElementById("gameLeaveBtn"),this.gameCodeButton=document.getElementById("gameCodeBtn"),this.modal=document.getElementById("modal"),this.modalInput=document.getElementById("joinRoomInput"),this.modalButtons=document.getElementById("modalButtons"),this.modalConfirmButton=document.getElementById("joinRoomConfirmBtn"),this.modalCancelButton=document.getElementById("joinRoomCancelBtn"),this.modalErrorDiv=document.getElementById("joinRoomError"),this.modalContent=document.getElementById("modalContent"),this.modalText=document.getElementById("modalText"),!(this.canvas&&this.decalCanvas&&this.ammoReservesCanvas&&this.roomControls&&this.gameContainer&&this.lobbyContainer&&this.userIdDisplay&&this.roomIdDisplay&&this.gameRoomIdDisplay&&this.lobbyPlayersList&&this.startGameBtn&&this.gameOptionsContainer&&this.chatContainer&&this.chatMessages&&this.chatInput&&this.chatSendBtn&&this.privateToggle&&this.upgradesToggle&&this.winsInput&&this.playersInput&&this.upgradeContainer&&this.leaderboardContainer&&this.leaderboardBody&&this.hostButton&&this.joinButton&&this.quickplayButton&&this.lobbyLeaveButton&&this.lobbyCodeButton&&this.gameLeaveButton&&this.gameCodeButton))throw alert("Failed to load game. Please refresh the page."),new Error("Critical error: Required DOM elements are missing.");if(this.canvas.width=m,this.canvas.height=c,this.decalCanvas.width=m,this.decalCanvas.height=c,this.ammoReservesCanvas.width=100,this.ammoReservesCanvas.height=64,this.ctx=this.canvas.getContext("2d"),this.decalCtx=this.decalCanvas.getContext("2d"),this.ammoReservesCtx=this.ammoReservesCanvas.getContext("2d"),!this.ctx||!this.decalCtx||!this.ammoReservesCtx)throw alert("Failed to load game. Please refresh the page."),new Error("Could not get canvas context");this.initializeAmmoReserveCanvas(),this.userIdDisplay.textContent=this.userId,this.showRoomControls(),E&&this.preloadAudioAssets()}connectWebSocket(){const t="https:"===location.protocol?"wss:":"ws:";this.ws=new WebSocket(`${t}//${location.host}`),this.ws.onopen=()=>{console.log("Connected to WebSocket"),this.roomManager.setWebSocket(this.ws)},this.ws.onclose=()=>{console.log("Disconnected from WebSocket"),this.gameRunning=!1,setTimeout(()=>this.connectWebSocket(),3e3)},this.ws.onerror=t=>{console.error("WebSocket error:",t)}}setupEventListeners(){this.canvas&&this.hostButton&&this.joinButton&&this.quickplayButton&&this.lobbyLeaveButton&&this.lobbyCodeButton&&this.gameLeaveButton&&this.gameCodeButton&&this.startGameBtn&&this.chatSendBtn&&this.chatInput&&(this.hostButton.addEventListener("click",()=>this.hostRoom()),this.joinButton.addEventListener("click",()=>this.joinRoom()),this.quickplayButton.addEventListener("click",()=>this.quickPlay()),this.lobbyLeaveButton.addEventListener("click",()=>this.leaveRoom()),this.lobbyCodeButton.addEventListener("click",()=>this.copyRoomCode()),this.gameLeaveButton.addEventListener("click",()=>this.leaveRoom()),this.gameCodeButton.addEventListener("click",()=>this.copyRoomCode()),this.startGameBtn.addEventListener("click",()=>this.startGame()),this.chatSendBtn.addEventListener("click",()=>this.sendChatMessage()),this.chatInput.addEventListener("keypress",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.sendChatMessage())}),this.chatInput.addEventListener("focus",()=>{this.keys.clear(),this.canShoot=!1,this.isSprinting=!1,this.isDashing=!1,this.isBurstActive=!1,this.currentBurstShot=0}),this.chatInput.addEventListener("blur",()=>{this.keys.clear(),this.canShoot=!0,this.isSprinting=!1,this.isDashing=!1}),document.addEventListener("keydown",t=>this.onKeyDown(t)),document.addEventListener("keyup",t=>this.onKeyUp(t)),document.addEventListener("keydown",t=>{"Escape"===t.key&&this.gameRunning&&!this.inLobby&&t.preventDefault()}),document.addEventListener("mouseup",t=>this.onMouseUp(t)),document.addEventListener("mousemove",t=>this.onMouseMove(t)),this.canvas.addEventListener("mousedown",t=>this.onMouseDown(t)),this.roomManager.onMessage(t=>this.handleRoomMessage(t)))}onKeyDown(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning||this.gamePaused)return;const e=t.key.toLowerCase(),s=this.myGameOptions.controls.keybinds;if(Object.values(s).includes(e))switch(t.preventDefault(),this.keys.add(e),e){case s.dash:this.startDash();break;case s.melee:this.canMelee()&&this.triggerAttack("melee");break;case s.reload:this.startReload();break;case s.sprint:this.isMoving()&&(this.isSprinting=!0)}}onKeyUp(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning)return;const e=t.key.toLowerCase(),s=this.myGameOptions.controls.keybinds;Object.values(s).includes(e)&&(t.preventDefault(),this.keys.delete(e),e===s.sprint&&(this.isSprinting=!1))}onMouseDown(t){this.chatInput!==document.activeElement&&this.gameRunning&&!this.gamePaused&&this.canvas&&(0!==t.button||!this.canShoot||this.isBurstActive||this.isMelee||(this.updateMouse(t),this.triggerAttack("ranged"),this.canShoot=!1))}onMouseUp(t){this.chatInput!==document.activeElement&&this.gameRunning&&0===t.button&&(this.canShoot=!0)}onMouseMove(t){if(this.chatInput===document.activeElement)return;if(!this.gameRunning||this.gamePaused)return;this.updateMouse(t);const e=this.mouseX-this.myPlayer.transform.pos.x,s=this.mouseY-this.myPlayer.transform.pos.y,a=Math.atan2(s,e)+Math.PI/2;this.rotateCharacterPart(this.userId,a);const i=Date.now();Math.abs(a-this.lastSentRotation)>.1&&i-this.lastSentRotationTime>=25&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{rot:this.myPlayer.transform.rot}})),this.lastSentRotation=a,this.lastSentRotationTime=i)}updateMouse(t){if(this.chatInput===document.activeElement)return;if(!this.canvas)return;const e=this.canvas.getBoundingClientRect();this.mouseX=t.clientX-e.left,this.mouseY=t.clientY-e.top}handleRoomMessage(t){switch(t.type){case"room-created":console.log("Room created");break;case"room-joined":console.log("Joined room - lobby"),this.isHost=!1,this.showLobbyControls(t.roomId||""),this.roomManager.sendMessage(JSON.stringify({type:"lobby-join",color:this.myPlayer.color})),this.lobbyPlayers.set(this.userId,{id:this.userId,color:this.myPlayer.color,isHost:this.isHost}),this.displayLobbyPlayers(),this.updateHostDisplay(),0===this.lobbyPlayers.size&&(this.isHost=!0,this.lobbyPlayers.get(this.userId).isHost=!0,this.updateHostDisplay(),console.log("I am the only player in the room..."));break;case"user-left":console.log(`User ${t.userId} left`),this.lobbyPlayers.delete(t.userId),this.players.delete(t.userId),this.leaderboard.delete(t.userId),this.updateLeaderboardDisplay(),console.log(`Removed ${t.userId} from leaderboard`),this.projectiles.forEach((e,s)=>{e.ownerId===t.userId&&this.projectiles.delete(s)}),this.displayLobbyPlayers();break;case"room-message":this.handleGameMessage(t);break;case"room-error":alert(`Error: ${t.message}`)}}handleGameMessage(e){var s;if(e.message)try{const a=JSON.parse(e.message);switch(a.type){case"lobby-join":this.lobbyPlayers.set(e.userId,{id:e.userId,color:a.color,isHost:!1}),this.displayLobbyPlayers(),this.isHost&&this.roomManager.sendMessage(JSON.stringify({type:"lobby-state",players:Array.from(this.lobbyPlayers.values()),options:{privateRoom:this.isPrivateRoom,maxPlayers:this.gameMaxPlayers,maxWins:this.gameMaxWins,upgradesEnabled:this.isUpgradesEnabled}}));break;case"lobby-state":this.lobbyPlayers.clear(),a.players.forEach(t=>{this.lobbyPlayers.set(t.id,t)}),this.displayLobbyPlayers(),this.updateHostDisplay(),a.options&&this.syncLobbyOptions(a.options);break;case"lobby-options":this.syncLobbyOptions(a);break;case"promote-player":this.lobbyPlayers.forEach((t,e)=>{t.isHost=e===a.targetPlayerId}),this.isHost=a.targetPlayerId===this.userId,this.isHost&&"host-migration"===a.reason&&console.log("I am now the host due to host migration"),this.displayLobbyPlayers(),this.updateHostDisplay();break;case"return-to-lobby":console.log("Returning to lobby - last player or game ended"),a.newHostId===this.userId&&(this.isHost=!0,console.log("I am now the host as the last remaining player")),this.resetGameState("Lobby"),this.showLobbyControls(this.roomManager.getCurrentRoom()||"");break;case"kick-player":a.targetPlayerId===this.userId&&(alert("You have been kicked from the lobby"),this.leaveRoom());break;case"chat-message":e.userId!==this.userId&&this.displayChatMessage(e.userId,a.message,!1);break;case"player-state":console.log("Player State for player",a.id,":",a),this.inLobby||this.players.set(e.userId,{id:e.userId,transform:{pos:{x:a.transform?.pos.x,y:a.transform?.pos.y},rot:a.transform?.rot},timestamp:a.timestamp,color:a.color,actions:{dash:{cooldown:a.actions?.dash.cooldown||t.ACTIONS.DASH.COOLDOWN,drain:a.actions?.dash.drain||t.ACTIONS.DASH.DRAIN,multiplier:a.actions?.dash.multiplier||t.ACTIONS.DASH.MULTIPLIER,time:a.actions?.dash.time||t.ACTIONS.DASH.TIME},melee:{cooldown:a.actions?.melee.cooldown||t.ACTIONS.MELEE.COOLDOWN,damage:a.actions?.melee.damage||t.ACTIONS.MELEE.DAMAGE,duration:a.actions?.melee.duration||t.ACTIONS.MELEE.DURATION,range:a.actions?.melee.range||t.ACTIONS.MELEE.RANGE,size:a.actions?.melee.size||t.ACTIONS.MELEE.SIZE},primary:{buffer:a.actions?.primary.buffer||t.ACTIONS.PRIMARY.BUFFER,burst:{amount:a.actions?.primary.burst.amount||t.ACTIONS.PRIMARY.BURST.AMOUNT,delay:a.actions?.primary.burst.delay||t.ACTIONS.PRIMARY.BURST.DELAY},magazine:{currentAmmo:a.actions?.primary.magazine.currentAmmo,currentReserve:a.actions?.primary.magazine.currentReserve,maxReserve:a.actions?.primary.magazine.maxReserve,size:a.actions?.primary.magazine.size||t.ACTIONS.PRIMARY.MAGAZINE.SIZE},offset:a.actions?.primary.offset||t.ACTIONS.PRIMARY.OFFSET,projectile:{amount:a.actions?.primary.projectile.amount||t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,color:a.actions?.primary.projectile.color||t.ACTIONS.PRIMARY.PROJECTILE.COLOR,damage:a.actions?.primary.projectile.damage||t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,length:a.actions?.primary.projectile.length||t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,range:a.actions?.primary.projectile.range||t.ACTIONS.PRIMARY.PROJECTILE.RANGE,size:a.actions?.primary.projectile.size||t.ACTIONS.PRIMARY.PROJECTILE.SIZE,speed:a.actions?.primary.projectile.speed||t.ACTIONS.PRIMARY.PROJECTILE.SPEED,spread:a.actions?.primary.projectile.spread||t.ACTIONS.PRIMARY.PROJECTILE.SPREAD},reload:{time:a.actions?.primary.reload.time||t.ACTIONS.PRIMARY.RELOAD.TIME}},sprint:{drain:a.actions?.sprint.drain||t.ACTIONS.SPRINT.DRAIN,multiplier:a.actions?.sprint.multiplier||t.ACTIONS.SPRINT.MULTIPLIER}},equipment:a.equipment||t.EQUIPMENT,physics:{acceleration:a.physics?.acceleration||t.PHYSICS.ACCELERATION,friction:a.physics?.friction||t.PHYSICS.FRICTION},rig:{body:a.rig?.body||t.RIG.BODY,head:a.rig?.head||t.RIG.HEAD,headwear:a.rig?.headwear||t.RIG.HEADWEAR,weapon:a.rig?.weapon||t.RIG.WEAPON},stats:{health:{max:a.stats?.health.max||t.STATS.HEALTH.MAX,value:a.stats?.health.value||t.STATS.HEALTH.MAX},luck:a.stats?.luck||t.STATS.LUCK,size:a.stats?.size||t.STATS.SIZE,speed:a.stats?.speed||t.STATS.SPEED,stamina:{max:a.stats?.stamina.max||t.STATS.STAMINA.MAX,recovery:{delay:a.stats?.stamina.recovery.delay||t.STATS.STAMINA.RECOVERY.DELAY,rate:a.stats?.stamina.recovery.rate||t.STATS.STAMINA.RECOVERY.RATE},value:a.stats?.stamina.value||t.STATS.STAMINA.MAX}},unique:a.unique||t.UNIQUE}),a.leaderboard&&a.leaderboard.forEach(([t,e])=>{this.leaderboard.set(t,e)}),this.createLeaderboard();break;case"player-move":if(!this.inLobby&&this.players.has(e.userId)){const t=this.players.get(e.userId);a.transform.pos&&(t.transform.pos.x=a.transform.pos.x,t.transform.pos.y=a.transform.pos.y),void 0!==a.transform.rot&&(t.transform.rot=a.transform.rot)}break;case"player-hit":if(a.projectileId&&this.projectiles.delete(a.projectileId),a.targetId===this.userId)this.myPlayer.stats.health.value=a.newHealth,S("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),this.myPlayer.stats.health.value<=0&&(this.recordDeath(),this.checkRoundEnd());else if(this.players.has(a.targetId)){const t=this.players.get(a.targetId);t.stats.health.value=a.newHealth,t.stats.health.value<=0&&(console.log(`Player ${t.id} died`),this.checkRoundEnd())}if(a.wasKill){const t=this.leaderboard.get(a.shooterId);t&&t.kills++;const e=this.leaderboard.get(a.targetId);e&&e.deaths++,this.updateLeaderboardDisplay()}break;case"player-death":e.userId!==this.userId&&a.ammoBox&&(this.ammoBoxes.set(a.ammoBox.id,a.ammoBox),console.log(`Ammo box spawned at death of ${e.userId}`)),this.generateGore(e.userId,a.x,a.y,a.size),console.log(`Generated gore for ${e.userId}`);break;case"ammo-pickup":if(a.playerId===this.userId)break;if(this.ammoBoxes.has(a.ammoBoxId)){const t=this.ammoBoxes.get(a.ammoBoxId);t.isOpen=a.boxState.isOpen,t.lid=a.boxState.lid,console.log(`Ammo box opened by ${a.playerId}`)}break;case"weapon-change":e.userId!==this.userId&&this.players.has(e.userId)&&(this.players.get(e.userId).rig.weapon=a.weapon,console.log(`${e.userId} switched to ${a.weapon}`));break;case"projectile-launch":this.inLobby||e.userId===this.userId||this.projectiles.set(a.projectile.id,a.projectile);break;case"projectile-remove":this.inLobby||this.projectiles.delete(a.projectileId);break;case"start-game":a.spawnMap&&a.spawnMap[this.userId]&&(this.myPlayer.transform.pos.x=a.spawnMap[this.userId].x,this.myPlayer.transform.pos.y=a.spawnMap[this.userId].y,console.log("My Player Spawn:",a.spawnMap[this.userId].x,a.spawnMap[this.userId].y)),a.spawnMap&&this.players.forEach((t,e)=>{a.spawnMap[e]&&(t.transform.pos.x=a.spawnMap[e].x,t.transform.pos.y=a.spawnMap[e].y,console.log(`Player ${e} spawn:`,a.spawnMap[e].x,a.spawnMap[e].y))}),this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop();break;case"game-end":console.log(`Game ended! Winner: ${a.winnerId}`),this.gameWinner=a.winnerId;break;case"round-end":console.log(`Round ended! Winner: ${a.winnerId||"No one"}`),this.isRoundInProgress=!1,this.roundWinner=a.winnerId;break;case"new-round":if(!a.spawnMap)return;console.log(a.spawnMap),this.upgradeContainer&&(this.upgradeContainer.style.display="none"),console.log("New round started! Everyone respawning..."),this.isRoundInProgress=!0,this.roundWinner=null,this.myPlayer.stats.health.value=this.myPlayer.stats.health.max,S("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),S("staminaBar",this.myPlayer.stats.stamina.value,this.myPlayer.stats.stamina.max),this.myPlayer.transform.pos.x=a.spawnMap[this.userId].x,this.myPlayer.transform.pos.y=a.spawnMap[this.userId].y,this.resumeGame(),this.players.forEach((t,e)=>{a.spawnMap[e]&&(t.transform.pos.x=a.spawnMap[t.id].x,t.transform.pos.y=a.spawnMap[t.id].y,t.transform.rot=0,t.stats.health.value=t.stats.health.max,t.stats.stamina.value=t.stats.stamina.max)});break;case"upgrade-taken":a.upgradeId&&a.isUnique&&(s=a.upgradeId,N.add(s),console.log(`Unique upgrade ${a.upgradeId} taken by ${e.userId}`)),this.roundWinner===this.userId&&(this.upgradesCompleted.add(e.userId),console.log(`${e.userId} completed upgrade. ${this.upgradesCompleted.size}/${this.players.size} done`),this.upgradesCompleted.size>=this.players.size&&this.showWinnerContinueButton());break;case"play-audio":e.userId!==this.userId&&this.playAudio(a.params);break;case"add-decal":e.userId!==this.userId&&this.createDecalNetwork(a.x,a.y,a.decalId,a.params);break;case"add-particles":e.userId!==this.userId&&this.generateParticles(a.x,a.y,a.particleId,a.params,a.direction);break;case"particle-emitter":e.userId!==this.userId&&this.emitters.set(a.emitterId,{playerId:a.playerId,offsetX:a.offsetX,offsetY:a.offsetY,direction:a.direction||0,lifetime:a.lifetime,age:0,lastEmission:0,emissionInterval:200+300*Math.random()});break;case"character-animation":a.params.playerId!==this.userId&&this.animateCharacterPartNetwork(a.params)}}catch(t){console.error("Error parsing game message:",t)}}showRoomControls(){this.updateDisplay("room")}hostRoom(){if(this.ws){const t=this.roomManager.createRoom();this.isHost=!0,this.showLobbyControls(t)}else this.connectWebSocket(),setTimeout(()=>{const t=this.roomManager.createRoom();this.isHost=!0,this.showLobbyControls(t)},y)}joinRoom(){this.showJoinRoomModal()}joinRoomById(t){t&&(this.ws?this.roomManager.joinRoom(t):(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t)},y)))}quickPlay(){fetch("/quickplay").then(t=>{if(!t.ok)throw new Error("No available rooms");return t.json()}).then(t=>{this.ws?this.roomManager.joinRoom(t.roomId):(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t.roomId)},y))}).catch(t=>{this.modal&&this.modalConfirmButton&&this.modalCancelButton&&this.modalContent&&this.modalText&&this.modalInput&&this.modalErrorDiv&&this.modalButtons&&(this.modal.classList.remove("hidden"),this.modalInput.style.display="none",this.modalErrorDiv.textContent=" ",this.modalButtons.style.display="flex",this.modalCancelButton.style.display="none",this.modalText.textContent="No available games found.",this.modalConfirmButton.textContent="Confirm",this.modalConfirmButton.onclick=()=>{this.modal&&this.modalInput&&this.modalCancelButton&&this.modalText&&this.modalConfirmButton&&(this.modal.classList.add("hidden"),this.modalInput.style.display="flex",this.modalText.textContent="Join Room",this.modalCancelButton.style.display="flex",this.modalConfirmButton.onclick=null)})})}leaveRoom(){this.roomManager.leaveRoom(),this.resetGameState("Room"),this.showRoomControls()}checkForRoomInURL(){const t=this.getRoomIdFromURL();t&&(this.connectWebSocket(),setTimeout(()=>{this.roomManager.joinRoom(t)},y))}getRoomIdFromURL(){return new URLSearchParams(window.location.search).get("room")}copyRoomCode(){const t=this.inLobby?this.roomIdDisplay?.textContent:this.gameRoomIdDisplay?.textContent;t&&navigator.clipboard.writeText(t).then(()=>{if(!(this.modal&&this.modalConfirmButton&&this.modalCancelButton&&this.modalContent&&this.modalText&&this.modalInput&&this.modalErrorDiv&&this.modalButtons))return;this.modal.classList.remove("hidden"),this.modalInput.style.display="none",this.modalErrorDiv.textContent=" ",this.modalButtons.style.display="flex",this.modalCancelButton.style.display="none",this.modalText.textContent="Room code copied!",this.modalConfirmButton.textContent="Confirm";const t=()=>{this.modal&&this.modalInput&&this.modalCancelButton&&this.modalText&&this.modalConfirmButton&&(this.modal.classList.add("hidden"),this.modalInput.style.display="flex",this.modalText.textContent="Join Room",this.modalCancelButton.style.display="flex",this.modalConfirmButton.onclick=null)};this.modalConfirmButton.onclick=t,setTimeout(()=>{this.modal&&!this.modal.classList.contains("hidden")&&t()},3e3)}).catch(()=>{alert("Could not copy. Please copy manually.")})}showLobbyControls(t){this.updateDisplay("lobby",t),this.lobbyPlayers.set(this.userId,{id:this.userId,color:this.myPlayer.color,isHost:this.isHost}),this.setupLobbyOptions(),v("privateToggle",this.isPrivateRoom),v("upgradesToggle",this.isUpgradesEnabled),T("winsInput",this.gameMaxWins),this.displayLobbyPlayers(),this.updateHostDisplay()}setupLobbyOptions(){this.setupLobbyToggle("privateToggle","privateRoom",()=>this.isPrivateRoom,t=>this.isPrivateRoom=t),this.setupLobbyToggle("upgradesToggle","upgradesEnabled",()=>this.isUpgradesEnabled,t=>this.isUpgradesEnabled=t),this.setupLobbyInput("winsInput","maxWins",()=>this.gameMaxWins,t=>this.gameMaxWins=t),this.setupLobbyInput("playersInput","maxPlayers",()=>this.gameMaxPlayers,t=>this.gameMaxPlayers=t)}setupLobbyToggle(t,e,s,a){const i=this[t];if(!i)return;const o=`${t}Handler`;this[o]&&i.removeEventListener("click",this[o]);const r=()=>{if(!this.isHost)return;const i=!s();a(i),v(t,i),this.roomManager.sendMessage(JSON.stringify({type:"lobby-options",[e]:i})),console.log(`${e} changed to: ${i}`)};this[o]=r,i.addEventListener("click",r)}setupLobbyInput(t,e,s,a){const i=this[t];if(!i)return;const o=`${t}Handler`;this[o]&&i.removeEventListener("change",this[o]);const r=()=>{if(!this.isHost)return;const o=parseInt(i.value);isNaN(o)||o<1?i.value=s().toString():(a(o),T(t,o),this.roomManager.sendMessage(JSON.stringify({type:"lobby-options",[e]:o})),console.log(`${e} changed to: ${o}`))};this[o]=r,i.addEventListener("change",r)}syncLobbyOptions(t){this.syncOption(t,"privateRoom","isPrivateRoom","privateToggle",v,"Lobby privacy",t=>t?"Private":"Public"),this.syncOption(t,"maxWins","gameMaxWins","winsInput",T,"Game max wins"),this.syncOption(t,"maxPlayers","gameMaxPlayers","playersInput",T,"Game max players"),this.syncOption(t,"upgradesEnabled","isUpgradesEnabled","upgradesToggle",v,"Game upgrades toggled")}syncOption(t,e,s,a,i,o,r){if(void 0!==t[e]){this[s]=t[e],i(a,t[e]);const n=r?r(t[e]):t[e];console.log(`${o} synced to: ${n}`)}}promotePlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"promote-player",targetPlayerId:t}))}kickPlayer(t){this.roomManager.sendMessage(JSON.stringify({type:"kick-player",targetPlayerId:t}))}returnToLobby(){this.resetGameState("Lobby"),this.roomManager.sendMessage(JSON.stringify({type:"return-to-lobby",reason:"game-ended"})),this.showLobbyControls(this.roomManager.getCurrentRoom()||"")}checkRoundEnd(){if(!this.isRoundInProgress)return;let t=this.myPlayer.stats.health.value>0?1:0,e=this.myPlayer.stats.health.value>0?this.userId:null;this.players.forEach(s=>{s.stats.health.value>0&&(t++,e=s.id)}),t<=1&&this.endRound(e)}endRound(t){if(this.isRoundInProgress){if(this.isRoundInProgress=!1,this.roundWinner=t,!t)return console.log("Round ended with no survivors!"),void setTimeout(()=>{this.startNewRound()},u);if(this.leaderboard.has(t)){const e=this.leaderboard.get(t);if(e.wins++,console.log(`${t} won the round! Total wins: ${e.wins}`),e.wins>=this.gameMaxWins)return void this.endGame(t);this.updateLeaderboardDisplay()}setTimeout(()=>{this.pauseGame()},500),setTimeout(()=>{this.startUpgradePhase(t)},u)}}endGame(t){this.gameWinner=t,console.log(`${t} won the game with ${this.gameMaxWins} wins!`),this.roomManager.sendMessage(JSON.stringify({type:"game-end",winnerId:t})),setTimeout(()=>{this.returnToLobby()},5e3)}startNewRound(){console.log("Starting new round..."),this.resumeGame(),this.isRoundInProgress=!0,this.roundWinner=null,this.myPlayer.stats.health.value=this.myPlayer.stats.health.max,S("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),S("staminaBar",this.myPlayer.stats.stamina.value,this.myPlayer.stats.stamina.max),this.myPlayer.transform.pos.x=770*Math.random()+d,this.myPlayer.transform.pos.y=570*Math.random()+d;const e=this.getSpawnMap(120);this.players.forEach(s=>{const a=e[s.id];s.transform.pos.x=a.x,s.transform.pos.y=a.y,s.transform.rot=s.transform.rot||0,s.timestamp=s.timestamp||Date.now(),s.actions.dash.cooldown=s.actions.dash.cooldown||t.ACTIONS.DASH.COOLDOWN,s.actions.dash.drain=s.actions.dash.drain||t.ACTIONS.DASH.DRAIN,s.actions.dash.multiplier=s.actions.dash.multiplier||t.ACTIONS.DASH.MULTIPLIER,s.actions.dash.time=s.actions.dash.time||t.ACTIONS.DASH.TIME,s.actions.melee.cooldown=s.actions.melee.cooldown||t.ACTIONS.MELEE.COOLDOWN,s.actions.melee.damage=s.actions.melee.damage||t.ACTIONS.MELEE.DAMAGE,s.actions.melee.duration=s.actions.melee.duration||t.ACTIONS.MELEE.DURATION,s.actions.melee.range=s.actions.melee.range||t.ACTIONS.MELEE.RANGE,s.actions.melee.size=s.actions.melee.size||t.ACTIONS.MELEE.SIZE,s.actions.primary.buffer=s.actions.primary.buffer||t.ACTIONS.PRIMARY.BUFFER,s.actions.primary.burst.amount=s.actions.primary.burst.amount||t.ACTIONS.PRIMARY.BURST.AMOUNT,s.actions.primary.burst.delay=s.actions.primary.burst.delay||t.ACTIONS.PRIMARY.BURST.DELAY,s.actions.primary.magazine.currentAmmo=s.actions.primary.magazine.currentAmmo||t.ACTIONS.PRIMARY.MAGAZINE.SIZE,s.actions.primary.magazine.currentReserve=s.actions.primary.magazine.currentReserve||t.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE,s.actions.primary.magazine.maxReserve=s.actions.primary.magazine.maxReserve||t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE,s.actions.primary.magazine.size=s.actions.primary.magazine.size||t.ACTIONS.PRIMARY.MAGAZINE.SIZE,s.actions.primary.offset=s.actions.primary.offset||t.ACTIONS.PRIMARY.OFFSET,s.actions.primary.projectile.amount=s.actions.primary.projectile.amount||t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,s.actions.primary.projectile.color=s.actions.primary.projectile.color||t.ACTIONS.PRIMARY.PROJECTILE.COLOR,s.actions.primary.projectile.damage=s.actions.primary.projectile.damage||t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,s.actions.primary.projectile.length=s.actions.primary.projectile.length||t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,s.actions.primary.projectile.range=s.actions.primary.projectile.range||t.ACTIONS.PRIMARY.PROJECTILE.RANGE,s.actions.primary.projectile.size=s.actions.primary.projectile.size||t.ACTIONS.PRIMARY.PROJECTILE.SIZE,s.actions.primary.projectile.speed=s.actions.primary.projectile.speed||t.ACTIONS.PRIMARY.PROJECTILE.SPEED,s.actions.primary.projectile.spread=s.actions.primary.projectile.spread||t.ACTIONS.PRIMARY.PROJECTILE.SPREAD,s.actions.primary.reload.time=s.actions.primary.reload.time||t.ACTIONS.PRIMARY.RELOAD.TIME,s.actions.sprint.drain=s.actions.sprint.drain||t.ACTIONS.SPRINT.DRAIN,s.actions.sprint.multiplier=s.actions.sprint.multiplier||t.ACTIONS.SPRINT.MULTIPLIER,s.equipment=s.equipment||t.EQUIPMENT,s.physics.acceleration=s.physics.acceleration||t.PHYSICS.ACCELERATION,s.physics.friction=s.physics.friction||t.PHYSICS.FRICTION,s.rig.body=s.rig.body||t.RIG.BODY,s.rig.head=s.rig.head||t.RIG.HEAD,s.rig.headwear=s.rig.headwear||t.RIG.HEADWEAR,s.rig.weapon=s.rig.weapon||t.RIG.WEAPON,s.stats.health.max=s.stats.health.max||t.STATS.HEALTH.MAX,s.stats.health.value=s.stats.health.max||t.STATS.HEALTH.MAX,s.stats.luck=s.stats.luck||t.STATS.LUCK,s.stats.size=s.stats.size||t.STATS.SIZE,s.stats.speed=s.stats.speed||t.STATS.SPEED,s.stats.stamina.max=s.stats.stamina.max||t.STATS.STAMINA.MAX,s.stats.stamina.recovery.delay=s.stats.stamina.recovery.delay||t.STATS.STAMINA.RECOVERY.DELAY,s.stats.stamina.recovery.rate=s.stats.stamina.recovery.rate||t.STATS.STAMINA.RECOVERY.RATE,s.stats.stamina.value=s.stats.stamina.value||t.STATS.STAMINA.MAX,s.unique=s.unique||t.UNIQUE}),this.roomManager.sendMessage(JSON.stringify({type:"new-round",spawnMap:e}))}getSpawnMap(t){const e={},s=[];return e[this.userId]={x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},s.push(e[this.userId]),this.players.forEach(a=>{let i,o=0;do{i={x:770*Math.random()+d,y:570*Math.random()+d},o++}while(s.some(e=>Math.hypot(e.x-i.x,e.y-i.y)<t)&&o<1e3);s.push(i),e[a.id]=i}),e}sendChatMessage(){if(!this.chatInput||!this.chatInput.value.trim())return;const t=this.chatInput.value.trim();t.length>200?alert("Message too long! Max 200 characters."):(this.roomManager.sendMessage(JSON.stringify({type:"chat-message",message:t,timestamp:Date.now()})),this.displayChatMessage(this.userId,t,!0),this.chatInput.value="")}displayChatMessage(t,e,s=!1){if(!this.chatMessages)return;const a=document.createElement("div");a.className="chat_message "+(s?"own":"other");const i=document.createElement("span");i.className="sender",i.textContent=s?"You:":`${t}:`;const o=document.createElement("span");for(o.className="content",o.textContent=e,a.appendChild(i),a.appendChild(o),this.chatMessages.appendChild(a),this.chatMessages.scrollTop=this.chatMessages.scrollHeight;this.chatMessages.children.length>100;)this.chatMessages.removeChild(this.chatMessages.firstChild)}clearChat(){this.chatMessages&&(this.chatMessages.innerHTML=""),this.chatInput&&(this.chatInput.value="")}triggerAttack(t){switch(t){case"melee":this.startMelee();break;case"ranged":this.startBurst();break;default:console.warn(`Unknown attack type: ${t}`)}}updateAttack(t){if(!this.gameRunning||this.myPlayer.stats.health.value<=0)return;const e=Date.now();if(this.isReloading)e>=this.reloadStartTime+this.myPlayer.actions.primary.reload.time&&this.finishReload();else if(this.isBurstActive&&e>=this.nextBurstShotTime){const t=this.myPlayer.actions.primary.burst.amount;if(this.myPlayer.actions.primary.magazine.currentAmmo>0&&this.currentBurstShot<t){const s=this.getAimDirection();if(0===s.x&&0===s.y)return;this.launchProjectile(s,!0),this.currentBurstShot++,this.myPlayer.actions.primary.magazine.currentAmmo--,console.log(`Burst shot ${this.currentBurstShot}! Magazine: ${this.myPlayer.actions.primary.magazine.currentAmmo}/${this.myPlayer.actions.primary.magazine.size}, Inventory: ${this.myPlayer.actions.primary.magazine.currentReserve}/${this.myPlayer.actions.primary.magazine.maxReserve}`),this.currentBurstShot>=t||0===this.myPlayer.actions.primary.magazine.currentAmmo?(this.isBurstActive=!1,this.currentBurstShot=0):this.nextBurstShotTime=e+this.myPlayer.actions.primary.burst.delay}else this.isBurstActive=!1,this.currentBurstShot=0}}canMelee(){const t=Date.now();return!this.isMelee&&t>=this.lastMeleeTime+this.myPlayer.actions.melee.cooldown&&this.myPlayer.stats.health.value>0&&!this.isBurstActive&&!this.isReloading}startMelee(){this.isMelee=!0,this.lastMeleeTime=Date.now(),this.myPlayer.rig.weapon="KNIFE",this.roomManager.sendMessage(JSON.stringify({type:"weapon-change",playerId:this.userId,weapon:"KNIFE"}));const t=this.myPlayer.transform.rot,e=this.myPlayer.actions.melee.range,s=this.myPlayer.actions.melee.size,a=this.getPlayerCollider(this.myPlayer)+this.myPlayer.actions.primary.projectile.size+this.myPlayer.actions.primary.offset,i=this.myPlayer.transform.pos.x+Math.cos(t-Math.PI/2)*a,o=this.myPlayer.transform.pos.y+Math.sin(t-Math.PI/2)*a,r={x:Math.cos(t-Math.PI/2)*e,y:Math.sin(t-Math.PI/2)*e},n={id:A(),transform:{pos:{x:i,y:o},rot:t},timestamp:Date.now(),color:"rgba(255, 255, 255, 0)",damage:this.myPlayer.actions.melee.damage,distanceTraveled:0,length:s,ownerId:this.userId,range:e,size:s,velocity:r};this.projectiles.set(n.id,n),this.roomManager.sendMessage(JSON.stringify({type:"projectile-launch",projectile:n})),setTimeout(()=>{this.projectiles.delete(n.id),this.isMelee=!1,this.myPlayer.rig.weapon="GLOCK",this.roomManager.sendMessage(JSON.stringify({type:"weapon-change",playerId:this.userId,weapon:"GLOCK"}))},this.myPlayer.actions.melee.duration)}startBurst(){if(this.isBurstActive||this.myPlayer.stats.health.value<=0||this.isReloading)return;const t=Date.now();if(t<this.lastShotTime+this.myPlayer.actions.primary.buffer)return;this.lastShotTime=t;const e=this.myPlayer.actions.primary.burst.amount,s=Math.min(e,this.myPlayer.actions.primary.magazine.currentAmmo);if(0===s)return console.log("Out of ammo! Magazine empty."),this.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:8}},duration:0,partIndex:1}),void this.playAudioNetwork({src:C(P.WEAPON.GLOCK.EMPTY),output:"sfx",pitch:{min:.975,max:1.05},spatial:{blend:1,pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y}},volume:{min:.985,max:1}});this.isBurstActive=!0,this.currentBurstShot=0;const a=this.getAimDirection();if(0===a.x&&0===a.y)return;this.launchProjectile(a,!0),this.currentBurstShot++,this.myPlayer.actions.primary.magazine.currentAmmo--;const i=1-this.myPlayer.actions.primary.magazine.currentAmmo/this.myPlayer.actions.primary.magazine.size;if(i>.5){const t=2*(i-.5)*.5;this.playAudio({src:C(P.WEAPON.GLOCK.EMPTY),output:"sfx",pitch:{min:.975,max:1.05},volume:{min:t,max:t}})}this.myPlayer.actions.primary.burst.amount>1&&this.myPlayer.actions.primary.magazine.currentAmmo>0&&this.currentBurstShot<s?this.nextBurstShotTime=Date.now()+this.myPlayer.actions.primary.burst.delay:(this.isBurstActive=!1,this.currentBurstShot=0,0===this.myPlayer.actions.primary.magazine.currentAmmo&&this.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:8}},duration:0,partIndex:1}))}launchProjectile(t,e){console.log("Fired shot!");const s=Math.sqrt(t.x*t.x+t.y*t.y);if(0===s)return;const a=t.x/s,i=t.y/s;this.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:0},.5:{x:0,y:20},1:{x:0,y:0}},duration:175,partIndex:1});const l=this.getPlayerCollider(this.myPlayer)+this.myPlayer.actions.primary.projectile.size+this.myPlayer.actions.primary.offset,h=this.myPlayer.transform.pos.x+a*l,d=this.myPlayer.transform.pos.y+i*l,y=-i,p=a;this.createParticles(h,d,`muzzle_${Date.now()}`,o,{x:a,y:i}),this.createParticles(h,d,`smoke_${Date.now()}`,n,{x:.3*a,y:.3*i}),this.createParticles(h-5,d-5,`shell_${Date.now()}`,r,{x:.8*y+-.2*a,y:.8*p+-.2*i}),this.playAudioNetwork({src:C(P.WEAPON.GLOCK.ATTACK),output:"sfx",pitch:{min:.95,max:1.125},spatial:{blend:1,pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rolloff:{distance:2*Math.max(m,c),factor:.5,type:"logarithmic"}},volume:{min:.965,max:1}}),this.playAudioNetwork({src:C(P.WEAPON.GLOCK.SHELL),delay:{min:.25,max:.5},output:"sfx",pitch:{min:.95,max:1.125},spatial:{blend:1,pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y}},volume:{min:.675,max:1}});for(let t=0;t<this.myPlayer.actions.primary.projectile.amount;t++){if(this.myPlayer.unique.length>0&&e)for(const t of this.myPlayer.unique)if(this.luckRoll()){this.triggerUnique(t);break}const t=(Math.random()-.5)*(this.myPlayer.actions.primary.projectile.spread/100),s=Math.atan2(i,a)+t,o=R(s),r={id:A(),transform:{pos:{x:this.myPlayer.transform.pos.x+Math.cos(s)*l,y:this.myPlayer.transform.pos.y+Math.sin(s)*l},rot:s},timestamp:Date.now(),color:this.myPlayer.actions.primary.projectile.color,damage:this.myPlayer.actions.primary.projectile.damage,distanceTraveled:0,length:this.myPlayer.actions.primary.projectile.length,ownerId:this.userId,range:100*this.myPlayer.actions.primary.projectile.range,size:this.myPlayer.actions.primary.projectile.size,velocity:{x:o.x*this.myPlayer.actions.primary.projectile.speed,y:o.y*this.myPlayer.actions.primary.projectile.speed}};this.projectiles.set(r.id,r),this.roomManager.sendMessage(JSON.stringify({type:"projectile-launch",projectile:r}))}}updateProjectiles(t){const a=[];this.projectiles.forEach((o,r)=>{o.transform.pos.x+=o.velocity.x*t,o.transform.pos.y+=o.velocity.y*t;const n=Math.sqrt(o.velocity.x*o.velocity.x+o.velocity.y*o.velocity.y)*t;if(o.distanceTraveled+=n,this.myPlayer.stats.health.value>0){const t=o.transform.pos.x-this.myPlayer.transform.pos.x,e=o.transform.pos.y-this.myPlayer.transform.pos.y;Math.sqrt(t*t+e*e)<=this.getPlayerCollider(this.myPlayer)+o.size&&(a.push(r),this.myPlayer.stats.health.value-=o.damage,S("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:this.userId,shooterId:o.ownerId,damage:o.damage,newHealth:this.myPlayer.stats.health.value,projectileId:r})))}o.ownerId===this.userId&&this.players.forEach((t,e)=>{if(t.stats.health.value>0){const n=o.transform.pos.x-t.transform.pos.x,l=o.transform.pos.y-t.transform.pos.y;if(Math.sqrt(n*n+l*l)<=this.getPlayerCollider(t)+o.size){a.push(r);const n=Math.max(0,t.stats.health.value-o.damage);t.stats.health.value=n;const l={x:-o.velocity.x/Math.sqrt(o.velocity.x**2+o.velocity.y**2),y:-o.velocity.y/Math.sqrt(o.velocity.x**2+o.velocity.y**2)};if(this.createDecal(o.transform.pos.x,o.transform.pos.y,`blood_${r}`,s),this.createParticles(o.transform.pos.x,o.transform.pos.y,`blood_${r}`,i,l),this.createEmitter(e,o.transform.pos.x,o.transform.pos.y,t.transform.pos.x,t.transform.pos.y),this.playAudioNetwork({src:C(P.IMPACT.FLESH.BULLET),output:"sfx",pitch:{min:.925,max:1.15},spatial:{blend:1,pos:{x:o.transform.pos.x,y:o.transform.pos.y}},volume:{min:.95,max:1}}),n<=0){console.log(`I killed ${e}!`);const t=this.leaderboard.get(this.userId);t&&t.kills++;const s=this.leaderboard.get(e);s&&s.deaths++,this.updateLeaderboardDisplay()}this.roomManager.sendMessage(JSON.stringify({type:"player-hit",targetId:e,shooterId:this.userId,damage:o.damage,newHealth:n,projectileId:r,wasKill:n<=0})),n<=0&&this.checkRoundEnd()}}}),(o.distanceTraveled>=o.range||o.transform.pos.x<0||o.transform.pos.x>m||o.transform.pos.y<0||o.transform.pos.y>c)&&(a.push(r),o.ownerId===this.userId&&(o.distanceTraveled>=o.range&&this.createDecal(o.transform.pos.x,o.transform.pos.y,`impact_${r}`,e),this.createParticles(o.transform.pos.x,o.transform.pos.y,`sparks_${r}`,l),this.playAudioNetwork({src:C(P.IMPACT.METAL.BULLET),output:"sfx",pitch:{min:.95,max:1.125},spatial:{blend:1,pos:{x:o.transform.pos.x,y:o.transform.pos.y}},volume:{min:.965,max:1}}),this.roomManager.sendMessage(JSON.stringify({type:"projectile-remove",projectileId:r}))))}),a.forEach(t=>{this.projectiles.delete(t)})}triggerUnique(t){if("projectile_array"===t){const t=Math.floor(3*Math.random())+1;for(let e=0;e<t;e++){const t=this.getRandomDirection(360);this.launchProjectile(t,!1)}}}canReload(){return!this.isReloading&&this.myPlayer.actions.primary.magazine.currentAmmo<this.myPlayer.actions.primary.magazine.size&&this.myPlayer.actions.primary.magazine.currentReserve>0&&!this.isMelee}startReload(){this.canReload()&&(console.log("Reloading..."),this.isReloading=!0,this.reloadStartTime=Date.now(),this.isBurstActive=!1,this.currentBurstShot=0,this.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:8}},duration:0,partIndex:1}))}finishReload(){const t=this.myPlayer.actions.primary.magazine.size-this.myPlayer.actions.primary.magazine.currentAmmo,e=Math.min(t,this.myPlayer.actions.primary.magazine.currentReserve);this.myPlayer.actions.primary.magazine.currentAmmo+=e,this.myPlayer.actions.primary.magazine.currentReserve-=e,this.isReloading=!1,this.removeAmmoFromReserveUI(e),this.animateCharacterPart({playerId:this.userId,part:"WEAPON",frames:{0:{x:0,y:20},1:{x:0,y:0}},duration:175,partIndex:1}),console.log("Reload complete...")}initializePlayer(){return this.myPlayer={id:this.userId,transform:{pos:{x:770*Math.random()+d,y:570*Math.random()+d},rot:0},timestamp:Date.now(),color:"#"+Math.floor(16777215*Math.random()).toString(16).padStart(6,"0"),actions:{dash:{cooldown:t.ACTIONS.DASH.COOLDOWN,drain:t.ACTIONS.DASH.DRAIN,multiplier:t.ACTIONS.DASH.MULTIPLIER,time:t.ACTIONS.DASH.TIME},melee:{cooldown:t.ACTIONS.MELEE.COOLDOWN,damage:t.ACTIONS.MELEE.DAMAGE,duration:t.ACTIONS.MELEE.DURATION,range:t.ACTIONS.MELEE.RANGE,size:t.ACTIONS.MELEE.SIZE},primary:{buffer:t.ACTIONS.PRIMARY.BUFFER,burst:{amount:t.ACTIONS.PRIMARY.BURST.AMOUNT,delay:t.ACTIONS.PRIMARY.BURST.DELAY},magazine:{currentAmmo:t.ACTIONS.PRIMARY.MAGAZINE.SIZE,currentReserve:t.ACTIONS.PRIMARY.MAGAZINE.STARTING_RESERVE,maxReserve:t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE,size:t.ACTIONS.PRIMARY.MAGAZINE.SIZE},offset:t.ACTIONS.PRIMARY.OFFSET,projectile:{amount:t.ACTIONS.PRIMARY.PROJECTILE.AMOUNT,color:t.ACTIONS.PRIMARY.PROJECTILE.COLOR,damage:t.ACTIONS.PRIMARY.PROJECTILE.DAMAGE,length:t.ACTIONS.PRIMARY.PROJECTILE.LENGTH,range:t.ACTIONS.PRIMARY.PROJECTILE.RANGE,size:t.ACTIONS.PRIMARY.PROJECTILE.SIZE,speed:t.ACTIONS.PRIMARY.PROJECTILE.SPEED,spread:t.ACTIONS.PRIMARY.PROJECTILE.SPREAD},reload:{time:t.ACTIONS.PRIMARY.RELOAD.TIME}},sprint:{drain:t.ACTIONS.SPRINT.DRAIN,multiplier:t.ACTIONS.SPRINT.MULTIPLIER}},equipment:t.EQUIPMENT,physics:{acceleration:t.PHYSICS.ACCELERATION,friction:t.PHYSICS.FRICTION},rig:{body:t.RIG.BODY,head:t.RIG.HEAD,headwear:t.RIG.HEADWEAR,weapon:t.RIG.WEAPON},stats:{health:{max:t.STATS.HEALTH.MAX,value:t.STATS.HEALTH.MAX},luck:t.STATS.LUCK,size:t.STATS.SIZE,speed:t.STATS.SPEED,stamina:{max:t.STATS.STAMINA.MAX,recovery:{delay:t.STATS.STAMINA.RECOVERY.DELAY,rate:t.STATS.STAMINA.RECOVERY.RATE},value:t.STATS.STAMINA.MAX}},unique:t.UNIQUE}}resetPlayerState(){this.canShoot=!0,this.isBurstActive=!1,this.isReloading=!1,this.isMelee=!1,this.isSprinting=!1,this.isDashing=!1,this.isStaminaRecoveryBlocked=!1,this.playerVelocityX=0,this.playerVelocityY=0,this.dashStartTime=0,this.lastDashTime=0,this.reloadStartTime=0,this.lastMeleeTime=0,this.lastShotTime=0,this.nextBurstShotTime=0,this.currentBurstShot=0,this.lastStaminaDrainTime=0,this.staminaRecoveryBlockedUntil=0}updatePlayerPosition(t){if(!this.gameRunning||this.myPlayer.stats.health.value<=0||this.isDashing)return;const e=Date.now(),{inputX:s,inputY:a}=this.getMoveInput(),i=this.isSprinting&&this.myPlayer.stats.stamina.value>0&&this.isMoving()?this.myPlayer.stats.speed*this.myPlayer.actions.sprint.multiplier:this.myPlayer.stats.speed;this.isSprinting&&this.myPlayer.stats.stamina.value<=0&&(this.isSprinting=!1,console.log("Out of stamina, stopped sprinting"));const o=s*i,r=a*i;this.playerVelocityX+=(o-this.playerVelocityX)*this.myPlayer.physics.acceleration*t,this.playerVelocityY+=(r-this.playerVelocityY)*this.myPlayer.physics.acceleration*t,this.isMoving()||(this.playerVelocityX*=Math.pow(this.myPlayer.physics.friction,t),this.playerVelocityY*=Math.pow(this.myPlayer.physics.friction,t));let n=this.myPlayer.transform.pos.x+this.playerVelocityX*t,l=this.myPlayer.transform.pos.y+this.playerVelocityY*t;this.myPlayer.transform.pos.x=n,this.myPlayer.transform.pos.y=l;let h=0!==this.playerVelocityX||0!==this.playerVelocityY;const m=Math.sqrt((this.myPlayer.transform.pos.x-this.lastSentX)**2+(this.myPlayer.transform.pos.y-this.lastSentY)**2);h&&m>2&&e-this.lastSentMoveTime>=10&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y}}})),this.lastSentX=this.myPlayer.transform.pos.x,this.lastSentY=this.myPlayer.transform.pos.y,this.lastSentMoveTime=e),Math.abs(this.playerVelocityX)<.01&&(this.playerVelocityX=0),Math.abs(this.playerVelocityY)<.01&&(this.playerVelocityY=0)}recordDeath(){console.log("I died! Waiting for round to end..."),this.resetPlayerState();const t=this.spawnAmmoBox(10);this.ammoBoxes.set(t.id,t),this.generateGore(this.userId,this.myPlayer.transform.pos.x,this.myPlayer.transform.pos.y,this.myPlayer.stats.size),this.roomManager.sendMessage(JSON.stringify({type:"player-death",playerId:this.userId,x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y,size:this.myPlayer.stats.size,ammoBox:t}))}checkCollisions(t){this.myPlayer.transform.pos.x=Math.max(15,Math.min(785,this.myPlayer.transform.pos.x)),this.myPlayer.transform.pos.y=Math.max(15,Math.min(585,this.myPlayer.transform.pos.y)),this.checkObjectCollisions(t),this.checkPlayersCollisions(t)}checkObjectCollisions(t){if(this.myPlayer.stats.health.value<=0)return;const e=this.getPlayerCollider(this.myPlayer,5);this.ammoBoxes.forEach((t,s)=>{if(t.isOpen)return;const a=this.myPlayer.transform.pos.x-t.transform.pos.x,i=this.myPlayer.transform.pos.y-t.transform.pos.y;if(Math.sqrt(a*a+i*i)<=e){const e=this.myPlayer.actions.primary.magazine.currentReserve,a=this.myPlayer.actions.primary.magazine.maxReserve,i=Math.min(t.ammoAmount,a-e);if(i>0){this.myPlayer.actions.primary.magazine.currentReserve+=i,this.spawnAmmoInReserveUI(i),console.log(`Picked up ammo box! +${i} bullets. Inventory: ${this.myPlayer.actions.primary.magazine.currentReserve}/${this.myPlayer.actions.primary.magazine.maxReserve}`);const e=Math.random()*Math.PI*2,a=2+3*Math.random();t.isOpen=!0,t.lid.velocity={x:Math.cos(e)*a,y:Math.sin(e)*a},t.lid.torque=.3*(Math.random()-.5),this.roomManager.sendMessage(JSON.stringify({type:"ammo-pickup",ammoBoxId:s,playerId:this.userId,boxState:{isOpen:!0,lid:t.lid}}))}}})}checkPlayersCollisions(t){this.myPlayer.stats.health.value<=0||this.players.forEach(t=>{if(t.stats.health.value<=0)return;const e=this.myPlayer.transform.pos.x-t.transform.pos.x,s=this.myPlayer.transform.pos.y-t.transform.pos.y,a=Math.sqrt(e*e+s*s),i=this.getPlayerCollider(this.myPlayer)+this.getPlayerCollider(t);if(a<i&&a>.01){const t=i-a,o=e/a*t,r=s/a*t;this.myPlayer.transform.pos.x+=o,this.myPlayer.transform.pos.y+=r}})}getPlayerCollider(t,e){let s=t.stats.size/4;return e&&e>0&&(s=t.stats.size/4+e),s}getMoveInput(){let t=0,e=0;this.keys.has(this.myGameOptions.controls.keybinds.moveUp)&&(e-=1),this.keys.has(this.myGameOptions.controls.keybinds.moveDown)&&(e+=1),this.keys.has(this.myGameOptions.controls.keybinds.moveLeft)&&(t-=1),this.keys.has(this.myGameOptions.controls.keybinds.moveRight)&&(t+=1);const s=Math.sqrt(t*t+e*e);return s>0&&(t/=s,e/=s),{inputX:t,inputY:e,inputLength:s}}isMoving(){return this.getMoveInput().inputLength>0}luckRoll(){const t=.5+.45*Math.tanh(this.myPlayer.stats.luck/10);return Math.random()<t}rotateCharacterPart(t,e){if(t===this.userId)this.myPlayer.transform.rot=e;else{const s=this.players.get(t);if(!s)return;s.transform.rot=e}}requestStamina(t){return this.myPlayer.stats.stamina.value<t?(console.log(`Insufficient stamina! Need: ${t}, Have: ${this.myPlayer.stats.stamina}`),!1):(this.myPlayer.stats.stamina.value-=t,this.isStaminaRecoveryBlocked=!0,this.staminaRecoveryBlockedUntil=Date.now()+this.myPlayer.stats.stamina.recovery.delay,console.log(`Stamina drained: -${t}, Remaining: ${this.myPlayer.stats.stamina}`),!0)}updateStamina(t){const e=Date.now();if(this.isSprinting&&e>=this.lastStaminaDrainTime+100&&(this.requestStamina(this.myPlayer.actions.sprint.drain)||(this.isSprinting=!1,console.log("Out of stamina, stopped sprinting")),this.lastStaminaDrainTime=e),(!this.isStaminaRecoveryBlocked||e>=this.staminaRecoveryBlockedUntil)&&(this.isStaminaRecoveryBlocked=!1,this.myPlayer.stats.stamina.value<this.myPlayer.stats.stamina.max&&!this.isSprinting)){const e=this.myPlayer.stats.stamina.recovery.rate/1e3*16.67*t;this.myPlayer.stats.stamina.value=Math.min(this.myPlayer.stats.stamina.max,this.myPlayer.stats.stamina.value+e)}}startDash(){if(this.isDashing||this.myPlayer.stats.health.value<=0||!this.isMoving())return;const t=Date.now();if(t<this.lastDashTime+this.myPlayer.actions.dash.cooldown)return void console.log("Dash on cooldown");let{inputX:e,inputY:s,inputLength:a}=this.getMoveInput();if(!this.isMoving())return void console.log("No movement input for dash");if(e/=a,s/=a,!this.requestStamina(this.myPlayer.actions.dash.drain))return void console.log("Not enough stamina to dash");this.isDashing=!0,this.dashStartTime=t,this.lastDashTime=t;const i=this.myPlayer.stats.speed*this.myPlayer.actions.dash.multiplier;this.playerVelocityX=e*i,this.playerVelocityY=s*i,console.log(`Dashing! Speed: ${i}`)}updateDash(t){if(!this.isDashing)return;const e=Date.now();let s=this.myPlayer.transform.pos.x+this.playerVelocityX*t,a=this.myPlayer.transform.pos.y+this.playerVelocityY*t;this.myPlayer.transform.pos.x=s,this.myPlayer.transform.pos.y=a;let i=0!==this.playerVelocityX||0!==this.playerVelocityY;const o=Math.sqrt((this.myPlayer.transform.pos.x-this.lastSentX)**2+(this.myPlayer.transform.pos.y-this.lastSentY)**2);i&&o>2&&e-this.lastSentMoveTime>=10&&(this.roomManager.sendMessage(JSON.stringify({type:"player-move",transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y}}})),this.lastSentX=this.myPlayer.transform.pos.x,this.lastSentY=this.myPlayer.transform.pos.y,this.lastSentMoveTime=e),e>=this.dashStartTime+this.myPlayer.actions.dash.time&&(this.isDashing=!1,console.log("Dash ended"))}spawnObject(t){const e={id:A(),transform:t.transform,timestamp:Date.now()};if("AmmoBox"===t.type)return{id:e.id,transform:e.transform,timestamp:e.timestamp,ammoAmount:t.data?.amount||10,isOpen:!1,lid:{pos:{x:0,y:0},rot:0,velocity:{x:0,y:0},torque:0}};throw new Error(`Unknown object type: ${t.type}`)}spawnAmmoBox(t){return this.spawnObject({type:"AmmoBox",transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot},data:{amount:t}})}initializeGameOptions(){return this.myGameOptions={audio:{mixer:{master:g,sfx:I}},controls:{keybinds:{dash:p.DASH,melee:p.MELEE,moveDown:p.MOVE_DOWN,moveLeft:p.MOVE_LEFT,moveRight:p.MOVE_RIGHT,moveUp:p.MOVE_UP,reload:p.RELOAD,sprint:p.SPRINT}}}}showGameControls(t){this.updateDisplay("game",t)}startGame(){this.isHost&&(1!==this.lobbyPlayers.size?this.executeStartGame():this.soloGameWarning())}executeStartGame(){this.roomManager.sendMessage(JSON.stringify({type:"start-game",hostSpawn:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y}})),this.showGameControls(this.roomManager.getCurrentRoom()||""),this.startGameLoop()}startGameLoop(){this.gameRunning=!0,this.isRoundInProgress=!0,this.myPlayer.actions.primary.magazine.currentReserve=Math.floor(t.ACTIONS.PRIMARY.MAGAZINE.MAX_RESERVE/2),this.myPlayer.actions.primary.magazine.currentAmmo=this.myPlayer.actions.primary.magazine.size,this.spawnAmmoInReserveUI(this.myPlayer.actions.primary.magazine.currentReserve),this.isReloading=!1,this.createLeaderboard(),B(this.myPlayer),this.roomManager.sendMessage(JSON.stringify({type:"player-state",id:this.myPlayer.id,timestamp:this.myPlayer.timestamp,color:this.myPlayer.color,transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot},actions:{dash:{cooldown:this.myPlayer.actions.dash.cooldown,drain:this.myPlayer.actions.dash.drain,multiplier:this.myPlayer.actions.dash.multiplier,time:this.myPlayer.actions.dash.time},melee:{cooldown:this.myPlayer.actions.melee.cooldown,damage:this.myPlayer.actions.melee.damage,duration:this.myPlayer.actions.melee.duration,range:this.myPlayer.actions.melee.range,size:this.myPlayer.actions.melee.size},primary:{buffer:this.myPlayer.actions.primary.buffer,burst:{amount:this.myPlayer.actions.primary.burst.amount,delay:this.myPlayer.actions.primary.burst.delay},magazine:{currentAmmo:this.myPlayer.actions.primary.magazine.currentAmmo,currentReserve:this.myPlayer.actions.primary.magazine.currentReserve,maxReserve:this.myPlayer.actions.primary.magazine.maxReserve,size:this.myPlayer.actions.primary.magazine.size},offset:this.myPlayer.actions.primary.offset,projectile:{amount:this.myPlayer.actions.primary.projectile.amount,color:this.myPlayer.actions.primary.projectile.color,damage:this.myPlayer.actions.primary.projectile.damage,length:this.myPlayer.actions.primary.projectile.length,range:this.myPlayer.actions.primary.projectile.range,size:this.myPlayer.actions.primary.projectile.size,speed:this.myPlayer.actions.primary.projectile.speed,spread:this.myPlayer.actions.primary.projectile.spread},reload:{time:this.myPlayer.actions.primary.reload.time}},sprint:{drain:this.myPlayer.actions.sprint.drain,multiplier:this.myPlayer.actions.sprint.multiplier}},equipment:this.myPlayer.equipment,physics:{acceleration:this.myPlayer.physics.acceleration,friction:this.myPlayer.physics.friction},rig:{body:this.myPlayer.rig.body,head:this.myPlayer.rig.head,headwear:this.myPlayer.rig.headwear,weapon:this.myPlayer.rig.weapon},stats:{health:{max:this.myPlayer.stats.health.max,value:this.myPlayer.stats.health.value},luck:this.myPlayer.stats.luck,size:this.myPlayer.stats.size,speed:this.myPlayer.stats.speed,stamina:{max:this.myPlayer.stats.stamina.max,recovery:{delay:this.myPlayer.stats.stamina.recovery.delay,rate:this.myPlayer.stats.stamina.recovery.rate},value:this.myPlayer.stats.stamina.value}},unique:this.myPlayer.unique})),this.gameLoop(),S("healthBar",this.myPlayer.stats.health.value,this.myPlayer.stats.health.max),S("staminaBar",this.myPlayer.stats.stamina.value,this.myPlayer.stats.stamina.max)}gameLoop(){if(!(this.gameRunning&&this.ctx&&this.canvas&&this.decalCtx&&this.decalCanvas))return;if(this.gamePaused)return void requestAnimationFrame(()=>this.gameLoop());const t=this.deltaTime();this.updatePlayerPosition(t),this.updateAttack(t),this.updateProjectiles(t),this.updateParticles(t),this.updateEmitters(t),this.updateCharacterAnimations(t),this.updateStamina(t),this.updateDash(t),this.checkCollisions(t),S("staminaBar",this.myPlayer.stats.stamina.value,this.myPlayer.stats.stamina.max),this.clearCtx(this.ctx),this.ctx.drawImage(this.decalCanvas,0,0),this.drawObjects(),this.projectiles.forEach(t=>{this.drawProjectile(t)}),this.players.forEach(t=>{this.drawCharacter(t)}),this.drawCharacter(this.myPlayer,!0),this.drawParticles(),requestAnimationFrame(()=>this.gameLoop())}pauseGame(){this.gameRunning&&(this.gamePaused=!0,console.log("Game paused"),this.keys.clear(),this.isSprinting=!1,this.isDashing=!1,this.isBurstActive=!1,this.currentBurstShot=0)}resumeGame(){this.gameRunning&&(this.gamePaused=!1,console.log("Game resumed"))}resetGameState(t){this.gameRunning=!1,this.isRoundInProgress=!1,this.gameWinner=null,this.roundWinner=null,this.gameMaxWins=5,this.gameMaxPlayers=4,"Room"===t&&(this.inLobby=!1,this.isHost=!1),this.players.clear(),this.projectiles.clear(),this.ammoBoxes.clear(),this.decals.clear(),this.particles.clear(),this.emitters.clear(),this.upgradesCompleted.clear(),this.reserveBullets=[],"Room"===t&&this.lobbyPlayers.clear(),this.clearCtx(),this.clearChat(),this.clearLeaderboard(),this.resetPlayerState(),this.initializePlayer(),B(this.myPlayer)}startUpgradePhase(t){console.log("Starting upgrade phase..."),this.upgradesCompleted.clear(),t===this.userId?this.showWinnerWaitScreen():this.showUpgradeSelection()}showWinnerWaitScreen(){if(!this.upgradeContainer)return;this.upgradeContainer.innerHTML="";const t=document.createElement("div");t.className="upgrade_waiting",t.textContent="Waiting for other players...",this.upgradeContainer.appendChild(t),this.upgradeContainer.style.display="flex"}showWinnerContinueButton(){if(!this.upgradeContainer)return;this.upgradeContainer.innerHTML="";const t=document.createElement("div");t.className="upgrade_waiting",t.textContent="Upgrade phase complete.";const e=document.createElement("button");e.textContent="Continue",e.onclick=()=>{this.upgradeContainer&&(console.log("Winner pressed continue..."),this.upgradeContainer.style.display="none",setTimeout(()=>{this.startNewRound()},500))},this.upgradeContainer.appendChild(t),this.upgradeContainer.appendChild(e),this.upgradeContainer.style.display="flex"}showUpgradeSelection(){this.upgradeContainer&&(this.upgradeContainer.innerHTML="",function(t,e){const s=D.filter(t=>!(t.unique&&N.has(t.id)||t.type===w.EQUIPMENT&&e.equipment.includes(t.id))),a=[];for(let t=0;t<Math.min(3,s.length)&&0!==s.length;t++){const t=s.reduce((t,e)=>t+L[e.rarity].weight,0);let e=Math.random()*t,i=null;for(const t of s)if(e-=L[t.rarity].weight,e<=0){i=t;break}if(i){a.push(i);const t=s.indexOf(i);s.splice(t,1)}}return a}(0,this.myPlayer).forEach(t=>{const e=document.createElement("div");e.className="upgrade_card",e.setAttribute("data-rarity",t.rarity.toString());const s=document.createElement("div");s.className="upgrade_image";const a=document.createElement("img");a.src=t.icon,a.alt=t.name,a.className="upgrade_icon",a.onerror=()=>{console.warn(`Failed to load upgrade image: ${t.icon}`),a.style.display="none"},s.appendChild(a);const i=document.createElement("div");i.className="upgrade_name",i.textContent=t.name;const o=document.createElement("div");o.className="upgrade_subtitle",o.textContent=t.subtitle,e.appendChild(s),e.appendChild(i),e.appendChild(o),e.addEventListener("click",()=>{console.log("Selected upgrade: ",t.name),this.selectUpgrade(t.id)}),this.upgradeContainer&&this.upgradeContainer.appendChild(e)}),this.upgradeContainer.style.display="flex")}selectUpgrade(t){const e=function(t,e){const s=D.find(e=>e.id===t);return!(!s||(s.unique&&N.has(t)?(console.warn(`Unique upgrade ${t} already taken globally`),1):s.type===w.EQUIPMENT&&e.equipment.includes(t)?(console.warn(`Equipment ${t} already owned by player`),1):(s.unique&&N.add(t),s.func(e),0)))}(t,this.myPlayer);e?this.finishUpgrade(t):console.error("Failed to apply upgrade")}finishUpgrade(t){this.upgradeContainer&&(this.upgradeContainer.style.display="none"),this.roomManager.sendMessage(JSON.stringify({type:"upgrade-taken",upgradeId:t,userId:this.userId,isUnique:D.find(e=>e.id===t)?.unique||!1})),this.roomManager.sendMessage(JSON.stringify({type:"player-state",id:this.myPlayer.id,timestamp:this.myPlayer.timestamp,color:this.myPlayer.color,transform:{pos:{x:this.myPlayer.transform.pos.x,y:this.myPlayer.transform.pos.y},rot:this.myPlayer.transform.rot},actions:{dash:{cooldown:this.myPlayer.actions.dash.cooldown,drain:this.myPlayer.actions.dash.drain,multiplier:this.myPlayer.actions.dash.multiplier,time:this.myPlayer.actions.dash.time},melee:{cooldown:this.myPlayer.actions.melee.cooldown,damage:this.myPlayer.actions.melee.damage,duration:this.myPlayer.actions.melee.duration,range:this.myPlayer.actions.melee.range,size:this.myPlayer.actions.melee.size},primary:{buffer:this.myPlayer.actions.primary.buffer,burst:{amount:this.myPlayer.actions.primary.burst.amount,delay:this.myPlayer.actions.primary.burst.delay},magazine:{currentAmmo:this.myPlayer.actions.primary.magazine.currentAmmo,currentReserve:this.myPlayer.actions.primary.magazine.currentReserve,maxReserve:this.myPlayer.actions.primary.magazine.maxReserve,size:this.myPlayer.actions.primary.magazine.size},offset:this.myPlayer.actions.primary.offset,projectile:{amount:this.myPlayer.actions.primary.projectile.amount,color:this.myPlayer.actions.primary.projectile.color,damage:this.myPlayer.actions.primary.projectile.damage,length:this.myPlayer.actions.primary.projectile.length,range:this.myPlayer.actions.primary.projectile.range,size:this.myPlayer.actions.primary.projectile.size,speed:this.myPlayer.actions.primary.projectile.speed,spread:this.myPlayer.actions.primary.projectile.spread},reload:{time:this.myPlayer.actions.primary.reload.time}},sprint:{drain:this.myPlayer.actions.sprint.drain,multiplier:this.myPlayer.actions.sprint.multiplier}},equipment:this.myPlayer.equipment,physics:{acceleration:this.myPlayer.physics.acceleration,friction:this.myPlayer.physics.friction},rig:{body:this.myPlayer.rig.body,head:this.myPlayer.rig.head,headwear:this.myPlayer.rig.headwear,weapon:this.myPlayer.rig.weapon},stats:{health:{max:this.myPlayer.stats.health.max,value:this.myPlayer.stats.health.max},luck:this.myPlayer.stats.luck,size:this.myPlayer.stats.size,speed:this.myPlayer.stats.speed,stamina:{max:this.myPlayer.stats.stamina.max,recovery:{delay:this.myPlayer.stats.stamina.recovery.delay,rate:this.myPlayer.stats.stamina.recovery.rate},value:this.myPlayer.stats.stamina.max}},unique:this.myPlayer.unique})),console.log("Upgrade selected, waiting for others...")}toggleEquipment(t){(function(t,e){return t.equipment.includes(e)})(this.myPlayer,t)&&("test_equipment_id"===t||console.warn(`Unknown equipment: ${t}`))}createLeaderboard(){const t=new Set;t.add(this.userId),this.players.forEach((e,s)=>{t.add(s)}),this.lobbyPlayers.forEach((e,s)=>{t.add(s)}),t.forEach(t=>{this.leaderboard.has(t)||(this.leaderboard.set(t,{playerId:t,wins:0,kills:0,deaths:0}),console.log(`Created leaderboard entry for ${t}`))}),this.updateLeaderboardDisplay(),console.log("Leaderboard created/updated:",Array.from(this.leaderboard.entries()))}updateLeaderboardDisplay(){this.leaderboardBody&&(this.leaderboardBody.innerHTML="",Array.from(this.leaderboard.entries()).sort((t,e)=>{const[,s]=t,[,a]=e;return a.wins!==s.wins?a.wins-s.wins:a.kills-s.kills}).forEach(([t,e])=>{const s=document.createElement("tr");s.className="leaderboard_row",t===this.userId&&s.classList.add("current-player");const a=document.createElement("td");a.textContent=t===this.userId?"You":t.substring(0,8),a.className="player_name",s.appendChild(a);const i=document.createElement("td");i.textContent=e.wins.toString(),i.className="wins",s.appendChild(i);const o=document.createElement("td");o.textContent=e.kills.toString(),o.className="kills",s.appendChild(o);const r=document.createElement("td");r.textContent=e.deaths.toString(),r.className="deaths",s.appendChild(r),this.leaderboardBody&&this.leaderboardBody.appendChild(s)}))}clearLeaderboard(){this.leaderboard.clear(),this.leaderboardBody&&(this.leaderboardBody.innerHTML="")}clearCtx(t){t?t.clearRect(0,0,m,c):this.decalCtx&&this.ctx&&(this.ctx.clearRect(0,0,m,c),this.decalCtx.clearRect(0,0,m,c))}drawCharacter(e,s=!1){if(!this.ctx)return;if(e.stats.health.value<=0)return;this.drawCharacterLayer(e,"BODY",e.rig.body),this.drawCharacterLayer(e,"WEAPON",e.rig.weapon),this.drawCharacterLayer(e,"HEAD",e.rig.head),this.drawCharacterLayer(e,"HEADWEAR",e.rig.headwear),this.ctx.fillStyle="#fff",this.ctx.font="12px Arial",this.ctx.textAlign="center";const a=s?"You":e.id.substring(0,6);this.ctx.fillText(a,e.transform.pos.x,e.transform.pos.y-t.VISUAL.ID_DISPLAY_OFFSET)}drawCharacterLayer(t,e,s){if(!this.ctx)return;const a=function(t,e){switch(t){case"BODY":return _[e]||_.DEFAULT;case"WEAPON":return k[e]||k.GLOCK;case"HEAD":return z[e]||z.DEFAULT;case"HEADWEAR":return U[e]||U.DEFAULT;default:throw new Error(`Unknown character layer: ${t}`)}}(e,s);"string"==typeof a?this.drawCharacterPart(t,a,e):Array.isArray(a)&&a.forEach((s,a)=>{this.drawCharacterPart(t,s,e,a)})}drawCharacterPart(t,e,s,a){if(!this.ctx)return;let i=this.characterImages.get(e);if(!i&&(i=new Image,i.src=e,this.characterImages.set(e,i),!i.complete))return;if(!i.complete||0===i.naturalWidth)return;const o=t.stats.size/650*650,r=`${t.id}_${s}_${a||0}`,n=this.characterOffsets?.get(r)||{x:0,y:0};this.ctx.save(),void 0!==t.transform.rot?(this.ctx.translate(t.transform.pos.x,t.transform.pos.y),this.ctx.rotate(t.transform.rot),this.ctx.translate(n.x,n.y),this.ctx.drawImage(i,-o/2,-o/2,o,o)):this.ctx.drawImage(i,t.transform.pos.x-o/2+n.x,t.transform.pos.y-o/2+n.y,o,o),this.ctx.restore()}drawObjects(){this.ctx&&this.ammoBoxes.forEach(t=>{if(!this.ctx)return;this.ammoBoxImages||(this.ammoBoxImages={});const e=["BASE","BULLETS","LID"];if(e.forEach(t=>{if(!this.ammoBoxImages[t]){const e=new Image;e.src=h[t],this.ammoBoxImages[t]=e}}),!e.every(t=>this.ammoBoxImages[t]?.complete&&this.ammoBoxImages[t]?.naturalWidth>0))return;const s=35,a=t.transform.pos.x,i=t.transform.pos.y;t.isOpen&&(t.lid.velocity.x*=.85,t.lid.velocity.y*=.85,t.lid.torque*=.85,t.lid.pos.x+=t.lid.velocity.x,t.lid.pos.y+=t.lid.velocity.y,t.lid.rot+=t.lid.torque),this.ctx.save(),this.ctx.translate(a,i),this.ctx.rotate(t.transform.rot||0),this.ctx.drawImage(this.ammoBoxImages.BASE,-17.5,-17.5,s,s),t.isOpen||(this.ctx.drawImage(this.ammoBoxImages.BULLETS,-17.5,-17.5,s,s),this.ctx.drawImage(this.ammoBoxImages.LID,-17.5,-17.5,s,s)),this.ctx.restore(),t.isOpen&&(this.ctx.save(),this.ctx.translate(a+t.lid.pos.x,i+t.lid.pos.y),this.ctx.rotate((t.transform.rot||0)+t.lid.rot),this.ctx.drawImage(this.ammoBoxImages.LID,-17.5,-17.5,s,s),this.ctx.restore())})}drawProjectile(t){if(!this.ctx)return;const e=Math.sqrt(t.velocity.x*t.velocity.x+t.velocity.y*t.velocity.y),s=t.velocity.x/e,a=t.velocity.y/e,i=t.transform.pos.x+s*(t.length/2),o=t.transform.pos.y+a*(t.length/2),r=t.transform.pos.x-s*(t.length/2),n=t.transform.pos.y-a*(t.length/2);this.ctx.fillStyle=t.color,this.ctx.strokeStyle=t.color,this.ctx.lineWidth=t.size,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(r,n),this.ctx.lineTo(i,o),this.ctx.stroke()}drawParticles(){this.ctx&&this.particles.forEach(t=>{const e=x(t.color);e&&this.ctx&&(this.ctx.save(),this.ctx.globalAlpha=t.opacity,0!==t.torque?(this.ctx.translate(t.x+t.size/2,t.y+t.size/2),this.ctx.rotate(t.rotation),this.ctx.fillStyle=`rgb(${e.r}, ${e.g}, ${e.b})`,this.ctx.fillRect(-t.size/2,-t.size/2,t.size,t.size)):(this.ctx.fillStyle=`rgb(${e.r}, ${e.g}, ${e.b})`,this.ctx.fillRect(Math.floor(t.x),Math.floor(t.y),t.size,t.size)),this.ctx.restore())})}initializeAmmoReserveCanvas(){this.ammoReserveIcon=new Image,this.ammoReserveIcon.src="/assets/img/icon/inventory/ammobox.png",this.ammoReserveIcon.onload=()=>{this.renderAmmoReserves()},this.projectileIcon=new Image,this.projectileIcon.src="/assets/img/icon/inventory/9mm.png",requestAnimationFrame(()=>this.updateAmmoReservePhysics())}spawnAmmoInReserveUI(t=1){if(!this.ammoReservesCtx||!this.projectileIcon)return;const{collisionHeight:e,collisionWidth:s,collisionX:a,collisionY:i}=this.getAmmoReserveCollisionZone(),o=a+s,r=i+e/2;for(let e=0;e<t;e++)setTimeout(()=>{const t=2+8*Math.random(),e=(Math.random()-.5)*(Math.PI/3),s=Math.cos(e)*t,a=Math.sin(e)*t,i=Math.random()*Math.PI*2,n=.1*(Math.random()-.5);this.reserveBullets.push({x:o,y:r,vx:s,vy:a,rotation:i,torque:n,width:2.75,height:7})},100*e)}removeAmmoFromReserveUI(t=1){for(let e=0;e<t;e++)setTimeout(()=>{this.reserveBullets.length>0&&this.reserveBullets.shift()},100*e)}updateAmmoReservePhysics(){if(!this.ammoReservesCtx||!this.ammoReserveIcon)return;const{collisionHeight:t,collisionWidth:e,collisionX:s,collisionY:a}=this.getAmmoReserveCollisionZone();this.ammoReservesCtx.clearRect(0,0,this.ammoReservesCanvas.width,this.ammoReservesCanvas.height),this.ammoReservesCtx.drawImage(this.ammoReserveIcon,0,0,this.ammoReservesCanvas.width,this.ammoReservesCanvas.height);for(let i of this.reserveBullets)i.x+=i.vx,i.y+=i.vy,i.rotation+=i.torque,i.vx*=.9,i.vy*=.9,i.torque*=.9,i.x-i.width/2<s&&(i.x=s+i.width/2,i.vx*=-.5),i.x+i.width/2>s+e&&(i.x=s+e-i.width/2,i.vx*=-.5),i.y-i.height/2<a&&(i.y=a+i.height/2,i.vy*=-.5),i.y+i.height/2>a+t&&(i.y=a+t-i.height/2,i.vy*=-.5);for(let t=0;t<this.reserveBullets.length;t++)for(let e=t+1;e<this.reserveBullets.length;e++){const s=this.reserveBullets[t],a=this.reserveBullets[e],i=s.x-a.x,o=s.y-a.y,r=Math.sqrt(i*i+o*o),n=(s.width+a.width)/2;if(r<n){const t=Math.atan2(o,i),e=n-r,l=Math.cos(t)*e/2,h=Math.sin(t)*e/2;s.x+=l,s.y+=h,a.x-=l,a.y-=h;const m=s.vx*Math.cos(t)+s.vy*Math.sin(t),c=a.vx*Math.cos(t)+a.vy*Math.sin(t),d=(m+c)/2;s.vx+=.5*(d-m),a.vx+=.5*(d-c)}}for(let t of this.reserveBullets)this.ammoReservesCtx.save(),this.ammoReservesCtx.translate(t.x,t.y),this.ammoReservesCtx.rotate(t.rotation),this.ammoReservesCtx.drawImage(this.projectileIcon,-t.width/2,-t.height/2,t.width,t.height),this.ammoReservesCtx.restore();requestAnimationFrame(()=>this.updateAmmoReservePhysics())}renderAmmoReserves(){this.ammoReservesCtx&&this.ammoReserveIcon&&this.ammoReserveIcon.complete&&(this.ammoReservesCtx.clearRect(0,0,this.ammoReservesCanvas.width,this.ammoReservesCanvas.height),this.ammoReservesCtx.drawImage(this.ammoReserveIcon,0,0,this.ammoReservesCanvas.width,this.ammoReservesCanvas.height))}getAmmoReserveCollisionZone(){return{collisionHeight:27,collisionWidth:63,collisionX:(this.ammoReservesCanvas.width-63)/2-3,collisionY:(this.ammoReservesCanvas.height-27)/2-1}}animateCharacterPart(t){this.generateCharacterAnimation(t),this.roomManager.sendMessage(JSON.stringify({type:"character-animation",params:t}))}animateCharacterPartNetwork(t){this.generateCharacterAnimation(t)}generateCharacterAnimation(t){const{playerId:e,part:s,frames:a,duration:i,partIndex:o}=t,r=`${e}_${s}_${o||0}`;this.characterAnimations.set(r,{playerId:e,part:s,partIndex:o,frames:a,duration:i,startTime:Date.now(),originalOffset:{x:0,y:0}})}updateCharacterAnimations(t){const e=[],s=Date.now();this.characterAnimations.forEach((t,a)=>{const i=(s-t.startTime)/t.duration;if(0!==t.duration&&i>=1)return void e.push(a);const o=Object.keys(t.frames).map(Number).sort((t,e)=>t-e);let r,n,l=0;for(let t=0;t<o.length-1;t++){const e=o[t],s=o[t+1];if(i>=e&&i<s){l=t;break}}if(i>=1){const e=t.frames[o[o.length-1]];r=e.x,n=e.y}else{const e=t.frames[o[l]],s=t.frames[o[l+1]]||e,a=(i-o[l])/(o[l+1]-o[l])||0;r=e.x+(s.x-e.x)*a,n=e.y+(s.y-e.y)*a}this.characterOffsets.set(a,{x:r,y:n})}),e.forEach(t=>{this.characterAnimations.delete(t),this.characterOffsets&&this.characterOffsets.delete(t)})}createDecal(t,s,a,i=e){this.generateDecal(t,s,a,i),this.roomManager.sendMessage(JSON.stringify({type:"add-decal",decalId:a,x:t,y:s,params:i}))}createDecalNetwork(t,e,s,a){this.decals.has(s)||this.generateDecal(t,e,s,a)}generateDecal(t,e,s,a){if(!this.decalCtx)return;if(t<0||t>m||e<0||e>c)return;const i=a.RADIUS.MIN+Math.random()*(a.RADIUS.MAX-a.RADIUS.MIN),o=a.DENSITY.MIN+Math.random()*(a.DENSITY.MAX-a.DENSITY.MIN),r=a.OPACITY.MIN+Math.random()*(a.OPACITY.MAX-a.OPACITY.MIN),n=Math.floor(i*i*Math.PI*o),l=x(a.COLOR);if(l){this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over";for(let s=0;s<n;s++){const s=Math.random()*Math.PI*2,o=Math.random()*i,n=t+Math.cos(s)*o,h=e+Math.sin(s)*o;if(n<0||n>=m||h<0||h>=c)continue;const d=r+(Math.random()-.5)*a.VARIATION,y=Math.max(.05,Math.min(.6,d));this.decalCtx.fillStyle=`rgba(${l.r}, ${l.g}, ${l.b}, ${y})`,this.decalCtx.fillRect(Math.floor(n),Math.floor(h),1,1)}this.decalCtx.restore(),this.decals.set(s,{x:t,y:e,params:a})}else console.error(`Invalid hex color: ${a.COLOR}`)}createParticles(t,e,s,a,i){this.generateParticles(t,e,s,a,i),this.roomManager.sendMessage(JSON.stringify({type:"add-particles",particleId:s,x:t,y:e,params:a,direction:i}))}generateParticles(t,e,s,a,i){const o=Math.floor(a.COUNT.MIN+Math.random()*(a.COUNT.MAX-a.COUNT.MIN));for(let r=0;r<o;r++){const o=a.LIFETIME.MIN+Math.random()*(a.LIFETIME.MAX-a.LIFETIME.MIN),n=a.SPEED.MIN+Math.random()*(a.SPEED.MAX-a.SPEED.MIN),l=a.SIZE.MIN+Math.random()*(a.SIZE.MAX-a.SIZE.MIN),h=a.OPACITY.MIN+Math.random()*(a.OPACITY.MAX-a.OPACITY.MIN),m=a.TORQUE.MIN+Math.random()*(a.TORQUE.MAX-a.TORQUE.MIN),c=a.NOISE?a.NOISE.STRENGTH.MIN+Math.random()*(a.NOISE.STRENGTH.MAX-a.NOISE.STRENGTH.MIN):0,d=a.NOISE?a.NOISE.SCALE.MIN+Math.random()*(a.NOISE.SCALE.MAX-a.NOISE.SCALE.MIN):0,y=a.SIZE_OVER_LIFETIME?a.SIZE_OVER_LIFETIME.MIN+Math.random()*(a.SIZE_OVER_LIFETIME.MAX-a.SIZE_OVER_LIFETIME.MIN):0;let p;p=i?Math.atan2(i.y,i.x)+(Math.random()-.5)*a.SPREAD:Math.random()*Math.PI*2;const u={id:`${s}_${r}`,x:t,y:e,velocityX:Math.cos(p)*n,velocityY:Math.sin(p)*n,initialSize:l,size:l,sizeOverLifetime:y,maxOpacity:h,noiseScale:d,noiseStrength:c,opacity:h,color:a.COLOR,lifetime:o,age:0,collide:a.COLLIDE,fade:a.FADE,paint:a.PAINT,stain:a.STAIN,torque:m,rotation:Math.random()*Math.PI*2,hasCollided:!1};this.particles.set(u.id,u)}}updateParticles(t){const e=[];this.particles.forEach((s,a)=>{if(s.noiseStrength>0&&s.noiseScale>0){const e=.001*Date.now(),a=this.simplexNoise2D(s.x/s.noiseScale,e),i=this.simplexNoise2D(s.y/s.noiseScale,e+100);s.velocityX+=a*s.noiseStrength*t,s.velocityY+=i*s.noiseStrength*t}if(s.sizeOverLifetime>0){const t=s.age/s.lifetime;s.size=s.initialSize*(1+t*s.sizeOverLifetime)}if(s.x+=s.velocityX*t,s.y+=s.velocityY*t,s.age+=16.67*t,s.rotation+=s.torque*Math.PI/180*t,s.fade){const t=s.age/s.lifetime;s.opacity=s.maxOpacity*(1-t)}if(s.hasCollided&&s.stain){this.stampParticle(`stain_${a}_${Date.now()}`,s);const t=(s.age-(s.lifetime-.5*s.lifetime))/(.5*s.lifetime);t>0&&(s.size=Math.max(.5,s.size*(1-.1*t)),s.opacity=s.opacity*(1-t))}if(s.age>=s.lifetime||s.x<-10||s.x>810||s.y<-10||s.y>610){if(s.collide&&s.age>=s.lifetime&&s.x>=0&&s.x<=m&&s.y>=0&&s.y<=c&&!s.hasCollided){s.hasCollided=!0;const t=.875+.1*Math.random();s.velocityX*=1-t,s.velocityY*=1-t;const e=.5*s.lifetime;return void(s.lifetime+=e)}s.paint&&!s.stain&&s.age>=s.lifetime&&s.x>=0&&s.x<=m&&s.y>=0&&s.y<=c&&this.stampParticle(`stamp_${a}`,s),e.push(a)}}),e.forEach(t=>this.particles.delete(t))}stampParticle(t,e){if(!this.decalCtx)return;const s=x(e.color);s&&(this.decalCtx.save(),this.decalCtx.globalCompositeOperation="source-over",0!==e.torque?(this.decalCtx.translate(e.x+e.size/2,e.y+e.size/2),this.decalCtx.rotate(e.rotation),this.decalCtx.fillStyle=`rgba(${s.r}, ${s.g}, ${s.b}, ${e.opacity})`,this.decalCtx.fillRect(-e.size/2,-e.size/2,e.size,e.size)):(this.decalCtx.fillStyle=`rgba(${s.r}, ${s.g}, ${s.b}, ${e.opacity})`,this.decalCtx.fillRect(Math.floor(e.x),Math.floor(e.y),e.size,e.size)),this.decalCtx.restore(),this.decals.set(t,{x:e.x,y:e.y,params:null}))}createEmitter(t,e,s,a,i){const o=`particle_emitter_${t}_${Date.now()}`,r=1e3+2e3*Math.random();this.generateEmitter(o,t,e,s,a,i,r),this.roomManager.sendMessage(JSON.stringify({type:"particle-emitter",emitterId:o,playerId:t,hitX:e,hitY:s,centerX:a,centerY:i,lifetime:r})),console.log(`Emitter created on ${t} for ${r}ms`)}generateEmitter(t,e,s,a,i,o,r){const n=s-i,l=a-o,h=Math.atan2(l,n);this.emitters.set(t,{playerId:e,offsetX:n,offsetY:l,direction:h,lifetime:r,age:0,lastEmission:0,emissionInterval:200+300*Math.random()})}updateEmitters(t){const e=[];this.emitters.forEach((i,o)=>{i.age+=16.67*t;const r=i.playerId===this.userId?this.myPlayer:this.players.get(i.playerId);if(!r||r.stats.health.value<=0)return void e.push(o);const n=r.transform.pos.x+i.offsetX,l=r.transform.pos.y+i.offsetY;if(i.age>=i.lastEmission+i.emissionInterval){const t=.6*Math.PI,e=(Math.random()-.5)*t,s=i.direction+e,r=3,h=4*(Math.random()-.5),m=Math.max(.5,r+h);this.generateParticles(n+8*(Math.random()-.5),l+8*(Math.random()-.5),`emitter_particles_${o}_${i.age}`,a,{x:Math.cos(s)*m,y:Math.sin(s)*m}),i.lastEmission=i.age,i.emissionInterval=120+180*Math.random()}i.age>=i.lifetime&&(this.generateDecal(n,l,`emitter_decal_${o}`,s),e.push(o))}),e.forEach(t=>this.emitters.delete(t))}generateGore(t,e,s,a){const i=2+Math.floor(4*Math.random()),o=[...j.GORE];for(let r=0;r<i&&o.length>0;r++){const i=Math.floor(Math.random()*o.length),n=o.splice(i,1)[0],l=Math.random()*Math.PI*2,h=Math.random()*a,m={type:"gore",assetPath:n,x:e+Math.cos(l)*h,y:s+Math.sin(l)*h,rotation:Math.random()*Math.PI*2,scale:.65+.4*Math.random()},c=`death_gore_${t}_${Date.now()}_${r}`;this.stampGore(m),this.decals.set(c,{x:m.x,y:m.y,params:null})}const r=1+Math.floor(2*Math.random()),n=[...j.BLOOD];for(let i=0;i<r&&n.length>0;i++){const o=Math.floor(Math.random()*n.length),r=n.splice(o,1)[0],l=Math.random()*Math.PI*2,h=Math.random()*(.7*a),m={type:"blood",assetPath:r,x:e+Math.cos(l)*h,y:s+Math.sin(l)*h,rotation:Math.random()*Math.PI*2,scale:1.25+.2*Math.random()},c=`death_blood_${t}_${Date.now()}_${i}`;this.stampGore(m),this.decals.set(c,{x:m.x,y:m.y,params:null})}}stampGore(t){if(!this.decalCtx)return;let e=this.characterImages.get(t.assetPath);if(!e&&(e=new Image,e.src=t.assetPath,this.characterImages.set(t.assetPath,e),!e.complete))return void(e.onload=()=>{this.stampGore(t)});if(!e.complete||0===e.naturalWidth)return;this.decalCtx.save(),this.decalCtx.translate(t.x,t.y),this.decalCtx.rotate(t.rotation);const s=32*t.scale;this.decalCtx.drawImage(e,-s/2,-s/2,s,s),this.decalCtx.restore()}playAudio(t){const e=this.audioPool.getAudio(t.src);if(!e)return void console.warn(`Audio pool exhausted or max concurrent reached for: ${t.src}`);let s=1;t.volume&&(s=t.volume.min+Math.random()*(t.volume.max-t.volume.min));const a=t.spatial?.blend??0;if(a>0&&t.spatial?.pos){const e=t.spatial.pos.x-this.myPlayer.transform.pos.x,i=t.spatial.pos.y-this.myPlayer.transform.pos.y,o=Math.sqrt(e*e+i*i);let r;if(t.spatial.rolloff){const e=t.spatial.rolloff.type||"linear",s=t.spatial.rolloff.factor,a=t.spatial.rolloff.distance;if("logarithmic"===e){const t=a*s;if(o<t)r=1;else{const e=(o-t)/(a-t);r=Math.max(0,1-Math.pow(e,.5))}}else r=Math.max(0,1-o/a*s)}else{const t=Math.max(m,c);r=Math.max(0,1-o/t)}s*=1-a+r*a}const i=t.output?.toLowerCase()||null;if(i&&void 0!==this.myGameOptions.audio.mixer[i]&&(s*=this.myGameOptions.audio.mixer[i]),s*=this.myGameOptions.audio.mixer.master,e.volume=Math.max(0,Math.min(1,s)),t.pitch){const s=t.pitch.min+Math.random()*(t.pitch.max-t.pitch.min);e.playbackRate=Math.max(.25,Math.min(4,s))}void 0!==t.loop&&(e.loop=t.loop);let o=0;t.delay&&(o=1e3*(t.delay.min+Math.random()*(t.delay.max-t.delay.min))),setTimeout(()=>{e.play().catch(t=>{console.warn("Audio play failed:",t)})},o)}playAudioNetwork(t){this.playAudio(t),this.roomManager.sendMessage(JSON.stringify({type:"play-audio",params:t}))}preloadAudioAssets(){this.preloadSFX(P)}preloadSFX(t){for(const e in t){const s=t[e];Array.isArray(s)?s.forEach(t=>{"string"==typeof t&&t.endsWith(".ogg")&&this.audioPool.preloadSound(t)}):"object"==typeof s&&null!==s&&this.preloadSFX(s)}}updateDisplay(t,e){if(this.roomControls&&this.lobbyContainer&&this.gameContainer&&this.chatContainer&&this.leaderboardContainer)switch(this.clearDisplay(),t){case"lobby":this.lobbyContainer.style.display="flex",this.chatContainer.style.display="flex",e&&this.roomIdDisplay&&(this.roomIdDisplay.textContent=e),this.inLobby=!0;break;case"room":this.roomControls.style.display="flex";break;case"game":if(this.gameContainer.style.display="flex",this.chatContainer.style.display="flex",this.leaderboardContainer.style.display="flex",e){const t=this.gameRoomIdDisplay;t&&(t.textContent=e)}this.inLobby=!1}}updateHostDisplay(){this.startGameBtn&&this.gameOptionsContainer&&(this.startGameBtn.style.display=this.isHost?"block":"none",this.startGameBtn.disabled=this.lobbyPlayers.size<1,this.gameOptionsContainer.style.display=this.isHost?"flex":"none")}showJoinRoomModal(){if(!(this.modal&&this.modalInput&&this.modalConfirmButton&&this.modalCancelButton&&this.modalErrorDiv))return;this.modal.classList.remove("hidden"),this.modalInput.value="",this.modalErrorDiv.textContent="",this.modalInput.focus();const t=()=>{this.modal&&this.modalInput&&this.modalConfirmButton&&this.modalCancelButton&&this.modalErrorDiv&&(this.modal.classList.add("hidden"),this.modalConfirmButton.onclick=null,this.modalCancelButton.onclick=null,this.modalInput.onkeydown=null)};this.modalConfirmButton.onclick=()=>{if(!this.modalInput||!this.modalErrorDiv)return;const e=this.modalInput.value.trim();if(!e)return void(this.modalErrorDiv.textContent="Invalid code...");let s=null;try{const t=new URL(e,window.location.origin);s=t.pathname.startsWith("/room_")?t.pathname.replace("/","").replace("/",""):new URLSearchParams(t.search).get("room")}catch{e.startsWith("room_")&&(s=e)}s?(t(),this.joinRoomById(s)):this.modalErrorDiv.textContent="Invalid code..."},this.modalCancelButton.onclick=t,this.modalInput.onkeydown=e=>{"Enter"===e.key&&this.modalConfirmButton&&this.modalConfirmButton.click(),"Escape"===e.key&&t()}}soloGameWarning(){if(!(this.modal&&this.modalConfirmButton&&this.modalCancelButton&&this.modalContent&&this.modalText&&this.modalInput&&this.modalErrorDiv&&this.modalButtons))return;this.modal.classList.remove("hidden"),this.modalInput.style.display="none",this.modalErrorDiv.textContent=" ",this.modalButtons.style.display="flex",this.modalCancelButton.style.display="flex",this.modalText.textContent="Start game as only player? Other players will be unable to join until you return to the lobby.",this.modalConfirmButton.textContent="Start Game",this.modalCancelButton.textContent="Cancel";const t=()=>{this.modal&&this.modalInput&&this.modalConfirmButton&&this.modalCancelButton&&this.modalText&&(this.modal.classList.add("hidden"),this.modalInput.style.display="flex",this.modalText.textContent="Join Room",this.modalConfirmButton.onclick=null,this.modalCancelButton.onclick=null)};this.modalConfirmButton.onclick=()=>{t(),this.executeStartGame()},this.modalCancelButton.onclick=t}displayLobbyPlayers(){this.lobbyPlayersList&&(this.lobbyPlayersList.innerHTML="",Array.from(this.lobbyPlayers.values()).sort((t,e)=>t.isHost&&!e.isHost?-1:!t.isHost&&e.isHost?1:0).forEach(t=>{const e=document.createElement("div");e.className="lobby_player";const s=document.createElement("div");s.className="player_color",s.style.backgroundColor=t.color;const a=document.createElement("div");a.className="player_name",a.textContent=`${t.id}${t.isHost?" (Host)":""}`;const i=document.createElement("div");if(i.className="player_controls",this.isHost&&t.id!==this.userId){const e=document.createElement("button");e.textContent="Promote",e.onclick=()=>this.promotePlayer(t.id);const s=document.createElement("button");s.textContent="Kick",s.className="danger",s.onclick=()=>this.kickPlayer(t.id),i.appendChild(e),i.appendChild(s)}e.appendChild(s),e.appendChild(a),e.appendChild(i),this.lobbyPlayersList&&this.lobbyPlayersList.appendChild(e)}))}clearDisplay(){this.roomControls&&this.lobbyContainer&&this.gameContainer&&this.chatContainer&&this.leaderboardContainer&&this.upgradeContainer&&(this.roomControls.style.display="none",this.lobbyContainer.style.display="none",this.gameContainer.style.display="none",this.chatContainer.style.display="none",this.leaderboardContainer.style.display="none",this.upgradeContainer.style.display="none")}getAimDirection(){const t=this.mouseX-this.myPlayer.transform.pos.x,e=this.mouseY-this.myPlayer.transform.pos.y,s=Math.sqrt(t*t+e*e);return 0===s?{x:0,y:0}:{x:t/s,y:e/s}}getRandomDirection(t){const e=Math.random()*(t*Math.PI/180);return{x:Math.cos(e),y:Math.sin(e)}}deltaTime(){const t=performance.now(),e=t-this.lastFrameTime;return this.lastFrameTime=t,Math.min(e,100)/16.67}simplexNoise2D(t,e){const s=.5*(Math.sqrt(3)-1),a=(3-Math.sqrt(3))/6,i=(t+e)*s,o=Math.floor(t+i),r=Math.floor(e+i),n=(o+r)*a,l=t-(o-n),h=e-(r-n),m=l>h?1:0,c=l>h?0:1,d=l-m+a,y=h-c+a,p=l-1+2*a,u=h-1+2*a,g=255&o,I=255&r,f=new Uint8Array(512);for(let t=0;t<256;t++)f[t]=t;for(let t=0;t<256;t++){const e=t+Math.floor(Math.random()*(256-t));[f[t],f[e]]=[f[e],f[t]]}for(let t=0;t<256;t++)f[256+t]=f[t];const M=f[g+f[I]]%12,E=f[g+m+f[I+c]]%12,P=f[g+1+f[I+1]]%12,A=[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]],C=(t,e,s)=>t[0]*e+t[1]*s;let x=.5-l*l-h*h,R=.5-d*d-y*y,S=.5-p*p-u*u;return 70*((x<0?0:Math.pow(x,4)*C(A[M],l,h))+(R<0?0:Math.pow(R,4)*C(A[E],d,y))+(S<0?0:Math.pow(S,4)*C(A[P],p,u)))}}class G{constructor(t=10,e=5){this.poolSize=t,this.maxConcurrent=e,this.pools=new Map,this.activeAudio=new Map}createPool(t){const e=[];for(let s=0;s<this.poolSize;s++){const s=new Audio(t);s.preload="auto",s.addEventListener("ended",()=>this.returnToPool(t,s)),s.addEventListener("pause",()=>this.returnToPool(t,s)),e.push(s)}return e}returnToPool(t,e){const s=this.activeAudio.get(t);if(s){const t=s.indexOf(e);t>-1&&s.splice(t,1)}const a=this.pools.get(t);a&&!a.includes(e)&&a.push(e)}getAudio(t){const e=this.activeAudio.get(t)||[];if(e.length>=this.maxConcurrent)return null;let s=this.pools.get(t);s||(s=this.createPool(t),this.pools.set(t,s),this.activeAudio.set(t,[]));const a=s.pop();return a?(a.currentTime=0,a.volume=1,a.playbackRate=1,a.loop=!1,e.push(a),a):null}preloadSound(t){if(!this.pools.has(t)){const e=this.createPool(t);this.pools.set(t,e),this.activeAudio.set(t,[])}}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{new Y}):new Y})();