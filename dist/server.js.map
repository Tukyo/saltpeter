{"version":3,"file":"server.js","mappings":"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","sources":["webpack://saltpeter/./src/server/Server.ts","webpack://saltpeter/external commonjs \"ws\"","webpack://saltpeter/external node-commonjs \"http\"","webpack://saltpeter/external node-commonjs \"fs\"","webpack://saltpeter/external node-commonjs \"path\"","webpack://saltpeter/webpack/bootstrap","webpack://saltpeter/webpack/startup"],"sourcesContent":["\r\nimport http from \"http\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { WebSocket, WebSocketServer } from \"ws\";\r\n\r\n// =============================================================================\r\n// #region CONFIGURATION\r\n// =============================================================================\r\n\r\nconst PORT = process.env.PORT || 8080;\r\nconst ADMIN_KEY = process.env.ADMIN_KEY || \"123\";\r\nconst HEARTBEAT_INTERVAL = 30000; // 30 seconds\r\nconst CLEANUP_INTERVAL = HEARTBEAT_INTERVAL * 2; // 1 minute\r\nconst INACTIVITY_TIMEOUT = CLEANUP_INTERVAL * 50; //TODO: Set to exaclty '5' which will be 5 Minutes\r\nconst SPAWN_MIN_DISTANCE = 120;\r\nconst CANVAS_WIDTH = 800;\r\nconst CANVAS_HEIGHT = 600;\r\nconst BORDER_MARGIN = 15;\r\n\r\ninterface ConnectedClient extends WebSocket {\r\n  isAlive: boolean;\r\n  currentRoom: string | null;\r\n  userId: string | null;\r\n}\r\n\r\ninterface Room {\r\n  hostUserId: string;\r\n  participants: Set<ConnectedClient>;\r\n  lastActivityTime: number;\r\n  isPrivate: boolean;\r\n  upgradesEnabled: boolean;\r\n  maxWins: number;\r\n  maxPlayers: number;\r\n  gameActive: boolean;\r\n  roundActive: boolean;\r\n  alivePlayers: Set<string>;\r\n  playerHealth: Map<string, number>;\r\n  playerMaxHealth: Map<string, number>;\r\n  spawnMap?: { [playerId: string]: { x: number; y: number } };\r\n}\r\n\r\ninterface RoomMessage {\r\n  type: string;\r\n  roomId: string;\r\n  userId: string;\r\n  message?: string;\r\n  key?: string;\r\n  data?: any;\r\n  id?: string;\r\n}\r\n\r\ntype Vec2 = { x: number, y: number }\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region STATE\r\n// =============================================================================\r\n\r\nconst rooms = new Map<string, Room>();\r\n\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region HTTP SERVER\r\n// =============================================================================\r\n\r\n// Create HTTP server to serve files\r\nconst server = http.createServer((req, res) => {\r\n  if (!req.url) return;\r\n\r\n  const url = new URL(req.url, `http://${req.headers.host}`);\r\n\r\n  // Check if there's a room query parameter - serve index.html\r\n  if (url.pathname === '/' && url.searchParams.has('room')) {\r\n    let filePath = path.join(process.cwd(), \"public\", \"index.html\");\r\n\r\n    fs.readFile(filePath, (err, data) => {\r\n      if (err) {\r\n        res.writeHead(404);\r\n        return res.end(\"File not found\");\r\n      }\r\n\r\n      res.writeHead(200, { \"Content-Type\": \"text/html\" });\r\n      res.end(data);\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Handle quickplay endpoint\r\n  if (req.url === \"/quickplay\") {\r\n    const availableRooms: { roomId: string; playerCount: number }[] = [];\r\n\r\n    rooms.forEach((room, roomId) => {\r\n      // Only consider rooms with at least 1 connected player\r\n      if (!room.gameActive && !room.isPrivate && room.participants.size > 0 && room.participants.size < room.maxPlayers) {\r\n        availableRooms.push({\r\n          roomId: roomId,\r\n          playerCount: room.participants.size\r\n        });\r\n      }\r\n    });\r\n\r\n    if (availableRooms.length === 0) {\r\n      res.writeHead(404, { \"Content-Type\": \"application/json\" });\r\n      res.end(JSON.stringify({ error: \"No available rooms\" }));\r\n      return;\r\n    }\r\n\r\n    // Pick random room\r\n    const randomRoom = availableRooms[Math.floor(Math.random() * availableRooms.length)];\r\n\r\n    res.writeHead(200, { \"Content-Type\": \"application/json\" });\r\n    res.end(JSON.stringify({ roomId: randomRoom.roomId }));\r\n    return;\r\n  }\r\n\r\n  // Handle room redirect\r\n  if (req.url && req.url.startsWith(\"/room_\")) {\r\n    const roomId = req.url.split(\"/\")[1]; // remove leading slash\r\n    res.writeHead(302, { Location: `/?room=${roomId}` });\r\n    return res.end();\r\n  }\r\n\r\n  let filePath = req.url === \"/\" ? \"/index.html\" : req.url;\r\n\r\n  if (filePath === \"/app.js\") {\r\n    filePath = path.join(process.cwd(), \"dist\", \"app.js\");\r\n  } else {\r\n    filePath = path.join(process.cwd(), \"public\", filePath);\r\n  }\r\n\r\n  fs.readFile(filePath, (err, data) => {\r\n    if (err) {\r\n      res.writeHead(404);\r\n      return res.end(\"File not found\");\r\n    }\r\n\r\n    const ext = path.extname(filePath);\r\n    let contentType = \"text/html\";\r\n    if (ext === \".js\") contentType = \"application/javascript\";\r\n    if (ext === \".css\") contentType = \"text/css\";\r\n\r\n    res.writeHead(200, { \"Content-Type\": contentType });\r\n    res.end(data);\r\n  });\r\n});\r\n\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region WEBSOCKET\r\n// =============================================================================\r\n\r\n// Attach WebSocket server to the same HTTP server\r\nconst wss = new WebSocketServer({ server });\r\n\r\nwss.on(\"connection\", (ws: WebSocket) => {\r\n  const client = ws as ConnectedClient;\r\n\r\n  console.log(\"New client connected!\");\r\n  client.currentRoom = null;\r\n  client.userId = null;\r\n  client.isAlive = true;\r\n\r\n  client.on('pong', () => {\r\n    client.isAlive = true;\r\n  });\r\n\r\n  client.on(\"message\", (data) => {\r\n    try {\r\n      const message = JSON.parse(data.toString());\r\n      handleRoomMessage(client, message);\r\n    } catch (error) {\r\n      // Handle plain text messages (backwards compatibility)\r\n      console.log(`Received plain message: ${data}`);\r\n      if (client.currentRoom) {\r\n        broadcastToRoom(client.currentRoom, {\r\n          type: 'room-message',\r\n          userId: client.userId || 'anonymous',\r\n          message: data.toString()\r\n        }, client);\r\n      }\r\n    }\r\n  });\r\n\r\n  client.on(\"close\", () => {\r\n    console.log(\"Client disconnected.\");\r\n    if (client.currentRoom) {\r\n      leaveRoom(client, client.currentRoom);\r\n    }\r\n  });\r\n});\r\n\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region CONNECTIONS\r\n// =============================================================================\r\n\r\n// Detect dead connections\r\nconst heartbeatInterval = setInterval(() => {\r\n  wss.clients.forEach((ws: WebSocket) => {\r\n    const client = ws as ConnectedClient;\r\n\r\n    if (client.isAlive === false) {\r\n      console.log('Terminating dead connection for user:', client.userId);\r\n      if (client.currentRoom) {\r\n        leaveRoom(client, client.currentRoom);\r\n      }\r\n      return client.terminate();\r\n    }\r\n\r\n    client.isAlive = false;\r\n    client.ping();\r\n  });\r\n}, HEARTBEAT_INTERVAL);\r\n\r\n// Cleanup stale rooms\r\nconst cleanupInterval = setInterval(() => {\r\n  let cleanedRooms = 0;\r\n\r\n  console.log(`Checking ${rooms.size} rooms for cleanup.`);\r\n\r\n  rooms.forEach((room, roomId) => {\r\n    // Check if all participants are actually connected\r\n    const connectedParticipants = new Set<ConnectedClient>();\r\n\r\n    room.participants.forEach((ws: ConnectedClient) => {\r\n      if (ws.readyState === WebSocket.OPEN) {\r\n        connectedParticipants.add(ws);\r\n      } else {\r\n        console.log(`Removing disconnected participant ${ws.userId} from room ${roomId}`);\r\n      }\r\n    });\r\n\r\n    room.participants = connectedParticipants;\r\n\r\n    // Check for inactivity\r\n    const inactiveTime = Date.now() - room.lastActivityTime;\r\n    if (inactiveTime > INACTIVITY_TIMEOUT) {\r\n      console.log(`Room ${roomId} inactive for 10 minutes, closing...`);\r\n\r\n      kickPlayersFromRoom(roomId, 'inactivity');\r\n\r\n      rooms.delete(roomId);\r\n      cleanedRooms++;\r\n      console.log(`Cleaned up inactive room ${roomId}`);\r\n      return;\r\n    }\r\n\r\n    // Delete room if empty\r\n    if (room.participants.size === 0) {\r\n      rooms.delete(roomId);\r\n      cleanedRooms++;\r\n      console.log(`Cleaned up empty room ${roomId}`);\r\n    }\r\n  });\r\n\r\n  if (cleanedRooms > 0) {\r\n    console.log(`Cleanup complete: removed ${cleanedRooms} stale room(s). Active rooms: ${rooms.size}`);\r\n  }\r\n}, CLEANUP_INTERVAL);\r\n\r\nwss.on('close', () => {\r\n  clearInterval(heartbeatInterval);\r\n  clearInterval(cleanupInterval);\r\n});\r\n\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region ROOM MESSAGE\r\n// =============================================================================\r\n\r\nfunction handleRoomMessage(ws: ConnectedClient, message: RoomMessage): void {\r\n  const handlers: { [key: string]: () => void } = {\r\n    'create-room': () => createRoom(ws, message.roomId, message.userId),\r\n    'join-room': () => joinRoom(ws, message.roomId, message.userId),\r\n    'leave-room': () => leaveRoom(ws, message.roomId),\r\n    'room-message': () => handleGameMessage(ws, message),\r\n    'admin-command': () => handleAdminCommand(ws, message)\r\n  };\r\n\r\n  const handler = handlers[message.type];\r\n  if (handler) {\r\n    handler();\r\n  }\r\n}\r\n\r\nfunction handleGameMessage(ws: ConnectedClient, message: RoomMessage): void {\r\n  if (ws.currentRoom !== message.roomId || !message.message) return;\r\n\r\n  const room = rooms.get(message.roomId);\r\n  if (room) {\r\n    room.lastActivityTime = Date.now();\r\n  }\r\n\r\n  try {\r\n    const gameData = JSON.parse(message.message);\r\n\r\n    // Process special game messages\r\n    if (gameData.type === 'start-game') {\r\n      handleStartGame(message.roomId, message.userId, gameData);\r\n    } else if (gameData.type === 'player-state') {\r\n      const room = rooms.get(message.roomId);\r\n      if (room && gameData.stats?.health?.max) {\r\n        room.playerMaxHealth.set(message.userId, gameData.stats.health.max);\r\n      }\r\n    } else if (gameData.type === 'new-round') {\r\n      const room = rooms.get(message.roomId);\r\n      if (room) {\r\n        const spawnMap = startNewRoundServer(message.roomId, gameData.reservedSpawn);\r\n        gameData.spawnMap = spawnMap;\r\n        message.message = JSON.stringify(gameData);\r\n      }\r\n\r\n      broadcastToRoom(message.roomId, {\r\n        type: 'room-message',\r\n        userId: message.userId,\r\n        message: message.message,\r\n        roomId: message.roomId\r\n      }, null);\r\n      return;\r\n    } else if (gameData.type === 'player-hit') {\r\n      handlePlayerHealthUpdate(message.roomId, gameData.targetId, gameData.newHealth);\r\n    } else if (gameData.type === 'lobby-options') {\r\n      handleLobbyOptions(message.roomId, message.userId, gameData);\r\n    } else if (gameData.type === 'promote-player') {\r\n      const room = rooms.get(message.roomId);\r\n      if (room) {\r\n        room.hostUserId = gameData.targetPlayerId;\r\n        console.log(`${gameData.targetPlayerId} promoted to host of ${message.roomId}`);\r\n      }\r\n    }\r\n  } catch (e) {\r\n    // Not JSON, just pass through\r\n  }\r\n\r\n  broadcastToRoom(message.roomId, {\r\n    type: 'room-message',\r\n    userId: message.userId,\r\n    message: message.message,\r\n    roomId: message.roomId\r\n  }, ws);\r\n}\r\n\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region GAME LOGIC\r\n// =============================================================================\r\n\r\nfunction handleStartGame(roomId: string, userId: string, gameData: any): void {\r\n  const room = rooms.get(roomId);\r\n  if (!room) return;\r\n\r\n  room.gameActive = true;\r\n  room.roundActive = true;\r\n\r\n  room.alivePlayers.clear();\r\n  room.playerHealth.clear();\r\n\r\n  room.participants.forEach((client: ConnectedClient) => {\r\n    if (client.userId) {\r\n      room.alivePlayers.add(client.userId);\r\n      const maxHealth = room.playerMaxHealth.get(client.userId) || 100;\r\n      room.playerHealth.set(client.userId, maxHealth);\r\n    }\r\n  });\r\n\r\n  room.spawnMap = generateSpawnMap(room, userId, gameData.reservedSpawn);\r\n  gameData.spawnMap = room.spawnMap;\r\n\r\n  console.log(`Game started in room ${roomId}`);\r\n}\r\n\r\nfunction generateSpawnMap(room: Room, hostUserId: string, reservedSpawn: Vec2) {\r\n  const spawnMap: { [playerId: string]: Vec2 } = { [hostUserId]: reservedSpawn };\r\n  const usedSpawns: Vec2[] = [reservedSpawn];\r\n\r\n  room.participants.forEach((client: ConnectedClient) => {\r\n    if (!client.userId || spawnMap[client.userId]) return;\r\n\r\n    const spawn = findValidSpawn(usedSpawns);\r\n    usedSpawns.push(spawn);\r\n    spawnMap[client.userId] = spawn;\r\n  });\r\n\r\n  return spawnMap;\r\n}\r\n\r\nfunction findValidSpawn(usedSpawns: Vec2[]): Vec2 {\r\n  let spawn: Vec2;\r\n  let tries = 0;\r\n\r\n  do {\r\n    spawn = {\r\n      x: Math.random() * (CANVAS_WIDTH - 2 * BORDER_MARGIN) + BORDER_MARGIN,\r\n      y: Math.random() * (CANVAS_HEIGHT - 2 * BORDER_MARGIN) + BORDER_MARGIN\r\n    };\r\n    tries++;\r\n  } while (\r\n    usedSpawns.some(s => Math.hypot(s.x - spawn.x, s.y - spawn.y) < SPAWN_MIN_DISTANCE) &&\r\n    tries < 1000\r\n  );\r\n\r\n  return spawn;\r\n}\r\n\r\nfunction handleLobbyOptions(roomId: string, userId: string, gameData: any): void {\r\n  const room = rooms.get(roomId);\r\n  if (!room || room.hostUserId !== userId) return;\r\n\r\n  const optionUpdates: { [key: string]: (val: any) => void } = {\r\n    privateRoom: (val: boolean) => { room.isPrivate = val; console.log(`Room ${roomId} privacy: ${val ? 'Private' : 'Public'}`); },\r\n    maxWins: (val: number) => { room.maxWins = val; console.log(`Room ${roomId} max wins: ${val}`); },\r\n    maxPlayers: (val: number) => { room.maxPlayers = val; console.log(`Room ${roomId} max players: ${val}`); },\r\n    upgradesEnabled: (val: boolean) => { room.upgradesEnabled = val; console.log(`Room ${roomId} upgrades: ${val}`); }\r\n  };\r\n\r\n  Object.entries(gameData).forEach(([key, value]) => {\r\n    if (optionUpdates[key] && value !== undefined) {\r\n      optionUpdates[key](value);\r\n    }\r\n  });\r\n}\r\n\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region ROUND MANAGEMENT\r\n// =============================================================================\r\n\r\nfunction handlePlayerHealthUpdate(roomId: string, userId: string, newHealth: number): void {\r\n  const room = rooms.get(roomId);\r\n\r\n  if (!room || !room.roundActive) {\r\n    console.log('[HEALTH UPDATE IGNORED] Room:', roomId, 'Player:', userId, 'Health:', newHealth, '- Round not active');\r\n    return;\r\n  }\r\n\r\n  console.log('[HEALTH UPDATE] Room:', roomId, 'Player:', userId, 'Health:', newHealth);\r\n\r\n  room.playerHealth.set(userId, newHealth);\r\n\r\n  // Check if player just died\r\n  if (newHealth <= 0 && room.alivePlayers.has(userId)) {\r\n    room.alivePlayers.delete(userId);\r\n    console.log('=== PLAYER DEATH ===');\r\n    console.log('Room:', roomId);\r\n    console.log('Died:', userId);\r\n    console.log('Remaining:', room.alivePlayers.size, 'alive');\r\n    console.log('Alive Players:', Array.from(room.alivePlayers).join(', '));\r\n    console.log('==================');\r\n\r\n    checkRoundEnd(roomId);\r\n  }\r\n}\r\n\r\nfunction checkRoundEnd(roomId: string): void {\r\n  const room = rooms.get(roomId);\r\n\r\n  if (!room || !room.roundActive) {\r\n    console.log('[CHECK ROUND END SKIPPED] Room:', roomId, '- Round not active');\r\n    return;\r\n  }\r\n\r\n  const aliveCount = room.alivePlayers.size;\r\n\r\n  console.log('[CHECK ROUND END] Room:', roomId, 'Alive:', aliveCount);\r\n\r\n  // Round ends when 1 or 0 players alive\r\n  if (aliveCount <= 1) {\r\n    let winnerId: string | null = null;\r\n    for (const playerId of room.alivePlayers) {\r\n      winnerId = playerId;\r\n      break;\r\n    }\r\n    console.log('[TRIGGERING ROUND END] Winner:', winnerId || 'No one');\r\n    endRound(roomId, winnerId);\r\n  } else {\r\n    console.log('[ROUND CONTINUES]', aliveCount, 'players still alive');\r\n  }\r\n}\r\n\r\nfunction endRound(roomId: string, winnerId: string | null): void {\r\n  const room = rooms.get(roomId);\r\n\r\n  if (!room || !room.roundActive) {\r\n    console.log('[END ROUND SKIPPED] Room:', roomId, '- Already ended');\r\n    return;\r\n  }\r\n\r\n  room.roundActive = false;\r\n\r\n  console.log('=== ROUND ENDED ===');\r\n  console.log('Room:', roomId);\r\n  console.log('Winner:', winnerId || 'No one (tie)');\r\n  console.log('==================');\r\n\r\n  // Broadcast round end to ALL clients simultaneously\r\n  broadcastToRoom(roomId, {\r\n    type: 'room-message',\r\n    userId: 'server',\r\n    message: JSON.stringify({\r\n      type: 'round-end',\r\n      winnerId: winnerId,\r\n      timestamp: Date.now()\r\n    }),\r\n    roomId: roomId\r\n  }, null);\r\n}\r\n\r\nfunction startNewRoundServer(roomId: string, reservedSpawn: Vec2): { [playerId: string]: Vec2 } | undefined {\r\n  const room = rooms.get(roomId);\r\n  if (!room) return;\r\n\r\n  room.roundActive = true;\r\n  room.alivePlayers.clear();\r\n  room.playerHealth.clear();\r\n\r\n  // Initialize all players as alive with their tracked max health\r\n  room.participants.forEach((client: ConnectedClient) => {\r\n    if (client.userId) {\r\n      room.alivePlayers.add(client.userId);\r\n      const maxHealth = room.playerMaxHealth.get(client.userId) || 100;\r\n      room.playerHealth.set(client.userId, maxHealth);\r\n    }\r\n  });\r\n\r\n  const spawnMap = generateSpawnMap(room, room.hostUserId, reservedSpawn);\r\n\r\n  const healthString: string[] = [];\r\n  room.playerHealth.forEach((hp: number, id: string) => {\r\n    healthString.push(`${id}: ${hp}hp`);\r\n  });\r\n\r\n  console.log('=== NEW ROUND STARTED ===');\r\n  console.log('Room:', roomId);\r\n  console.log('Players:', room.alivePlayers.size);\r\n  console.log('Host:', room.hostUserId);\r\n  console.log('Alive Players:', Array.from(room.alivePlayers).join(', '));\r\n  console.log('Spawn Map:', JSON.stringify(spawnMap, null, 2));\r\n  console.log('Player Health:', healthString.join(', '));\r\n  console.log('========================');\r\n\r\n  return spawnMap;\r\n}\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region ROOM\r\n// =============================================================================\r\n\r\nfunction createRoom(ws: ConnectedClient, roomId: string, userId: string): void {\r\n  if (rooms.has(roomId)) {\r\n    ws.send(JSON.stringify({\r\n      type: 'room-error',\r\n      message: 'Room already exists',\r\n      userId: 'server'\r\n    }));\r\n    return;\r\n  }\r\n\r\n  rooms.set(roomId, {\r\n    // [ Detail ]\r\n    hostUserId: userId,\r\n    participants: new Set([ws]),\r\n    lastActivityTime: Date.now(),\r\n\r\n    // [ Settings ]\r\n    isPrivate: false,\r\n    upgradesEnabled: true,\r\n    maxWins: 5,\r\n    maxPlayers: 4,\r\n\r\n    // [ State ]\r\n    gameActive: false,\r\n    roundActive: false,\r\n    alivePlayers: new Set(),\r\n    playerHealth: new Map(), // userId -> health value\r\n    playerMaxHealth: new Map() // userId -> max health\r\n  });\r\n\r\n  ws.currentRoom = roomId;\r\n  ws.userId = userId;\r\n\r\n  ws.send(JSON.stringify({\r\n    type: 'room-created',\r\n    roomId: roomId,\r\n    userId: 'server'\r\n  }));\r\n\r\n  console.log(`Room ${roomId} created by ${userId}`);\r\n}\r\n\r\nfunction joinRoom(ws: ConnectedClient, roomId: string, userId: string) {\r\n  if (!rooms.has(roomId)) {\r\n    ws.send(JSON.stringify({\r\n      type: 'room-error',\r\n      message: 'Room does not exist',\r\n      userId: 'server'\r\n    }));\r\n    return;\r\n  }\r\n\r\n  const room = rooms.get(roomId);\r\n  if (!room) return;\r\n\r\n  // Check if room is full\r\n  if (room.participants.size >= room.maxPlayers) {\r\n    ws.send(JSON.stringify({\r\n      type: 'room-error',\r\n      message: 'Room is full',\r\n      userId: 'server'\r\n    }));\r\n    return;\r\n  }\r\n\r\n  // Check if game is active\r\n  if (room.gameActive) {\r\n    ws.send(JSON.stringify({\r\n      type: 'room-error',\r\n      message: 'Game already in progress.',\r\n      userId: 'server'\r\n    }));\r\n    return;\r\n  }\r\n\r\n  // Only now add the client to the room\r\n  room.participants.add(ws);\r\n  ws.currentRoom = roomId;\r\n  ws.userId = userId;\r\n\r\n  // Join lobby\r\n  ws.send(JSON.stringify({\r\n    type: 'room-joined',\r\n    roomId: roomId,\r\n    userId: 'server',\r\n    gameActive: false\r\n  }));\r\n\r\n  // Notify others in room\r\n  broadcastToRoom(roomId, {\r\n    type: 'user-joined',\r\n    userId: userId,\r\n    roomId: roomId\r\n  }, ws);\r\n\r\n  console.log(`User ${userId} joined room ${roomId} (game active: ${room.gameActive})`);\r\n}\r\n\r\nfunction leaveRoom(ws: ConnectedClient, roomId: string) {\r\n  if (!rooms.has(roomId)) return;\r\n\r\n  const room = rooms.get(roomId);\r\n  if (!room) return;\r\n  \r\n  const wasHost = room.hostUserId === ws.userId;\r\n  room.participants.delete(ws);\r\n\r\n  // Notify others in room that user left\r\n  if (ws.userId) {\r\n    broadcastToRoom(roomId, {\r\n      type: 'user-left',\r\n      userId: ws.userId,\r\n      roomId: roomId\r\n    }, ws);\r\n  }\r\n\r\n  // Handle different scenarios based on remaining players\r\n  if (room.participants.size === 1 && room.gameActive) {\r\n    // Only 1 player left during active game - return to lobby\r\n    let lastPlayer: ConnectedClient | null = null;\r\n    for (const client of room.participants) {\r\n      lastPlayer = client;\r\n      break;\r\n    }\r\n\r\n    if (lastPlayer && lastPlayer.userId) {\r\n      room.hostUserId = lastPlayer.userId;\r\n      room.gameActive = false;\r\n\r\n      broadcastToRoom(roomId, {\r\n        type: 'room-message',\r\n        userId: 'server',\r\n        message: JSON.stringify({\r\n          type: 'return-to-lobby',\r\n          reason: 'last-player',\r\n          newHostId: lastPlayer.userId\r\n        }),\r\n        roomId: roomId\r\n      }, null);\r\n\r\n      console.log(`Last player ${lastPlayer.userId} in room ${roomId}, returning to lobby as host`);\r\n    }\r\n\r\n  } else if (wasHost && room.participants.size > 0) {\r\n    // Host left but others remain - migrate host\r\n    let newHost: ConnectedClient | null = null;\r\n    for (const client of room.participants) {\r\n      newHost = client;\r\n      break;\r\n    }\r\n\r\n    if (newHost && newHost.userId) {\r\n      room.hostUserId = newHost.userId;\r\n\r\n      broadcastToRoom(roomId, {\r\n        type: 'room-message',\r\n        userId: 'server',\r\n        message: JSON.stringify({\r\n          type: 'promote-player',\r\n          targetPlayerId: newHost.userId,\r\n          reason: 'host-migration'\r\n        }),\r\n        roomId: roomId\r\n      }, null);\r\n\r\n      console.log(`Host migrated from ${ws.userId} to ${newHost.userId} in room ${roomId}`);\r\n    }\r\n  }\r\n\r\n  // Delete room if empty\r\n  if (room.participants.size === 0) {\r\n    rooms.delete(roomId);\r\n    console.log(`Room ${roomId} deleted (empty)`);\r\n    console.log(`Rooms remaining: ${rooms.size}`);\r\n  }\r\n\r\n  ws.currentRoom = null;\r\n  ws.userId = null;\r\n}\r\n\r\nfunction broadcastToRoom(roomId: string, message: any, sender: ConnectedClient | null = null): void {\r\n  if (!rooms.has(roomId)) return;\r\n\r\n  const room = rooms.get(roomId)!;\r\n  const messageStr = JSON.stringify(message);\r\n\r\n  room.participants.forEach((client: ConnectedClient) => {\r\n    // Send to all if sender is null, or exclude sender unless it's a promote-player message\r\n    if (client.readyState === WebSocket.OPEN &&\r\n      (sender === null ||\r\n        client !== sender ||\r\n        message.message?.includes('\"type\":\"promote-player\"'))) {\r\n      client.send(messageStr);\r\n    }\r\n  });\r\n}\r\n\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// =============================================================================\r\n// #region ADMIN\r\n// =============================================================================\r\n\r\nfunction handleAdminCommand(ws: ConnectedClient, message: RoomMessage): void {\r\n  if (message.key !== ADMIN_KEY) {\r\n    console.log(`❌ Unauthorized admin command attempt from ${ws.userId}`);\r\n    ws.send(JSON.stringify({\r\n      type: 'admin-error',\r\n      message: 'Unauthorized',\r\n      userId: 'server'\r\n    }));\r\n    return;\r\n  }\r\n\r\n  const commands: { [key: string]: () => void } = {\r\n    'clear_rooms': clearAllRooms,\r\n    'list_rooms': () => listRooms(ws),\r\n    'close_room': () => closeRoom(message.data?.roomId),\r\n    'server_stats': () => sendServerStats(ws)\r\n  };\r\n\r\n  const command = commands[message.id || ''];\r\n  if (command) {\r\n    console.log(`🔧 Admin command executed: ${message.id} by ${ws.userId}`);\r\n    command();\r\n    ws.send(JSON.stringify({\r\n      type: 'admin-response',\r\n      success: true,\r\n      command: message.id,\r\n      userId: 'server'\r\n    }));\r\n  } else {\r\n    ws.send(JSON.stringify({\r\n      type: 'admin-error',\r\n      message: `Unknown admin command: ${message.id}`,\r\n      userId: 'server'\r\n    }));\r\n  }\r\n}\r\n\r\nfunction clearAllRooms(): void {\r\n  const count = rooms.size;\r\n\r\n  rooms.forEach((room, roomId) => {\r\n    kickPlayersFromRoom(roomId, 'admin-clear');\r\n  });\r\n\r\n  rooms.clear();\r\n  console.log(`🧹 Cleared ${count} rooms via admin command`);\r\n}\r\n\r\nfunction listRooms(ws: ConnectedClient): void {\r\n  const roomList: any[] = [];\r\n  rooms.forEach((room, roomId) => {\r\n    roomList.push({\r\n      roomId,\r\n      host: room.hostUserId,\r\n      players: room.participants.size,\r\n      maxPlayers: room.maxPlayers,\r\n      gameActive: room.gameActive,\r\n      isPrivate: room.isPrivate\r\n    });\r\n  });\r\n\r\n  console.log('📋 Room List:', roomList);\r\n\r\n  ws.send(JSON.stringify({\r\n    type: 'admin-response',\r\n    command: 'list_rooms',\r\n    data: roomList,\r\n    userId: 'server'\r\n  }));\r\n}\r\n\r\nfunction closeRoom(roomId: string | undefined): void {\r\n  if (!roomId || !rooms.has(roomId)) return;\r\n\r\n  const room = rooms.get(roomId)!;\r\n  room.participants.forEach((client: ConnectedClient) => {\r\n    if (client.readyState === WebSocket.OPEN) {\r\n      client.send(JSON.stringify({\r\n        type: 'room-message',\r\n        userId: 'server',\r\n        message: JSON.stringify({\r\n          type: 'return-to-lobby',\r\n          reason: 'admin-close'\r\n        })\r\n      }));\r\n      leaveRoom(client, roomId);\r\n    }\r\n  });\r\n\r\n  rooms.delete(roomId);\r\n  console.log(`🚫 Closed room: ${roomId}`);\r\n}\r\n\r\nfunction sendServerStats(ws: ConnectedClient): void {\r\n  const stats = {\r\n    totalRooms: rooms.size,\r\n    totalPlayers: wss.clients.size,\r\n    activeGames: Array.from(rooms.values()).filter(r => r.gameActive).length,\r\n    uptime: process.uptime()\r\n  };\r\n\r\n  console.log('📊 Server Stats:', stats);\r\n\r\n  ws.send(JSON.stringify({\r\n    type: 'admin-response',\r\n    command: 'server_stats',\r\n    data: stats,\r\n    userId: 'server'\r\n  }));\r\n}\r\n\r\nfunction kickPlayersFromRoom(roomId: string, reason: string): void {\r\n  const room = rooms.get(roomId);\r\n  if (!room) return;\r\n\r\n  room.participants.forEach((client: ConnectedClient) => {\r\n    if (client.readyState === WebSocket.OPEN) {\r\n      client.send(JSON.stringify({\r\n        type: 'room-message',\r\n        userId: 'server',\r\n        message: JSON.stringify({\r\n          type: 'kick-player',\r\n          targetPlayerId: client.userId,\r\n          reason: reason\r\n        }),\r\n        roomId: roomId\r\n      }));\r\n    }\r\n  });\r\n}\r\n\r\n//\r\n// #endregion\r\n// =============================================================================\r\n\r\n// Start the server\r\nserver.listen(PORT, () => { console.log(`Server running at http://localhost:${PORT}`); });","module.exports = require(\"ws\");","module.exports = require(\"http\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(62);\n"],"names":["PORT","process","env","ADMIN_KEY","rooms","Map","server","createServer","req","res","url","URL","headers","host","pathname","searchParams","has","filePath","join","cwd","readFile","err","data","writeHead","end","availableRooms","forEach","room","roomId","gameActive","isPrivate","participants","size","maxPlayers","push","playerCount","length","JSON","stringify","error","randomRoom","Math","floor","random","startsWith","split","Location","ext","extname","contentType","wss","WebSocketServer","on","ws","client","console","log","currentRoom","userId","isAlive","message","parse","toString","handlers","send","type","set","hostUserId","Set","lastActivityTime","Date","now","upgradesEnabled","maxWins","roundActive","alivePlayers","playerHealth","playerMaxHealth","createRoom","get","add","broadcastToRoom","joinRoom","leaveRoom","gameData","clear","maxHealth","spawnMap","generateSpawnMap","reservedSpawn","handleStartGame","stats","health","max","healthString","hp","id","Array","from","startNewRoundServer","newHealth","delete","aliveCount","winnerId","playerId","timestamp","endRound","checkRoundEnd","handlePlayerHealthUpdate","targetId","optionUpdates","privateRoom","val","Object","entries","key","value","undefined","handleLobbyOptions","targetPlayerId","e","handleGameMessage","commands","clearAllRooms","roomList","players","command","listRooms","closeRoom","readyState","WebSocket","OPEN","reason","totalRooms","totalPlayers","clients","activeGames","values","filter","r","uptime","sendServerStats","success","handleAdminCommand","handler","handleRoomMessage","heartbeatInterval","setInterval","terminate","ping","cleanupInterval","cleanedRooms","connectedParticipants","CLEANUP_INTERVAL","kickPlayersFromRoom","HEARTBEAT_INTERVAL","usedSpawns","spawn","tries","x","y","some","s","hypot","findValidSpawn","wasHost","lastPlayer","newHostId","newHost","sender","messageStr","includes","count","clearInterval","listen","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}