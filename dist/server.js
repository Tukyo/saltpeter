(()=>{"use strict";var e={62:function(e,o,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0});const t=s(r(611)),n=s(r(896)),a=s(r(928)),i=r(86),l=process.env.PORT||8080,c=process.env.ADMIN_KEY||"123",d=new Map,m=t.default.createServer((e,o)=>{if(!e.url)return;const r=new URL(e.url,`http://${e.headers.host}`);if("/"===r.pathname&&r.searchParams.has("room")){let e=a.default.join(process.cwd(),"public","index.html");return void n.default.readFile(e,(e,r)=>{if(e)return o.writeHead(404),o.end("File not found");o.writeHead(200,{"Content-Type":"text/html"}),o.end(r)})}if("/quickplay"===e.url){const e=[];if(d.forEach((o,r)=>{!o.gameActive&&!o.isPrivate&&o.participants.size>0&&o.participants.size<o.maxPlayers&&e.push({roomId:r,playerCount:o.participants.size})}),0===e.length)return o.writeHead(404,{"Content-Type":"application/json"}),void o.end(JSON.stringify({error:"No available rooms"}));const r=e[Math.floor(Math.random()*e.length)];return o.writeHead(200,{"Content-Type":"application/json"}),void o.end(JSON.stringify({roomId:r.roomId}))}if(e.url&&e.url.startsWith("/room_")){const r=e.url.split("/")[1];return o.writeHead(302,{Location:`/?room=${r}`}),o.end()}let s="/"===e.url?"/index.html":e.url;s="/app.js"===s?a.default.join(process.cwd(),"dist","app.js"):a.default.join(process.cwd(),"public",s),n.default.readFile(s,(e,r)=>{if(e)return o.writeHead(404),o.end("File not found");const t=a.default.extname(s);let n="text/html";".js"===t&&(n="application/javascript"),".css"===t&&(n="text/css"),o.writeHead(200,{"Content-Type":n}),o.end(r)})}),u=new i.WebSocketServer({server:m});u.on("connection",e=>{const o=e;console.log("New client connected!"),o.currentRoom=null,o.userId=null,o.isAlive=!0,o.on("pong",()=>{o.isAlive=!0}),o.on("message",e=>{try{const r=JSON.parse(e.toString());!function(e,o){const r={"create-room":()=>function(e,o,r){d.has(o)?e.send(JSON.stringify({type:"room-error",message:"Room already exists",userId:"server"})):(d.set(o,{hostUserId:r,participants:new Set([e]),lastActivityTime:Date.now(),isPrivate:!1,upgradesEnabled:!0,maxWins:5,maxPlayers:4,gameActive:!1,roundActive:!1,alivePlayers:new Set,playerHealth:new Map,playerMaxHealth:new Map}),e.currentRoom=o,e.userId=r,e.send(JSON.stringify({type:"room-created",roomId:o,userId:"server"})),console.log(`Room ${o} created by ${r}`))}(e,o.roomId,o.userId),"join-room":()=>function(e,o,r){if(!d.has(o))return void e.send(JSON.stringify({type:"room-error",message:"Room does not exist",userId:"server"}));const s=d.get(o);s&&(s.participants.size>=s.maxPlayers?e.send(JSON.stringify({type:"room-error",message:"Room is full",userId:"server"})):s.gameActive?e.send(JSON.stringify({type:"room-error",message:"Game already in progress.",userId:"server"})):(s.participants.add(e),e.currentRoom=o,e.userId=r,e.send(JSON.stringify({type:"room-joined",roomId:o,userId:"server",gameActive:!1})),I(o,{type:"user-joined",userId:r,roomId:o},e),console.log(`User ${r} joined room ${o} (game active: ${s.gameActive})`)))}(e,o.roomId,o.userId),"leave-room":()=>f(e,o.roomId),"room-message":()=>function(e,o){if(e.currentRoom!==o.roomId||!o.message)return;const r=d.get(o.roomId);r&&(r.lastActivityTime=Date.now());try{const e=JSON.parse(o.message);if("start-game"===e.type)!function(e,o,r){const s=d.get(e);s&&(s.gameActive=!0,s.roundActive=!0,s.alivePlayers.clear(),s.playerHealth.clear(),s.participants.forEach(e=>{if(e.userId){s.alivePlayers.add(e.userId);const o=s.playerMaxHealth.get(e.userId)||100;s.playerHealth.set(e.userId,o)}}),s.spawnMap=y(s,o,r.reservedSpawn),r.spawnMap=s.spawnMap,console.log(`Game started in room ${e}`))}(o.roomId,o.userId,e);else if("player-state"===e.type){const r=d.get(o.roomId);r&&e.stats?.health?.max&&r.playerMaxHealth.set(o.userId,e.stats.health.max)}else{if("new-round"===e.type){if(d.get(o.roomId)){const r=function(e,o){const r=d.get(e);if(!r)return;r.roundActive=!0,r.alivePlayers.clear(),r.playerHealth.clear(),r.participants.forEach(e=>{if(e.userId){r.alivePlayers.add(e.userId);const o=r.playerMaxHealth.get(e.userId)||100;r.playerHealth.set(e.userId,o)}});const s=y(r,r.hostUserId,o),t=[];return r.playerHealth.forEach((e,o)=>{t.push(`${o}: ${e}hp`)}),console.log("=== NEW ROUND STARTED ==="),console.log("Room:",e),console.log("Players:",r.alivePlayers.size),console.log("Host:",r.hostUserId),console.log("Alive Players:",Array.from(r.alivePlayers).join(", ")),console.log("Spawn Map:",JSON.stringify(s,null,2)),console.log("Player Health:",t.join(", ")),console.log("========================"),s}(o.roomId,e.reservedSpawn);e.spawnMap=r,o.message=JSON.stringify(e)}return void I(o.roomId,{type:"room-message",userId:o.userId,message:o.message,roomId:o.roomId},null)}if("player-hit"===e.type)!function(e,o,r){const s=d.get(e);s&&s.roundActive?(console.log("[HEALTH UPDATE] Room:",e,"Player:",o,"Health:",r),s.playerHealth.set(o,r),r<=0&&s.alivePlayers.has(o)&&(s.alivePlayers.delete(o),console.log("=== PLAYER DEATH ==="),console.log("Room:",e),console.log("Died:",o),console.log("Remaining:",s.alivePlayers.size,"alive"),console.log("Alive Players:",Array.from(s.alivePlayers).join(", ")),console.log("=================="),function(e){const o=d.get(e);if(!o||!o.roundActive)return void console.log("[CHECK ROUND END SKIPPED] Room:",e,"- Round not active");const r=o.alivePlayers.size;if(console.log("[CHECK ROUND END] Room:",e,"Alive:",r),r<=1){let r=null;for(const e of o.alivePlayers){r=e;break}console.log("[TRIGGERING ROUND END] Winner:",r||"No one"),function(e,o){const r=d.get(e);r&&r.roundActive?(r.roundActive=!1,console.log("=== ROUND ENDED ==="),console.log("Room:",e),console.log("Winner:",o||"No one (tie)"),console.log("=================="),I(e,{type:"room-message",userId:"server",message:JSON.stringify({type:"round-end",winnerId:o,timestamp:Date.now()}),roomId:e},null)):console.log("[END ROUND SKIPPED] Room:",e,"- Already ended")}(e,r)}else console.log("[ROUND CONTINUES]",r,"players still alive")}(e))):console.log("[HEALTH UPDATE IGNORED] Room:",e,"Player:",o,"Health:",r,"- Round not active")}(o.roomId,e.targetId,e.newHealth);else if("lobby-options"===e.type)!function(e,o,r){const s=d.get(e);if(!s||s.hostUserId!==o)return;const t={privateRoom:o=>{s.isPrivate=o,console.log(`Room ${e} privacy: ${o?"Private":"Public"}`)},maxWins:o=>{s.maxWins=o,console.log(`Room ${e} max wins: ${o}`)},maxPlayers:o=>{s.maxPlayers=o,console.log(`Room ${e} max players: ${o}`)},upgradesEnabled:o=>{s.upgradesEnabled=o,console.log(`Room ${e} upgrades: ${o}`)}};Object.entries(r).forEach(([e,o])=>{t[e]&&void 0!==o&&t[e](o)})}(o.roomId,o.userId,e);else if("promote-player"===e.type){const r=d.get(o.roomId);r&&(r.hostUserId=e.targetPlayerId,console.log(`${e.targetPlayerId} promoted to host of ${o.roomId}`))}}}catch(e){}I(o.roomId,{type:"room-message",userId:o.userId,message:o.message,roomId:o.roomId},e)}(e,o),"admin-command":()=>function(e,o){if(o.key!==c)return console.log(`❌ Unauthorized admin command attempt from ${e.userId}`),void e.send(JSON.stringify({type:"admin-error",message:"Unauthorized",userId:"server"}));const r={clear_rooms:v,list_rooms:()=>function(e){const o=[];d.forEach((e,r)=>{o.push({roomId:r,host:e.hostUserId,players:e.participants.size,maxPlayers:e.maxPlayers,gameActive:e.gameActive,isPrivate:e.isPrivate})}),console.log("📋 Room List:",o),e.send(JSON.stringify({type:"admin-response",command:"list_rooms",data:o,userId:"server"}))}(e),close_room:()=>{return e=o.data?.roomId,void(e&&d.has(e)&&(d.get(e).participants.forEach(o=>{o.readyState===i.WebSocket.OPEN&&(o.send(JSON.stringify({type:"room-message",userId:"server",message:JSON.stringify({type:"return-to-lobby",reason:"admin-close"})})),f(o,e))}),d.delete(e),console.log(`🚫 Closed room: ${e}`)));var e},server_stats:()=>function(e){const o={totalRooms:d.size,totalPlayers:u.clients.size,activeGames:Array.from(d.values()).filter(e=>e.gameActive).length,uptime:process.uptime()};console.log("📊 Server Stats:",o),e.send(JSON.stringify({type:"admin-response",command:"server_stats",data:o,userId:"server"}))}(e)},s=r[o.id||""];s?(console.log(`🔧 Admin command executed: ${o.id} by ${e.userId}`),s(),e.send(JSON.stringify({type:"admin-response",success:!0,command:o.id,userId:"server"}))):e.send(JSON.stringify({type:"admin-error",message:`Unknown admin command: ${o.id}`,userId:"server"}))}(e,o)},s=r[o.type];s&&s()}(o,r)}catch(r){console.log(`Received plain message: ${e}`),o.currentRoom&&I(o.currentRoom,{type:"room-message",userId:o.userId||"anonymous",message:e.toString()},o)}}),o.on("close",()=>{console.log("Client disconnected."),o.currentRoom&&f(o,o.currentRoom)})});const p=setInterval(()=>{u.clients.forEach(e=>{const o=e;if(!1===o.isAlive)return console.log("Terminating dead connection for user:",o.userId),o.currentRoom&&f(o,o.currentRoom),o.terminate();o.isAlive=!1,o.ping()})},3e4),g=setInterval(()=>{let e=0;console.log(`Checking ${d.size} rooms for cleanup.`),d.forEach((o,r)=>{const s=new Set;if(o.participants.forEach(e=>{e.readyState===i.WebSocket.OPEN?s.add(e):console.log(`Removing disconnected participant ${e.userId} from room ${r}`)}),o.participants=s,Date.now()-o.lastActivityTime>3e6)return console.log(`Room ${r} inactive for 10 minutes, closing...`),h(r,"inactivity"),d.delete(r),e++,void console.log(`Cleaned up inactive room ${r}`);0===o.participants.size&&(d.delete(r),e++,console.log(`Cleaned up empty room ${r}`))}),e>0&&console.log(`Cleanup complete: removed ${e} stale room(s). Active rooms: ${d.size}`)},6e4);function y(e,o,r){const s={[o]:r},t=[r];return e.participants.forEach(e=>{if(!e.userId||s[e.userId])return;const o=function(e){let o,r=0;do{o={x:770*Math.random()+15,y:570*Math.random()+15},r++}while(e.some(e=>Math.hypot(e.x-o.x,e.y-o.y)<120)&&r<1e3);return o}(t);t.push(o),s[e.userId]=o}),s}function f(e,o){if(!d.has(o))return;const r=d.get(o);if(!r)return;const s=r.hostUserId===e.userId;if(r.participants.delete(e),e.userId&&I(o,{type:"user-left",userId:e.userId,roomId:o},e),1===r.participants.size&&r.gameActive){let e=null;for(const o of r.participants){e=o;break}e&&e.userId&&(r.hostUserId=e.userId,r.gameActive=!1,I(o,{type:"room-message",userId:"server",message:JSON.stringify({type:"return-to-lobby",reason:"last-player",newHostId:e.userId}),roomId:o},null),console.log(`Last player ${e.userId} in room ${o}, returning to lobby as host`))}else if(s&&r.participants.size>0){let s=null;for(const e of r.participants){s=e;break}s&&s.userId&&(r.hostUserId=s.userId,I(o,{type:"room-message",userId:"server",message:JSON.stringify({type:"promote-player",targetPlayerId:s.userId,reason:"host-migration"}),roomId:o},null),console.log(`Host migrated from ${e.userId} to ${s.userId} in room ${o}`))}0===r.participants.size&&(d.delete(o),console.log(`Room ${o} deleted (empty)`),console.log(`Rooms remaining: ${d.size}`)),e.currentRoom=null,e.userId=null}function I(e,o,r=null){if(!d.has(e))return;const s=d.get(e),t=JSON.stringify(o);s.participants.forEach(e=>{e.readyState!==i.WebSocket.OPEN||null!==r&&e===r&&!o.message?.includes('"type":"promote-player"')||e.send(t)})}function v(){const e=d.size;d.forEach((e,o)=>{h(o,"admin-clear")}),d.clear(),console.log(`🧹 Cleared ${e} rooms via admin command`)}function h(e,o){const r=d.get(e);r&&r.participants.forEach(r=>{r.readyState===i.WebSocket.OPEN&&r.send(JSON.stringify({type:"room-message",userId:"server",message:JSON.stringify({type:"kick-player",targetPlayerId:r.userId,reason:o}),roomId:e}))})}u.on("close",()=>{clearInterval(p),clearInterval(g)}),m.listen(l,()=>{console.log(`Server running at http://localhost:${l}`)})},86:e=>{e.exports=require("ws")},611:e=>{e.exports=require("http")},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},o={};!function r(s){var t=o[s];if(void 0!==t)return t.exports;var n=o[s]={exports:{}};return e[s].call(n.exports,n,n.exports,r),n.exports}(62)})();
//# sourceMappingURL=server.js.map